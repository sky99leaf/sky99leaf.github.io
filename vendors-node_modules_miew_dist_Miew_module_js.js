/*! For license information please see vendors-node_modules_miew_dist_Miew_module_js.js.LICENSE.txt */
(self.webpackChunkmy_app=self.webpackChunkmy_app||[]).push([["vendors-node_modules_miew_dist_Miew_module_js"],{"./node_modules/lodash/lodash.js":function(module,exports,__webpack_require__){eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n\n//# sourceURL=webpack://my-app/./node_modules/lodash/lodash.js?")},"./node_modules/miew/dist/Miew.module.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ __webpack_exports__default)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"./node_modules/miew/node_modules/three/build/three.module.js\");\n/*! Miew - 3D Molecular Viewer v0.11.0 Copyright (c) 2015-2024 EPAM Systems, Inc. */\r\n\r\n\r\n/******/ var __webpack_modules__ = ({\r\n\r\n/***/ 89:\r\n/***/ ((module) => {\r\n\r\n/* eslint-disable */\r\n// DO NOT EDIT! Automatically generated from .jison\r\n/* parser generated by jison 0.4.18 */\r\n/*\r\n  Returns a Parser object of the following structure:\r\n\r\n  Parser: {\r\n    yy: {}\r\n  }\r\n\r\n  Parser.prototype: {\r\n    yy: {},\r\n    trace: function(),\r\n    symbols_: {associative list: name ==> number},\r\n    terminals_: {associative list: number ==> name},\r\n    productions_: [...],\r\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\r\n    table: [...],\r\n    defaultActions: {...},\r\n    parseError: function(str, hash),\r\n    parse: function(input),\r\n\r\n    lexer: {\r\n        EOF: 1,\r\n        parseError: function(str, hash),\r\n        setInput: function(input),\r\n        input: function(),\r\n        unput: function(str),\r\n        more: function(),\r\n        less: function(n),\r\n        pastInput: function(),\r\n        upcomingInput: function(),\r\n        showPosition: function(),\r\n        test_match: function(regex_match_array, rule_index),\r\n        next: function(),\r\n        lex: function(),\r\n        begin: function(condition),\r\n        popState: function(),\r\n        _currentRules: function(),\r\n        topState: function(),\r\n        pushState: function(condition),\r\n\r\n        options: {\r\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\r\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\r\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\r\n        },\r\n\r\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\r\n        rules: [...],\r\n        conditions: {associative list: name ==> set},\r\n    }\r\n  }\r\n\r\n\r\n  token location info (@$, _$, etc.): {\r\n    first_line: n,\r\n    last_line: n,\r\n    first_column: n,\r\n    last_column: n,\r\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\r\n  }\r\n\r\n\r\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\r\n    text:        (matched text)\r\n    token:       (the produced terminal token, if any)\r\n    line:        (yylineno)\r\n  }\r\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\r\n    loc:         (yylloc)\r\n    expected:    (string describing the set of expected tokens)\r\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\r\n  }\r\n*/\r\nvar parser = function () {\r\n  var o = function (k, v, o, l) {\r\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\r\n      return o;\r\n    },\r\n    $V0 = [1, 60],\r\n    $V1 = [1, 62],\r\n    $V2 = [1, 63],\r\n    $V3 = [1, 65],\r\n    $V4 = [1, 66],\r\n    $V5 = [1, 67],\r\n    $V6 = [1, 68],\r\n    $V7 = [1, 69],\r\n    $V8 = [1, 80],\r\n    $V9 = [1, 72],\r\n    $Va = [1, 73],\r\n    $Vb = [1, 74],\r\n    $Vc = [1, 75],\r\n    $Vd = [1, 99],\r\n    $Ve = [1, 76],\r\n    $Vf = [1, 100],\r\n    $Vg = [1, 79],\r\n    $Vh = [1, 51],\r\n    $Vi = [1, 81],\r\n    $Vj = [1, 82],\r\n    $Vk = [1, 84],\r\n    $Vl = [1, 83],\r\n    $Vm = [1, 85],\r\n    $Vn = [1, 96],\r\n    $Vo = [1, 97],\r\n    $Vp = [1, 98],\r\n    $Vq = [1, 86],\r\n    $Vr = [1, 87],\r\n    $Vs = [1, 64],\r\n    $Vt = [1, 70],\r\n    $Vu = [1, 71],\r\n    $Vv = [1, 77],\r\n    $Vw = [1, 78],\r\n    $Vx = [1, 53],\r\n    $Vy = [1, 54],\r\n    $Vz = [1, 55],\r\n    $VA = [1, 61],\r\n    $VB = [1, 88],\r\n    $VC = [1, 89],\r\n    $VD = [1, 90],\r\n    $VE = [1, 91],\r\n    $VF = [1, 92],\r\n    $VG = [1, 93],\r\n    $VH = [1, 94],\r\n    $VI = [1, 95],\r\n    $VJ = [1, 101],\r\n    $VK = [1, 102],\r\n    $VL = [1, 103],\r\n    $VM = [1, 104],\r\n    $VN = [1, 105],\r\n    $VO = [1, 56],\r\n    $VP = [1, 57],\r\n    $VQ = [1, 58],\r\n    $VR = [1, 59],\r\n    $VS = [1, 115],\r\n    $VT = [1, 111],\r\n    $VU = [1, 114],\r\n    $VV = [1, 112],\r\n    $VW = [1, 113],\r\n    $VX = [1, 118],\r\n    $VY = [1, 117],\r\n    $VZ = [1, 134],\r\n    $V_ = [1, 149],\r\n    $V$ = [1, 150],\r\n    $V01 = [1, 157],\r\n    $V11 = [5, 6, 7, 9, 13, 14, 15, 17, 18, 19, 20, 23, 25, 26, 27, 30, 33, 34, 35, 37, 38, 41, 43, 45, 46, 49, 52, 54, 55, 56, 58, 59, 62, 64, 65, 66, 70, 72, 74, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101],\r\n    $V21 = [5, 6, 7, 9, 13, 14, 15, 17, 18, 19, 20, 23, 25, 26, 27, 30, 33, 34, 35, 37, 38, 41, 43, 45, 46, 49, 52, 54, 55, 56, 58, 59, 62, 64, 65, 66, 70, 71, 72, 74, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101],\r\n    $V31 = [5, 6, 7, 9, 13, 15, 17, 18, 19, 20, 23, 25, 26, 27, 30, 33, 34, 37, 38, 41, 43, 45, 46, 49, 52, 54, 55, 56, 58, 59, 62, 64, 65, 66, 70, 72, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95],\r\n    $V41 = [5, 70, 72],\r\n    $V51 = [5, 74],\r\n    $V61 = [71, 101];\r\n  var parser = {\r\n    trace: function trace() {},\r\n    yy: {},\r\n    symbols_: {\r\n      \"error\": 2,\r\n      \"Program\": 3,\r\n      \"Command\": 4,\r\n      \"EOF\": 5,\r\n      \"RESET\": 6,\r\n      \"BUILD\": 7,\r\n      \"ALL\": 8,\r\n      \"HELP\": 9,\r\n      \"Path\": 10,\r\n      \"MOTM\": 11,\r\n      \"OneArgCommand\": 12,\r\n      \"GET\": 13,\r\n      \"STRING\": 14,\r\n      \"SET\": 15,\r\n      \"Value\": 16,\r\n      \"SET_SAVE\": 17,\r\n      \"SET_RESTORE\": 18,\r\n      \"SET_RESET\": 19,\r\n      \"PRESET\": 20,\r\n      \"AddRepresentation\": 21,\r\n      \"EditRepresentation\": 22,\r\n      \"REMOVE\": 23,\r\n      \"RepresentationReference\": 24,\r\n      \"HIDE\": 25,\r\n      \"SHOW\": 26,\r\n      \"LIST\": 27,\r\n      \"EXPAND_KEY\": 28,\r\n      \"SELECTOR_KEY\": 29,\r\n      \"SELECT\": 30,\r\n      \"AS\": 31,\r\n      \"WordAll\": 32,\r\n      \"SELECTOR\": 33,\r\n      \"WITHIN\": 34,\r\n      \"NUMBER\": 35,\r\n      \"OF\": 36,\r\n      \"MATERIAL\": 37,\r\n      \"IDENTIFIER\": 38,\r\n      \"ModeCMD\": 39,\r\n      \"ColorCMD\": 40,\r\n      \"VIEW\": 41,\r\n      \"BASE_64\": 42,\r\n      \"UNIT\": 43,\r\n      \"DSSP\": 44,\r\n      \"SCALE\": 45,\r\n      \"ROTATE\": 46,\r\n      \"AxesList\": 47,\r\n      \"TRANSLATE\": 48,\r\n      \"CENTER\": 49,\r\n      \"GetURLBranch\": 50,\r\n      \"Screenshot\": 51,\r\n      \"LINE\": 52,\r\n      \"ArgList\": 53,\r\n      \"LISTOBJ\": 54,\r\n      \"REMOVEOBJ\": 55,\r\n      \"URL\": 56,\r\n      \"VIEW_KEY\": 57,\r\n      \"SCREENSHOT\": 58,\r\n      \"LOAD\": 59,\r\n      \"Url\": 60,\r\n      \"FILE_KEY\": 61,\r\n      \"ADD\": 62,\r\n      \"Description\": 63,\r\n      \"REP\": 64,\r\n      \"MODE\": 65,\r\n      \"COLOR\": 66,\r\n      \"Descriptor\": 67,\r\n      \"RepresentationOwnProperty\": 68,\r\n      \"RepresentationOwnPropertyOpts\": 69,\r\n      \"DESC_KEY\": 70,\r\n      \"=\": 71,\r\n      \"DESC_KEY_OPTS\": 72,\r\n      \"AxesArg\": 73,\r\n      \"DESC_KEY_AXES\": 74,\r\n      \"Arg\": 75,\r\n      \"PathWoDescKey\": 76,\r\n      \"HEX\": 77,\r\n      \"BOOL\": 78,\r\n      \"Word\": 79,\r\n      \"CommandSetWoDESC_KEY\": 80,\r\n      \"DescKeys\": 81,\r\n      \"CLEAR\": 82,\r\n      \"FILE_LIST\": 83,\r\n      \"FILE_REGISTER\": 84,\r\n      \"FILE_DELETE\": 85,\r\n      \"PRESET_ADD\": 86,\r\n      \"PRESET_DELETE\": 87,\r\n      \"PRESET_UPDATE\": 88,\r\n      \"PRESET_RENAME\": 89,\r\n      \"PRESET_OPEN\": 90,\r\n      \"CREATE_SCENARIO\": 91,\r\n      \"RESET_SCENARIO\": 92,\r\n      \"DELETE_SCENARIO\": 93,\r\n      \"ADD_SCENARIO_ITEM\": 94,\r\n      \"LIST_SCENARIO\": 95,\r\n      \"PDB_KEY\": 96,\r\n      \"DELAY_KEY\": 97,\r\n      \"PRST_KEY\": 98,\r\n      \"DESCRIPTION_KEY\": 99,\r\n      \"CommandSet\": 100,\r\n      \".\": 101,\r\n      \"PresetPath\": 102,\r\n      \"/\": 103,\r\n      \"HexOrNumber\": 104,\r\n      \"$accept\": 0,\r\n      \"$end\": 1\r\n    },\r\n    terminals_: {\r\n      2: \"error\",\r\n      5: \"EOF\",\r\n      6: \"RESET\",\r\n      7: \"BUILD\",\r\n      8: \"ALL\",\r\n      9: \"HELP\",\r\n      11: \"MOTM\",\r\n      13: \"GET\",\r\n      14: \"STRING\",\r\n      15: \"SET\",\r\n      17: \"SET_SAVE\",\r\n      18: \"SET_RESTORE\",\r\n      19: \"SET_RESET\",\r\n      20: \"PRESET\",\r\n      23: \"REMOVE\",\r\n      25: \"HIDE\",\r\n      26: \"SHOW\",\r\n      27: \"LIST\",\r\n      28: \"EXPAND_KEY\",\r\n      29: \"SELECTOR_KEY\",\r\n      30: \"SELECT\",\r\n      31: \"AS\",\r\n      33: \"SELECTOR\",\r\n      34: \"WITHIN\",\r\n      35: \"NUMBER\",\r\n      36: \"OF\",\r\n      37: \"MATERIAL\",\r\n      38: \"IDENTIFIER\",\r\n      41: \"VIEW\",\r\n      42: \"BASE_64\",\r\n      43: \"UNIT\",\r\n      44: \"DSSP\",\r\n      45: \"SCALE\",\r\n      46: \"ROTATE\",\r\n      48: \"TRANSLATE\",\r\n      49: \"CENTER\",\r\n      52: \"LINE\",\r\n      54: \"LISTOBJ\",\r\n      55: \"REMOVEOBJ\",\r\n      56: \"URL\",\r\n      57: \"VIEW_KEY\",\r\n      58: \"SCREENSHOT\",\r\n      59: \"LOAD\",\r\n      61: \"FILE_KEY\",\r\n      62: \"ADD\",\r\n      64: \"REP\",\r\n      65: \"MODE\",\r\n      66: \"COLOR\",\r\n      70: \"DESC_KEY\",\r\n      71: \"=\",\r\n      72: \"DESC_KEY_OPTS\",\r\n      74: \"DESC_KEY_AXES\",\r\n      77: \"HEX\",\r\n      78: \"BOOL\",\r\n      82: \"CLEAR\",\r\n      83: \"FILE_LIST\",\r\n      84: \"FILE_REGISTER\",\r\n      85: \"FILE_DELETE\",\r\n      86: \"PRESET_ADD\",\r\n      87: \"PRESET_DELETE\",\r\n      88: \"PRESET_UPDATE\",\r\n      89: \"PRESET_RENAME\",\r\n      90: \"PRESET_OPEN\",\r\n      91: \"CREATE_SCENARIO\",\r\n      92: \"RESET_SCENARIO\",\r\n      93: \"DELETE_SCENARIO\",\r\n      94: \"ADD_SCENARIO_ITEM\",\r\n      95: \"LIST_SCENARIO\",\r\n      96: \"PDB_KEY\",\r\n      97: \"DELAY_KEY\",\r\n      98: \"PRST_KEY\",\r\n      99: \"DESCRIPTION_KEY\",\r\n      101: \".\",\r\n      103: \"/\"\r\n    },\r\n    productions_: [0, [3, 2], [3, 1], [4, 1], [4, 1], [4, 2], [4, 1], [4, 2], [4, 1], [4, 1], [4, 2], [4, 2], [4, 3], [4, 3], [4, 1], [4, 1], [4, 1], [4, 1], [4, 2], [4, 1], [4, 1], [4, 2], [4, 2], [4, 2], [4, 2], [4, 1], [4, 2], [4, 2], [4, 2], [4, 4], [4, 2], [4, 6], [4, 2], [4, 1], [4, 1], [4, 1], [4, 2], [4, 2], [4, 1], [4, 2], [4, 1], [4, 2], [4, 2], [4, 2], [4, 1], [4, 2], [4, 1], [4, 1], [4, 3], [4, 3], [4, 4], [4, 4], [4, 1], [4, 2], [50, 1], [50, 2], [50, 2], [50, 3], [50, 3], [51, 1], [51, 2], [51, 3], [12, 2], [12, 2], [12, 2], [21, 1], [21, 2], [21, 2], [21, 3], [22, 2], [22, 3], [39, 2], [39, 3], [40, 2], [40, 3], [24, 1], [24, 1], [63, 1], [63, 2], [63, 3], [63, 4], [67, 1], [67, 1], [67, 2], [68, 3], [69, 3], [47, 1], [47, 2], [73, 2], [53, 1], [53, 2], [75, 3], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [79, 1], [79, 1], [32, 1], [32, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [80, 1], [81, 1], [81, 1], [81, 1], [81, 1], [81, 1], [81, 1], [81, 1], [100, 1], [100, 1], [76, 1], [76, 3], [76, 3], [10, 1], [10, 1], [10, 3], [10, 3], [10, 3], [60, 1], [102, 1], [102, 3], [104, 1], [104, 1]],\r\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\r\n      /* this == yyval */\r\n\r\n      var $0 = $$.length - 1;\r\n      switch (yystate) {\r\n        case 1:\r\n          return $$[$0 - 1];\r\n          break;\r\n        case 3:\r\n          this.$ = yy.miew.reset(false);\r\n          yy.ClearContext();\r\n          yy.miew.resetReps(\"empty\");\r\n          break;\r\n        case 4:\r\n          this.$ = yy.miew.rebuild();\r\n          break;\r\n        case 5:\r\n          this.$ = yy.miew.rebuildAll();\r\n          yy.miew.rebuild();\r\n          break;\r\n        case 6:\r\n          this.$ = yy.echo(yy.utils.help().toString());\r\n          break;\r\n        case 7:\r\n          this.$ = yy.echo(yy.utils.help($$[$0]).toString());\r\n          break;\r\n        case 8:\r\n          this.$ = yy.miew.motm();\r\n          break;\r\n        case 10:\r\n        case 11:\r\n          this.$ = yy.utils.propagateProp($$[$0]);\r\n          yy.echo(yy.miew.get($$[$0]).toString());\r\n          break;\r\n        case 12:\r\n        case 13:\r\n          this.$ = yy.miew.set($$[$0 - 1], yy.utils.propagateProp($$[$0 - 1], $$[$0]));\r\n          ;\r\n          break;\r\n        case 14:\r\n          this.$ = yy.miew.saveSettings();\r\n          ;\r\n          break;\r\n        case 15:\r\n          this.$ = yy.miew.restoreSettings();\r\n          ;\r\n          break;\r\n        case 16:\r\n          this.$ = yy.miew.resetSettings();\r\n          ;\r\n          break;\r\n        case 17:\r\n          this.$ = yy.miew.resetReps();\r\n          break;\r\n        case 18:\r\n          this.$ = yy.miew.applyPreset($$[$0]);\r\n          break;\r\n        case 21:\r\n          this.$ = yy.miew.repRemove($$[$0]);\r\n          yy.representations.remove($$[$0]);\r\n          break;\r\n        case 22:\r\n          this.$ = yy.miew.repHide($$[$0]);\r\n          break;\r\n        case 23:\r\n          this.$ = yy.miew.repHide($$[$0], false);\r\n          break;\r\n        case 24:\r\n          this.$ = yy.echo(yy.utils.listRep(yy.miew, yy.representations, $$[$0], '-e'));\r\n          break;\r\n        case 25:\r\n          this.$ = yy.echo(yy.utils.list(yy.miew, yy.representations));\r\n          break;\r\n        case 26:\r\n          this.$ = yy.echo(yy.utils.list(yy.miew, yy.representations, $$[$0]));\r\n          break;\r\n        case 27:\r\n          this.$ = yy.echo(yy.utils.listSelector(yy.miew, yy.Context));\r\n          break;\r\n        case 28:\r\n          this.$ = yy.miew.select(yy.utils.checkArg($$[$0 - 1].toLowerCase(), $$[$0], true));\r\n          break;\r\n        case 29:\r\n          this.$ = yy.Context[$$[$0].toLowerCase()] = yy.utils.checkArg($$[$0 - 3].toLowerCase(), $$[$0 - 2], true);\r\n          yy.miew.select(yy.Context[$$[$0].toLowerCase()]);\r\n          break;\r\n        case 30:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            selector: yy.utils.checkArg($$[$0 - 1].toLowerCase(), $$[$0])\r\n          });\r\n          break;\r\n        case 31:\r\n          this.$ = yy.Context[$$[$0].toLowerCase()] = yy.miew.within(yy.utils.checkArg(\"select\", $$[$0 - 2], true), Number($$[$0 - 4]));\r\n          break;\r\n        case 32:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            material: yy.utils.checkArg($$[$0 - 1].toLowerCase(), $$[$0].toUpperCase())\r\n          });\r\n          break;\r\n        case 35:\r\n          this.$ = yy.echo(yy.miew.view());\r\n          break;\r\n        case 36:\r\n        case 37:\r\n          this.$ = yy.miew.view($$[$0]);\r\n          break;\r\n        case 38:\r\n          this.$ = yy.echo(yy.miew.changeUnit());\r\n          break;\r\n        case 39:\r\n          this.$ = yy.echo(yy.miew.changeUnit($$[$0]));\r\n          break;\r\n        case 40:\r\n          this.$ = yy.miew.dssp();\r\n          break;\r\n        case 41:\r\n          this.$ = yy.miew.scale($$[$0]);\r\n          break;\r\n        case 42:\r\n          for (var i = 0, n = $$[$0].length; i < n; i++) {\r\n            yy.miew.rotate($$[$0][i]['x'] * Math.PI / 180.0, $$[$0][i]['y'] * Math.PI / 180.0, $$[$0][i]['z'] * Math.PI / 180.0);\r\n          }\r\n          break;\r\n        case 43:\r\n          for (var i = 0, n = $$[$0].length; i < n; i++) {\r\n            yy.miew.translate($$[$0][i]['x'] || 0, $$[$0][i]['y'] || 0, $$[$0][i]['z'] || 0);\r\n          }\r\n          break;\r\n        case 44:\r\n          this.$ = yy.miew.center();\r\n          break;\r\n        case 45:\r\n          this.$ = yy.miew.center($$[$0]);\r\n          break;\r\n        case 48:\r\n        case 49:\r\n          this.$ = yy.miew.addObject({\r\n            type: 'line',\r\n            params: [$$[$0 - 1], $$[$0]]\r\n          }, true);\r\n          break;\r\n        case 50:\r\n        case 51:\r\n          this.$ = yy.miew.addObject({\r\n            type: 'line',\r\n            params: [$$[$0 - 2], $$[$0 - 1]],\r\n            opts: $$[$0].toJSO(yy.utils, 'objects', 'line')\r\n          }, true);\r\n          break;\r\n        case 52:\r\n          this.$ = yy.echo(yy.utils.listObjs(yy.miew));\r\n          break;\r\n        case 53:\r\n          this.$ = yy.miew.removeObject($$[$0]);\r\n          break;\r\n        case 54:\r\n          this.$ = yy.echo(yy.miew.getURL({\r\n            view: false,\r\n            settings: false\r\n          }));\r\n          break;\r\n        case 55:\r\n          this.$ = yy.echo(yy.miew.getURL({\r\n            view: false,\r\n            settings: true\r\n          }));\r\n          break;\r\n        case 56:\r\n          this.$ = yy.echo(yy.miew.getURL({\r\n            view: true,\r\n            settings: false\r\n          }));\r\n          break;\r\n        case 57:\r\n        case 58:\r\n          this.$ = yy.echo(yy.miew.getURL({\r\n            view: true,\r\n            settings: true\r\n          }));\r\n          break;\r\n        case 59:\r\n          this.$ = yy.miew.screenshotSave();\r\n          break;\r\n        case 60:\r\n          this.$ = yy.miew.screenshotSave('', Number($$[$0]));\r\n          break;\r\n        case 61:\r\n          this.$ = yy.miew.screenshotSave('', Number($$[$0 - 1]), Number($$[$0]));\r\n          break;\r\n        case 62:\r\n        case 63:\r\n        case 64:\r\n          this.$ = yy.utils.load(yy.miew, $$[$0]);\r\n          yy.representations.clear();\r\n          break;\r\n        case 65:\r\n          this.$ = yy.echo(yy.representations.add(yy.miew.repAdd()));\r\n          break;\r\n        case 66:\r\n          this.$ = yy.echo(yy.representations.add($$[$0], yy.miew.repAdd()));\r\n          break;\r\n        case 67:\r\n          this.$ = yy.echo(yy.representations.add(yy.miew.repAdd($$[$0])));\r\n          break;\r\n        case 68:\r\n          this.$ = yy.echo(yy.representations.add($$[$0 - 1], yy.miew.repAdd($$[$0])));\r\n          break;\r\n        case 69:\r\n          this.$ = yy.miew.rep($$[$0]);\r\n          yy.miew.repCurrent($$[$0]);\r\n          break;\r\n        case 70:\r\n          this.$ = yy.miew.rep($$[$0 - 1], $$[$0]);\r\n          yy.miew.repCurrent($$[$0 - 1]);\r\n          break;\r\n        case 71:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            mode: yy.utils.checkArg($$[$0 - 1].toLowerCase(), $$[$0].toUpperCase())\r\n          });\r\n          break;\r\n        case 72:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            mode: new Array(yy.utils.checkArg($$[$0 - 2].toLowerCase(), $$[$0 - 1].toUpperCase()), $$[$0].toJSO(yy.utils, $$[$0 - 2], $$[$0 - 1].toUpperCase()))\r\n          });\r\n          break;\r\n        case 73:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            colorer: yy.utils.checkArg($$[$0 - 1].toLowerCase(), $$[$0].toUpperCase())\r\n          });\r\n          break;\r\n        case 74:\r\n          this.$ = yy.miew.rep(yy.miew.repCurrent(), {\r\n            colorer: new Array(yy.utils.checkArg($$[$0 - 2].toLowerCase(), $$[$0 - 1].toUpperCase()), $$[$0].toJSO(yy.utils, $$[$0 - 2], $$[$0 - 1].toUpperCase()))\r\n          });\r\n          break;\r\n        case 75:\r\n          this.$ = Number(yy.representations.get($$[$0]));\r\n          break;\r\n        case 76:\r\n        case 92:\r\n          this.$ = Number($$[$0]);\r\n          break;\r\n        case 77:\r\n          this.$ = $$[$0];\r\n          break;\r\n        case 78:\r\n          this.$ = yy._.assign($$[$0 - 1], $$[$0]);\r\n          break;\r\n        case 79:\r\n          this.$ = yy._.assign($$[$0 - 2], $$[$0 - 1], $$[$0]);\r\n          break;\r\n        case 80:\r\n          this.$ = yy._.assign($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);\r\n          break;\r\n        case 81:\r\n        case 82:\r\n          this.$ = yy.CreateObjectPair($$[$0].key, $$[$0].val);\r\n          break;\r\n        case 83:\r\n          this.$ = yy.CreateObjectPair($$[$0 - 1].key, new Array($$[$0 - 1].val, $$[$0].toJSO(yy.utils, $$[$0 - 1].key, $$[$0 - 1].val)));\r\n          break;\r\n        case 84:\r\n        case 85:\r\n          this.$ = Object.create({\r\n            'key': yy.keyRemap($$[$0 - 2]),\r\n            'val': yy.utils.checkArg($$[$0 - 2], $$[$0])\r\n          });\r\n          break;\r\n        case 86:\r\n          this.$ = [$$[$0]];\r\n          break;\r\n        case 87:\r\n          this.$ = $$[$0 - 1].concat($$[$0]);\r\n          break;\r\n        case 88:\r\n          this.$ = yy.CreateObjectPair($$[$0 - 1].toLowerCase(), Number($$[$0]));\r\n          break;\r\n        case 89:\r\n          this.$ = new yy.ArgList($$[$0]);\r\n          break;\r\n        case 90:\r\n          this.$ = $$[$0 - 1].append($$[$0]);\r\n          break;\r\n        case 91:\r\n          this.$ = new yy.Arg($$[$0 - 2], $$[$0]);\r\n          break;\r\n        case 93:\r\n          this.$ = parseInt($$[$0]);\r\n          break;\r\n        case 94:\r\n          this.$ = JSON.parse($$[$0]);\r\n          break;\r\n        case 95:\r\n        case 96:\r\n          this.$ = String($$[$0]);\r\n          break;\r\n        case 157:\r\n        case 158:\r\n        case 161:\r\n        case 162:\r\n        case 163:\r\n          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0]; //cause of could be color word in path;\r\n          break;\r\n        case 166:\r\n          this.$ = $$[$0 - 2] = $$[$0 - 2] + $$[$0 - 1] + $$[$0];\r\n          break;\r\n      }\r\n    },\r\n    table: [{\r\n      3: 1,\r\n      4: 2,\r\n      5: [1, 3],\r\n      6: [1, 4],\r\n      7: [1, 5],\r\n      9: [1, 6],\r\n      11: [1, 7],\r\n      12: 8,\r\n      13: [1, 9],\r\n      15: [1, 10],\r\n      17: [1, 11],\r\n      18: [1, 12],\r\n      19: [1, 13],\r\n      20: [1, 14],\r\n      21: 15,\r\n      22: 16,\r\n      23: [1, 17],\r\n      25: [1, 18],\r\n      26: [1, 19],\r\n      27: [1, 20],\r\n      30: [1, 21],\r\n      33: [1, 22],\r\n      34: [1, 23],\r\n      37: [1, 24],\r\n      39: 25,\r\n      40: 26,\r\n      41: [1, 27],\r\n      43: [1, 28],\r\n      44: [1, 29],\r\n      45: [1, 30],\r\n      46: [1, 31],\r\n      48: [1, 32],\r\n      49: [1, 33],\r\n      50: 34,\r\n      51: 35,\r\n      52: [1, 36],\r\n      54: [1, 37],\r\n      55: [1, 38],\r\n      56: [1, 44],\r\n      58: [1, 45],\r\n      59: [1, 39],\r\n      62: [1, 40],\r\n      64: [1, 41],\r\n      65: [1, 42],\r\n      66: [1, 43]\r\n    }, {\r\n      1: [3]\r\n    }, {\r\n      5: [1, 46]\r\n    }, {\r\n      1: [2, 2]\r\n    }, {\r\n      5: [2, 3]\r\n    }, {\r\n      5: [2, 4],\r\n      8: [1, 47]\r\n    }, {\r\n      5: [2, 6],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      10: 48,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 49,\r\n      80: 52,\r\n      81: 50,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      5: [2, 8]\r\n    }, {\r\n      5: [2, 9]\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      10: 106,\r\n      13: $V3,\r\n      14: [1, 107],\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 49,\r\n      80: 52,\r\n      81: 50,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      10: 108,\r\n      13: $V3,\r\n      14: [1, 109],\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 49,\r\n      80: 52,\r\n      81: 50,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      5: [2, 14]\r\n    }, {\r\n      5: [2, 15]\r\n    }, {\r\n      5: [2, 16]\r\n    }, {\r\n      5: [2, 17],\r\n      14: $VS,\r\n      16: 110,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW\r\n    }, {\r\n      5: [2, 19]\r\n    }, {\r\n      5: [2, 20]\r\n    }, {\r\n      24: 116,\r\n      35: $VX,\r\n      38: $VY\r\n    }, {\r\n      24: 119,\r\n      35: $VX,\r\n      38: $VY\r\n    }, {\r\n      24: 120,\r\n      35: $VX,\r\n      38: $VY\r\n    }, {\r\n      5: [2, 25],\r\n      24: 121,\r\n      28: [1, 122],\r\n      29: [1, 123],\r\n      35: $VX,\r\n      38: $VY\r\n    }, {\r\n      14: [1, 124]\r\n    }, {\r\n      14: [1, 125]\r\n    }, {\r\n      35: [1, 126]\r\n    }, {\r\n      38: [1, 127]\r\n    }, {\r\n      5: [2, 33]\r\n    }, {\r\n      5: [2, 34]\r\n    }, {\r\n      5: [2, 35],\r\n      14: [1, 128],\r\n      42: [1, 129]\r\n    }, {\r\n      5: [2, 38],\r\n      35: [1, 130]\r\n    }, {\r\n      5: [2, 40]\r\n    }, {\r\n      35: [1, 131]\r\n    }, {\r\n      47: 132,\r\n      73: 133,\r\n      74: $VZ\r\n    }, {\r\n      47: 135,\r\n      73: 133,\r\n      74: $VZ\r\n    }, {\r\n      5: [2, 44],\r\n      14: [1, 136]\r\n    }, {\r\n      5: [2, 46]\r\n    }, {\r\n      5: [2, 47]\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      10: 138,\r\n      13: $V3,\r\n      14: [1, 137],\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 49,\r\n      80: 52,\r\n      81: 50,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      5: [2, 52]\r\n    }, {\r\n      35: [1, 139]\r\n    }, {\r\n      14: [1, 143],\r\n      38: [1, 141],\r\n      60: 140,\r\n      61: [1, 142]\r\n    }, {\r\n      5: [2, 65],\r\n      38: [1, 144],\r\n      63: 145,\r\n      67: 146,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, {\r\n      24: 151,\r\n      35: $VX,\r\n      38: $VY\r\n    }, {\r\n      38: [1, 152]\r\n    }, {\r\n      38: [1, 153]\r\n    }, {\r\n      5: [2, 54],\r\n      29: [1, 154],\r\n      57: [1, 155]\r\n    }, {\r\n      5: [2, 59],\r\n      35: [1, 156]\r\n    }, {\r\n      1: [2, 1]\r\n    }, {\r\n      5: [2, 5]\r\n    }, {\r\n      5: [2, 7],\r\n      101: $V01\r\n    }, o($V11, [2, 159]), o($V11, [2, 160]), o($V21, [2, 97]), o($V21, [2, 98]), o($V11, [2, 147]), o($V11, [2, 148]), o($V11, [2, 149]), o($V11, [2, 150]), o($V11, [2, 151]), o($V11, [2, 152]), o($V11, [2, 153]), o($V21, [2, 101]), o($V21, [2, 102]), o($V21, [2, 103]), o($V21, [2, 104]), o($V21, [2, 105]), o($V21, [2, 106]), o($V21, [2, 107]), o($V21, [2, 108]), o($V21, [2, 109]), o($V21, [2, 110]), o($V21, [2, 111]), o($V21, [2, 112]), o($V21, [2, 113]), o($V21, [2, 114]), o($V21, [2, 115]), o($V21, [2, 116]), o($V21, [2, 117]), o($V21, [2, 118]), o($V21, [2, 119]), o($V21, [2, 120]), o($V21, [2, 121]), o($V21, [2, 122]), o($V21, [2, 123]), o($V21, [2, 124]), o($V21, [2, 125]), o($V21, [2, 126]), o($V21, [2, 127]), o($V21, [2, 128]), o($V21, [2, 129]), o($V21, [2, 130]), o($V21, [2, 131]), o($V21, [2, 132]), o($V21, [2, 133]), o($V21, [2, 134]), o($V21, [2, 135]), o($V21, [2, 136]), o($V21, [2, 137]), o($V21, [2, 138]), o($V21, [2, 139]), o($V21, [2, 140]), o($V21, [2, 141]), o($V21, [2, 142]), o($V21, [2, 143]), o($V21, [2, 144]), o($V21, [2, 145]), o($V21, [2, 146]), {\r\n      5: [2, 10],\r\n      101: $V01\r\n    }, {\r\n      5: [2, 11]\r\n    }, {\r\n      14: $VS,\r\n      16: 158,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW,\r\n      101: $V01\r\n    }, {\r\n      14: $VS,\r\n      16: 159,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW\r\n    }, {\r\n      5: [2, 18]\r\n    }, o($V31, [2, 92]), o($V31, [2, 93]), o($V31, [2, 94]), o($V31, [2, 95]), o($V31, [2, 96]), {\r\n      5: [2, 21]\r\n    }, o($V41, [2, 75]), o($V41, [2, 76]), {\r\n      5: [2, 22]\r\n    }, {\r\n      5: [2, 23]\r\n    }, {\r\n      5: [2, 24]\r\n    }, {\r\n      5: [2, 26]\r\n    }, {\r\n      5: [2, 27]\r\n    }, {\r\n      5: [2, 28],\r\n      31: [1, 160]\r\n    }, {\r\n      5: [2, 30]\r\n    }, {\r\n      36: [1, 161]\r\n    }, {\r\n      5: [2, 32]\r\n    }, {\r\n      5: [2, 36]\r\n    }, {\r\n      5: [2, 37]\r\n    }, {\r\n      5: [2, 39]\r\n    }, {\r\n      5: [2, 41]\r\n    }, {\r\n      5: [2, 42],\r\n      73: 162,\r\n      74: $VZ\r\n    }, o($V51, [2, 86]), {\r\n      35: [1, 163]\r\n    }, {\r\n      5: [2, 43],\r\n      73: 162,\r\n      74: $VZ\r\n    }, {\r\n      5: [2, 45]\r\n    }, {\r\n      14: [1, 164]\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      10: 165,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 49,\r\n      80: 52,\r\n      81: 50,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR,\r\n      101: $V01\r\n    }, {\r\n      5: [2, 53]\r\n    }, {\r\n      5: [2, 62]\r\n    }, {\r\n      5: [2, 63]\r\n    }, {\r\n      5: [2, 64]\r\n    }, {\r\n      5: [2, 164]\r\n    }, {\r\n      5: [2, 66],\r\n      63: 166,\r\n      67: 146,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, {\r\n      5: [2, 67]\r\n    }, {\r\n      5: [2, 77],\r\n      67: 167,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, o($V41, [2, 81]), o($V41, [2, 82], {\r\n      80: 52,\r\n      53: 168,\r\n      75: 169,\r\n      76: 170,\r\n      79: 171,\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }), {\r\n      71: [1, 172]\r\n    }, {\r\n      71: [1, 173]\r\n    }, {\r\n      5: [2, 69],\r\n      63: 174,\r\n      67: 146,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, {\r\n      5: [2, 71],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      53: 175,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 169,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 73],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      53: 176,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 169,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 55],\r\n      57: [1, 177]\r\n    }, {\r\n      5: [2, 56],\r\n      29: [1, 178]\r\n    }, {\r\n      5: [2, 60],\r\n      35: [1, 179]\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      35: [1, 181],\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 180,\r\n      80: 52,\r\n      81: 182,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      5: [2, 12]\r\n    }, {\r\n      5: [2, 13]\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      32: 183,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 184,\r\n      80: 52,\r\n      81: 185,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      14: [1, 186]\r\n    }, o($V51, [2, 87]), o($V51, [2, 88]), {\r\n      5: [2, 48],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      53: 187,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 169,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 49],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      53: 188,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 169,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      101: $V01\r\n    }, {\r\n      5: [2, 68]\r\n    }, {\r\n      5: [2, 78],\r\n      67: 189,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, o($V41, [2, 83], {\r\n      80: 52,\r\n      76: 170,\r\n      79: 171,\r\n      75: 190,\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }), o($V31, [2, 89]), {\r\n      71: [1, 191],\r\n      101: [1, 192]\r\n    }, o($V61, [2, 156]), {\r\n      14: $VS,\r\n      16: 193,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW\r\n    }, {\r\n      14: $VS,\r\n      16: 194,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW\r\n    }, {\r\n      5: [2, 70]\r\n    }, {\r\n      5: [2, 72],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 190,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 74],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 190,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 57]\r\n    }, {\r\n      5: [2, 58]\r\n    }, {\r\n      5: [2, 61]\r\n    }, o($V11, [2, 161]), o($V11, [2, 162]), o($V11, [2, 163]), {\r\n      5: [2, 29]\r\n    }, {\r\n      5: [2, 99]\r\n    }, {\r\n      5: [2, 100]\r\n    }, {\r\n      31: [1, 195]\r\n    }, {\r\n      5: [2, 50],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 190,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 51],\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      75: 190,\r\n      76: 170,\r\n      79: 171,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, {\r\n      5: [2, 79],\r\n      67: 196,\r\n      68: 147,\r\n      69: 148,\r\n      70: $V_,\r\n      72: $V$\r\n    }, o($V31, [2, 90]), {\r\n      14: $VS,\r\n      16: 197,\r\n      35: $VT,\r\n      38: $VU,\r\n      77: $VV,\r\n      78: $VW\r\n    }, {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      35: [1, 199],\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      79: 198,\r\n      80: 52,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN\r\n    }, o($V41, [2, 84]), o($V31, [2, 85]), {\r\n      6: $V0,\r\n      7: $V1,\r\n      9: $V2,\r\n      13: $V3,\r\n      15: $V4,\r\n      17: $V5,\r\n      18: $V6,\r\n      19: $V7,\r\n      20: $V8,\r\n      23: $V9,\r\n      25: $Va,\r\n      26: $Vb,\r\n      27: $Vc,\r\n      30: $Vd,\r\n      32: 200,\r\n      33: $Ve,\r\n      34: $Vf,\r\n      37: $Vg,\r\n      38: $Vh,\r\n      41: $Vi,\r\n      43: $Vj,\r\n      45: $Vk,\r\n      46: $Vl,\r\n      49: $Vm,\r\n      52: $Vn,\r\n      54: $Vo,\r\n      55: $Vp,\r\n      56: $Vq,\r\n      58: $Vr,\r\n      59: $Vs,\r\n      62: $Vt,\r\n      64: $Vu,\r\n      65: $Vv,\r\n      66: $Vw,\r\n      70: $Vx,\r\n      72: $Vy,\r\n      74: $Vz,\r\n      79: 184,\r\n      80: 52,\r\n      81: 185,\r\n      82: $VA,\r\n      83: $VB,\r\n      84: $VC,\r\n      85: $VD,\r\n      86: $VE,\r\n      87: $VF,\r\n      88: $VG,\r\n      89: $VH,\r\n      90: $VI,\r\n      91: $VJ,\r\n      92: $VK,\r\n      93: $VL,\r\n      94: $VM,\r\n      95: $VN,\r\n      96: $VO,\r\n      97: $VP,\r\n      98: $VQ,\r\n      99: $VR\r\n    }, {\r\n      5: [2, 80]\r\n    }, o($V31, [2, 91]), o($V61, [2, 157]), o($V61, [2, 158]), {\r\n      5: [2, 31]\r\n    }],\r\n    defaultActions: {\r\n      3: [2, 2],\r\n      4: [2, 3],\r\n      7: [2, 8],\r\n      8: [2, 9],\r\n      11: [2, 14],\r\n      12: [2, 15],\r\n      13: [2, 16],\r\n      15: [2, 19],\r\n      16: [2, 20],\r\n      25: [2, 33],\r\n      26: [2, 34],\r\n      29: [2, 40],\r\n      34: [2, 46],\r\n      35: [2, 47],\r\n      37: [2, 52],\r\n      46: [2, 1],\r\n      47: [2, 5],\r\n      107: [2, 11],\r\n      110: [2, 18],\r\n      116: [2, 21],\r\n      119: [2, 22],\r\n      120: [2, 23],\r\n      121: [2, 24],\r\n      122: [2, 26],\r\n      123: [2, 27],\r\n      125: [2, 30],\r\n      127: [2, 32],\r\n      128: [2, 36],\r\n      129: [2, 37],\r\n      130: [2, 39],\r\n      131: [2, 41],\r\n      136: [2, 45],\r\n      139: [2, 53],\r\n      140: [2, 62],\r\n      141: [2, 63],\r\n      142: [2, 64],\r\n      143: [2, 164],\r\n      145: [2, 67],\r\n      158: [2, 12],\r\n      159: [2, 13],\r\n      166: [2, 68],\r\n      174: [2, 70],\r\n      177: [2, 57],\r\n      178: [2, 58],\r\n      179: [2, 61],\r\n      183: [2, 29],\r\n      184: [2, 99],\r\n      185: [2, 100],\r\n      196: [2, 80],\r\n      200: [2, 31]\r\n    },\r\n    parseError: function parseError(str, hash) {\r\n      if (hash.recoverable) {\r\n        this.trace(str);\r\n      } else {\r\n        var error = new Error(str);\r\n        error.hash = hash;\r\n        throw error;\r\n      }\r\n    },\r\n    parse: function parse(input) {\r\n      var self = this,\r\n        stack = [0],\r\n        tstack = [],\r\n        vstack = [null],\r\n        lstack = [],\r\n        table = this.table,\r\n        yytext = '',\r\n        yylineno = 0,\r\n        yyleng = 0,\r\n        recovering = 0,\r\n        TERROR = 2,\r\n        EOF = 1;\r\n      var args = lstack.slice.call(arguments, 1);\r\n      var lexer = Object.create(this.lexer);\r\n      var sharedState = {\r\n        yy: {}\r\n      };\r\n      for (var k in this.yy) {\r\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\r\n          sharedState.yy[k] = this.yy[k];\r\n        }\r\n      }\r\n      lexer.setInput(input, sharedState.yy);\r\n      sharedState.yy.lexer = lexer;\r\n      sharedState.yy.parser = this;\r\n      if (typeof lexer.yylloc == 'undefined') {\r\n        lexer.yylloc = {};\r\n      }\r\n      var yyloc = lexer.yylloc;\r\n      lstack.push(yyloc);\r\n      var ranges = lexer.options && lexer.options.ranges;\r\n      if (typeof sharedState.yy.parseError === 'function') {\r\n        this.parseError = sharedState.yy.parseError;\r\n      } else {\r\n        this.parseError = Object.getPrototypeOf(this).parseError;\r\n      }\r\n      function popStack(n) {\r\n        stack.length = stack.length - 2 * n;\r\n        vstack.length = vstack.length - n;\r\n        lstack.length = lstack.length - n;\r\n      }\r\n      function lex() {\r\n        var token;\r\n        token = tstack.pop() || lexer.lex() || EOF;\r\n        if (typeof token !== 'number') {\r\n          if (token instanceof Array) {\r\n            tstack = token;\r\n            token = tstack.pop();\r\n          }\r\n          token = self.symbols_[token] || token;\r\n        }\r\n        return token;\r\n      }\r\n      var symbol,\r\n        preErrorSymbol,\r\n        state,\r\n        action,\r\n        a,\r\n        r,\r\n        yyval = {},\r\n        p,\r\n        len,\r\n        newState,\r\n        expected;\r\n      while (true) {\r\n        state = stack[stack.length - 1];\r\n        if (this.defaultActions[state]) {\r\n          action = this.defaultActions[state];\r\n        } else {\r\n          if (symbol === null || typeof symbol == 'undefined') {\r\n            symbol = lex();\r\n          }\r\n          action = table[state] && table[state][symbol];\r\n        }\r\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\r\n          var errStr = '';\r\n          expected = [];\r\n          for (p in table[state]) {\r\n            if (this.terminals_[p] && p > TERROR) {\r\n              expected.push('\\'' + this.terminals_[p] + '\\'');\r\n            }\r\n          }\r\n          if (lexer.showPosition) {\r\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\r\n          } else {\r\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\r\n          }\r\n          this.parseError(errStr, {\r\n            text: lexer.match,\r\n            token: this.terminals_[symbol] || symbol,\r\n            line: lexer.yylineno,\r\n            loc: yyloc,\r\n            expected: expected\r\n          });\r\n        }\r\n        if (action[0] instanceof Array && action.length > 1) {\r\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\r\n        }\r\n        switch (action[0]) {\r\n          case 1:\r\n            stack.push(symbol);\r\n            vstack.push(lexer.yytext);\r\n            lstack.push(lexer.yylloc);\r\n            stack.push(action[1]);\r\n            symbol = null;\r\n            if (!preErrorSymbol) {\r\n              yyleng = lexer.yyleng;\r\n              yytext = lexer.yytext;\r\n              yylineno = lexer.yylineno;\r\n              yyloc = lexer.yylloc;\r\n              if (recovering > 0) {\r\n                recovering--;\r\n              }\r\n            } else {\r\n              symbol = preErrorSymbol;\r\n              preErrorSymbol = null;\r\n            }\r\n            break;\r\n          case 2:\r\n            len = this.productions_[action[1]][1];\r\n            yyval.$ = vstack[vstack.length - len];\r\n            yyval._$ = {\r\n              first_line: lstack[lstack.length - (len || 1)].first_line,\r\n              last_line: lstack[lstack.length - 1].last_line,\r\n              first_column: lstack[lstack.length - (len || 1)].first_column,\r\n              last_column: lstack[lstack.length - 1].last_column\r\n            };\r\n            if (ranges) {\r\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\r\n            }\r\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\r\n            if (typeof r !== 'undefined') {\r\n              return r;\r\n            }\r\n            if (len) {\r\n              stack = stack.slice(0, -1 * len * 2);\r\n              vstack = vstack.slice(0, -1 * len);\r\n              lstack = lstack.slice(0, -1 * len);\r\n            }\r\n            stack.push(this.productions_[action[1]][0]);\r\n            vstack.push(yyval.$);\r\n            lstack.push(yyval._$);\r\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\r\n            stack.push(newState);\r\n            break;\r\n          case 3:\r\n            return true;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  };\r\n\r\n  /* generated by jison-lex 0.3.4 */\r\n  var lexer = function () {\r\n    var lexer = {\r\n      EOF: 1,\r\n      parseError: function parseError(str, hash) {\r\n        if (this.yy.parser) {\r\n          this.yy.parser.parseError(str, hash);\r\n        } else {\r\n          throw new Error(str);\r\n        }\r\n      },\r\n      // resets the lexer, sets new input\r\n      setInput: function (input, yy) {\r\n        this.yy = yy || this.yy || {};\r\n        this._input = input;\r\n        this._more = this._backtrack = this.done = false;\r\n        this.yylineno = this.yyleng = 0;\r\n        this.yytext = this.matched = this.match = '';\r\n        this.conditionStack = ['INITIAL'];\r\n        this.yylloc = {\r\n          first_line: 1,\r\n          first_column: 0,\r\n          last_line: 1,\r\n          last_column: 0\r\n        };\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [0, 0];\r\n        }\r\n        this.offset = 0;\r\n        return this;\r\n      },\r\n      // consumes and returns one char from the input\r\n      input: function () {\r\n        var ch = this._input[0];\r\n        this.yytext += ch;\r\n        this.yyleng++;\r\n        this.offset++;\r\n        this.match += ch;\r\n        this.matched += ch;\r\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n          this.yylineno++;\r\n          this.yylloc.last_line++;\r\n        } else {\r\n          this.yylloc.last_column++;\r\n        }\r\n        if (this.options.ranges) {\r\n          this.yylloc.range[1]++;\r\n        }\r\n        this._input = this._input.slice(1);\r\n        return ch;\r\n      },\r\n      // unshifts one char (or a string) into the input\r\n      unput: function (ch) {\r\n        var len = ch.length;\r\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\r\n        this._input = ch + this._input;\r\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\r\n        //this.yyleng -= len;\r\n        this.offset -= len;\r\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\r\n        this.match = this.match.substr(0, this.match.length - 1);\r\n        this.matched = this.matched.substr(0, this.matched.length - 1);\r\n        if (lines.length - 1) {\r\n          this.yylineno -= lines.length - 1;\r\n        }\r\n        var r = this.yylloc.range;\r\n        this.yylloc = {\r\n          first_line: this.yylloc.first_line,\r\n          last_line: this.yylineno + 1,\r\n          first_column: this.yylloc.first_column,\r\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\r\n        };\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\r\n        }\r\n        this.yyleng = this.yytext.length;\r\n        return this;\r\n      },\r\n      // When called from action, caches matched text and appends it on next action\r\n      more: function () {\r\n        this._more = true;\r\n        return this;\r\n      },\r\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\r\n      reject: function () {\r\n        if (this.options.backtrack_lexer) {\r\n          this._backtrack = true;\r\n        } else {\r\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\r\n            text: \"\",\r\n            token: null,\r\n            line: this.yylineno\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      // retain first n characters of the match\r\n      less: function (n) {\r\n        this.unput(this.match.slice(n));\r\n      },\r\n      // displays already matched input, i.e. for error messages\r\n      pastInput: function () {\r\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\r\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\r\n      },\r\n      // displays upcoming input, i.e. for error messages\r\n      upcomingInput: function () {\r\n        var next = this.match;\r\n        if (next.length < 20) {\r\n          next += this._input.substr(0, 20 - next.length);\r\n        }\r\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\r\n      },\r\n      // displays the character position where the lexing error occurred, i.e. for error messages\r\n      showPosition: function () {\r\n        var pre = this.pastInput();\r\n        var c = new Array(pre.length + 1).join(\"-\");\r\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\r\n      },\r\n      // test the lexed token: return FALSE when not a match, otherwise return token\r\n      test_match: function (match, indexed_rule) {\r\n        var token, lines, backup;\r\n        if (this.options.backtrack_lexer) {\r\n          // save context\r\n          backup = {\r\n            yylineno: this.yylineno,\r\n            yylloc: {\r\n              first_line: this.yylloc.first_line,\r\n              last_line: this.last_line,\r\n              first_column: this.yylloc.first_column,\r\n              last_column: this.yylloc.last_column\r\n            },\r\n            yytext: this.yytext,\r\n            match: this.match,\r\n            matches: this.matches,\r\n            matched: this.matched,\r\n            yyleng: this.yyleng,\r\n            offset: this.offset,\r\n            _more: this._more,\r\n            _input: this._input,\r\n            yy: this.yy,\r\n            conditionStack: this.conditionStack.slice(0),\r\n            done: this.done\r\n          };\r\n          if (this.options.ranges) {\r\n            backup.yylloc.range = this.yylloc.range.slice(0);\r\n          }\r\n        }\r\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n          this.yylineno += lines.length;\r\n        }\r\n        this.yylloc = {\r\n          first_line: this.yylloc.last_line,\r\n          last_line: this.yylineno + 1,\r\n          first_column: this.yylloc.last_column,\r\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\r\n        };\r\n        this.yytext += match[0];\r\n        this.match += match[0];\r\n        this.matches = match;\r\n        this.yyleng = this.yytext.length;\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\r\n        }\r\n        this._more = false;\r\n        this._backtrack = false;\r\n        this._input = this._input.slice(match[0].length);\r\n        this.matched += match[0];\r\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\r\n        if (this.done && this._input) {\r\n          this.done = false;\r\n        }\r\n        if (token) {\r\n          return token;\r\n        } else if (this._backtrack) {\r\n          // recover context\r\n          for (var k in backup) {\r\n            this[k] = backup[k];\r\n          }\r\n          return false; // rule action called reject() implying the next rule should be tested instead.\r\n        }\r\n        return false;\r\n      },\r\n      // return next match in input\r\n      next: function () {\r\n        if (this.done) {\r\n          return this.EOF;\r\n        }\r\n        if (!this._input) {\r\n          this.done = true;\r\n        }\r\n        var token, match, tempMatch, index;\r\n        if (!this._more) {\r\n          this.yytext = '';\r\n          this.match = '';\r\n        }\r\n        var rules = this._currentRules();\r\n        for (var i = 0; i < rules.length; i++) {\r\n          tempMatch = this._input.match(this.rules[rules[i]]);\r\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\r\n            match = tempMatch;\r\n            index = i;\r\n            if (this.options.backtrack_lexer) {\r\n              token = this.test_match(tempMatch, rules[i]);\r\n              if (token !== false) {\r\n                return token;\r\n              } else if (this._backtrack) {\r\n                match = false;\r\n                continue; // rule action called reject() implying a rule MISmatch.\r\n              } else {\r\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n                return false;\r\n              }\r\n            } else if (!this.options.flex) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (match) {\r\n          token = this.test_match(match, rules[index]);\r\n          if (token !== false) {\r\n            return token;\r\n          }\r\n          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n          return false;\r\n        }\r\n        if (this._input === \"\") {\r\n          return this.EOF;\r\n        } else {\r\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\r\n            text: \"\",\r\n            token: null,\r\n            line: this.yylineno\r\n          });\r\n        }\r\n      },\r\n      // return next match that has a token\r\n      lex: function lex() {\r\n        var r = this.next();\r\n        if (r) {\r\n          return r;\r\n        } else {\r\n          return this.lex();\r\n        }\r\n      },\r\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\r\n      begin: function begin(condition) {\r\n        this.conditionStack.push(condition);\r\n      },\r\n      // pop the previously active lexer condition state off the condition stack\r\n      popState: function popState() {\r\n        var n = this.conditionStack.length - 1;\r\n        if (n > 0) {\r\n          return this.conditionStack.pop();\r\n        } else {\r\n          return this.conditionStack[0];\r\n        }\r\n      },\r\n      // produce the lexer rule set which is active for the currently active lexer condition state\r\n      _currentRules: function _currentRules() {\r\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\r\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\r\n        } else {\r\n          return this.conditions[\"INITIAL\"].rules;\r\n        }\r\n      },\r\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\r\n      topState: function topState(n) {\r\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\r\n        if (n >= 0) {\r\n          return this.conditionStack[n];\r\n        } else {\r\n          return \"INITIAL\";\r\n        }\r\n      },\r\n      // alias for begin(condition)\r\n      pushState: function pushState(condition) {\r\n        this.begin(condition);\r\n      },\r\n      // return the number of states currently on the stack\r\n      stateStackSize: function stateStackSize() {\r\n        return this.conditionStack.length;\r\n      },\r\n      options: {\r\n        \"case-insensitive\": true\r\n      },\r\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\r\n        var YYSTATE = YY_START;\r\n        switch ($avoiding_name_collisions) {\r\n          case 0:\r\n            /* ignore whitespace */\r\n            break;\r\n          case 1:\r\n            return '';\r\n            break;\r\n          case 2:\r\n            return '';\r\n            break;\r\n          case 3:\r\n            return 42;\r\n            break;\r\n          case 4:\r\n            return 35;\r\n            break;\r\n          case 5:\r\n            return 77;\r\n            break;\r\n          case 6:\r\n            return 78;\r\n            break;\r\n          case 7:\r\n            return 78;\r\n            break;\r\n          case 8:\r\n            return 8;\r\n            break;\r\n          case 9:\r\n            return 6;\r\n            break;\r\n          case 10:\r\n            return 82;\r\n            break;\r\n          case 11:\r\n            return 7;\r\n            break;\r\n          case 12:\r\n            return 9;\r\n            break;\r\n          case 13:\r\n            return 59;\r\n            break;\r\n          case 14:\r\n            return 13;\r\n            break;\r\n          case 15:\r\n            return 15;\r\n            break;\r\n          case 16:\r\n            return 17;\r\n            break;\r\n          case 17:\r\n            return 18;\r\n            break;\r\n          case 18:\r\n            return 19;\r\n            break;\r\n          case 19:\r\n            return 20;\r\n            break;\r\n          case 20:\r\n            return 11;\r\n            break;\r\n          case 21:\r\n            return 62;\r\n            break;\r\n          case 22:\r\n            return 64;\r\n            break;\r\n          case 23:\r\n            return 23;\r\n            break;\r\n          case 24:\r\n            return 25;\r\n            break;\r\n          case 25:\r\n            return 26;\r\n            break;\r\n          case 26:\r\n            return 27;\r\n            break;\r\n          case 27:\r\n            return 30;\r\n            break;\r\n          case 28:\r\n            return 34;\r\n            break;\r\n          case 29:\r\n            return 33;\r\n            break;\r\n          case 30:\r\n            return 65;\r\n            break;\r\n          case 31:\r\n            return 66;\r\n            break;\r\n          case 32:\r\n            return 37;\r\n            break;\r\n          case 33:\r\n            return 41;\r\n            break;\r\n          case 34:\r\n            return 43;\r\n            break;\r\n          case 35:\r\n            return 52;\r\n            break;\r\n          case 36:\r\n            return 54;\r\n            break;\r\n          case 37:\r\n            return 55;\r\n            break;\r\n          case 38:\r\n            return 46;\r\n            break;\r\n          case 39:\r\n            return 48;\r\n            break;\r\n          case 40:\r\n            return 45;\r\n            break;\r\n          case 41:\r\n            return 49;\r\n            break;\r\n          case 42:\r\n            return 56;\r\n            break;\r\n          case 43:\r\n            return 58;\r\n            break;\r\n          case 44:\r\n            return 44;\r\n            break;\r\n          case 45:\r\n            return 83;\r\n            break;\r\n          case 46:\r\n            return 84;\r\n            break;\r\n          case 47:\r\n            return 85;\r\n            break;\r\n          case 48:\r\n            return 86;\r\n            break;\r\n          case 49:\r\n            return 87;\r\n            break;\r\n          case 50:\r\n            return 88;\r\n            break;\r\n          case 51:\r\n            return 89;\r\n            break;\r\n          case 52:\r\n            return 90;\r\n            break;\r\n          case 53:\r\n            return 91;\r\n            break;\r\n          case 54:\r\n            return 92;\r\n            break;\r\n          case 55:\r\n            return 93;\r\n            break;\r\n          case 56:\r\n            return 94;\r\n            break;\r\n          case 57:\r\n            return 95;\r\n            break;\r\n          case 58:\r\n            return 70;\r\n            break;\r\n          case 59:\r\n            return 70;\r\n            break;\r\n          case 60:\r\n            return 72;\r\n            break;\r\n          case 61:\r\n            return 72;\r\n            break;\r\n          case 62:\r\n            return 74;\r\n            break;\r\n          case 63:\r\n            return 74;\r\n            break;\r\n          case 64:\r\n            return 74;\r\n            break;\r\n          case 65:\r\n            return 31;\r\n            break;\r\n          case 66:\r\n            return 36;\r\n            break;\r\n          case 67:\r\n            return 96;\r\n            break;\r\n          case 68:\r\n            return 97;\r\n            break;\r\n          case 69:\r\n            return 98;\r\n            break;\r\n          case 70:\r\n            return 99;\r\n            break;\r\n          case 71:\r\n            yy_.yytext = yy.utils.unquoteString(yy_.yytext);\r\n            return 14;\r\n            break;\r\n          case 72:\r\n            return 38;\r\n            break;\r\n          case 73:\r\n            return 5;\r\n            break;\r\n          case 74:\r\n            return 101;\r\n            break;\r\n          case 75:\r\n            return 103;\r\n            break;\r\n          case 76:\r\n            return '\\\\';\r\n            break;\r\n          case 77:\r\n            return 28;\r\n            break;\r\n          case 78:\r\n            return 61;\r\n            break;\r\n          case 79:\r\n            return 29;\r\n            break;\r\n          case 80:\r\n            return 57;\r\n            break;\r\n          case 81:\r\n            return 71;\r\n            break;\r\n        }\r\n      },\r\n      rules: [/^(?:\\s+)/i, /^(?:[#].*)/i, /^(?:\\/\\/.*)/i, /^(?:([_A-Z0-9\\/\\+]+==))/i, /^(?:-?[0-9]+(\\.[0-9]+)?\\b)/i, /^(?:0[xX][0-9A-F]+\\b)/i, /^(?:false\\b)/i, /^(?:true\\b)/i, /^(?:all\\b)/i, /^(?:reset\\b)/i, /^(?:clear\\b)/i, /^(?:build\\b)/i, /^(?:help\\b)/i, /^(?:load\\b)/i, /^(?:get\\b)/i, /^(?:set\\b)/i, /^(?:set_save\\b)/i, /^(?:set_restore\\b)/i, /^(?:set_reset\\b)/i, /^(?:preset\\b)/i, /^(?:motm\\b)/i, /^(?:add\\b)/i, /^(?:rep\\b)/i, /^(?:remove\\b)/i, /^(?:hide\\b)/i, /^(?:show\\b)/i, /^(?:list\\b)/i, /^(?:select\\b)/i, /^(?:within\\b)/i, /^(?:selector\\b)/i, /^(?:mode\\b)/i, /^(?:color\\b)/i, /^(?:material\\b)/i, /^(?:view\\b)/i, /^(?:unit\\b)/i, /^(?:line\\b)/i, /^(?:listobj\\b)/i, /^(?:removeobj\\b)/i, /^(?:rotate\\b)/i, /^(?:translate\\b)/i, /^(?:scale\\b)/i, /^(?:center\\b)/i, /^(?:url\\b)/i, /^(?:screenshot\\b)/i, /^(?:dssp\\b)/i, /^(?:file_list\\b)/i, /^(?:file_register\\b)/i, /^(?:file_delete\\b)/i, /^(?:preset_add\\b)/i, /^(?:preset_delete\\b)/i, /^(?:preset_update\\b)/i, /^(?:preset_rename\\b)/i, /^(?:preset_open\\b)/i, /^(?:create_scenario\\b)/i, /^(?:reset_scenario\\b)/i, /^(?:delete_scenario\\b)/i, /^(?:add_scenario_item\\b)/i, /^(?:list_scenario\\b)/i, /^(?:s\\b)/i, /^(?:mt\\b)/i, /^(?:m\\b)/i, /^(?:c\\b)/i, /^(?:x\\b)/i, /^(?:y\\b)/i, /^(?:z\\b)/i, /^(?:as\\b)/i, /^(?:of\\b)/i, /^(?:pdb\\b)/i, /^(?:delay\\b)/i, /^(?:prst\\b)/i, /^(?:desc\\b)/i, /^(?:((?:\"(?:\\\\.|[^\\\\\"])*\"|'(?:\\\\.|[^\\\\'])*')))/i, /^(?:([_A-Z0-9]+))/i, /^(?:$)/i, /^(?:\\.)/i, /^(?:\\/)/i, /^(?:\\\\)/i, /^(?:-e\\b)/i, /^(?:-f\\b)/i, /^(?:-s\\b)/i, /^(?:-v\\b)/i, /^(?:=)/i],\r\n      conditions: {\r\n        \"INITIAL\": {\r\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81],\r\n          \"inclusive\": true\r\n        }\r\n      }\r\n    };\r\n    return lexer;\r\n  }();\r\n  parser.lexer = lexer;\r\n  function Parser() {\r\n    this.yy = {};\r\n  }\r\n  Parser.prototype = parser;\r\n  parser.Parser = Parser;\r\n  return new Parser();\r\n}();\r\nmodule.exports = {\r\n  parser: parser\r\n};\r\n\r\n/***/ }),\r\n\r\n/***/ 99:\r\n/***/ ((module) => {\r\n\r\n/* eslint-disable */\r\n// DO NOT EDIT! Automatically generated from .jison\r\n/* parser generated by jison 0.4.18 */\r\n/*\r\n  Returns a Parser object of the following structure:\r\n\r\n  Parser: {\r\n    yy: {}\r\n  }\r\n\r\n  Parser.prototype: {\r\n    yy: {},\r\n    trace: function(),\r\n    symbols_: {associative list: name ==> number},\r\n    terminals_: {associative list: number ==> name},\r\n    productions_: [...],\r\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\r\n    table: [...],\r\n    defaultActions: {...},\r\n    parseError: function(str, hash),\r\n    parse: function(input),\r\n\r\n    lexer: {\r\n        EOF: 1,\r\n        parseError: function(str, hash),\r\n        setInput: function(input),\r\n        input: function(),\r\n        unput: function(str),\r\n        more: function(),\r\n        less: function(n),\r\n        pastInput: function(),\r\n        upcomingInput: function(),\r\n        showPosition: function(),\r\n        test_match: function(regex_match_array, rule_index),\r\n        next: function(),\r\n        lex: function(),\r\n        begin: function(condition),\r\n        popState: function(),\r\n        _currentRules: function(),\r\n        topState: function(),\r\n        pushState: function(condition),\r\n\r\n        options: {\r\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\r\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\r\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\r\n        },\r\n\r\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\r\n        rules: [...],\r\n        conditions: {associative list: name ==> set},\r\n    }\r\n  }\r\n\r\n\r\n  token location info (@$, _$, etc.): {\r\n    first_line: n,\r\n    last_line: n,\r\n    first_column: n,\r\n    last_column: n,\r\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\r\n  }\r\n\r\n\r\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\r\n    text:        (matched text)\r\n    token:       (the produced terminal token, if any)\r\n    line:        (yylineno)\r\n  }\r\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\r\n    loc:         (yylloc)\r\n    expected:    (string describing the set of expected tokens)\r\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\r\n  }\r\n*/\r\nvar parser = function () {\r\n  var o = function (k, v, o, l) {\r\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\r\n      return o;\r\n    },\r\n    $V0 = [1, 4],\r\n    $V1 = [1, 5],\r\n    $V2 = [1, 6],\r\n    $V3 = [1, 7],\r\n    $V4 = [1, 8],\r\n    $V5 = [1, 9],\r\n    $V6 = [1, 11],\r\n    $V7 = [1, 12],\r\n    $V8 = [5, 7, 8, 11],\r\n    $V9 = [1, 17],\r\n    $Va = [1, 22],\r\n    $Vb = [1, 20],\r\n    $Vc = [1, 21],\r\n    $Vd = [5, 7, 8, 11, 19];\r\n  var parser = {\r\n    trace: function trace() {},\r\n    yy: {},\r\n    symbols_: {\r\n      \"error\": 2,\r\n      \"Program\": 3,\r\n      \"Expression\": 4,\r\n      \"EOF\": 5,\r\n      \"Selector\": 6,\r\n      \"OR\": 7,\r\n      \"AND\": 8,\r\n      \"NOT\": 9,\r\n      \"(\": 10,\r\n      \")\": 11,\r\n      \"SELECTOR\": 12,\r\n      \"NAMED_SELECTOR\": 13,\r\n      \"SELECTOR_RANGED\": 14,\r\n      \"RangeList\": 15,\r\n      \"SELECTOR_NAMED\": 16,\r\n      \"NameList\": 17,\r\n      \"Range\": 18,\r\n      \",\": 19,\r\n      \"NUMBER\": 20,\r\n      \":\": 21,\r\n      \"Name\": 22,\r\n      \"IDENTIFIER\": 23,\r\n      \"STRING\": 24,\r\n      \"$accept\": 0,\r\n      \"$end\": 1\r\n    },\r\n    terminals_: {\r\n      2: \"error\",\r\n      5: \"EOF\",\r\n      7: \"OR\",\r\n      8: \"AND\",\r\n      9: \"NOT\",\r\n      10: \"(\",\r\n      11: \")\",\r\n      12: \"SELECTOR\",\r\n      13: \"NAMED_SELECTOR\",\r\n      14: \"SELECTOR_RANGED\",\r\n      16: \"SELECTOR_NAMED\",\r\n      19: \",\",\r\n      20: \"NUMBER\",\r\n      21: \":\",\r\n      23: \"IDENTIFIER\",\r\n      24: \"STRING\"\r\n    },\r\n    productions_: [0, [3, 2], [4, 1], [4, 3], [4, 3], [4, 2], [4, 3], [6, 1], [6, 1], [6, 2], [6, 2], [15, 1], [15, 3], [18, 1], [18, 3], [17, 1], [17, 3], [22, 1], [22, 1], [22, 1]],\r\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\r\n      /* this == yyval */\r\n\r\n      var $0 = $$.length - 1;\r\n      switch (yystate) {\r\n        case 1:\r\n          return $$[$0 - 1];\r\n          break;\r\n        case 3:\r\n          this.$ = yy.keyword('or')($$[$0 - 2], $$[$0]);\r\n          break;\r\n        case 4:\r\n          this.$ = yy.keyword('and')($$[$0 - 2], $$[$0]);\r\n          break;\r\n        case 5:\r\n          this.$ = yy.keyword('not')($$[$0]);\r\n          break;\r\n        case 6:\r\n          this.$ = $$[$0 - 1];\r\n          break;\r\n        case 7:\r\n          this.$ = yy.keyword($$[$0])();\r\n          break;\r\n        case 8:\r\n          this.$ = yy.GetSelector($$[$0].toLowerCase().slice(1, $$[$0].length));\r\n          break;\r\n        case 9:\r\n        case 10:\r\n          this.$ = yy.keyword($$[$0 - 1])($$[$0]);\r\n          break;\r\n        case 11:\r\n          this.$ = new yy.RangeList($$[$0]);\r\n          break;\r\n        case 12:\r\n        case 16:\r\n          this.$ = $$[$0 - 2].append($$[$0]);\r\n          break;\r\n        case 13:\r\n          this.$ = new yy.Range(Number($$[$0]));\r\n          break;\r\n        case 14:\r\n          this.$ = new yy.Range(Number($$[$0 - 2]), Number($$[$0]));\r\n          break;\r\n        case 15:\r\n          this.$ = new yy.ValueList($$[$0]);\r\n          break;\r\n      }\r\n    },\r\n    table: [{\r\n      3: 1,\r\n      4: 2,\r\n      6: 3,\r\n      9: $V0,\r\n      10: $V1,\r\n      12: $V2,\r\n      13: $V3,\r\n      14: $V4,\r\n      16: $V5\r\n    }, {\r\n      1: [3]\r\n    }, {\r\n      5: [1, 10],\r\n      7: $V6,\r\n      8: $V7\r\n    }, o($V8, [2, 2]), {\r\n      4: 13,\r\n      6: 3,\r\n      9: $V0,\r\n      10: $V1,\r\n      12: $V2,\r\n      13: $V3,\r\n      14: $V4,\r\n      16: $V5\r\n    }, {\r\n      4: 14,\r\n      6: 3,\r\n      9: $V0,\r\n      10: $V1,\r\n      12: $V2,\r\n      13: $V3,\r\n      14: $V4,\r\n      16: $V5\r\n    }, o($V8, [2, 7]), o($V8, [2, 8]), {\r\n      15: 15,\r\n      18: 16,\r\n      20: $V9\r\n    }, {\r\n      17: 18,\r\n      20: $Va,\r\n      22: 19,\r\n      23: $Vb,\r\n      24: $Vc\r\n    }, {\r\n      1: [2, 1]\r\n    }, {\r\n      4: 23,\r\n      6: 3,\r\n      9: $V0,\r\n      10: $V1,\r\n      12: $V2,\r\n      13: $V3,\r\n      14: $V4,\r\n      16: $V5\r\n    }, {\r\n      4: 24,\r\n      6: 3,\r\n      9: $V0,\r\n      10: $V1,\r\n      12: $V2,\r\n      13: $V3,\r\n      14: $V4,\r\n      16: $V5\r\n    }, o($V8, [2, 5]), {\r\n      7: $V6,\r\n      8: $V7,\r\n      11: [1, 25]\r\n    }, o($V8, [2, 9], {\r\n      19: [1, 26]\r\n    }), o($Vd, [2, 11]), o($Vd, [2, 13], {\r\n      21: [1, 27]\r\n    }), o($V8, [2, 10], {\r\n      19: [1, 28]\r\n    }), o($Vd, [2, 15]), o($Vd, [2, 17]), o($Vd, [2, 18]), o($Vd, [2, 19]), o([5, 7, 11], [2, 3], {\r\n      8: $V7\r\n    }), o($V8, [2, 4]), o($V8, [2, 6]), {\r\n      18: 29,\r\n      20: $V9\r\n    }, {\r\n      20: [1, 30]\r\n    }, {\r\n      20: $Va,\r\n      22: 31,\r\n      23: $Vb,\r\n      24: $Vc\r\n    }, o($Vd, [2, 12]), o($Vd, [2, 14]), o($Vd, [2, 16])],\r\n    defaultActions: {\r\n      10: [2, 1]\r\n    },\r\n    parseError: function parseError(str, hash) {\r\n      if (hash.recoverable) {\r\n        this.trace(str);\r\n      } else {\r\n        var error = new Error(str);\r\n        error.hash = hash;\r\n        throw error;\r\n      }\r\n    },\r\n    parse: function parse(input) {\r\n      var self = this,\r\n        stack = [0],\r\n        tstack = [],\r\n        vstack = [null],\r\n        lstack = [],\r\n        table = this.table,\r\n        yytext = '',\r\n        yylineno = 0,\r\n        yyleng = 0,\r\n        recovering = 0,\r\n        TERROR = 2,\r\n        EOF = 1;\r\n      var args = lstack.slice.call(arguments, 1);\r\n      var lexer = Object.create(this.lexer);\r\n      var sharedState = {\r\n        yy: {}\r\n      };\r\n      for (var k in this.yy) {\r\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\r\n          sharedState.yy[k] = this.yy[k];\r\n        }\r\n      }\r\n      lexer.setInput(input, sharedState.yy);\r\n      sharedState.yy.lexer = lexer;\r\n      sharedState.yy.parser = this;\r\n      if (typeof lexer.yylloc == 'undefined') {\r\n        lexer.yylloc = {};\r\n      }\r\n      var yyloc = lexer.yylloc;\r\n      lstack.push(yyloc);\r\n      var ranges = lexer.options && lexer.options.ranges;\r\n      if (typeof sharedState.yy.parseError === 'function') {\r\n        this.parseError = sharedState.yy.parseError;\r\n      } else {\r\n        this.parseError = Object.getPrototypeOf(this).parseError;\r\n      }\r\n      function popStack(n) {\r\n        stack.length = stack.length - 2 * n;\r\n        vstack.length = vstack.length - n;\r\n        lstack.length = lstack.length - n;\r\n      }\r\n      function lex() {\r\n        var token;\r\n        token = tstack.pop() || lexer.lex() || EOF;\r\n        if (typeof token !== 'number') {\r\n          if (token instanceof Array) {\r\n            tstack = token;\r\n            token = tstack.pop();\r\n          }\r\n          token = self.symbols_[token] || token;\r\n        }\r\n        return token;\r\n      }\r\n      var symbol,\r\n        preErrorSymbol,\r\n        state,\r\n        action,\r\n        a,\r\n        r,\r\n        yyval = {},\r\n        p,\r\n        len,\r\n        newState,\r\n        expected;\r\n      while (true) {\r\n        state = stack[stack.length - 1];\r\n        if (this.defaultActions[state]) {\r\n          action = this.defaultActions[state];\r\n        } else {\r\n          if (symbol === null || typeof symbol == 'undefined') {\r\n            symbol = lex();\r\n          }\r\n          action = table[state] && table[state][symbol];\r\n        }\r\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\r\n          var errStr = '';\r\n          expected = [];\r\n          for (p in table[state]) {\r\n            if (this.terminals_[p] && p > TERROR) {\r\n              expected.push('\\'' + this.terminals_[p] + '\\'');\r\n            }\r\n          }\r\n          if (lexer.showPosition) {\r\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\r\n          } else {\r\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\r\n          }\r\n          this.parseError(errStr, {\r\n            text: lexer.match,\r\n            token: this.terminals_[symbol] || symbol,\r\n            line: lexer.yylineno,\r\n            loc: yyloc,\r\n            expected: expected\r\n          });\r\n        }\r\n        if (action[0] instanceof Array && action.length > 1) {\r\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\r\n        }\r\n        switch (action[0]) {\r\n          case 1:\r\n            stack.push(symbol);\r\n            vstack.push(lexer.yytext);\r\n            lstack.push(lexer.yylloc);\r\n            stack.push(action[1]);\r\n            symbol = null;\r\n            if (!preErrorSymbol) {\r\n              yyleng = lexer.yyleng;\r\n              yytext = lexer.yytext;\r\n              yylineno = lexer.yylineno;\r\n              yyloc = lexer.yylloc;\r\n              if (recovering > 0) {\r\n                recovering--;\r\n              }\r\n            } else {\r\n              symbol = preErrorSymbol;\r\n              preErrorSymbol = null;\r\n            }\r\n            break;\r\n          case 2:\r\n            len = this.productions_[action[1]][1];\r\n            yyval.$ = vstack[vstack.length - len];\r\n            yyval._$ = {\r\n              first_line: lstack[lstack.length - (len || 1)].first_line,\r\n              last_line: lstack[lstack.length - 1].last_line,\r\n              first_column: lstack[lstack.length - (len || 1)].first_column,\r\n              last_column: lstack[lstack.length - 1].last_column\r\n            };\r\n            if (ranges) {\r\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\r\n            }\r\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\r\n            if (typeof r !== 'undefined') {\r\n              return r;\r\n            }\r\n            if (len) {\r\n              stack = stack.slice(0, -1 * len * 2);\r\n              vstack = vstack.slice(0, -1 * len);\r\n              lstack = lstack.slice(0, -1 * len);\r\n            }\r\n            stack.push(this.productions_[action[1]][0]);\r\n            vstack.push(yyval.$);\r\n            lstack.push(yyval._$);\r\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\r\n            stack.push(newState);\r\n            break;\r\n          case 3:\r\n            return true;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  };\r\n\r\n  /* generated by jison-lex 0.3.4 */\r\n  var lexer = function () {\r\n    var lexer = {\r\n      EOF: 1,\r\n      parseError: function parseError(str, hash) {\r\n        if (this.yy.parser) {\r\n          this.yy.parser.parseError(str, hash);\r\n        } else {\r\n          throw new Error(str);\r\n        }\r\n      },\r\n      // resets the lexer, sets new input\r\n      setInput: function (input, yy) {\r\n        this.yy = yy || this.yy || {};\r\n        this._input = input;\r\n        this._more = this._backtrack = this.done = false;\r\n        this.yylineno = this.yyleng = 0;\r\n        this.yytext = this.matched = this.match = '';\r\n        this.conditionStack = ['INITIAL'];\r\n        this.yylloc = {\r\n          first_line: 1,\r\n          first_column: 0,\r\n          last_line: 1,\r\n          last_column: 0\r\n        };\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [0, 0];\r\n        }\r\n        this.offset = 0;\r\n        return this;\r\n      },\r\n      // consumes and returns one char from the input\r\n      input: function () {\r\n        var ch = this._input[0];\r\n        this.yytext += ch;\r\n        this.yyleng++;\r\n        this.offset++;\r\n        this.match += ch;\r\n        this.matched += ch;\r\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n          this.yylineno++;\r\n          this.yylloc.last_line++;\r\n        } else {\r\n          this.yylloc.last_column++;\r\n        }\r\n        if (this.options.ranges) {\r\n          this.yylloc.range[1]++;\r\n        }\r\n        this._input = this._input.slice(1);\r\n        return ch;\r\n      },\r\n      // unshifts one char (or a string) into the input\r\n      unput: function (ch) {\r\n        var len = ch.length;\r\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\r\n        this._input = ch + this._input;\r\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\r\n        //this.yyleng -= len;\r\n        this.offset -= len;\r\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\r\n        this.match = this.match.substr(0, this.match.length - 1);\r\n        this.matched = this.matched.substr(0, this.matched.length - 1);\r\n        if (lines.length - 1) {\r\n          this.yylineno -= lines.length - 1;\r\n        }\r\n        var r = this.yylloc.range;\r\n        this.yylloc = {\r\n          first_line: this.yylloc.first_line,\r\n          last_line: this.yylineno + 1,\r\n          first_column: this.yylloc.first_column,\r\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\r\n        };\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\r\n        }\r\n        this.yyleng = this.yytext.length;\r\n        return this;\r\n      },\r\n      // When called from action, caches matched text and appends it on next action\r\n      more: function () {\r\n        this._more = true;\r\n        return this;\r\n      },\r\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\r\n      reject: function () {\r\n        if (this.options.backtrack_lexer) {\r\n          this._backtrack = true;\r\n        } else {\r\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\r\n            text: \"\",\r\n            token: null,\r\n            line: this.yylineno\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      // retain first n characters of the match\r\n      less: function (n) {\r\n        this.unput(this.match.slice(n));\r\n      },\r\n      // displays already matched input, i.e. for error messages\r\n      pastInput: function () {\r\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\r\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\r\n      },\r\n      // displays upcoming input, i.e. for error messages\r\n      upcomingInput: function () {\r\n        var next = this.match;\r\n        if (next.length < 20) {\r\n          next += this._input.substr(0, 20 - next.length);\r\n        }\r\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\r\n      },\r\n      // displays the character position where the lexing error occurred, i.e. for error messages\r\n      showPosition: function () {\r\n        var pre = this.pastInput();\r\n        var c = new Array(pre.length + 1).join(\"-\");\r\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\r\n      },\r\n      // test the lexed token: return FALSE when not a match, otherwise return token\r\n      test_match: function (match, indexed_rule) {\r\n        var token, lines, backup;\r\n        if (this.options.backtrack_lexer) {\r\n          // save context\r\n          backup = {\r\n            yylineno: this.yylineno,\r\n            yylloc: {\r\n              first_line: this.yylloc.first_line,\r\n              last_line: this.last_line,\r\n              first_column: this.yylloc.first_column,\r\n              last_column: this.yylloc.last_column\r\n            },\r\n            yytext: this.yytext,\r\n            match: this.match,\r\n            matches: this.matches,\r\n            matched: this.matched,\r\n            yyleng: this.yyleng,\r\n            offset: this.offset,\r\n            _more: this._more,\r\n            _input: this._input,\r\n            yy: this.yy,\r\n            conditionStack: this.conditionStack.slice(0),\r\n            done: this.done\r\n          };\r\n          if (this.options.ranges) {\r\n            backup.yylloc.range = this.yylloc.range.slice(0);\r\n          }\r\n        }\r\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\r\n        if (lines) {\r\n          this.yylineno += lines.length;\r\n        }\r\n        this.yylloc = {\r\n          first_line: this.yylloc.last_line,\r\n          last_line: this.yylineno + 1,\r\n          first_column: this.yylloc.last_column,\r\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\r\n        };\r\n        this.yytext += match[0];\r\n        this.match += match[0];\r\n        this.matches = match;\r\n        this.yyleng = this.yytext.length;\r\n        if (this.options.ranges) {\r\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\r\n        }\r\n        this._more = false;\r\n        this._backtrack = false;\r\n        this._input = this._input.slice(match[0].length);\r\n        this.matched += match[0];\r\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\r\n        if (this.done && this._input) {\r\n          this.done = false;\r\n        }\r\n        if (token) {\r\n          return token;\r\n        } else if (this._backtrack) {\r\n          // recover context\r\n          for (var k in backup) {\r\n            this[k] = backup[k];\r\n          }\r\n          return false; // rule action called reject() implying the next rule should be tested instead.\r\n        }\r\n        return false;\r\n      },\r\n      // return next match in input\r\n      next: function () {\r\n        if (this.done) {\r\n          return this.EOF;\r\n        }\r\n        if (!this._input) {\r\n          this.done = true;\r\n        }\r\n        var token, match, tempMatch, index;\r\n        if (!this._more) {\r\n          this.yytext = '';\r\n          this.match = '';\r\n        }\r\n        var rules = this._currentRules();\r\n        for (var i = 0; i < rules.length; i++) {\r\n          tempMatch = this._input.match(this.rules[rules[i]]);\r\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\r\n            match = tempMatch;\r\n            index = i;\r\n            if (this.options.backtrack_lexer) {\r\n              token = this.test_match(tempMatch, rules[i]);\r\n              if (token !== false) {\r\n                return token;\r\n              } else if (this._backtrack) {\r\n                match = false;\r\n                continue; // rule action called reject() implying a rule MISmatch.\r\n              } else {\r\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n                return false;\r\n              }\r\n            } else if (!this.options.flex) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (match) {\r\n          token = this.test_match(match, rules[index]);\r\n          if (token !== false) {\r\n            return token;\r\n          }\r\n          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\r\n          return false;\r\n        }\r\n        if (this._input === \"\") {\r\n          return this.EOF;\r\n        } else {\r\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\r\n            text: \"\",\r\n            token: null,\r\n            line: this.yylineno\r\n          });\r\n        }\r\n      },\r\n      // return next match that has a token\r\n      lex: function lex() {\r\n        var r = this.next();\r\n        if (r) {\r\n          return r;\r\n        } else {\r\n          return this.lex();\r\n        }\r\n      },\r\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\r\n      begin: function begin(condition) {\r\n        this.conditionStack.push(condition);\r\n      },\r\n      // pop the previously active lexer condition state off the condition stack\r\n      popState: function popState() {\r\n        var n = this.conditionStack.length - 1;\r\n        if (n > 0) {\r\n          return this.conditionStack.pop();\r\n        } else {\r\n          return this.conditionStack[0];\r\n        }\r\n      },\r\n      // produce the lexer rule set which is active for the currently active lexer condition state\r\n      _currentRules: function _currentRules() {\r\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\r\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\r\n        } else {\r\n          return this.conditions[\"INITIAL\"].rules;\r\n        }\r\n      },\r\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\r\n      topState: function topState(n) {\r\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\r\n        if (n >= 0) {\r\n          return this.conditionStack[n];\r\n        } else {\r\n          return \"INITIAL\";\r\n        }\r\n      },\r\n      // alias for begin(condition)\r\n      pushState: function pushState(condition) {\r\n        this.begin(condition);\r\n      },\r\n      // return the number of states currently on the stack\r\n      stateStackSize: function stateStackSize() {\r\n        return this.conditionStack.length;\r\n      },\r\n      options: {\r\n        \"case-insensitive\": true\r\n      },\r\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\r\n        var YYSTATE = YY_START;\r\n        switch ($avoiding_name_collisions) {\r\n          case 0:\r\n            /* skip whitespace */\r\n            break;\r\n          case 1:\r\n            return 20;\r\n            break;\r\n          case 2:\r\n            return 7;\r\n            break;\r\n          case 3:\r\n            return 8;\r\n            break;\r\n          case 4:\r\n            return 9;\r\n            break;\r\n          case 5:\r\n            return 12;\r\n            break;\r\n          case 6:\r\n            return 16;\r\n            break;\r\n          case 7:\r\n            return 14;\r\n            break;\r\n          case 8:\r\n            return 10;\r\n            break;\r\n          case 9:\r\n            return 11;\r\n            break;\r\n          case 10:\r\n            return 19;\r\n            break;\r\n          case 11:\r\n            return 21;\r\n            break;\r\n          case 12:\r\n            return '<=';\r\n            break;\r\n          case 13:\r\n            return '>=';\r\n            break;\r\n          case 14:\r\n            return '<';\r\n            break;\r\n          case 15:\r\n            return '>';\r\n            break;\r\n          case 16:\r\n            yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);\r\n            return 24;\r\n            break;\r\n          case 17:\r\n            return 13;\r\n            break;\r\n          case 18:\r\n            return 23;\r\n            break;\r\n          case 19:\r\n            return 5;\r\n            break;\r\n          case 20:\r\n            return 'INVALID';\r\n            break;\r\n        }\r\n      },\r\n      rules: [/^(?:\\s+)/i, /^(?:(-?(?:[1-9][0-9]+|[0-9]))\\b)/i, /^(?:OR\\b)/i, /^(?:AND\\b)/i, /^(?:NOT\\b)/i, /^(?:((ALL|NONE|HETATM|PROTEIN|BASIC|ACIDIC|CHARGED|POLAR|NONPOLAR|AROMATIC|NUCLEIC|PURINE|PYRIMIDINE|WATER|POLARH|NONPOLARH))\\b)/i, /^(?:((NAME|ELEM|TYPE|RESIDUE|ICODE|CHAIN|ALTLOC))\\b)/i, /^(?:((SERIAL|SEQUENCE|RESIDX))\\b)/i, /^(?:\\()/i, /^(?:\\))/i, /^(?:,)/i, /^(?::)/i, /^(?:<=)/i, /^(?:>=)/i, /^(?:<)/i, /^(?:>)/i, /^(?:((?:\"(?:\\\\.|[^\\\\\"])*\"|'(?:\\\\.|[^\\\\'])*')))/i, /^(?:(@[_A-Z0-9]+))/i, /^(?:([_A-Z0-9]+))/i, /^(?:$)/i, /^(?:.)/i],\r\n      conditions: {\r\n        \"INITIAL\": {\r\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\r\n          \"inclusive\": true\r\n        }\r\n      }\r\n    };\r\n    return lexer;\r\n  }();\r\n  parser.lexer = lexer;\r\n  function Parser() {\r\n    this.yy = {};\r\n  }\r\n  Parser.prototype = parser;\r\n  parser.Parser = Parser;\r\n  return new Parser();\r\n}();\r\nmodule.exports = {\r\n  parser: parser\r\n};\r\n\r\n/***/ }),\r\n\r\n/***/ 690:\r\n/***/ (function(__unused_webpack_module, exports) {\r\n\r\n/*\r\nSmooth.js version 0.1.7\r\n\r\nTurn arrays into smooth functions.\r\n\r\nCopyright 2012 Spencer Cohen\r\nLicensed under MIT license (see \"Smooth.js MIT license.txt\")\r\n*/\r\n\r\n/*Constants (these are accessible by Smooth.WHATEVER in user space)\r\n*/\r\n\r\n(function () {\r\n  var AbstractInterpolator,\r\n    CubicInterpolator,\r\n    Enum,\r\n    LinearInterpolator,\r\n    NearestInterpolator,\r\n    PI,\r\n    SincFilterInterpolator,\r\n    Smooth,\r\n    clipClamp,\r\n    clipMirror,\r\n    clipPeriodic,\r\n    defaultConfig,\r\n    getColumn,\r\n    getType,\r\n    isValidNumber,\r\n    k,\r\n    makeLanczosWindow,\r\n    makeScaledFunction,\r\n    makeSincKernel,\r\n    normalizeScaleTo,\r\n    shallowCopy,\r\n    sin,\r\n    sinc,\r\n    v,\r\n    validateNumber,\r\n    validateVector,\r\n    __hasProp = Object.prototype.hasOwnProperty,\r\n    __extends = function (child, parent) {\r\n      for (var key in parent) {\r\n        if (__hasProp.call(parent, key)) child[key] = parent[key];\r\n      }\r\n      function ctor() {\r\n        this.constructor = child;\r\n      }\r\n      ctor.prototype = parent.prototype;\r\n      child.prototype = new ctor();\r\n      child.__super__ = parent.prototype;\r\n      return child;\r\n    };\r\n  Enum = {\r\n    /*Interpolation methods\r\n    */\r\n    METHOD_NEAREST: 'nearest',\r\n    METHOD_LINEAR: 'linear',\r\n    METHOD_CUBIC: 'cubic',\r\n    METHOD_LANCZOS: 'lanczos',\r\n    METHOD_SINC: 'sinc',\r\n    /*Input clipping modes\r\n    */\r\n    CLIP_CLAMP: 'clamp',\r\n    CLIP_ZERO: 'zero',\r\n    CLIP_PERIODIC: 'periodic',\r\n    CLIP_MIRROR: 'mirror',\r\n    /* Constants for control over the cubic interpolation tension\r\n    */\r\n    CUBIC_TENSION_DEFAULT: 0,\r\n    CUBIC_TENSION_CATMULL_ROM: 0\r\n  };\r\n  defaultConfig = {\r\n    method: Enum.METHOD_CUBIC,\r\n    cubicTension: Enum.CUBIC_TENSION_DEFAULT,\r\n    clip: Enum.CLIP_CLAMP,\r\n    scaleTo: 0,\r\n    sincFilterSize: 2,\r\n    sincWindow: void 0\r\n  };\r\n\r\n  /*Index clipping functions\r\n  */\r\n\r\n  clipClamp = function (i, n) {\r\n    return Math.max(0, Math.min(i, n - 1));\r\n  };\r\n  clipPeriodic = function (i, n) {\r\n    i = i % n;\r\n    if (i < 0) i += n;\r\n    return i;\r\n  };\r\n  clipMirror = function (i, n) {\r\n    var period;\r\n    period = 2 * (n - 1);\r\n    i = clipPeriodic(i, period);\r\n    if (i > n - 1) i = period - i;\r\n    return i;\r\n  };\r\n\r\n  /*\r\n  Abstract scalar interpolation class which provides common functionality for all interpolators\r\n  \r\n  Subclasses must override interpolate().\r\n  */\r\n\r\n  AbstractInterpolator = function () {\r\n    function AbstractInterpolator(array, config) {\r\n      this.array = array.slice(0);\r\n      this.length = this.array.length;\r\n      if (!(this.clipHelper = {\r\n        clamp: this.clipHelperClamp,\r\n        zero: this.clipHelperZero,\r\n        periodic: this.clipHelperPeriodic,\r\n        mirror: this.clipHelperMirror\r\n      }[config.clip])) {\r\n        throw \"Invalid clip: \" + config.clip;\r\n      }\r\n    }\r\n    AbstractInterpolator.prototype.getClippedInput = function (i) {\r\n      if (0 <= i && i < this.length) {\r\n        return this.array[i];\r\n      } else {\r\n        return this.clipHelper(i);\r\n      }\r\n    };\r\n    AbstractInterpolator.prototype.clipHelperClamp = function (i) {\r\n      return this.array[clipClamp(i, this.length)];\r\n    };\r\n    AbstractInterpolator.prototype.clipHelperZero = function (i) {\r\n      return 0;\r\n    };\r\n    AbstractInterpolator.prototype.clipHelperPeriodic = function (i) {\r\n      return this.array[clipPeriodic(i, this.length)];\r\n    };\r\n    AbstractInterpolator.prototype.clipHelperMirror = function (i) {\r\n      return this.array[clipMirror(i, this.length)];\r\n    };\r\n    AbstractInterpolator.prototype.interpolate = function (t) {\r\n      throw 'Subclasses of AbstractInterpolator must override the interpolate() method.';\r\n    };\r\n    return AbstractInterpolator;\r\n  }();\r\n  NearestInterpolator = function (_super) {\r\n    __extends(NearestInterpolator, _super);\r\n    function NearestInterpolator() {\r\n      NearestInterpolator.__super__.constructor.apply(this, arguments);\r\n    }\r\n    NearestInterpolator.prototype.interpolate = function (t) {\r\n      return this.getClippedInput(Math.round(t));\r\n    };\r\n    return NearestInterpolator;\r\n  }(AbstractInterpolator);\r\n  LinearInterpolator = function (_super) {\r\n    __extends(LinearInterpolator, _super);\r\n    function LinearInterpolator() {\r\n      LinearInterpolator.__super__.constructor.apply(this, arguments);\r\n    }\r\n    LinearInterpolator.prototype.interpolate = function (t) {\r\n      var k;\r\n      k = Math.floor(t);\r\n      t -= k;\r\n      return (1 - t) * this.getClippedInput(k) + t * this.getClippedInput(k + 1);\r\n    };\r\n    return LinearInterpolator;\r\n  }(AbstractInterpolator);\r\n  CubicInterpolator = function (_super) {\r\n    __extends(CubicInterpolator, _super);\r\n    function CubicInterpolator(array, config) {\r\n      this.tangentFactor = 1 - Math.max(-1, Math.min(1, config.cubicTension));\r\n      CubicInterpolator.__super__.constructor.apply(this, arguments);\r\n    }\r\n    CubicInterpolator.prototype.getTangent = function (k) {\r\n      return this.tangentFactor * (this.getClippedInput(k + 1) - this.getClippedInput(k - 1)) / 2;\r\n    };\r\n    CubicInterpolator.prototype.interpolate = function (t) {\r\n      var k, m, p, t2, t3;\r\n      k = Math.floor(t);\r\n      m = [this.getTangent(k), this.getTangent(k + 1)];\r\n      p = [this.getClippedInput(k), this.getClippedInput(k + 1)];\r\n      t -= k;\r\n      t2 = t * t;\r\n      t3 = t * t2;\r\n      return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];\r\n    };\r\n    return CubicInterpolator;\r\n  }(AbstractInterpolator);\r\n  sin = Math.sin, PI = Math.PI;\r\n  sinc = function (x) {\r\n    if (x === 0) {\r\n      return 1;\r\n    } else {\r\n      return sin(PI * x) / (PI * x);\r\n    }\r\n  };\r\n  makeLanczosWindow = function (a) {\r\n    return function (x) {\r\n      return sinc(x / a);\r\n    };\r\n  };\r\n  makeSincKernel = function (window) {\r\n    return function (x) {\r\n      return sinc(x) * window(x);\r\n    };\r\n  };\r\n  SincFilterInterpolator = function (_super) {\r\n    __extends(SincFilterInterpolator, _super);\r\n    function SincFilterInterpolator(array, config) {\r\n      SincFilterInterpolator.__super__.constructor.apply(this, arguments);\r\n      this.a = config.sincFilterSize;\r\n      if (!config.sincWindow) throw 'No sincWindow provided';\r\n      this.kernel = makeSincKernel(config.sincWindow);\r\n    }\r\n    SincFilterInterpolator.prototype.interpolate = function (t) {\r\n      var k, n, sum, _ref, _ref2;\r\n      k = Math.floor(t);\r\n      sum = 0;\r\n      for (n = _ref = k - this.a + 1, _ref2 = k + this.a; _ref <= _ref2 ? n <= _ref2 : n >= _ref2; _ref <= _ref2 ? n++ : n--) {\r\n        sum += this.kernel(t - n) * this.getClippedInput(n);\r\n      }\r\n      return sum;\r\n    };\r\n    return SincFilterInterpolator;\r\n  }(AbstractInterpolator);\r\n  getColumn = function (arr, i) {\r\n    var row, _i, _len, _results;\r\n    _results = [];\r\n    for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n      row = arr[_i];\r\n      _results.push(row[i]);\r\n    }\r\n    return _results;\r\n  };\r\n  makeScaledFunction = function (f, baseScale, scaleRange) {\r\n    var scaleFactor, translation;\r\n    if (scaleRange.join === '0,1') {\r\n      return f;\r\n    } else {\r\n      scaleFactor = baseScale / (scaleRange[1] - scaleRange[0]);\r\n      translation = scaleRange[0];\r\n      return function (t) {\r\n        return f(scaleFactor * (t - translation));\r\n      };\r\n    }\r\n  };\r\n  getType = function (x) {\r\n    return Object.prototype.toString.call(x).slice('[object '.length, -1);\r\n  };\r\n  validateNumber = function (n) {\r\n    if (isNaN(n)) throw 'NaN in Smooth() input';\r\n    if (getType(n) !== 'Number') throw 'Non-number in Smooth() input';\r\n    if (!isFinite(n)) throw 'Infinity in Smooth() input';\r\n  };\r\n  validateVector = function (v, dimension) {\r\n    var n, _i, _len;\r\n    if (getType(v) !== 'Array') throw 'Non-vector in Smooth() input';\r\n    if (v.length !== dimension) throw 'Inconsistent dimension in Smooth() input';\r\n    for (_i = 0, _len = v.length; _i < _len; _i++) {\r\n      n = v[_i];\r\n      validateNumber(n);\r\n    }\r\n  };\r\n  isValidNumber = function (n) {\r\n    return getType(n) === 'Number' && isFinite(n) && !isNaN(n);\r\n  };\r\n  normalizeScaleTo = function (s) {\r\n    var invalidErr;\r\n    invalidErr = \"scaleTo param must be number or array of two numbers\";\r\n    switch (getType(s)) {\r\n      case 'Number':\r\n        if (!isValidNumber(s)) throw invalidErr;\r\n        s = [0, s];\r\n        break;\r\n      case 'Array':\r\n        if (s.length !== 2) throw invalidErr;\r\n        if (!(isValidNumber(s[0]) && isValidNumber(s[1]))) throw invalidErr;\r\n        break;\r\n      default:\r\n        throw invalidErr;\r\n    }\r\n    return s;\r\n  };\r\n  shallowCopy = function (obj) {\r\n    var copy, k, v;\r\n    copy = {};\r\n    for (k in obj) {\r\n      if (!__hasProp.call(obj, k)) continue;\r\n      v = obj[k];\r\n      copy[k] = v;\r\n    }\r\n    return copy;\r\n  };\r\n  Smooth = function (arr, config) {\r\n    var baseDomainEnd, dimension, i, interpolator, interpolatorClass, interpolators, k, n, properties, smoothFunc, v;\r\n    if (config == null) config = {};\r\n    properties = {};\r\n    config = shallowCopy(config);\r\n    properties.config = shallowCopy(config);\r\n    if (config.scaleTo == null) config.scaleTo = config.period;\r\n    if (config.sincFilterSize == null) {\r\n      config.sincFilterSize = config.lanczosFilterSize;\r\n    }\r\n    for (k in defaultConfig) {\r\n      if (!__hasProp.call(defaultConfig, k)) continue;\r\n      v = defaultConfig[k];\r\n      if (config[k] == null) config[k] = v;\r\n    }\r\n    if (!(interpolatorClass = {\r\n      nearest: NearestInterpolator,\r\n      linear: LinearInterpolator,\r\n      cubic: CubicInterpolator,\r\n      lanczos: SincFilterInterpolator,\r\n      sinc: SincFilterInterpolator\r\n    }[config.method])) {\r\n      throw \"Invalid method: \" + config.method;\r\n    }\r\n    if (config.method === 'lanczos') {\r\n      config.sincWindow = makeLanczosWindow(config.sincFilterSize);\r\n    }\r\n    if (arr.length < 2) throw 'Array must have at least two elements';\r\n    properties.count = arr.length;\r\n    smoothFunc = function () {\r\n      var _i, _j, _len, _len2;\r\n      switch (getType(arr[0])) {\r\n        case 'Number':\r\n          properties.dimension = 'scalar';\r\n          if (Smooth.deepValidation) {\r\n            for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n              n = arr[_i];\r\n              validateNumber(n);\r\n            }\r\n          }\r\n          interpolator = new interpolatorClass(arr, config);\r\n          return function (t) {\r\n            return interpolator.interpolate(t);\r\n          };\r\n        case 'Array':\r\n          properties.dimension = dimension = arr[0].length;\r\n          if (!dimension) throw 'Vectors must be non-empty';\r\n          if (Smooth.deepValidation) {\r\n            for (_j = 0, _len2 = arr.length; _j < _len2; _j++) {\r\n              v = arr[_j];\r\n              validateVector(v, dimension);\r\n            }\r\n          }\r\n          interpolators = function () {\r\n            var _results;\r\n            _results = [];\r\n            for (i = 0; 0 <= dimension ? i < dimension : i > dimension; 0 <= dimension ? i++ : i--) {\r\n              _results.push(new interpolatorClass(getColumn(arr, i), config));\r\n            }\r\n            return _results;\r\n          }();\r\n          return function (t) {\r\n            var interpolator, _k, _len3, _results;\r\n            _results = [];\r\n            for (_k = 0, _len3 = interpolators.length; _k < _len3; _k++) {\r\n              interpolator = interpolators[_k];\r\n              _results.push(interpolator.interpolate(t));\r\n            }\r\n            return _results;\r\n          };\r\n        default:\r\n          throw \"Invalid element type: \" + getType(arr[0]);\r\n      }\r\n    }();\r\n    if (config.clip === 'periodic') {\r\n      baseDomainEnd = arr.length;\r\n    } else {\r\n      baseDomainEnd = arr.length - 1;\r\n    }\r\n    config.scaleTo || (config.scaleTo = baseDomainEnd);\r\n    properties.domain = normalizeScaleTo(config.scaleTo);\r\n    smoothFunc = makeScaledFunction(smoothFunc, baseDomainEnd, properties.domain);\r\n    properties.domain.sort();\r\n    /*copy properties\r\n    */\r\n    for (k in properties) {\r\n      if (!__hasProp.call(properties, k)) continue;\r\n      v = properties[k];\r\n      smoothFunc[k] = v;\r\n    }\r\n    return smoothFunc;\r\n  };\r\n  for (k in Enum) {\r\n    if (!__hasProp.call(Enum, k)) continue;\r\n    v = Enum[k];\r\n    Smooth[k] = v;\r\n  }\r\n  Smooth.deepValidation = true;\r\n  (  true && exports !== null ? exports : window).Smooth = Smooth;\r\n}).call(this);\r\n\r\n/***/ }),\r\n\r\n/***/ 660:\r\n/***/ (function(module, exports) {\r\n\r\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function (r, t) {\r\n  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\r\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\r\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\r\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\r\n}(this, function (r) {\r\n  \"use strict\";\r\n\r\n  function t(r, t, n) {\r\n    for (var e = (r.byteLength, 0), i = n.length; i > e; e++) {\r\n      var o = n.charCodeAt(e);\r\n      if (128 > o) r.setUint8(t++, o >>> 0 & 127 | 0);else if (2048 > o) r.setUint8(t++, o >>> 6 & 31 | 192), r.setUint8(t++, o >>> 0 & 63 | 128);else if (65536 > o) r.setUint8(t++, o >>> 12 & 15 | 224), r.setUint8(t++, o >>> 6 & 63 | 128), r.setUint8(t++, o >>> 0 & 63 | 128);else {\r\n        if (!(1114112 > o)) throw new Error(\"bad codepoint \" + o);\r\n        r.setUint8(t++, o >>> 18 & 7 | 240), r.setUint8(t++, o >>> 12 & 63 | 128), r.setUint8(t++, o >>> 6 & 63 | 128), r.setUint8(t++, o >>> 0 & 63 | 128);\r\n      }\r\n    }\r\n  }\r\n  function n(r) {\r\n    for (var t = 0, n = 0, e = r.length; e > n; n++) {\r\n      var i = r.charCodeAt(n);\r\n      if (128 > i) t += 1;else if (2048 > i) t += 2;else if (65536 > i) t += 3;else {\r\n        if (!(1114112 > i)) throw new Error(\"bad codepoint \" + i);\r\n        t += 4;\r\n      }\r\n    }\r\n    return t;\r\n  }\r\n  function e(r, i, o) {\r\n    var a = typeof r;\r\n    if (\"string\" === a) {\r\n      var u = n(r);\r\n      if (32 > u) return i.setUint8(o, 160 | u), t(i, o + 1, r), 1 + u;\r\n      if (256 > u) return i.setUint8(o, 217), i.setUint8(o + 1, u), t(i, o + 2, r), 2 + u;\r\n      if (65536 > u) return i.setUint8(o, 218), i.setUint16(o + 1, u), t(i, o + 3, r), 3 + u;\r\n      if (4294967296 > u) return i.setUint8(o, 219), i.setUint32(o + 1, u), t(i, o + 5, r), 5 + u;\r\n    }\r\n    if (r instanceof Uint8Array) {\r\n      var u = r.byteLength,\r\n        s = new Uint8Array(i.buffer);\r\n      if (256 > u) return i.setUint8(o, 196), i.setUint8(o + 1, u), s.set(r, o + 2), 2 + u;\r\n      if (65536 > u) return i.setUint8(o, 197), i.setUint16(o + 1, u), s.set(r, o + 3), 3 + u;\r\n      if (4294967296 > u) return i.setUint8(o, 198), i.setUint32(o + 1, u), s.set(r, o + 5), 5 + u;\r\n    }\r\n    if (\"number\" === a) {\r\n      if (!isFinite(r)) throw new Error(\"Number not finite: \" + r);\r\n      if (Math.floor(r) !== r) return i.setUint8(o, 203), i.setFloat64(o + 1, r), 9;\r\n      if (r >= 0) {\r\n        if (128 > r) return i.setUint8(o, r), 1;\r\n        if (256 > r) return i.setUint8(o, 204), i.setUint8(o + 1, r), 2;\r\n        if (65536 > r) return i.setUint8(o, 205), i.setUint16(o + 1, r), 3;\r\n        if (4294967296 > r) return i.setUint8(o, 206), i.setUint32(o + 1, r), 5;\r\n        throw new Error(\"Number too big 0x\" + r.toString(16));\r\n      }\r\n      if (r >= -32) return i.setInt8(o, r), 1;\r\n      if (r >= -128) return i.setUint8(o, 208), i.setInt8(o + 1, r), 2;\r\n      if (r >= -32768) return i.setUint8(o, 209), i.setInt16(o + 1, r), 3;\r\n      if (r >= -2147483648) return i.setUint8(o, 210), i.setInt32(o + 1, r), 5;\r\n      throw new Error(\"Number too small -0x\" + (-r).toString(16).substr(1));\r\n    }\r\n    if (null === r) return i.setUint8(o, 192), 1;\r\n    if (\"boolean\" === a) return i.setUint8(o, r ? 195 : 194), 1;\r\n    if (\"object\" === a) {\r\n      var u,\r\n        f = 0,\r\n        c = Array.isArray(r);\r\n      if (c) u = r.length;else {\r\n        var d = Object.keys(r);\r\n        u = d.length;\r\n      }\r\n      var f;\r\n      if (16 > u ? (i.setUint8(o, u | (c ? 144 : 128)), f = 1) : 65536 > u ? (i.setUint8(o, c ? 220 : 222), i.setUint16(o + 1, u), f = 3) : 4294967296 > u && (i.setUint8(o, c ? 221 : 223), i.setUint32(o + 1, u), f = 5), c) for (var l = 0; u > l; l++) f += e(r[l], i, o + f);else for (var l = 0; u > l; l++) {\r\n        var v = d[l];\r\n        f += e(v, i, o + f), f += e(r[v], i, o + f);\r\n      }\r\n      return f;\r\n    }\r\n    throw new Error(\"Unknown type \" + a);\r\n  }\r\n  function i(r) {\r\n    var t = typeof r;\r\n    if (\"string\" === t) {\r\n      var e = n(r);\r\n      if (32 > e) return 1 + e;\r\n      if (256 > e) return 2 + e;\r\n      if (65536 > e) return 3 + e;\r\n      if (4294967296 > e) return 5 + e;\r\n    }\r\n    if (r instanceof Uint8Array) {\r\n      var e = r.byteLength;\r\n      if (256 > e) return 2 + e;\r\n      if (65536 > e) return 3 + e;\r\n      if (4294967296 > e) return 5 + e;\r\n    }\r\n    if (\"number\" === t) {\r\n      if (Math.floor(r) !== r) return 9;\r\n      if (r >= 0) {\r\n        if (128 > r) return 1;\r\n        if (256 > r) return 2;\r\n        if (65536 > r) return 3;\r\n        if (4294967296 > r) return 5;\r\n        throw new Error(\"Number too big 0x\" + r.toString(16));\r\n      }\r\n      if (r >= -32) return 1;\r\n      if (r >= -128) return 2;\r\n      if (r >= -32768) return 3;\r\n      if (r >= -2147483648) return 5;\r\n      throw new Error(\"Number too small -0x\" + r.toString(16).substr(1));\r\n    }\r\n    if (\"boolean\" === t || null === r) return 1;\r\n    if (\"object\" === t) {\r\n      var e,\r\n        o = 0;\r\n      if (Array.isArray(r)) {\r\n        e = r.length;\r\n        for (var a = 0; e > a; a++) o += i(r[a]);\r\n      } else {\r\n        var u = Object.keys(r);\r\n        e = u.length;\r\n        for (var a = 0; e > a; a++) {\r\n          var s = u[a];\r\n          o += i(s) + i(r[s]);\r\n        }\r\n      }\r\n      if (16 > e) return 1 + o;\r\n      if (65536 > e) return 3 + o;\r\n      if (4294967296 > e) return 5 + o;\r\n      throw new Error(\"Array or object too long 0x\" + e.toString(16));\r\n    }\r\n    throw new Error(\"Unknown type \" + t);\r\n  }\r\n  function o(r) {\r\n    var t = new ArrayBuffer(i(r)),\r\n      n = new DataView(t);\r\n    return e(r, n, 0), new Uint8Array(t);\r\n  }\r\n  function a(r, t, n) {\r\n    return t ? new r(t.buffer, t.byteOffset, t.byteLength / (n || 1)) : void 0;\r\n  }\r\n  function u(r) {\r\n    return a(DataView, r);\r\n  }\r\n  function s(r) {\r\n    return a(Uint8Array, r);\r\n  }\r\n  function f(r) {\r\n    return a(Int8Array, r);\r\n  }\r\n  function c(r) {\r\n    return a(Int32Array, r, 4);\r\n  }\r\n  function d(r) {\r\n    return a(Float32Array, r, 4);\r\n  }\r\n  function l(r, t) {\r\n    var n = r.length / 2;\r\n    t || (t = new Int16Array(n));\r\n    for (var e = 0, i = 0; n > e; ++e, i += 2) t[e] = r[i] << 8 ^ r[i + 1] << 0;\r\n    return t;\r\n  }\r\n  function v(r, t) {\r\n    var n = r.length;\r\n    t || (t = new Uint8Array(2 * n));\r\n    for (var e = u(t), i = 0; n > i; ++i) e.setInt16(2 * i, r[i]);\r\n    return s(t);\r\n  }\r\n  function g(r, t) {\r\n    var n = r.length / 4;\r\n    t || (t = new Int32Array(n));\r\n    for (var e = 0, i = 0; n > e; ++e, i += 4) t[e] = r[i] << 24 ^ r[i + 1] << 16 ^ r[i + 2] << 8 ^ r[i + 3] << 0;\r\n    return t;\r\n  }\r\n  function L(r, t) {\r\n    var n = r.length;\r\n    t || (t = new Uint8Array(4 * n));\r\n    for (var e = u(t), i = 0; n > i; ++i) e.setInt32(4 * i, r[i]);\r\n    return s(t);\r\n  }\r\n  function h(r, t) {\r\n    var n = r.length;\r\n    t || (t = new Float32Array(n / 4));\r\n    for (var e = u(t), i = u(r), o = 0, a = 0, s = n / 4; s > o; ++o, a += 4) e.setFloat32(a, i.getFloat32(a), !0);\r\n    return t;\r\n  }\r\n  function y(r, t, n) {\r\n    var e = r.length,\r\n      i = 1 / t;\r\n    n || (n = new Float32Array(e));\r\n    for (var o = 0; e > o; ++o) n[o] = r[o] * i;\r\n    return n;\r\n  }\r\n  function m(r, t, n) {\r\n    var e = r.length;\r\n    n || (n = new Int32Array(e));\r\n    for (var i = 0; e > i; ++i) n[i] = Math.round(r[i] * t);\r\n    return n;\r\n  }\r\n  function p(r, t) {\r\n    var n, e;\r\n    if (!t) {\r\n      var i = 0;\r\n      for (n = 0, e = r.length; e > n; n += 2) i += r[n + 1];\r\n      t = new r.constructor(i);\r\n    }\r\n    var o = 0;\r\n    for (n = 0, e = r.length; e > n; n += 2) for (var a = r[n], u = r[n + 1], s = 0; u > s; ++s) t[o] = a, ++o;\r\n    return t;\r\n  }\r\n  function U(r) {\r\n    if (0 === r.length) return new Int32Array();\r\n    var t,\r\n      n,\r\n      e = 2;\r\n    for (t = 1, n = r.length; n > t; ++t) r[t - 1] !== r[t] && (e += 2);\r\n    var i = new Int32Array(e),\r\n      o = 0,\r\n      a = 1;\r\n    for (t = 1, n = r.length; n > t; ++t) r[t - 1] !== r[t] ? (i[o] = r[t - 1], i[o + 1] = a, a = 1, o += 2) : ++a;\r\n    return i[o] = r[r.length - 1], i[o + 1] = a, i;\r\n  }\r\n  function b(r, t) {\r\n    var n = r.length;\r\n    t || (t = new r.constructor(n)), n && (t[0] = r[0]);\r\n    for (var e = 1; n > e; ++e) t[e] = r[e] + t[e - 1];\r\n    return t;\r\n  }\r\n  function I(r, t) {\r\n    var n = r.length;\r\n    t || (t = new r.constructor(n)), t[0] = r[0];\r\n    for (var e = 1; n > e; ++e) t[e] = r[e] - r[e - 1];\r\n    return t;\r\n  }\r\n  function w(r, t) {\r\n    var n,\r\n      e,\r\n      i = r instanceof Int8Array ? 127 : 32767,\r\n      o = -i - 1,\r\n      a = r.length;\r\n    if (!t) {\r\n      var u = 0;\r\n      for (n = 0; a > n; ++n) r[n] < i && r[n] > o && ++u;\r\n      t = new Int32Array(u);\r\n    }\r\n    for (n = 0, e = 0; a > n;) {\r\n      for (var s = 0; r[n] === i || r[n] === o;) s += r[n], ++n;\r\n      s += r[n], ++n, t[e] = s, ++e;\r\n    }\r\n    return t;\r\n  }\r\n  function C(r, t) {\r\n    var n,\r\n      e = t ? 127 : 32767,\r\n      i = -e - 1,\r\n      o = r.length,\r\n      a = 0;\r\n    for (n = 0; o > n; ++n) {\r\n      var u = r[n];\r\n      0 === u ? ++a : a += u === e || u === i ? 2 : u > 0 ? Math.ceil(u / e) : Math.ceil(u / i);\r\n    }\r\n    var s = t ? new Int8Array(a) : new Int16Array(a),\r\n      f = 0;\r\n    for (n = 0; o > n; ++n) {\r\n      var u = r[n];\r\n      if (u >= 0) for (; u >= e;) s[f] = e, ++f, u -= e;else for (; i >= u;) s[f] = i, ++f, u -= i;\r\n      s[f] = u, ++f;\r\n    }\r\n    return s;\r\n  }\r\n  function A(r, t) {\r\n    return b(p(r), t);\r\n  }\r\n  function x(r) {\r\n    return U(I(r));\r\n  }\r\n  function M(r, t, n) {\r\n    return y(p(r, c(n)), t, n);\r\n  }\r\n  function F(r, t) {\r\n    return U(m(r, t));\r\n  }\r\n  function S(r, t, n) {\r\n    return y(b(r, c(n)), t, n);\r\n  }\r\n  function E(r, t, n) {\r\n    return I(m(r, t), n);\r\n  }\r\n  function N(r, t, n) {\r\n    return y(w(r, c(n)), t, n);\r\n  }\r\n  function O(r, t, n) {\r\n    var e = w(r, c(n));\r\n    return S(e, t, d(e));\r\n  }\r\n  function T(r, t, n) {\r\n    return C(E(r, t), n);\r\n  }\r\n  function k(r) {\r\n    var t = u(r),\r\n      n = t.getInt32(0),\r\n      e = t.getInt32(4),\r\n      i = r.subarray(8, 12),\r\n      r = r.subarray(12);\r\n    return [n, r, e, i];\r\n  }\r\n  function j(r, t, n, e) {\r\n    var i = new ArrayBuffer(12 + e.byteLength),\r\n      o = new Uint8Array(i),\r\n      a = new DataView(i);\r\n    return a.setInt32(0, r), a.setInt32(4, t), n && o.set(n, 8), o.set(e, 12), o;\r\n  }\r\n  function q(r) {\r\n    var t = r.length,\r\n      n = s(r);\r\n    return j(2, t, void 0, n);\r\n  }\r\n  function D(r) {\r\n    var t = r.length,\r\n      n = L(r);\r\n    return j(4, t, void 0, n);\r\n  }\r\n  function P(r, t) {\r\n    var n = r.length / t,\r\n      e = L([t]),\r\n      i = s(r);\r\n    return j(5, n, e, i);\r\n  }\r\n  function z(r) {\r\n    var t = r.length,\r\n      n = L(U(r));\r\n    return j(6, t, void 0, n);\r\n  }\r\n  function B(r) {\r\n    var t = r.length,\r\n      n = L(x(r));\r\n    return j(8, t, void 0, n);\r\n  }\r\n  function V(r, t) {\r\n    var n = r.length,\r\n      e = L([t]),\r\n      i = L(F(r, t));\r\n    return j(9, n, e, i);\r\n  }\r\n  function G(r, t) {\r\n    var n = r.length,\r\n      e = L([t]),\r\n      i = v(T(r, t));\r\n    return j(10, n, e, i);\r\n  }\r\n  function R(r) {\r\n    var t = {};\r\n    return rr.forEach(function (n) {\r\n      void 0 !== r[n] && (t[n] = r[n]);\r\n    }), r.bondAtomList && (t.bondAtomList = D(r.bondAtomList)), r.bondOrderList && (t.bondOrderList = q(r.bondOrderList)), t.xCoordList = G(r.xCoordList, 1e3), t.yCoordList = G(r.yCoordList, 1e3), t.zCoordList = G(r.zCoordList, 1e3), r.bFactorList && (t.bFactorList = G(r.bFactorList, 100)), r.atomIdList && (t.atomIdList = B(r.atomIdList)), r.altLocList && (t.altLocList = z(r.altLocList)), r.occupancyList && (t.occupancyList = V(r.occupancyList, 100)), t.groupIdList = B(r.groupIdList), t.groupTypeList = D(r.groupTypeList), r.secStructList && (t.secStructList = q(r.secStructList, 1)), r.insCodeList && (t.insCodeList = z(r.insCodeList)), r.sequenceIndexList && (t.sequenceIndexList = B(r.sequenceIndexList)), t.chainIdList = P(r.chainIdList, 4), r.chainNameList && (t.chainNameList = P(r.chainNameList, 4)), t;\r\n  }\r\n  function H(r) {\r\n    function t(r) {\r\n      for (var t = {}, n = 0; r > n; n++) {\r\n        var e = o();\r\n        t[e] = o();\r\n      }\r\n      return t;\r\n    }\r\n    function n(t) {\r\n      var n = r.subarray(a, a + t);\r\n      return a += t, n;\r\n    }\r\n    function e(t) {\r\n      var n = r.subarray(a, a + t);\r\n      a += t;\r\n      var e = 65535;\r\n      if (t > e) {\r\n        for (var i = [], o = 0; o < n.length; o += e) i.push(String.fromCharCode.apply(null, n.subarray(o, o + e)));\r\n        return i.join(\"\");\r\n      }\r\n      return String.fromCharCode.apply(null, n);\r\n    }\r\n    function i(r) {\r\n      for (var t = new Array(r), n = 0; r > n; n++) t[n] = o();\r\n      return t;\r\n    }\r\n    function o() {\r\n      var o,\r\n        s,\r\n        f = r[a];\r\n      if (0 === (128 & f)) return a++, f;\r\n      if (128 === (240 & f)) return s = 15 & f, a++, t(s);\r\n      if (144 === (240 & f)) return s = 15 & f, a++, i(s);\r\n      if (160 === (224 & f)) return s = 31 & f, a++, e(s);\r\n      if (224 === (224 & f)) return o = u.getInt8(a), a++, o;\r\n      switch (f) {\r\n        case 192:\r\n          return a++, null;\r\n        case 194:\r\n          return a++, !1;\r\n        case 195:\r\n          return a++, !0;\r\n        case 196:\r\n          return s = u.getUint8(a + 1), a += 2, n(s);\r\n        case 197:\r\n          return s = u.getUint16(a + 1), a += 3, n(s);\r\n        case 198:\r\n          return s = u.getUint32(a + 1), a += 5, n(s);\r\n        case 202:\r\n          return o = u.getFloat32(a + 1), a += 5, o;\r\n        case 203:\r\n          return o = u.getFloat64(a + 1), a += 9, o;\r\n        case 204:\r\n          return o = r[a + 1], a += 2, o;\r\n        case 205:\r\n          return o = u.getUint16(a + 1), a += 3, o;\r\n        case 206:\r\n          return o = u.getUint32(a + 1), a += 5, o;\r\n        case 208:\r\n          return o = u.getInt8(a + 1), a += 2, o;\r\n        case 209:\r\n          return o = u.getInt16(a + 1), a += 3, o;\r\n        case 210:\r\n          return o = u.getInt32(a + 1), a += 5, o;\r\n        case 217:\r\n          return s = u.getUint8(a + 1), a += 2, e(s);\r\n        case 218:\r\n          return s = u.getUint16(a + 1), a += 3, e(s);\r\n        case 219:\r\n          return s = u.getUint32(a + 1), a += 5, e(s);\r\n        case 220:\r\n          return s = u.getUint16(a + 1), a += 3, i(s);\r\n        case 221:\r\n          return s = u.getUint32(a + 1), a += 5, i(s);\r\n        case 222:\r\n          return s = u.getUint16(a + 1), a += 3, t(s);\r\n        case 223:\r\n          return s = u.getUint32(a + 1), a += 5, t(s);\r\n      }\r\n      throw new Error(\"Unknown type 0x\" + f.toString(16));\r\n    }\r\n    var a = 0,\r\n      u = new DataView(r.buffer);\r\n    return o();\r\n  }\r\n  function W(r, t, n, e) {\r\n    switch (r) {\r\n      case 1:\r\n        return h(t);\r\n      case 2:\r\n        return f(t);\r\n      case 3:\r\n        return l(t);\r\n      case 4:\r\n        return g(t);\r\n      case 5:\r\n        return s(t);\r\n      case 6:\r\n        return p(g(t), new Uint8Array(n));\r\n      case 7:\r\n        return p(g(t));\r\n      case 8:\r\n        return A(g(t));\r\n      case 9:\r\n        return M(g(t), g(e)[0]);\r\n      case 10:\r\n        return O(l(t), g(e)[0]);\r\n      case 11:\r\n        return y(l(t), g(e)[0]);\r\n      case 12:\r\n        return N(l(t), g(e)[0]);\r\n      case 13:\r\n        return N(f(t), g(e)[0]);\r\n      case 14:\r\n        return w(l(t));\r\n      case 15:\r\n        return w(f(t));\r\n    }\r\n  }\r\n  function X(r, t) {\r\n    t = t || {};\r\n    var n = t.ignoreFields,\r\n      e = {};\r\n    return nr.forEach(function (t) {\r\n      var i = n ? -1 !== n.indexOf(t) : !1,\r\n        o = r[t];\r\n      i || void 0 === o || (o instanceof Uint8Array ? e[t] = W.apply(null, k(o)) : e[t] = o);\r\n    }), e;\r\n  }\r\n  function J(r) {\r\n    return String.fromCharCode.apply(null, r).replace(/\\0/g, \"\");\r\n  }\r\n  function K(r, t, n) {\r\n    n = n || {};\r\n    var e,\r\n      i,\r\n      o,\r\n      a,\r\n      u,\r\n      s,\r\n      f = n.firstModelOnly,\r\n      c = t.onModel,\r\n      d = t.onChain,\r\n      l = t.onGroup,\r\n      v = t.onAtom,\r\n      g = t.onBond,\r\n      L = 0,\r\n      h = 0,\r\n      y = 0,\r\n      m = 0,\r\n      p = 0,\r\n      U = -1,\r\n      b = r.chainNameList,\r\n      I = r.secStructList,\r\n      w = r.insCodeList,\r\n      C = r.sequenceIndexList,\r\n      A = r.atomIdList,\r\n      x = r.bFactorList,\r\n      M = r.altLocList,\r\n      F = r.occupancyList,\r\n      S = r.bondAtomList,\r\n      E = r.bondOrderList;\r\n    for (e = 0, i = r.chainsPerModel.length; i > e && !(f && L > 0); ++e) {\r\n      var N = r.chainsPerModel[L];\r\n      for (c && c({\r\n        chainCount: N,\r\n        modelIndex: L\r\n      }), o = 0; N > o; ++o) {\r\n        var O = r.groupsPerChain[h];\r\n        if (d) {\r\n          var T = J(r.chainIdList.subarray(4 * h, 4 * h + 4)),\r\n            k = null;\r\n          b && (k = J(b.subarray(4 * h, 4 * h + 4))), d({\r\n            groupCount: O,\r\n            chainIndex: h,\r\n            modelIndex: L,\r\n            chainId: T,\r\n            chainName: k\r\n          });\r\n        }\r\n        for (a = 0; O > a; ++a) {\r\n          var j = r.groupList[r.groupTypeList[y]],\r\n            q = j.atomNameList.length;\r\n          if (l) {\r\n            var D = null;\r\n            I && (D = I[y]);\r\n            var P = null;\r\n            r.insCodeList && (P = String.fromCharCode(w[y]));\r\n            var z = null;\r\n            C && (z = C[y]), l({\r\n              atomCount: q,\r\n              groupIndex: y,\r\n              chainIndex: h,\r\n              modelIndex: L,\r\n              groupId: r.groupIdList[y],\r\n              groupType: r.groupTypeList[y],\r\n              groupName: j.groupName,\r\n              singleLetterCode: j.singleLetterCode,\r\n              chemCompType: j.chemCompType,\r\n              secStruct: D,\r\n              insCode: P,\r\n              sequenceIndex: z\r\n            });\r\n          }\r\n          for (u = 0; q > u; ++u) {\r\n            if (v) {\r\n              var B = null;\r\n              A && (B = A[m]);\r\n              var V = null;\r\n              x && (V = x[m]);\r\n              var G = null;\r\n              M && (G = String.fromCharCode(M[m]));\r\n              var R = null;\r\n              F && (R = F[m]), v({\r\n                atomIndex: m,\r\n                groupIndex: y,\r\n                chainIndex: h,\r\n                modelIndex: L,\r\n                atomId: B,\r\n                element: j.elementList[u],\r\n                atomName: j.atomNameList[u],\r\n                formalCharge: j.formalChargeList[u],\r\n                xCoord: r.xCoordList[m],\r\n                yCoord: r.yCoordList[m],\r\n                zCoord: r.zCoordList[m],\r\n                bFactor: V,\r\n                altLoc: G,\r\n                occupancy: R\r\n              });\r\n            }\r\n            m += 1;\r\n          }\r\n          if (g) {\r\n            var H = j.bondAtomList;\r\n            for (u = 0, s = j.bondOrderList.length; s > u; ++u) g({\r\n              atomIndex1: m - q + H[2 * u],\r\n              atomIndex2: m - q + H[2 * u + 1],\r\n              bondOrder: j.bondOrderList[u]\r\n            });\r\n          }\r\n          y += 1;\r\n        }\r\n        h += 1;\r\n      }\r\n      if (p = U + 1, U = m - 1, g && S) for (u = 0, s = S.length; s > u; u += 2) {\r\n        var W = S[u],\r\n          X = S[u + 1];\r\n        (W >= p && U >= W || X >= p && U >= X) && g({\r\n          atomIndex1: W,\r\n          atomIndex2: X,\r\n          bondOrder: E ? E[u / 2] : null\r\n        });\r\n      }\r\n      L += 1;\r\n    }\r\n  }\r\n  function Q(r) {\r\n    return o(R(r));\r\n  }\r\n  function Y(r, t) {\r\n    r instanceof ArrayBuffer && (r = new Uint8Array(r));\r\n    var n;\r\n    return n = r instanceof Uint8Array ? H(r) : r, X(n, t);\r\n  }\r\n  function Z(r, t, n, e) {\r\n    function i() {\r\n      try {\r\n        var r = Y(o.response);\r\n        n(r);\r\n      } catch (t) {\r\n        e(t);\r\n      }\r\n    }\r\n    var o = new XMLHttpRequest();\r\n    o.addEventListener(\"load\", i, !0), o.addEventListener(\"error\", e, !0), o.responseType = \"arraybuffer\", o.open(\"GET\", t + r.toUpperCase()), o.send();\r\n  }\r\n  function $(r, t, n) {\r\n    Z(r, or, t, n);\r\n  }\r\n  function _(r, t, n) {\r\n    Z(r, ar, t, n);\r\n  }\r\n  var rr = [\"mmtfVersion\", \"mmtfProducer\", \"unitCell\", \"spaceGroup\", \"structureId\", \"title\", \"depositionDate\", \"releaseDate\", \"experimentalMethods\", \"resolution\", \"rFree\", \"rWork\", \"bioAssemblyList\", \"ncsOperatorList\", \"entityList\", \"groupList\", \"numBonds\", \"numAtoms\", \"numGroups\", \"numChains\", \"numModels\", \"groupsPerChain\", \"chainsPerModel\"],\r\n    tr = [\"xCoordList\", \"yCoordList\", \"zCoordList\", \"groupIdList\", \"groupTypeList\", \"chainIdList\", \"bFactorList\", \"atomIdList\", \"altLocList\", \"occupancyList\", \"secStructList\", \"insCodeList\", \"sequenceIndexList\", \"chainNameList\", \"bondAtomList\", \"bondOrderList\"],\r\n    nr = rr.concat(tr),\r\n    er = \"v1.1.0dev\",\r\n    ir = \"//mmtf.rcsb.org/v1.0/\",\r\n    or = ir + \"full/\",\r\n    ar = ir + \"reduced/\";\r\n  r.encode = Q, r.decode = Y, r.traverse = K, r.fetch = $, r.fetchReduced = _, r.version = er, r.fetchUrl = or, r.fetchReducedUrl = ar, r.encodeMsgpack = o, r.encodeMmtf = R, r.decodeMsgpack = H, r.decodeMmtf = X;\r\n});\r\n\r\n/***/ })\r\n\r\n/******/ });\r\n/************************************************************************/\r\n/******/ // The module cache\r\n/******/ var __webpack_module_cache__ = {};\r\n/******/ \r\n/******/ // The require function\r\n/******/ function __nested_webpack_require_130507__(moduleId) {\r\n/******/ \t// Check if module is in cache\r\n/******/ \tvar cachedModule = __webpack_module_cache__[moduleId];\r\n/******/ \tif (cachedModule !== undefined) {\r\n/******/ \t\treturn cachedModule.exports;\r\n/******/ \t}\r\n/******/ \t// Create a new module (and put it into the cache)\r\n/******/ \tvar module = __webpack_module_cache__[moduleId] = {\r\n/******/ \t\t// no module.id needed\r\n/******/ \t\t// no module.loaded needed\r\n/******/ \t\texports: {}\r\n/******/ \t};\r\n/******/ \r\n/******/ \t// Execute the module function\r\n/******/ \t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_130507__);\r\n/******/ \r\n/******/ \t// Return the exports of the module\r\n/******/ \treturn module.exports;\r\n/******/ }\r\n/******/ \r\n/************************************************************************/\r\n/******/ /* webpack/runtime/compat get default export */\r\n/******/ (() => {\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_130507__.n = (module) => {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\t() => (module['default']) :\r\n/******/ \t\t\t() => (module);\r\n/******/ \t\t__nested_webpack_require_130507__.d(getter, { a: getter });\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/ })();\r\n/******/ \r\n/******/ /* webpack/runtime/define property getters */\r\n/******/ (() => {\r\n/******/ \t// define getter functions for harmony exports\r\n/******/ \t__nested_webpack_require_130507__.d = (exports, definition) => {\r\n/******/ \t\tfor(var key in definition) {\r\n/******/ \t\t\tif(__nested_webpack_require_130507__.o(definition, key) && !__nested_webpack_require_130507__.o(exports, key)) {\r\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/ })();\r\n/******/ \r\n/******/ /* webpack/runtime/hasOwnProperty shorthand */\r\n/******/ (() => {\r\n/******/ \t__nested_webpack_require_130507__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\r\n/******/ })();\r\n/******/ \r\n/************************************************************************/\r\nvar __nested_webpack_exports__ = {};\r\n\r\n// EXPORTS\r\n__nested_webpack_require_130507__.d(__nested_webpack_exports__, {\r\n  A: () => (/* binding */ src)\r\n});\r\n\r\n;// CONCATENATED MODULE: external {\"module\":\"lodash\",\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}\r\nvar x = (y) => {\r\n\tvar x = {}; __nested_webpack_require_130507__.d(x, y); return x\r\n} \r\nvar y = (x) => (() => (x))\r\nconst external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject = x({ [\"default\"]: () => ((lodash__WEBPACK_IMPORTED_MODULE_0___default())) });\r\n;// CONCATENATED MODULE: external {\"module\":\"three\",\"commonjs\":\"three\",\"commonjs2\":\"three\",\"amd\":\"three\",\"root\":\"THREE\"}\r\nconst external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject = three__WEBPACK_IMPORTED_MODULE_1__;\r\n;// CONCATENATED MODULE: ../../node_modules/spin.js/spin.js\r\nvar __assign =  false || function () {\r\n  __assign = Object.assign || function (t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n      s = arguments[i];\r\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n  };\r\n  return __assign.apply(this, arguments);\r\n};\r\nvar defaults = {\r\n  lines: 12,\r\n  length: 7,\r\n  width: 5,\r\n  radius: 10,\r\n  scale: 1.0,\r\n  corners: 1,\r\n  color: '#000',\r\n  fadeColor: 'transparent',\r\n  animation: 'spinner-line-fade-default',\r\n  rotate: 0,\r\n  direction: 1,\r\n  speed: 1,\r\n  zIndex: 2e9,\r\n  className: 'spinner',\r\n  top: '50%',\r\n  left: '50%',\r\n  shadow: '0 0 1px transparent',\r\n  // prevent aliased lines\r\n  position: 'absolute'\r\n};\r\nvar Spinner = /** @class */function () {\r\n  function Spinner(opts) {\r\n    if (opts === void 0) {\r\n      opts = {};\r\n    }\r\n    this.opts = __assign(__assign({}, defaults), opts);\r\n  }\r\n  /**\r\n   * Adds the spinner to the given target element. If this instance is already\r\n   * spinning, it is automatically removed from its previous target by calling\r\n   * stop() internally.\r\n   */\r\n  Spinner.prototype.spin = function (target) {\r\n    this.stop();\r\n    this.el = document.createElement('div');\r\n    this.el.className = this.opts.className;\r\n    this.el.setAttribute('role', 'progressbar');\r\n    this.el.style.position = this.opts.position;\r\n    this.el.style.width = \"0\";\r\n    this.el.style.zIndex = this.opts.zIndex.toString();\r\n    this.el.style.left = this.opts.left;\r\n    this.el.style.top = this.opts.top;\r\n    this.el.style.transform = \"scale(\".concat(this.opts.scale, \")\");\r\n    if (target) {\r\n      target.insertBefore(this.el, target.firstChild || null);\r\n    }\r\n    drawLines(this.el, this.opts);\r\n    return this;\r\n  };\r\n  /**\r\n   * Stops and removes the Spinner.\r\n   * Stopped spinners may be reused by calling spin() again.\r\n   */\r\n  Spinner.prototype.stop = function () {\r\n    if (this.el) {\r\n      if (this.el.parentNode) {\r\n        this.el.parentNode.removeChild(this.el);\r\n      }\r\n      this.el = undefined;\r\n    }\r\n    return this;\r\n  };\r\n  return Spinner;\r\n}();\r\n\r\n/**\r\n * Returns the line color from the given string or array.\r\n */\r\nfunction getColor(color, idx) {\r\n  return typeof color == 'string' ? color : color[idx % color.length];\r\n}\r\n/**\r\n * Internal method that draws the individual lines.\r\n */\r\nfunction drawLines(el, opts) {\r\n  var borderRadius = Math.round(opts.corners * opts.width * 500) / 1000 + 'px';\r\n  var shadow = 'none';\r\n  if (opts.shadow === true) {\r\n    shadow = '0 2px 4px #000'; // default shadow\r\n  } else if (typeof opts.shadow === 'string') {\r\n    shadow = opts.shadow;\r\n  }\r\n  var shadows = parseBoxShadow(shadow);\r\n  for (var i = 0; i < opts.lines; i++) {\r\n    var degrees = ~~(360 / opts.lines * i + opts.rotate);\r\n    var backgroundLine = document.createElement('div');\r\n    backgroundLine.style.position = 'absolute';\r\n    backgroundLine.style.top = \"\".concat(-opts.width / 2, \"px\");\r\n    backgroundLine.style.width = opts.length + opts.width + 'px';\r\n    backgroundLine.style.height = opts.width + 'px';\r\n    backgroundLine.style.background = getColor(opts.fadeColor, i);\r\n    backgroundLine.style.borderRadius = borderRadius;\r\n    backgroundLine.style.transformOrigin = 'left';\r\n    backgroundLine.style.transform = \"rotate(\".concat(degrees, \"deg) translateX(\").concat(opts.radius, \"px)\");\r\n    var delay = i * opts.direction / opts.lines / opts.speed;\r\n    delay -= 1 / opts.speed; // so initial animation state will include trail\r\n    var line = document.createElement('div');\r\n    line.style.width = '100%';\r\n    line.style.height = '100%';\r\n    line.style.background = getColor(opts.color, i);\r\n    line.style.borderRadius = borderRadius;\r\n    line.style.boxShadow = normalizeShadow(shadows, degrees);\r\n    line.style.animation = \"\".concat(1 / opts.speed, \"s linear \").concat(delay, \"s infinite \").concat(opts.animation);\r\n    backgroundLine.appendChild(line);\r\n    el.appendChild(backgroundLine);\r\n  }\r\n}\r\nfunction parseBoxShadow(boxShadow) {\r\n  var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\r\n  var shadows = [];\r\n  for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\r\n    var shadow = _a[_i];\r\n    var matches = shadow.match(regex);\r\n    if (matches === null) {\r\n      continue; // invalid syntax\r\n    }\r\n    var x = +matches[2];\r\n    var y = +matches[5];\r\n    var xUnits = matches[4];\r\n    var yUnits = matches[7];\r\n    if (x === 0 && !xUnits) {\r\n      xUnits = yUnits;\r\n    }\r\n    if (y === 0 && !yUnits) {\r\n      yUnits = xUnits;\r\n    }\r\n    if (xUnits !== yUnits) {\r\n      continue; // units must match to use as coordinates\r\n    }\r\n    shadows.push({\r\n      prefix: matches[1] || '',\r\n      // could have value of 'inset' or undefined\r\n      x: x,\r\n      y: y,\r\n      xUnits: xUnits,\r\n      yUnits: yUnits,\r\n      end: matches[8]\r\n    });\r\n  }\r\n  return shadows;\r\n}\r\n/**\r\n * Modify box-shadow x/y offsets to counteract rotation\r\n */\r\nfunction normalizeShadow(shadows, degrees) {\r\n  var normalized = [];\r\n  for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\r\n    var shadow = shadows_1[_i];\r\n    var xy = convertOffset(shadow.x, shadow.y, degrees);\r\n    normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\r\n  }\r\n  return normalized.join(', ');\r\n}\r\nfunction convertOffset(x, y, degrees) {\r\n  var radians = degrees * Math.PI / 180;\r\n  var sin = Math.sin(radians);\r\n  var cos = Math.cos(radians);\r\n  return [Math.round((x * cos + y * sin) * 1000) / 1000, Math.round((-x * sin + y * cos) * 1000) / 1000];\r\n}\r\n;// CONCATENATED MODULE: ./src/Timer.js\r\n//----------------------------------------------------------------------------\r\n// Timer\r\n\r\nclass Timer {\r\n  constructor() {\r\n    this.startTime = 0;\r\n    this.oldTime = 0;\r\n    this.elapsedTime = 0;\r\n    this.running = false;\r\n  }\r\n  start() {\r\n    this.startTime = Timer.now();\r\n    this.oldTime = this.startTime;\r\n    this.running = true;\r\n  }\r\n  stop() {\r\n    this.getElapsedTime();\r\n    this.running = false;\r\n  }\r\n  getElapsedTime() {\r\n    this.update();\r\n    return this.elapsedTime;\r\n  }\r\n  update() {\r\n    let delta = 0;\r\n    if (this.running) {\r\n      const newTime = Timer.now();\r\n      delta = 0.001 * (newTime - this.oldTime);\r\n      this.oldTime = newTime;\r\n      this.elapsedTime += delta;\r\n    }\r\n    return delta;\r\n  }\r\n}\r\nTimer.now = function () {\r\n  const p = typeof window !== 'undefined' && window.performance;\r\n  return p && p.now ? p.now.bind(p) : Date.now;\r\n}();\r\n;// CONCATENATED MODULE: ./src/gfx/Stats.js\r\n\r\nconst {\r\n  now\r\n} = Timer;\r\nfunction createElement(tag, id, css) {\r\n  const element = document.createElement(tag);\r\n  element.id = id;\r\n  element.style.cssText = css;\r\n  return element;\r\n}\r\nclass Stats {\r\n  constructor() {\r\n    this.domElement = createElement('div', 'stats', 'padding:8px');\r\n    this._text = createElement('p', 'fps', 'margin:0;color:silver;font-size:large');\r\n    this.domElement.appendChild(this._text);\r\n    this._startTime = now();\r\n    this._prevTime = this._startTime;\r\n    this._deltas = new Array(20);\r\n    this._index = 0;\r\n    this._total = 0.0;\r\n    this._count = 0;\r\n  }\r\n  end() {\r\n    const time = now();\r\n    const delta = time - this._startTime;\r\n    if (this._count < this._deltas.length) {\r\n      this._count++;\r\n    } else {\r\n      this._total -= this._deltas[this._index];\r\n    }\r\n    this._total += delta;\r\n    this._deltas[this._index] = delta;\r\n    this._index = (this._index + 1) % this._deltas.length;\r\n    this.ms = this._total / this._count;\r\n    this.fps = 1000 / this.ms;\r\n    if (time > this._prevTime + 1000) {\r\n      this._text.textContent = this.fps.toPrecision(2);\r\n      this._prevTime = time;\r\n    }\r\n    return time;\r\n  }\r\n  update() {\r\n    this._startTime = this.end();\r\n  }\r\n  show(on) {\r\n    if (on === undefined) {\r\n      on = true;\r\n    }\r\n    this.domElement.style.display = on ? 'block' : 'none';\r\n  }\r\n}\r\n/* harmony default export */ const gfx_Stats = (Stats);\r\n;// CONCATENATED MODULE: ./src/utils/EventDispatcher.js\r\n/**\r\n * This class introduces the simplest event system.\r\n */\r\n\r\n\r\nfunction isUndefOrEqual(param, value) {\r\n  return !param || param === value;\r\n}\r\n\r\n/**\r\n * Creates empty dispatcher.\r\n *\r\n * @exports EventDispatcher\r\n * @constructor\r\n */\r\nfunction EventDispatcher() {\r\n  this._handlers = {};\r\n}\r\n\r\n/**\r\n * Binds callback on specific event type. Optional `context` parameter\r\n * could be used as 'this' for the `callback`.\r\n * @param {string}   type       Event name.\r\n * @param {function} callback   Callback function.\r\n * @param {Object}   [context] 'This' object for the callback.\r\n */\r\nEventDispatcher.prototype.addEventListener = function (type, callback, context) {\r\n  let handlers = this._handlers[type];\r\n  if (!handlers) {\r\n    this._handlers[type] = [];\r\n    handlers = this._handlers[type];\r\n  }\r\n  const params = [callback, context];\r\n  function _checkPar(par) {\r\n    return par[0] === params[0] && par[1] === params[1];\r\n  }\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].find(handlers, _checkPar) === undefined) {\r\n    handlers.push(params);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes a previously-bound callback function from an object.\r\n * If no `context` is specified, all versions of the `callback` with different\r\n * contexts will be removed.\r\n * If no `callback` is specified, all callbacks of the `type` will be removed.\r\n * If no `type` is specified, callbacks for all events will be removed.\r\n * @param {?string}  [type]      Event type.\r\n * @param {function} [callback]  Callback function.\r\n * @param {Object}   [context]  'This' object for the callback.\r\n */\r\nEventDispatcher.prototype.removeEventListener = function (type, callback, context) {\r\n  const self = this;\r\n  external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].forEach(self._handlers, (handler, ev) => {\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].remove(handler, values => isUndefOrEqual(type, ev) && isUndefOrEqual(callback, values[0]) && isUndefOrEqual(context, values[1] || self));\r\n  });\r\n  this._handlers = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].omitBy(self._handlers, handler => handler.length === 0);\r\n};\r\n\r\n/**\r\n * Makes all the callbacks for the specific `event` to trigger.\r\n * @param {Object} event      Event.\r\n * @param {string} event.type Type of the event.\r\n */\r\nEventDispatcher.prototype.dispatchEvent = function (event) {\r\n  const self = this;\r\n  external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].forEach(this._handlers[event.type], callback => {\r\n    const context = callback[1] || self;\r\n    callback[0].apply(context, [event]);\r\n  });\r\n};\r\n/* harmony default export */ const utils_EventDispatcher = (EventDispatcher);\r\n;// CONCATENATED MODULE: ./src/utils/logger.js\r\n/**\r\n * This module contains class for logging.\r\n * Returns an instance of a logger that have already been created.\r\n * Allows users to log messages for five different levels,\r\n * enable console output and catch signal on each message.\r\n */\r\n\r\n\r\nconst priorities = {\r\n  debug: 0,\r\n  info: 1,\r\n  report: 2,\r\n  warn: 3,\r\n  error: 4\r\n};\r\n\r\n/**\r\n * Create new Logger.\r\n *\r\n * @exports Logger\r\n * @extends EventDispatcher\r\n * @constructor\r\n */\r\nfunction Logger() {\r\n  utils_EventDispatcher.call(this);\r\n  /** Boolean flag that toggles output to browser console.\r\n   * @type {boolean}\r\n   */\r\n  this.console = false;\r\n  this._priority = priorities.warn;\r\n}\r\nLogger.prototype = Object.create(utils_EventDispatcher.prototype);\r\nLogger.prototype.constructor = Logger;\r\n\r\n/**\r\n * Create new clean instance of the logger.\r\n * @returns {Logger}\r\n */\r\nLogger.prototype.instantiate = function () {\r\n  return new Logger();\r\n};\r\nfunction verify(number) {\r\n  if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(number)) {\r\n    throw new Error('Wrong log level specified!');\r\n  }\r\n  return number;\r\n}\r\n\r\n/**\r\n * @property {string} current threshold for signals and console output.\r\n * @name Logger#level\r\n */\r\nObject.defineProperty(Logger.prototype, 'level', {\r\n  get() {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].findKey(priorities, value => value === this._priority);\r\n  },\r\n  set(level) {\r\n    this._priority = verify(priorities[level]);\r\n  }\r\n});\r\n\r\n/**\r\n * Returns the list of all possible level values.\r\n * @returns {Array}\r\n */\r\nLogger.prototype.levels = function () {\r\n  return Object.keys(priorities);\r\n};\r\n\r\n/**\r\n * Add new message with specified level.\r\n * @param {string} level - level of the message, must be one of the\r\n * {'debug' | 'info' | 'report' | 'warn' | 'error'}\r\n * @param {string} message\r\n */\r\nLogger.prototype.message = function (level, message) {\r\n  const priority = verify(priorities[level]);\r\n  this._message(priority, message);\r\n};\r\n\r\n/**\r\n * Shortcut for message('debug', ...);\r\n * @param message\r\n */\r\nLogger.prototype.debug = function (message) {\r\n  this._message(priorities.debug, message);\r\n};\r\n\r\n/**\r\n * Shortcut for message('info', ...);\r\n * @param message\r\n */\r\nLogger.prototype.info = function (message) {\r\n  this._message(priorities.info, message);\r\n};\r\n\r\n/**\r\n * Shortcut for message('report', ...);\r\n * @param message\r\n */\r\nLogger.prototype.report = function (message) {\r\n  this._message(priorities.report, message);\r\n};\r\n\r\n/**\r\n * Shortcut for message('warn', ...);\r\n * @param message\r\n */\r\nLogger.prototype.warn = function (message) {\r\n  this._message(priorities.warn, message);\r\n};\r\n\r\n/**\r\n * Shortcut for message('error', ...);\r\n * @param message\r\n */\r\nLogger.prototype.error = function (message) {\r\n  this._message(priorities.error, message);\r\n};\r\n\r\n/**\r\n * Add new message with specified priority.\r\n * @param {number} priority - priority of the message\r\n * @param {string} message\r\n * @private\r\n */\r\nLogger.prototype._message = function (priority, message) {\r\n  if (priority < this._priority) {\r\n    return;\r\n  }\r\n  const level = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].findKey(priorities, value => value === priority);\r\n  message = String(message);\r\n  if (this.console) {\r\n    const output = `miew:${level}: ${message}`;\r\n    if (level === 'error') {\r\n      console.error(output); // NOSONAR\r\n    } else if (level === 'warn') {\r\n      console.warn(output); // NOSONAR\r\n    } else {\r\n      console.log(output); // NOSONAR\r\n    }\r\n  }\r\n  this.dispatchEvent({\r\n    type: 'message',\r\n    level,\r\n    message\r\n  });\r\n};\r\n/* harmony default export */ const logger = (new Logger());\r\n;// CONCATENATED MODULE: ./src/utils.js\r\n\r\n\r\nconst browserType = {\r\n  DEFAULT: 0,\r\n  SAFARI: 1\r\n};\r\n//----------------------------------------------------------------------------\r\n// Query string\r\n\r\n/**\r\n * Escape only dangerous chars in a query string component, use a plus instead of a space.\r\n *\r\n * [RFC 3986](https://tools.ietf.org/html/rfc3986) allows the following chars in the query (see 3.4):\r\n *\r\n *       A-Z a-z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ / ?\r\n *\r\n * For query string elements we need to escape ampersand, equal sign, and plus,\r\n * but encodeURIComponent() function encodes anything except for the following:\r\n *\r\n *       A-Z a-z 0-9 - _ . ~ ! ' ( ) *\r\n *\r\n * @param {string} text - key or value to encode\r\n * @param {string} excludeExp - regexp for symbols to exclude from encoding\r\n * @returns {string} encoded string\r\n */\r\nfunction encodeQueryComponent(text, excludeExp) {\r\n  const encode = code => String.fromCharCode(parseInt(code.substr(1), 16));\r\n  return encodeURIComponent(text).replace(excludeExp, encode).replace(/%20/g, '+');\r\n}\r\n\r\n/**\r\n * Unescape dangerous chars in a query string component.\r\n *\r\n * @param {string} text - encoded key or value\r\n * @returns {string} decoded string\r\n * @see {@link encodeQueryComponent}\r\n */\r\nfunction decodeQueryComponent(text) {\r\n  return decodeURIComponent(text.replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Parse URL and extract an array of parameters.\r\n * @param {string?} url - URL or query string to parse\r\n * @returns {Array} array of (key, value) pairs.\r\n */\r\nfunction getUrlParameters(url) {\r\n  url = url || window.location.search;\r\n  const query = url.substring(url.indexOf('?') + 1);\r\n  const search = /([^&=]+)=?([^&]*)/g;\r\n  const result = [];\r\n  let match;\r\n  while ((match = search.exec(query)) !== null) {\r\n    // eslint-disable-line no-cond-assign\r\n    result.push([decodeQueryComponent(match[1]), decodeQueryComponent(match[2])]);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Parse URL and extract an array of parameters as a hash.\r\n * @param {string?} url - URL or query string to parse\r\n * @returns {Object}\r\n */\r\nfunction getUrlParametersAsDict(url) {\r\n  const result = {};\r\n  const a = getUrlParameters(url);\r\n  for (let i = 0; i < a.length; ++i) {\r\n    const [key, value] = a[i];\r\n    result[key] = value;\r\n  }\r\n  return result;\r\n}\r\nfunction resolveURL(str) {\r\n  if (typeof URL !== 'undefined') {\r\n    try {\r\n      if (typeof window !== 'undefined') {\r\n        return new URL(str, window.location).href;\r\n      }\r\n      return new URL(str).href;\r\n    } catch (error) {\r\n      // IE 11 has a URL object with no constructor available so just try a different approach instead\r\n    }\r\n  }\r\n  if (typeof document !== 'undefined') {\r\n    const anchor = document.createElement('a');\r\n    anchor.href = str;\r\n    return anchor.href;\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n * Generates regular expression object that includes all symbols\r\n * listed in the argument\r\n * @param symbolStr {string} - String containing characters list.\r\n * @returns {RegExp} - Regular expression.\r\n */\r\nfunction generateRegExp(symbolStr) {\r\n  const symbolList = [];\r\n  for (let i = 0, n = symbolStr.length; i < n; ++i) {\r\n    symbolList[symbolList.length] = symbolStr[i].charCodeAt(0).toString(16);\r\n  }\r\n  const listStr = symbolList.join('|');\r\n  return new RegExp(`%(?:${listStr})`, 'gi');\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Create HTML element\r\n\r\nfunction utils_createElement(tag, attrs, content) {\r\n  const element = document.createElement(tag);\r\n  let i;\r\n  let n;\r\n  if (attrs) {\r\n    const keys = Object.keys(attrs);\r\n    for (i = 0, n = keys.length; i < n; ++i) {\r\n      const key = keys[i];\r\n      element.setAttribute(key, attrs[key]);\r\n    }\r\n  }\r\n  if (content) {\r\n    if (!(content instanceof Array)) {\r\n      content = [content];\r\n    }\r\n    for (i = 0, n = content.length; i < n; ++i) {\r\n      const child = content[i];\r\n      if (typeof child === 'string') {\r\n        element.appendChild(document.createTextNode(child));\r\n      } else if (child instanceof HTMLElement) {\r\n        element.appendChild(child);\r\n      }\r\n    }\r\n  }\r\n  return element;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Easy inheritance\r\n\r\n/**\r\n * Derive the class from the base.\r\n * @param cls {function} - Class (constructor) to derive.\r\n * @param base {function} - Class (constructor) to derive from.\r\n * @param members {object=} - Optional instance members to add.\r\n * @param statics {object=} - Optional static class members to add.\r\n * @returns {function} Original class.\r\n */\r\nfunction deriveClass(cls, base, members, statics) {\r\n  cls.prototype = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].assign(Object.create(base.prototype), {\r\n    constructor: cls\r\n  }, members);\r\n  if (statics) {\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].assign(cls, statics);\r\n  }\r\n  return cls;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Deep prototyping\r\n\r\nfunction deriveDeep(obj, needZeroOwnProperties) {\r\n  let res = obj;\r\n  let i;\r\n  let n;\r\n  if (obj instanceof Array) {\r\n    res = new Array(obj.length);\r\n    for (i = 0, n = obj.length; i < n; ++i) {\r\n      res[i] = deriveDeep(obj[i]);\r\n    }\r\n  } else if (obj instanceof Object) {\r\n    res = Object.create(obj);\r\n    const keys = Object.keys(obj);\r\n    for (i = 0, n = keys.length; i < n; ++i) {\r\n      const key = keys[i];\r\n      const value = obj[key];\r\n      const copy = deriveDeep(value);\r\n      if (copy !== value) {\r\n        res[key] = copy;\r\n      }\r\n    }\r\n    if (needZeroOwnProperties && Object.keys(res).length > 0) {\r\n      res = Object.create(res);\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Colors\r\n\r\nfunction hexColor(color) {\r\n  const hex = `0000000${color.toString(16)}`.substr(-6);\r\n  return `#${hex}`;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Debug tracing\r\n\r\nfunction DebugTracer(namespace) {\r\n  let enabled = false;\r\n  this.enable = function (on) {\r\n    enabled = on;\r\n  };\r\n  let indent = 0;\r\n  const methods = Object.keys(namespace);\r\n  function wrap(method_, name_) {\r\n    return function () {\r\n      const spaces = DebugTracer.spaces.substr(0, indent * 2);\r\n      if (enabled) {\r\n        logger.debug(`${spaces + name_} {`);\r\n      }\r\n      indent++;\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n      const result = method_.apply(this, args); // eslint-disable-line no-invalid-this\r\n      indent--;\r\n      if (enabled) {\r\n        logger.debug(`${spaces}} // ${name_}`);\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n  for (let i = 0, n = methods.length; i < n; ++i) {\r\n    const name = methods[i];\r\n    const method = namespace[name];\r\n    if (method instanceof Function && name !== 'constructor') {\r\n      namespace[name] = wrap(method, name);\r\n    }\r\n  }\r\n}\r\nDebugTracer.spaces = '                                                                                          ';\r\nclass OutOfMemoryError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.name = 'OutOfMemoryError';\r\n    this.message = message;\r\n  }\r\n}\r\nfunction allocateTyped(TypedArrayName, size) {\r\n  let result = null;\r\n  try {\r\n    result = new TypedArrayName(size);\r\n  } catch (e) {\r\n    if (e instanceof RangeError) {\r\n      throw new OutOfMemoryError(e.message);\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Float array conversion\r\n\r\nfunction bytesToBase64( /** ArrayBuffer */buffer) {\r\n  const bytes = new Uint8Array(buffer);\r\n  let binary = '';\r\n  for (let i = 0; i < bytes.byteLength; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n  return window.btoa(binary);\r\n}\r\nfunction bytesFromBase64( /** string */str) {\r\n  const binary = window.atob(str);\r\n  const bytes = new Uint8Array(binary.length);\r\n  for (let i = 0; i < bytes.length; ++i) {\r\n    bytes[i] = binary[i].charCodeAt(0);\r\n  }\r\n  return bytes.buffer;\r\n}\r\nfunction arrayToBase64( /** number[] */array, /** function */TypedArrayClass) {\r\n  return bytesToBase64(new TypedArrayClass(array).buffer);\r\n}\r\nfunction arrayFromBase64( /** string */str, /** function */TypedArrayClass) {\r\n  return Array.prototype.slice.call(new TypedArrayClass(bytesFromBase64(str)));\r\n}\r\n\r\n// NOTE: this is 1-level comparison\r\nfunction compareOptionsWithDefaults(opts, defOpts) {\r\n  const optsStr = [];\r\n  if (defOpts && opts) {\r\n    const keys = Object.keys(opts);\r\n    for (let p = 0; p < keys.length; ++p) {\r\n      const key = keys[p];\r\n      const value = opts[key];\r\n      // TODO add processing for tree structure\r\n      if (!(value instanceof Object) && typeof defOpts[key] !== 'undefined' && defOpts[key] !== value) {\r\n        optsStr.push(`${key}:${value}`);\r\n      }\r\n    }\r\n    if (optsStr.length > 0) {\r\n      return `!${optsStr.join()}`;\r\n    }\r\n  }\r\n  return '';\r\n}\r\nfunction isAlmostPlainObject(o) {\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isPlainObject(o)) {\r\n    return true;\r\n  }\r\n  const proto = o && Object.getPrototypeOf(o);\r\n  return !!proto && !proto.hasOwnProperty('constructor') && isAlmostPlainObject(proto);\r\n}\r\n\r\n/**\r\n * Build an object that contains properties (and subproperties) of `src` different from those\r\n * in `dst`. Objects are parsed recursively, other values (including arrays) are compared for\r\n * equality using `_.isEqual()`.\r\n * @param {!object} src - a new object to compare, may contain changed or new properties\r\n * @param {!object} dst - an old reference object\r\n */\r\nfunction objectsDiff(src, dst) {\r\n  const diff = {};\r\n  external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].forIn(src, (srcValue, key) => {\r\n    const dstValue = dst[key];\r\n    if (isAlmostPlainObject(srcValue) && isAlmostPlainObject(dstValue)) {\r\n      const deepDiff = objectsDiff(srcValue, dstValue);\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(deepDiff)) {\r\n        diff[key] = deepDiff;\r\n      }\r\n    } else if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEqual(srcValue, dstValue)) {\r\n      diff[key] = srcValue;\r\n    }\r\n  });\r\n  return diff;\r\n}\r\nfunction forInRecursive(object, callback) {\r\n  function iterateThrough(obj, prefix) {\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].forIn(obj, (value, key) => {\r\n      const newPref = prefix + (prefix.length > 0 ? '.' : '');\r\n      if (value instanceof Object) {\r\n        iterateThrough(value, newPref + key);\r\n      } else if (value !== undefined) {\r\n        callback(value, newPref + key);\r\n      }\r\n    });\r\n  }\r\n  iterateThrough(object, '');\r\n}\r\nfunction enquoteString(value) {\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(value)) {\r\n    return `\"${value.replace(/\"/g, '\\\\\"')}\"`;\r\n  }\r\n  return value;\r\n}\r\nfunction unquoteString(value) {\r\n  if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(value)) {\r\n    return value;\r\n  }\r\n  if (value[0] === '\"' && value[value.length - 1] === '\"') {\r\n    value = value.slice(1, value.length - 1);\r\n    return value.replace(/\\\\\"/g, '\"');\r\n  }\r\n  if (value[0] === \"'\" && value[value.length - 1] === \"'\") {\r\n    value = value.slice(1, value.length - 1);\r\n    return value.replace(/\\\\'/g, \"'\");\r\n  }\r\n  throw new SyntaxError('Incorrect string format, can\\'t unqute it');\r\n}\r\nfunction getFileExtension(fileName) {\r\n  return fileName.slice(Math.max(0, fileName.lastIndexOf('.')) || Infinity);\r\n}\r\nfunction splitFileName(fileName) {\r\n  const ext = getFileExtension(fileName);\r\n  const name = fileName.slice(0, fileName.length - ext.length);\r\n  return [name, ext];\r\n}\r\nfunction dataUrlToBlob(url) {\r\n  const parts = url.split(/[:;,]/);\r\n  const partsCount = parts.length;\r\n  if (partsCount >= 3 && parts[partsCount - 2] === 'base64') {\r\n    return new Blob([bytesFromBase64(parts[partsCount - 1])]);\r\n  }\r\n  return null;\r\n}\r\nfunction getBrowser() {\r\n  if (navigator.vendor && navigator.vendor.indexOf('Apple') > -1 && navigator.userAgent && navigator.userAgent.indexOf('CriOS') === -1 && navigator.userAgent.indexOf('FxiOS') === -1) {\r\n    return browserType.SAFARI;\r\n  }\r\n  return browserType.DEFAULT;\r\n}\r\nfunction shotOpen(url) {\r\n  if (typeof window !== 'undefined') {\r\n    window.open().document.write(`<body style=\"margin:0\"><img src=\"${url}\" /></body>`);\r\n  }\r\n}\r\nfunction shotDownload(dataUrl, filename) {\r\n  if (!dataUrl || dataUrl.substr(0, 5) !== 'data:') {\r\n    return;\r\n  }\r\n  if (!filename) {\r\n    filename = ['screenshot-', +new Date(), '.png'].join('');\r\n  }\r\n  if (typeof window !== 'undefined' && window.navigator && window.navigator.msSaveBlob) {\r\n    window.navigator.msSaveBlob(dataUrlToBlob(dataUrl), filename);\r\n  } else if (typeof document !== 'undefined') {\r\n    const link = document.createElement('a');\r\n    link.download = filename;\r\n    link.innerHTML = 'download';\r\n    link.href = window.URL.createObjectURL(dataUrlToBlob(dataUrl));\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\nfunction download(data, filename, type) {\r\n  const blobData = new Blob([data]);\r\n  if (!filename) {\r\n    filename = ['data', +new Date()].join('');\r\n  }\r\n  if (!type) {\r\n    filename += blobData.type || '.bin';\r\n  } else {\r\n    filename += `.${type}`;\r\n  }\r\n  if (typeof window !== 'undefined' && window.navigator && window.navigator.msSaveBlob) {\r\n    window.navigator.msSaveBlob(blobData, filename);\r\n  } else if (typeof document !== 'undefined') {\r\n    const link = document.createElement('a');\r\n    link.download = filename;\r\n    link.innerHTML = 'download';\r\n    link.href = window.URL.createObjectURL(blobData);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n}\r\nfunction copySubArrays(src, dst, indices, itemSize) {\r\n  for (let i = 0, n = indices.length; i < n; ++i) {\r\n    for (let j = 0; j < itemSize; ++j) {\r\n      dst[i * itemSize + j] = src[indices[i] * itemSize + j];\r\n    }\r\n  }\r\n}\r\nfunction shallowCloneNode(node) {\r\n  const newNode = node.cloneNode(true);\r\n  newNode.worldPos = node.worldPos;\r\n  // .style property is readonly, so \"newNode.style = node.style;\" won't work (and we don't need it, right?)\r\n  return newNode;\r\n}\r\nconst unquotedStringRE = /^[a-zA-Z0-9_]*$/;\r\nconst enquoteHelper = ['\"', '', '\"'];\r\n\r\n// verify and correct if needed selctor identifier\r\nfunction correctSelectorIdentifier(value) {\r\n  if (unquotedStringRE.test(value)) {\r\n    return value;\r\n  }\r\n  // quote incorrect identifier\r\n  enquoteHelper[1] = value;\r\n  return enquoteHelper.join('');\r\n}\r\n\r\n/**\r\n * Concatenates two TypedArray. Doesn't check null refs o type equality\r\n * Attention! It must be use very rarely because requires memory reallocation every time. Use MergeTypedArraysUnsafe to\r\n * unite array of subarrays.\r\n * @param{TypedArray} first  - destination array\r\n * @param{TypedArray} second - source array\r\n * @returns{TypedArray} resulting concatenated array\r\n */\r\nfunction concatTypedArraysUnsafe(first, second) {\r\n  const result = new first.constructor(first.length + second.length);\r\n  result.set(first);\r\n  result.set(second, first.length);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Merges array of TypedArray into TypedArray. Doesn't check null refs o type equality\r\n * @param{array} array  - source array of subarrays\r\n * @returns{TypedArray} resulting merged array\r\n */\r\nfunction mergeTypedArraysUnsafe(array) {\r\n  if (array.length <= 0) {\r\n    return null;\r\n  }\r\n  // count the size\r\n  const size = array.reduce((acc, cur) => acc + cur.length, 0);\r\n  // create combined array\r\n  const result = new array[0].constructor(size);\r\n  for (let i = 0, start = 0; i < array.length; i++) {\r\n    const count = array[i].length;\r\n    result.set(array[i], start);\r\n    start += count;\r\n  }\r\n  return result;\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n// Exports\r\n\r\n/* harmony default export */ const utils = ({\r\n  browserType,\r\n  encodeQueryComponent,\r\n  decodeQueryComponent,\r\n  getUrlParameters,\r\n  getUrlParametersAsDict,\r\n  resolveURL,\r\n  generateRegExp,\r\n  createElement: utils_createElement,\r\n  deriveClass,\r\n  deriveDeep,\r\n  hexColor,\r\n  DebugTracer,\r\n  OutOfMemoryError,\r\n  allocateTyped,\r\n  bytesFromBase64,\r\n  bytesToBase64,\r\n  arrayFromBase64,\r\n  arrayToBase64,\r\n  compareOptionsWithDefaults,\r\n  objectsDiff,\r\n  forInRecursive,\r\n  enquoteString,\r\n  unquoteString,\r\n  getBrowser,\r\n  shotOpen,\r\n  shotDownload,\r\n  copySubArrays,\r\n  shallowCloneNode,\r\n  correctSelectorIdentifier,\r\n  getFileExtension,\r\n  splitFileName,\r\n  download,\r\n  concatTypedArraysUnsafe,\r\n  mergeTypedArraysUnsafe\r\n});\r\n;// CONCATENATED MODULE: ./src/utils/JobHandle.js\r\n\r\nclass JobHandle extends utils_EventDispatcher {\r\n  constructor() {\r\n    super();\r\n    this._shouldCancel = false;\r\n  }\r\n  cancel() {\r\n    this._shouldCancel = true;\r\n    this.dispatchEvent({\r\n      type: 'cancel'\r\n    });\r\n  }\r\n  shouldCancel() {\r\n    return this._shouldCancel;\r\n  }\r\n\r\n  // slaves use this to notify master about their events\r\n  // master routes these notifications to a single event slot\r\n  notify(event) {\r\n    this.dispatchEvent({\r\n      type: 'notification',\r\n      slaveEvent: event\r\n    });\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/settings.js\r\n\r\n\r\n\r\nconst VERSION = 0;\r\n\r\n//----------------------------------------------------------------------------\r\n// DEFAULT SETTINGS\r\n//----------------------------------------------------------------------------\r\n\r\n/**\r\n * Polygonal complexity settings.\r\n *\r\n * @typedef PolyComplexity\r\n * @property {number} poor\r\n * @property {number} low\r\n * @property {number} medium\r\n * @property {number} high\r\n * @property {number} ultra\r\n */\r\n\r\n/**\r\n * @alias SettingsObject\r\n * @namespace\r\n */\r\nconst settings_defaults = {\r\n  /**\r\n   * Default options for all available modes.\r\n   * Use {@link Mode.id} as a dictionary key to access mode options.\r\n   *\r\n   * Usually you don't need to override these settings. You may specify mode options as a parameter during\r\n   * {@link Mode} construction.\r\n   *\r\n   * @memberof SettingsObject#\r\n   * @type {Object.<string, object>}\r\n   *\r\n   * @property {LinesModeOptions} LN - Lines mode options.\r\n   * @property {LicoriceModeOptions} LC - Licorice mode options.\r\n   * @property {BallsAndSticksModeOptions} BS - Balls and Sticks mode options.\r\n   * @property {VanDerWaalsModeOptions} VW - Van der Waals mode options.\r\n   * @property {TraceModeOptions} TR - Trace mode options.\r\n   * @property {TubeModeOptions} TU - Tube mode options.\r\n   * @property {CartoonModeOptions} CA - Cartoon mode options.\r\n   * @property {QuickSurfaceModeOptions} QS - Contact Surface mode options.\r\n   * @property {IsoSurfaceSASModeOptions} SA - Solvent Accessible Surface mode options.\r\n   * @property {IsoSurfaceSESModeOptions} SE - Solvent Excluded Surface mode options.\r\n   * @property {ContactSurfaceModeOptions} CS - Contact Surface mode options.\r\n   * @property {TextModeOptions} TX - Text mode options.\r\n   * @property {VolumeDensityModeOptions} VD - Volume Density mode options.\r\n   */\r\n  modes: {\r\n    //----------------------------------------------------------------------------\r\n    // BALLS AND STICKS\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Balls and Sticks mode options.\r\n     *\r\n     * @typedef BallsAndSticksModeOptions\r\n     *\r\n     * @property {number} atom - Sphere radius as a fraction of Van der Waals atom radius.\r\n     * @property {number} bond - Cylinder radius in angstroms.\r\n     * @property {number} space - Fraction of the space around one cylinder. Zero means that cylinder fills all\r\n     *   available space.\r\n     * @property {boolean} multibond - Toggles rendering of multiple ordered bonds.\r\n     * @property {number} aromrad - Minor radius of a torus for aromatic loops.\r\n     * @property {boolean} showarom - Toggles rendering of aromatic loops.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    BS: {\r\n      atom: 0.23,\r\n      bond: 0.15,\r\n      space: 0.5,\r\n      multibond: true,\r\n      aromrad: 0.1,\r\n      showarom: true,\r\n      polyComplexity: {\r\n        poor: 3,\r\n        low: 4,\r\n        medium: 6,\r\n        high: 12,\r\n        ultra: 32\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // VAN DER WAALS\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Van der Waals mode options.\r\n     *\r\n     * @typedef VanDerWaalsModeOptions\r\n     *\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    VW: {\r\n      polyComplexity: {\r\n        poor: 4,\r\n        low: 6,\r\n        medium: 8,\r\n        high: 16,\r\n        ultra: 32\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // LINES\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Lines mode options.\r\n     *\r\n     * @typedef LinesModeOptions\r\n     *\r\n     * @property {boolean} multibond - Flag, that toggles rendering of multiple ordered bonds.\r\n     * @property {boolean} showarom - Flag, that toggles rendering of aromatic loops.\r\n     * @property {number} offsarom - Offset between bonds and aromatic cycle.\r\n     * @property {number} chunkarom - Number of pieces in a-loop arc, corresponding to atom.\r\n     * @property {number} atom - Collision radius for atoms picking.\r\n     * @property {number} lineWidth - Line width in pixels (not used in thin lines).\r\n     */\r\n    LN: {\r\n      multibond: true,\r\n      showarom: true,\r\n      offsarom: 0.2,\r\n      chunkarom: 10,\r\n      atom: 0.23,\r\n      lineWidth: 2\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // LICORICE\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Licorice mode options.\r\n     *\r\n     * @typedef LicoriceModeOptions\r\n     *\r\n     * @property {number} bond - Bond cylinder radius.\r\n     * @property {number} space - Fraction of the space around one cylinder. Zero means that cylinder fills all\r\n     *   available space.\r\n     * @property {boolean} multibond - Flag, that toggles rendering of multiple ordered bonds.\r\n     * @property {number} aromrad - Minor radius of a torus for aromatic loops.\r\n     * @property {boolean} showarom - Flag, that toggles rendering of aromatic loops.\r\n     * @property {PolyComplexity} polyComplexity - Poly complexity values for render modes.\r\n     */\r\n    LC: {\r\n      bond: 0.20,\r\n      space: 0.0,\r\n      multibond: true,\r\n      aromrad: 0.1,\r\n      showarom: true,\r\n      polyComplexity: {\r\n        poor: 3,\r\n        low: 4,\r\n        medium: 6,\r\n        high: 12,\r\n        ultra: 32\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // SURFACE SAS\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Solvent Accessible Surface mode options.\r\n     *\r\n     * @typedef IsoSurfaceSASModeOptions\r\n     *\r\n     * @property {boolean} zClip - Flag, that toggles z-clipping.\r\n     * @property {number} probeRadius - Radius of the probe.\r\n     * @property {string} subset - Only parts of surface close to selected atoms will be visible.\r\n     *   Empty string means whole surface is visible.\r\n     * @property {boolean} wireframe - Flag that specifies whether or not surface rendered in wireframe mode.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    SA: {\r\n      zClip: false,\r\n      probeRadius: 1.5,\r\n      subset: '',\r\n      wireframe: false,\r\n      polyComplexity: {\r\n        poor: 6,\r\n        low: 8,\r\n        medium: 16,\r\n        high: 30,\r\n        ultra: 60\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // SURFACE SES\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Solvent Excluded Surface mode options.\r\n     *\r\n     * @typedef IsoSurfaceSESModeOptions\r\n     *\r\n     * @property {boolean} zClip - Flag, that toggles z-clipping.\r\n     * @property {number} probeRadius - Radius of the probe.\r\n     * @property {string} subset - Only parts of surface close to selected atoms will be visible.\r\n     *   Empty string means whole surface is visible.\r\n     * @property {boolean} wireframe - Flag that specifies whether or not surface rendered in wireframe mode.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    SE: {\r\n      zClip: false,\r\n      probeRadius: 1.5,\r\n      subset: '',\r\n      wireframe: false,\r\n      polyComplexity: {\r\n        poor: 6,\r\n        low: 8,\r\n        medium: 16,\r\n        high: 30,\r\n        ultra: 60\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // QUICK SURFACE\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Quick Surface mode options.\r\n     *\r\n     * @typedef QuickSurfaceModeOptions\r\n     *\r\n     * @property {number} isoValue - Isovalue of the surface to extract.\r\n     * @property {number} scale - Radius scale for the surface being built.\r\n     * @property {boolean} zClip - Flag, that toggles z-clipping.\r\n     * @property {string} subset - Only parts of surface close to selected atoms will be visible.\r\n     *   Empty string means whole surface is visible.\r\n     * @property {boolean} wireframe - Flag that specifies whether or not surface rendered in wireframe mode.\r\n     * @property {PolyComplexity} gaussLim - Gauss lim for coloring the bigger the value, the smoother our colors are.\r\n     * @property {PolyComplexity} gridSpacing - Poly complexity values for render modes. In this case the value\r\n     *   corresponds to the grid density.\r\n     */\r\n    QS: {\r\n      isoValue: 0.5,\r\n      gaussLim: {\r\n        poor: 1.5,\r\n        low: 2.0,\r\n        medium: 2.5,\r\n        high: 3.0,\r\n        ultra: 4.0\r\n      },\r\n      scale: 1.0,\r\n      wireframe: false,\r\n      gridSpacing: {\r\n        poor: 2,\r\n        low: 1.5,\r\n        medium: 1,\r\n        high: 0.5,\r\n        ultra: 0.25\r\n      },\r\n      subset: '',\r\n      zClip: false\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // CONTACT SURFACE\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Contact Surface mode options.\r\n     *\r\n     * @typedef ContactSurfaceModeOptions\r\n     *\r\n     * @property {number} isoValue - Isovalue of the surface to extract.\r\n     * @property {number} probeRadius - Probe radius.\r\n     * @property {number} probePositions\r\n     * @property {boolean} zClip - Flag, that toggles z-clipping.\r\n     * @property {string} subset - Only parts of surface close to selected atoms will be visible.\r\n     *   Empty string means whole surface is visible.\r\n     * @property {boolean} wireframe - Flag that specifies whether or not surface rendered in wireframe mode.\r\n     * @property {PolyComplexity} polyComplexity - Radius scale for the surface being built.\r\n     *   Poly complexity values for render modes. In this case the value corresponds to the grid density.\r\n     */\r\n    CS: {\r\n      probeRadius: 1.4,\r\n      isoValue: 1.5,\r\n      wireframe: false,\r\n      probePositions: 30,\r\n      polyComplexity: {\r\n        poor: 0.5,\r\n        low: 1.0,\r\n        medium: 1.5,\r\n        high: 1.75,\r\n        ultra: 2.0\r\n      },\r\n      subset: '',\r\n      zClip: false\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // TRACE\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Trace mode options.\r\n     *\r\n     * @typedef TraceModeOptions\r\n     *\r\n     * @property {number} radius - Cylinder radius.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    TR: {\r\n      radius: 0.30,\r\n      polyComplexity: {\r\n        poor: 12,\r\n        low: 16,\r\n        medium: 32,\r\n        high: 64,\r\n        ultra: 64\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // TUBE\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Tube mode options.\r\n     *\r\n     * @typedef TubeModeOptions\r\n     *\r\n     * @property {number} radius - Cylinder radius.\r\n     * @property {number} tension - Tension for interpolation.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     * @property {number} heightSegmentsRatio - Poly complexity multiplier for height segments.\r\n     */\r\n    TU: {\r\n      radius: 0.30,\r\n      heightSegmentsRatio: 1.5,\r\n      tension: -0.7,\r\n      polyComplexity: {\r\n        poor: 4,\r\n        low: 6,\r\n        medium: 10,\r\n        high: 18,\r\n        ultra: 34\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // CARTOON\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Cartoon mode options.\r\n     *\r\n     * @typedef CartoonModeOptions\r\n     *\r\n     * @property {number} radius - Standard tube radius.\r\n     * @property {number} depth - Height of the secondary structure ribbon.\r\n     * @property {number} tension - Tension for interpolation.\r\n     * @proprety {object} ss - Secondary structure parameters.\r\n     * @proprety {object} ss.helix - Options for helices render.\r\n     * @proprety {number} ss.helix.width - Width of the secondary structure ribbon.\r\n     * @proprety {number} ss.helix.arrow - Secondary structure's arrow width.\r\n     * @proprety {object} ss.strand - Options for strands render.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     * polyComplexity must be even for producing symmetric arrows.\r\n     * @property {number} heightSegmentsRatio - Poly complexity multiplier for height segments.\r\n     */\r\n    CA: {\r\n      radius: 0.30,\r\n      depth: 0.25,\r\n      ss: {\r\n        helix: {\r\n          width: 1.0,\r\n          arrow: 2.0\r\n        },\r\n        strand: {\r\n          width: 1.0,\r\n          arrow: 2.0\r\n        }\r\n      },\r\n      heightSegmentsRatio: 1.5,\r\n      tension: -0.7,\r\n      polyComplexity: {\r\n        poor: 4,\r\n        low: 6,\r\n        medium: 10,\r\n        high: 18,\r\n        ultra: 34\r\n      }\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // TEXT\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Text mode options.\r\n     *\r\n     * @typedef TextModeOptions\r\n     *\r\n     * @property {string} template - Format string for building output text.\r\n     * @property {string} horizontalAlign - Text alignment ('left', 'right', 'center').\r\n     * @property {string} verticalAlign - Vertical text box alignment ('top', 'bottom', 'middle').\r\n     * @property {number} dx - Text offset x in angstroms.\r\n     * @property {number} dy - Text offset y in angstroms.\r\n     * @property {number} dz - Text offset z in angstroms.\r\n     * @property {string} fg - Color rule for foreground.\r\n     * @property {string} bg - Color rule for background.\r\n     * @property {boolean} showBg - Flag, that toggles background rendering.\r\n     *\r\n     */\r\n    TX: {\r\n      template: '{{Chain}}.{{Residue}}{{Sequence}}.{{Name}}',\r\n      horizontalAlign: 'center',\r\n      verticalAlign: 'middle',\r\n      dx: 0,\r\n      dy: 0,\r\n      dz: 1,\r\n      fg: 'none',\r\n      bg: '0x202020',\r\n      showBg: true\r\n    },\r\n    //----------------------------------------------------------------------------\r\n    // VOLUME DENSITY\r\n    //----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Volume density mode options.\r\n     *\r\n     * @typedef VolumeDensityModeOptions\r\n     *\r\n     * @property {number} kSigma - Noise threshold coefficient.\r\n     * @property {boolean} frame - flag, that turns on box frame painting.\r\n     * @property {boolean} isoMode - flag, that turns on IsoSurface mode instead of Volume Rendering.\r\n     * @property {PolyComplexity} polyComplexity - Polygonal complexity settings for different resolutions.\r\n     */\r\n    VD: {\r\n      kSigma: 1.0,\r\n      kSigmaMed: 2.0,\r\n      kSigmaMax: 4.0,\r\n      frame: true,\r\n      isoMode: false,\r\n      polyComplexity: {\r\n        poor: 2,\r\n        low: 3,\r\n        medium: 4,\r\n        high: 8,\r\n        ultra: 10\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * Default options for all available colorers.\r\n   * Use {@link Colorer.id} as a dictionary key to access colorer options.\r\n   *\r\n   * Usually you don't need to override these settings. You may specify colorer options as a parameter during\r\n   * {@link Colorer} construction.\r\n   *\r\n   * Not all colorers have options.\r\n   *\r\n   * @memberof SettingsObject#\r\n   * @type {Object.<string, object>}\r\n   *\r\n   * @property {ElementColorerOptions} EL - Element colorer options.\r\n   * @property {SequenceColorerOptions} SQ - Sequence colorer options.\r\n   * @property {MoleculeColorerOptions} MO - Molecule colorer options.\r\n   * @property {UniformColorerOptions} UN - Uniform colorer options.\r\n   * @property {ConditionalColorerOptions} CO - Conditional colorer options.\r\n   * @property {TemperatureColorerOptions} TM - Temperature colorer options.\r\n   * @property {OccupancyColorerOptions} OC - Occupancy colorer options.\r\n   * @property {HydrophobicityColorerOptions} HY - Hydrophobicity colorer options.\r\n   */\r\n  colorers: {\r\n    /**\r\n     * Element colorer options.\r\n     *\r\n     * @typedef ElementColorerOptions\r\n     *\r\n     * @property {number} carbon - Carbon color or -1 to use default.\r\n     */\r\n    EL: {\r\n      carbon: -1\r\n    },\r\n    /**\r\n     * Uniform colorer options.\r\n     *\r\n     * @typedef UniformColorerOptions\r\n     *\r\n     * @property {number} color - Single color to paint with.\r\n     */\r\n    UN: {\r\n      color: 0xFFFFFF\r\n    },\r\n    /**\r\n     * Conditional colorer options.\r\n     *\r\n     * @typedef ConditionalColorerOptions\r\n     *\r\n     * @property {string} subset - Selector string.\r\n     * @property {number} color - Color of selected atoms.\r\n     * @property {number} baseColor - Color of other atoms.\r\n     */\r\n    CO: {\r\n      subset: 'charged',\r\n      color: 0xFF0000,\r\n      baseColor: 0xFFFFFF\r\n    },\r\n    /**\r\n     * Carbon colorer options.\r\n     *\r\n     * @typedef CarbonColorerOptions\r\n     *\r\n     * @property {number} color - Single color to paint carbons\r\n     * @property {number} factor - Color factor for not carbon atoms.\r\n     */\r\n    CB: {\r\n      color: 0x909090,\r\n      factor: 0.6\r\n    },\r\n    /**\r\n     * Sequence colorer options.\r\n     *\r\n     * @typedef SequenceColorerOptions\r\n     *\r\n     * @property {string} gradient - Name of gradient to use.\r\n     */\r\n    SQ: {\r\n      gradient: 'rainbow'\r\n    },\r\n    /**\r\n     * Temperature colorer options.\r\n     *\r\n     * @typedef TemperatureColorerOptions\r\n     *\r\n     * @property {string} gradient - Name of gradient to use.\r\n     * @property {number} min - Minimal temperature.\r\n     * @property {number} max - Maximal temperature.\r\n     */\r\n    TM: {\r\n      gradient: 'temp',\r\n      min: 5,\r\n      max: 40\r\n    },\r\n    /**\r\n     * Occupancy colorer options.\r\n     *\r\n     * @typedef OccupancyColorerOptions\r\n     *\r\n     * @property {string} gradient - Name of gradient to use.\r\n     */\r\n    OC: {\r\n      gradient: 'reds'\r\n    },\r\n    /**\r\n     * Hydrophobicity colorer options.\r\n     *\r\n     * @typedef HydrophobicityColorerOptions\r\n     *\r\n     * @property {string} gradient - Name of gradient to use.\r\n     */\r\n    HY: {\r\n      gradient: 'blue-red'\r\n    },\r\n    /**\r\n     * Molecule colorer options.\r\n     *\r\n     * @typedef MoleculeColorerOptions\r\n     *\r\n     * @property {string} gradient - Name of gradient to use.\r\n     */\r\n    MO: {\r\n      gradient: 'rainbow'\r\n    }\r\n  },\r\n  /*\r\n   * Use antialiasing in WebGL.\r\n   * @type {boolean}\r\n   */\r\n  antialias: true,\r\n  /*\r\n   * Camera field of view in degrees.\r\n   * @type {number}\r\n   */\r\n  camFov: 45.0,\r\n  /*\r\n   * Camera near plane distance.\r\n   * @type {number}\r\n   */\r\n  camNear: 0.5,\r\n  /*\r\n   * Camera far plane distance.\r\n   * @type {number}\r\n   */\r\n  camFar: 100.0,\r\n  camDistance: 2.5,\r\n  radiusToFit: 1.0,\r\n  /**\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  fogNearFactor: 0.5,\r\n  // [0, 1]\r\n\r\n  /**\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  fogFarFactor: 1,\r\n  // [0, 1]\r\n  fogAlpha: 1.0,\r\n  fogColor: 0x000000,\r\n  fogColorEnable: false,\r\n  /**\r\n   * Palette used for molecule coloring.\r\n   * @type {string}\r\n   */\r\n  palette: 'JM',\r\n  /*\r\n   * Geometry resolution.\r\n   * @type {string}\r\n   */\r\n  resolution: 'medium',\r\n  autoResolution: false /* true */,\r\n\r\n  autoPreset: true,\r\n  preset: 'default',\r\n  // TODO: remove 'preset' from settings, implement autodetection\r\n\r\n  presets: {\r\n    // Default\r\n    default: [{\r\n      mode: 'BS',\r\n      colorer: 'EL',\r\n      selector: 'all',\r\n      material: 'SF'\r\n    }],\r\n    empty: [],\r\n    // Wireframe\r\n    wire: [{\r\n      mode: 'LN',\r\n      colorer: 'EL',\r\n      selector: 'all',\r\n      material: 'SF'\r\n    }],\r\n    // Small molecules\r\n    small: [{\r\n      mode: 'BS',\r\n      colorer: 'EL',\r\n      selector: 'all',\r\n      material: 'SF'\r\n    }],\r\n    // Proteins, nucleic acids etc.\r\n    macro: [{\r\n      mode: 'CA',\r\n      colorer: 'SS',\r\n      selector: 'not hetatm',\r\n      material: 'SF'\r\n    }, {\r\n      mode: 'BS',\r\n      colorer: 'EL',\r\n      selector: 'hetatm and not water',\r\n      material: 'SF'\r\n    }]\r\n  },\r\n  objects: {\r\n    line: {\r\n      color: 0xFFFFFFFF,\r\n      dashSize: 0.3,\r\n      gapSize: 0.05\r\n    }\r\n  },\r\n  //----------------------------------------------------------------------------\r\n\r\n  bg: {\r\n    color: 0x202020,\r\n    transparent: false\r\n  },\r\n  draft: {\r\n    clipPlane: false,\r\n    clipPlaneFactor: 0.5,\r\n    clipPlaneSpeed: 0.00003\r\n  },\r\n  /*\r\n     * Separate group for plugins.\r\n     * Each plugin handles its field by itself.\r\n     */\r\n  plugins: {},\r\n  /**\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  axes: true,\r\n  /**\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  fog: true,\r\n  /**\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  fps: true,\r\n  /**\r\n   * Switch using of z-sprites for sphere and cylinder geometry\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  zSprites: true,\r\n  isoSurfaceFakeOpacity: true,\r\n  /**\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  suspendRender: true,\r\n  nowater: false,\r\n  /**\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  autobuild: true,\r\n  /**\r\n   * Anti-aliasing.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  fxaa: true,\r\n  /**\r\n   * Outline depths\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  outline: {\r\n    on: false,\r\n    color: 0x000000,\r\n    threshold: 0.1,\r\n    thickness: 1\r\n  },\r\n  /**\r\n   * Ambient Occlusion special effect.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  ao: false,\r\n  /**\r\n   * Shadows options.\r\n   *\r\n   * @property {boolean} shadowMap - enable/disable.\r\n   * @property {string} basic/percentage-closer filtering/non-uniform randomizing pcf.\r\n   * @property {number} radius for percentage-closer filtering.\r\n   */\r\n  shadow: {\r\n    on: false,\r\n    type: 'random' /* basic, pcf, random */,\r\n    radius: 1.0\r\n  },\r\n  /**\r\n   * Auto-rotation with constant speed.\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  autoRotation: 0.0,\r\n  /**\r\n   * Set maximum fps for animation.\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  maxfps: 30,\r\n  /**\r\n   * Set fbx output precision.\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  fbxprec: 4,\r\n  /**\r\n   * Auto-rotation axis.\r\n   *\r\n   * - true:  complex auto-rotation is about vertical axis\r\n   * - false: rotation axis is defined by last user rotation\r\n   *\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  autoRotationAxisFixed: true,\r\n  /**\r\n   * Enable zooming with mouse wheel or pinch gesture.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  zooming: true,\r\n  /**\r\n   * Enable picking atoms & residues with left mouse button or touch.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  picking: true,\r\n  /**\r\n   * Set picking mode ('atom', 'residue', 'chain', 'molecule').\r\n   * @type {string}\r\n   * @instance\r\n   */\r\n  pick: 'atom',\r\n  /**\r\n   * Make \"component\" and \"fragment\" editing modes available.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  editing: false,\r\n  /**\r\n   * Detect aromatic loops.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  aromatic: false,\r\n  /**\r\n   * Load only one biological unit from all those described in PDB file.\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  singleUnit: true,\r\n  /**\r\n   * Set stereo mode ('NONE', 'SIMPLE', 'DISTORTED', 'ANAGLYPH', 'WEBVR').\r\n   * @type {string}\r\n   * @instance\r\n   */\r\n  stereo: 'NONE',\r\n  /**\r\n   * Enable smooth transition between views\r\n   * @type {boolean}\r\n   * @instance\r\n   */\r\n  interpolateViews: true,\r\n  /**\r\n   * Set transparency mode ('standard', 'prepass').\r\n   * @type {string}\r\n   * @instance\r\n   */\r\n  transparency: 'prepass',\r\n  /**\r\n   * Mouse translation speed.\r\n   * @type {number}\r\n   * @instance\r\n   */\r\n  translationSpeed: 2,\r\n  debug: {\r\n    example: 3.5,\r\n    text: 'hello!',\r\n    good: true,\r\n    ssaoKernelRadius: 0.7,\r\n    ssaoFactor: 0.7,\r\n    stereoBarrel: 0.25\r\n  },\r\n  use: {\r\n    multiFile: false\r\n  }\r\n};\r\n\r\n//----------------------------------------------------------------------------\r\n// SETTINGS CLASS\r\n//----------------------------------------------------------------------------\r\n\r\nfunction Settings() {\r\n  utils_EventDispatcher.call(this);\r\n  this.old = null;\r\n  this.now = {};\r\n  this._changed = {};\r\n  this.reset();\r\n}\r\nutils.deriveClass(Settings, utils_EventDispatcher, {\r\n  defaults: settings_defaults,\r\n  set(path, value) {\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(path)) {\r\n      const oldValue = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(this.now, path);\r\n      if (oldValue !== value) {\r\n        external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(this.now, path, value);\r\n        this._notifyChange(path, value);\r\n      }\r\n    } else {\r\n      const diff = utils.objectsDiff(path, this.now);\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n        external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(this.now, diff);\r\n        this._notifyChanges(diff);\r\n      }\r\n    }\r\n  },\r\n  get(path, defaultValue) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(this.now, path, defaultValue);\r\n  },\r\n  reset() {\r\n    const diff = utils.objectsDiff(settings_defaults, this.now);\r\n    this.now = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].cloneDeep(settings_defaults);\r\n    this.old = null;\r\n    this._notifyChanges(diff);\r\n    this._changed = {};\r\n  },\r\n  checkpoint() {\r\n    this.old = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].cloneDeep(this.now);\r\n    this._changed = {};\r\n  },\r\n  _notifyChange(path, value) {\r\n    this._changed[path] = true;\r\n    this.dispatchEvent({\r\n      type: `change:${path}`,\r\n      value\r\n    });\r\n  },\r\n  _notifyChanges(diff) {\r\n    utils.forInRecursive(diff, (deepValue, deepPath) => {\r\n      this._notifyChange(deepPath, deepValue);\r\n    });\r\n  },\r\n  changed() {\r\n    if (!this.old) {\r\n      return [];\r\n    }\r\n    const {\r\n      old,\r\n      now\r\n    } = this;\r\n    const keys = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].filter(Object.keys(this._changed), key => external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(old, key) !== external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(now, key));\r\n    return keys;\r\n  },\r\n  applyDiffs(diffs) {\r\n    if (diffs.hasOwnProperty('VERSION') && diffs.VERSION !== VERSION) {\r\n      throw new Error('Settings version does not match!');\r\n    }\r\n    // VERSION shouldn't be presented inside settings structure\r\n    delete diffs.VERSION;\r\n    this.reset();\r\n    this.set(diffs);\r\n  },\r\n  getDiffs(versioned) {\r\n    const diffs = utils.objectsDiff(this.now, settings_defaults);\r\n    if (versioned) {\r\n      diffs.VERSION = VERSION;\r\n    }\r\n    return diffs;\r\n  },\r\n  setPluginOpts(plugin, opts) {\r\n    settings_defaults.plugins[plugin] = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].cloneDeep(opts);\r\n    this.now.plugins[plugin] = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].cloneDeep(opts);\r\n  }\r\n});\r\n/* harmony default export */ const settings = (new Settings());\r\n;// CONCATENATED MODULE: ./src/options.js\r\n\r\n\r\n\r\n\r\nlet repIndex = 0;\r\nfunction asBoolean(value) {\r\n  return !(!value || value === '0' || external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(value) && value.toLowerCase() === 'false');\r\n}\r\nconst adapters = {\r\n  string: String,\r\n  number: Number,\r\n  boolean: asBoolean\r\n};\r\n\r\n// Level 1 assignment symbol\r\nconst cL1Ass = '=';\r\nconst cOptsSep = '!';\r\n// Level 2 (options) assignment symbol\r\nconst cL2Ass = ':';\r\n// Level 2 (options) separator symbol\r\nconst cLSep = ',';\r\nconst cCommonIgnoreSymbols = '$;@/?';\r\n/**\r\n * We may (and should) leave as is for better readability:\r\n *\r\n *        $ , ; : @ / ?\r\n */\r\n/**\r\n * Generate regular expression for symbols excluded for first level encryption\r\n */\r\nfunction getLevel1ExcludedExpr() {\r\n  const cLevel1Ignores = ':,';\r\n  return utils.generateRegExp(cCommonIgnoreSymbols + cLevel1Ignores);\r\n}\r\n\r\n/**\r\n * Generate regular expression for symbols excluded for first level encryption\r\n * (options, etc, ..)\r\n */\r\nfunction getLevel2ExcludedExpr() {\r\n  const cLevel2Ignores = ' ';\r\n  return utils.generateRegExp(cCommonIgnoreSymbols + cLevel2Ignores);\r\n}\r\nconst cL1ExclExpr = getLevel1ExcludedExpr();\r\nfunction encodeQueryComponentL1(value) {\r\n  return utils.encodeQueryComponent(value, cL1ExclExpr);\r\n}\r\nconst cL2ExclExpr = getLevel2ExcludedExpr();\r\nfunction encodeQueryComponentL2(value) {\r\n  return utils.encodeQueryComponent(value, cL2ExclExpr);\r\n}\r\nfunction ensureRepList(opts) {\r\n  let {\r\n    reps\r\n  } = opts;\r\n  if (!reps) {\r\n    const {\r\n      presets\r\n    } = settings.now;\r\n    let preset = opts.preset || settings.now.preset;\r\n    reps = presets[preset];\r\n    if (!reps) {\r\n      logger.warn(`Unknown preset \"${preset}\"`);\r\n      [preset] = Object.keys(presets);\r\n      reps = presets[preset]; // fall back to any preset\r\n    }\r\n    opts.preset = preset;\r\n    opts.reps = utils.deriveDeep(reps, true);\r\n  }\r\n}\r\nfunction ensureRepAssign(opts, prop, value) {\r\n  ensureRepList(opts);\r\n  const rep = opts.reps[repIndex];\r\n  // prop specified twice therefore start new rep by cloning the current\r\n  if (rep.hasOwnProperty(prop)) {\r\n    repIndex = opts.reps.length;\r\n    opts.reps[repIndex] = utils.deriveDeep(rep, true);\r\n  }\r\n  if (value !== undefined) {\r\n    opts.reps[repIndex][prop] = value;\r\n  }\r\n}\r\nfunction addObject(opts, params, options) {\r\n  if (opts._objects === undefined) {\r\n    opts._objects = [];\r\n  }\r\n  const [type, newOpts] = options;\r\n  const newObj = {\r\n    type,\r\n    params\r\n  };\r\n  if (newOpts !== undefined) {\r\n    newObj.opts = newOpts;\r\n  }\r\n  opts._objects[opts._objects.length] = newObj;\r\n}\r\nfunction parseParams(str, params) {\r\n  const sep = str.indexOf(',');\r\n  if (sep >= 0) {\r\n    params.push(str.substr(sep + 1).split(','));\r\n    return str.substr(0, sep);\r\n  }\r\n  // keep this untouched if no params were extracted\r\n  return str;\r\n}\r\nfunction extractArgs(input, defaultsDict, params) {\r\n  if (input) {\r\n    const bang = input.indexOf(cOptsSep);\r\n    const inputVal = parseParams(input.substr(0, bang >= 0 ? bang : undefined), params);\r\n    if (bang >= 0) {\r\n      const args = input.substr(bang + 1).split(cLSep);\r\n      input = inputVal;\r\n      if (defaultsDict) {\r\n        const defaults = defaultsDict[input];\r\n        const opts = utils.deriveDeep(defaults, true);\r\n        args.forEach(arg => {\r\n          const pair = arg.split(cL2Ass, 2);\r\n          const key = decodeURIComponent(pair[0]);\r\n          const value = decodeURIComponent(pair[1]);\r\n          const adapter = adapters[typeof external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(defaults, key)];\r\n          if (adapter) {\r\n            external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(opts, key, adapter(value));\r\n          } else {\r\n            logger.warn(`Unknown argument \"${key}\" for option \"${input}\"`);\r\n          }\r\n        });\r\n        if (Object.keys(opts).length > 0) {\r\n          input = [input, opts];\r\n        }\r\n      }\r\n    } else {\r\n      input = inputVal;\r\n    }\r\n  }\r\n  return input;\r\n}\r\nconst actions = {\r\n  l: 'load',\r\n  load: String,\r\n  t: 'type',\r\n  type: String,\r\n  v: 'view',\r\n  view: String,\r\n  u: 'unit',\r\n  unit: Number,\r\n  menu: asBoolean,\r\n  // Commands\r\n\r\n  o: 'object',\r\n  object(value, opts) {\r\n    const params = [];\r\n    let options = extractArgs(value, settings.defaults.objects, params);\r\n    if (!Array.isArray(options)) {\r\n      options = [options];\r\n    }\r\n    addObject(opts, params[0], options);\r\n  },\r\n  p: 'preset',\r\n  preset(value, opts) {\r\n    opts.preset = value;\r\n    opts.reps = null;\r\n    ensureRepList(opts);\r\n  },\r\n  r: 'rep',\r\n  rep(value, opts) {\r\n    ensureRepList(opts);\r\n    repIndex = Number(value);\r\n    // clamp the index to one greater than the last\r\n    repIndex = repIndex <= opts.reps.length ? repIndex < 0 ? 0 : repIndex : opts.reps.length;\r\n    // create a new rep if it is adjacent to the existing ones\r\n    if (repIndex === opts.reps.length) {\r\n      // if there is no rep to derive from, derive from the first rep of the default\r\n      opts.reps[repIndex] = repIndex > 0 ? utils.deriveDeep(opts.reps[repIndex - 1], true) : utils.deriveDeep(settings.defaults.presets.default[0], true);\r\n    }\r\n  },\r\n  s: 'select',\r\n  select(value, opts) {\r\n    ensureRepAssign(opts, 'selector', value);\r\n  },\r\n  m: 'mode',\r\n  mode(value, opts) {\r\n    ensureRepAssign(opts, 'mode', extractArgs(value, settings.defaults.modes));\r\n  },\r\n  c: 'color',\r\n  color(value, opts) {\r\n    ensureRepAssign(opts, 'colorer', extractArgs(value, settings.defaults.colorers));\r\n  },\r\n  mt: 'material',\r\n  material(value, opts) {\r\n    ensureRepAssign(opts, 'material', extractArgs(value, settings.defaults.materials));\r\n  },\r\n  dup(value, opts) {\r\n    ensureRepList(opts);\r\n    const {\r\n      reps\r\n    } = opts;\r\n    const rep = reps[repIndex];\r\n    repIndex = reps.length;\r\n    reps[repIndex] = utils.deriveDeep(rep, true);\r\n  },\r\n  // Settings shortcuts\r\n\r\n  ar: 'autoResolution'\r\n};\r\nfunction _fromArray(entries) {\r\n  repIndex = 0;\r\n  const opts = {};\r\n  for (let i = 0, n = entries.length; i < n; ++i) {\r\n    const /** string[] */entry = entries[i];\r\n    let /** string? */key = entry[0];\r\n    const /** string? */value = entry[1];\r\n    let /** function|string? */action = actions[key];\r\n\r\n    // unwind shortcuts and aliases\r\n    while (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(action)) {\r\n      key = action;\r\n      action = actions[key];\r\n    }\r\n\r\n    // either set a property or use specialized parser\r\n    if (!action) {\r\n      const adapter = adapters[typeof external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(settings.defaults, key)];\r\n      if (adapter) {\r\n        external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(opts, `settings.${key}`, adapter(value));\r\n      } else {\r\n        logger.warn(`Unknown option \"${key}\"`);\r\n      }\r\n    } else if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isFunction(action)) {\r\n      const result = action(value, opts);\r\n      if (result !== undefined) {\r\n        opts[key] = result;\r\n      }\r\n    }\r\n  }\r\n  return opts;\r\n}\r\nfunction fromAttr(attr) {\r\n  return _fromArray(utils.getUrlParameters(`?${attr || ''}`));\r\n}\r\nfunction fromURL(url) {\r\n  return _fromArray(utils.getUrlParameters(url));\r\n}\r\nfunction _processOptsForURL(opts) {\r\n  const str = [];\r\n  let i = 0;\r\n  utils.forInRecursive(opts, (value, key) => {\r\n    str[i++] = encodeQueryComponentL2(key) + cL2Ass + encodeQueryComponentL2(value);\r\n  });\r\n  return str.join(cLSep);\r\n}\r\nfunction _processArgsForURL(args) {\r\n  if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(args)) {\r\n    return args;\r\n  }\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  return `${args[0]}${cOptsSep}${_processOptsForURL(args[1])}`;\r\n}\r\nfunction _processObjForURL(objOpts) {\r\n  if (!objOpts || !objOpts.type) {\r\n    return undefined;\r\n  }\r\n  let res = objOpts.type;\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(objOpts.params) && objOpts.params.length > 0) {\r\n    res += `,${objOpts.params.join(',')}`;\r\n  }\r\n  if (objOpts.opts) {\r\n    res += cOptsSep + _processOptsForURL(objOpts.opts);\r\n  }\r\n  return res;\r\n}\r\nfunction toURL(opts) {\r\n  const stringList = [];\r\n  let idx = 0;\r\n  function checkAndAdd(prefix, value) {\r\n    if (value !== null && value !== undefined) {\r\n      stringList[idx++] = encodeQueryComponentL1(prefix) + cL1Ass + encodeQueryComponentL1(value);\r\n    }\r\n  }\r\n  function addReps(repList) {\r\n    if (!repList) {\r\n      return;\r\n    }\r\n    for (let i = 0, n = repList.length; i < n; ++i) {\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(repList[i])) {\r\n        continue;\r\n      }\r\n      checkAndAdd('r', i);\r\n      checkAndAdd('s', repList[i].selector);\r\n      checkAndAdd('m', _processArgsForURL(repList[i].mode));\r\n      checkAndAdd('c', _processArgsForURL(repList[i].colorer));\r\n      checkAndAdd('mt', _processArgsForURL(repList[i].material));\r\n    }\r\n  }\r\n  function addObjects(objList) {\r\n    if (!objList) {\r\n      return;\r\n    }\r\n    for (let i = 0, n = objList.length; i < n; ++i) {\r\n      checkAndAdd('o', _processObjForURL(objList[i]));\r\n    }\r\n  }\r\n  checkAndAdd('l', opts.load);\r\n  checkAndAdd('u', opts.unit);\r\n  checkAndAdd('p', opts.preset);\r\n  addReps(opts.reps);\r\n  addObjects(opts._objects);\r\n  checkAndAdd('v', opts.view);\r\n  utils.forInRecursive(opts.settings, (value, key) => {\r\n    // I heard these lines in the whispers of the Gods\r\n    // Handle preset setting in reps\r\n    if (key === 'preset') {\r\n      return;\r\n    }\r\n    checkAndAdd(key, value);\r\n  });\r\n  let url = '';\r\n  if (typeof window !== 'undefined') {\r\n    const {\r\n      location\r\n    } = window;\r\n    url = `${location.protocol}//${location.host}${location.pathname}`;\r\n  }\r\n  if (stringList.length > 0) {\r\n    url += `?${stringList.join('&')}`;\r\n  }\r\n  return url;\r\n}\r\nfunction _processOptsForScript(opts) {\r\n  const str = [];\r\n  let i = 0;\r\n  utils.forInRecursive(opts, (value, key) => {\r\n    str[i++] = `${key}=${utils.enquoteString(value)}`;\r\n  });\r\n  return str.join(' ');\r\n}\r\nfunction _processArgsForScript(args) {\r\n  if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(args)) {\r\n    return args;\r\n  }\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  return `${args[0]} ${_processOptsForScript(args[1])}`;\r\n}\r\nfunction _processObjForScript(objOpts) {\r\n  if (!objOpts || !objOpts.type) {\r\n    return undefined;\r\n  }\r\n  let res = objOpts.type;\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(objOpts.params) && objOpts.params.length > 0) {\r\n    res += ` ${objOpts.params.map(utils.enquoteString).join(' ')}`;\r\n  }\r\n  if (objOpts.opts) {\r\n    res += ` ${_processOptsForScript(objOpts.opts)}`;\r\n  }\r\n  return res;\r\n}\r\nfunction _processRepsForScript(rep, index) {\r\n  const repString = [];\r\n  let strIdx = 0;\r\n  function localAdd(prefix, value) {\r\n    if (value !== null && value !== undefined) {\r\n      repString[strIdx++] = prefix + value;\r\n    }\r\n  }\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(rep)) {\r\n    return null;\r\n  }\r\n  localAdd('', index);\r\n  localAdd('s=', utils.enquoteString(rep.selector));\r\n  localAdd('m=', _processArgsForScript(rep.mode));\r\n  localAdd('c=', _processArgsForScript(rep.colorer));\r\n  localAdd('mt=', _processArgsForScript(rep.material));\r\n  return repString.join(' ');\r\n}\r\nfunction toScript(opts) {\r\n  const commandsList = [];\r\n  let idx = 0;\r\n  function checkAndAdd(command, value, saveQuotes) {\r\n    if (value !== null && value !== undefined) {\r\n      const quote = typeof value === 'string' && saveQuotes ? '\"' : '';\r\n      commandsList[idx++] = `${command} ${quote}${value}${quote}`.trim();\r\n    }\r\n  }\r\n  function addReps(repList) {\r\n    if (!repList) {\r\n      return;\r\n    }\r\n    for (let i = 0, n = repList.length; i < n; ++i) {\r\n      checkAndAdd('rep', _processRepsForScript(repList[i], i));\r\n    }\r\n  }\r\n  function addObjects(objList) {\r\n    if (!objList) {\r\n      return;\r\n    }\r\n    for (let i = 0, n = objList.length; i < n; ++i) {\r\n      checkAndAdd('', _processObjForScript(objList[i]));\r\n    }\r\n  }\r\n  checkAndAdd('set', 'autobuild false');\r\n  checkAndAdd('load', opts.load, true);\r\n  checkAndAdd('unit', opts.unit);\r\n  checkAndAdd('preset', opts.preset);\r\n  addReps(opts.reps);\r\n  addObjects(opts._objects);\r\n  utils.forInRecursive(opts.settings, (value, key) => {\r\n    // I heard these lines in the whispers of the Gods\r\n    // Handle preset setting in reps\r\n    if (key === 'preset') {\r\n      return;\r\n    }\r\n    checkAndAdd(`set ${key}`, value, true);\r\n  });\r\n  checkAndAdd('view', opts.view);\r\n  checkAndAdd('set', 'autobuild true');\r\n  return commandsList.join('\\n');\r\n}\r\n/* harmony default export */ const options = ({\r\n  fromURL,\r\n  fromAttr,\r\n  adapters,\r\n  toURL,\r\n  toScript\r\n});\r\n;// CONCATENATED MODULE: ./src/chem/Atom.js\r\n/**\r\n * Atom measurements.\r\n *\r\n * @param {Residue} residue    - (required) Residue containing the atom\r\n * @param {string} name        - (required) Name, unique in the residue\r\n * @param {Element} type       - (required) Chemical element reference\r\n * @param {THREE.Vector3} position - Registered coordinates\r\n *\r\n * @param {number} role        - Role of atom inside monomer: Lead and wing are particularity interesting\r\n * @param {boolean} het        - Non-standard residue indicator\r\n *\r\n * @param {number} serial      - Serial number, unique in the model\r\n * @param {string} location    - Alternative location indicator (usually space or A-Z)\r\n * @param {number} occupancy   - Occupancy percentage, from 0 to 1\r\n * @param {number} temperature - Temperature\r\n * @param {number} charge      - Charge\r\n *\r\n * @exports Atom\r\n * @constructor\r\n */\r\n\r\nclass Atom {\r\n  constructor(residue, name, type, position, role, het, serial, location, occupancy, temperature, charge) {\r\n    this.index = -1;\r\n    this.residue = residue;\r\n    this.name = name;\r\n    this.element = type;\r\n    this.position = position;\r\n    this.role = role;\r\n    this.mask = 1 | 0;\r\n    this.het = het;\r\n    this.serial = serial;\r\n    this.location = (location || ' ').charCodeAt(0);\r\n    this.occupancy = occupancy || 1;\r\n    this.temperature = temperature;\r\n    this.charge = charge;\r\n    this.hydrogenCount = -1; // explicitly invalid\r\n    this.radicalCount = 0;\r\n    this.valence = -1; // explicitly invalid\r\n\r\n    this.bonds = [];\r\n    this.flags = 0x0000;\r\n    if (type.name === 'H') {\r\n      this.flags |= Atom.Flags.HYDROGEN;\r\n    } else if (type.name === 'C') {\r\n      this.flags |= Atom.Flags.CARBON;\r\n    }\r\n  }\r\n  isHet() {\r\n    return this.het;\r\n  }\r\n  isHydrogen() {\r\n    return this.element.number === 1;\r\n  }\r\n  getVisualName() {\r\n    const {\r\n      name\r\n    } = this;\r\n    if (name.length > 0) {\r\n      return name;\r\n    }\r\n    return this.element.name.trim();\r\n  }\r\n  forEachBond(process) {\r\n    const {\r\n      bonds\r\n    } = this;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      process(bonds[i]);\r\n    }\r\n  }\r\n  getFullName() {\r\n    let name = '';\r\n    if (this.residue !== null) {\r\n      if (this.residue._chain !== null) {\r\n        name += `${this.residue._chain.getName()}.`;\r\n      }\r\n      name += `${this.residue._sequence}.`;\r\n    }\r\n    name += this.name;\r\n    return name;\r\n  }\r\n\r\n  /**\r\n   * Enumeration of atom flag values.\r\n   *\r\n   * @enum {number}\r\n   * @readonly\r\n   */\r\n  static Flags = {\r\n    CARBON: 0x0001,\r\n    // OXYGEN: 0x0002,\r\n    // NITROGEN: 0x0004,\r\n    HYDROGEN: 0x0008,\r\n    /** Non-polar hydrogen (it is also a HYDROGEN) */\r\n    NONPOLARH: 0x1008\r\n  };\r\n}\r\n/* harmony default export */ const chem_Atom = (Atom);\r\n;// CONCATENATED MODULE: ./src/chem/Element.js\r\nclass Element {\r\n  constructor(number, name, fullName, weight, radius, radiusBonding, hValency) {\r\n    this.number = number;\r\n    this.name = name;\r\n    this.fullName = fullName;\r\n    this.weight = weight;\r\n    this.radius = radius;\r\n    this.radiusBonding = radiusBonding;\r\n    this.hydrogenValency = hValency;\r\n  }\r\n  static Constants = {\r\n    /* eslint-disable no-magic-numbers */\r\n    U1: 1,\r\n    Lead: 2,\r\n    U2: 3,\r\n    Wing: 4,\r\n    U18: 18\r\n    /* eslint-enable no-magic-numbers */\r\n  };\r\n  static Role = (() => ({\r\n    /* eslint-disable no-magic-numbers */\r\n    N: Element.Constants.U1,\r\n    CA: Element.Constants.Lead,\r\n    C: Element.Constants.U2,\r\n    O: Element.Constants.Wing,\r\n    SG: Element.Constants.U18\r\n    /* eslint-enable no-magic-numbers */\r\n  }))();\r\n\r\n  // DO NOT EDIT MANUALLY! Autogenerated from atom_types.csv by atom_types.py.\r\n  static ByAtomicNumber = (() => [/* eslint-disable no-magic-numbers */\r\n  null, new Element(1, 'H', 'Hydrogen', 1.008, 1.2, 0.23, [1]), new Element(2, 'HE', 'Helium', 4.003, 1.4, 0.93, [0]), new Element(3, 'LI', 'Lithium', 6.941, 1.82, 0.68, [1]), new Element(4, 'BE', 'Beryllium', 9.012, 1.7, 0.35, [2]), new Element(5, 'B', 'Boron', 10.81, 2.08, 0.83, [3]), new Element(6, 'C', 'Carbon', 12.011, 1.95, 0.68, [4]), new Element(7, 'N', 'Nitrogen', 14.007, 1.85, 0.68, [3, 5]), new Element(8, 'O', 'Oxygen', 15.999, 1.7, 0.68, [2, 4]), new Element(9, 'F', 'Fluorine', 18.998, 1.73, 0.64, [1]), new Element(10, 'NE', 'Neon', 20.18, 1.54, 1.12, [0]), new Element(11, 'NA', 'Sodium', 22.99, 2.27, 0.97, [1]), new Element(12, 'MG', 'Magnesium', 24.305, 1.73, 1.1, [2]), new Element(13, 'AL', 'Aluminum', 26.981, 2.05, 1.35, [3]), new Element(14, 'SI', 'Silicon', 28.086, 2.1, 1.2, [4]), new Element(15, 'P', 'Phosphorus', 30.974, 2.08, 0.75, [3, 5]), new Element(16, 'S', 'Sulfur', 32.07, 2, 1.02, [2, 4, 6]), new Element(17, 'CL', 'Chlorine', 35.453, 1.97, 0.99, [1, 3, 5, 7]), new Element(18, 'AR', 'Argon', 39.948, 1.88, 1.57, [0]), new Element(19, 'K', 'Potassium', 39.1, 2.75, 1.33, [1]), new Element(20, 'CA', 'Calcium', 40.08, 1.973, 0.99, [2]), new Element(21, 'SC', 'Scandium', 44.956, 1.7, 1.44, [0]), new Element(22, 'TI', 'Titanium', 47.88, 1.7, 1.47, [0]), new Element(23, 'V', 'Vanadium', 50.941, 1.7, 1.33, [0]), new Element(24, 'CR', 'Chromium', 52, 1.7, 1.35, [0]), new Element(25, 'MN', 'Manganese', 54.938, 1.7, 1.35, [0]), new Element(26, 'FE', 'Iron', 55.847, 1.7, 1.34, [0]), new Element(27, 'CO', 'Cobalt', 58.93, 1.7, 1.33, [0]), new Element(28, 'NI', 'Nickel', 58.69, 1.63, 1.5, [0]), new Element(29, 'CU', 'Copper', 63.55, 1.4, 1.52, [0]), new Element(30, 'ZN', 'Zinc', 65.39, 1.39, 1.45, [0]), new Element(31, 'GA', 'Gallium', 69.72, 1.87, 1.22, [3]), new Element(32, 'GE', 'Germanium', 72.61, 1.7, 1.17, [4]), new Element(33, 'AS', 'Arsenic', 74.92, 1.85, 1.21, [3, 5]), new Element(34, 'SE', 'Selenium', 78.96, 1.9, 1.22, [2, 4, 6]), new Element(35, 'BR', 'Bromine', 79.9, 2.1, 1.21, [1, 3, 5, 7]), new Element(36, 'KR', 'Krypton', 83.8, 2.02, 1.91, [0]), new Element(37, 'RB', 'Rubidium', 85.47, 1.7, 1.47, [1]), new Element(38, 'SR', 'Strontium', 87.62, 1.7, 1.12, [2]), new Element(39, 'Y', 'Yttrium', 88.91, 1.7, 1.78, [0]), new Element(40, 'ZR', 'Zirconium', 91.22, 1.7, 1.56, [0]), new Element(41, 'NB', 'Niobium', 92.91, 1.7, 1.48, [0]), new Element(42, 'MO', 'Molybdenum', 95.94, 1.7, 1.47, [0]), new Element(43, 'TC', 'Technetium', 98.91, 1.7, 1.35, [0]), new Element(44, 'RU', 'Ruthenium', 101.07, 1.7, 1.4, [0]), new Element(45, 'RH', 'Rhodium', 102.91, 1.7, 1.45, [0]), new Element(46, 'PD', 'Palladium', 106.42, 1.63, 1.5, [0]), new Element(47, 'AG', 'Silver', 107.87, 1.72, 1.59, [0]), new Element(48, 'CD', 'Cadmium', 112.41, 1.58, 1.69, [0]), new Element(49, 'IN', 'Indium', 114.82, 1.93, 1.63, [3]), new Element(50, 'SN', 'Tin', 118.71, 2.17, 1.46, [2, 4]), new Element(51, 'SB', 'Antimony', 121.75, 2.2, 1.46, [3, 5]), new Element(52, 'TE', 'Tellurium', 127.6, 2.06, 1.47, [2, 4, 6]), new Element(53, 'I', 'Iodine', 126.91, 2.15, 1.4, [1, 3, 5, 7]), new Element(54, 'XE', 'Xenon', 131.29, 2.16, 1.98, [0]), new Element(55, 'CS', 'Cesium', 132.91, 1.7, 1.67, [1]), new Element(56, 'BA', 'Barium', 137.33, 1.7, 1.34, [2]), new Element(57, 'LA', 'Lanthanum', 138.91, 1.7, 1.87, [0]), new Element(58, 'CE', 'Cerium', 140.12, 1.7, 1.83, [0]), new Element(59, 'PR', 'Praseodymium', 140.91, 1.7, 1.82, [0]), new Element(60, 'ND', 'Neodymium', 144.24, 1.7, 1.81, [0]), new Element(61, 'PM', 'Promethium', 144.9, 1.7, 1.8, [0]), new Element(62, 'SM', 'Samarium', 150.36, 1.7, 1.8, [0]), new Element(63, 'EU', 'Europium', 151.96, 1.7, 1.99, [0]), new Element(64, 'GD', 'Gadolinium', 157.25, 1.7, 1.79, [0]), new Element(65, 'TB', 'Terbium', 158.93, 1.7, 1.76, [0]), new Element(66, 'DY', 'Dysprosium', 162.5, 1.7, 1.75, [0]), new Element(67, 'HO', 'Holmium', 164.93, 1.7, 1.74, [0]), new Element(68, 'ER', 'Erbium', 167.26, 1.7, 1.73, [0]), new Element(69, 'TM', 'Thulium', 168.93, 1.7, 1.72, [0]), new Element(70, 'YB', 'Ytterbium', 173.04, 1.7, 1.94, [0]), new Element(71, 'LU', 'Lutetium', 174.97, 1.7, 1.72, [0]), new Element(72, 'HF', 'Hafnium', 178.49, 1.7, 1.57, [0]), new Element(73, 'TA', 'Tantalum', 180.95, 1.7, 1.43, [0]), new Element(74, 'W', 'Tungsten', 183.85, 1.7, 1.37, [0]), new Element(75, 'RE', 'Rhenium', 186.21, 1.7, 1.35, [0]), new Element(76, 'OS', 'Osmium', 190.2, 1.7, 1.37, [0]), new Element(77, 'IR', 'Iridium', 192.22, 1.7, 1.32, [0]), new Element(78, 'PT', 'Platinum', 195.08, 1.72, 1.5, [0]), new Element(79, 'AU', 'Gold', 196.97, 1.66, 1.5, [0]), new Element(80, 'HG', 'Mercury', 200.59, 1.55, 1.7, [0]), new Element(81, 'TL', 'Thallium', 204.38, 1.96, 1.55, [1, 3]), new Element(82, 'PB', 'Lead', 207.2, 2.02, 1.54, [2, 4]), new Element(83, 'BI', 'Bismuth', 208.98, 1.7, 1.54, [3, 5]), new Element(84, 'PO', 'Polonium', 210, 1.7, 1.68, [2, 4, 6]), new Element(85, 'AT', 'Astatine', 210, 1.7, 1.7, [1, 3, 5, 7]), new Element(86, 'RN', 'Radon', 222, 1.7, 2.4, [0]), new Element(87, 'FR', 'Francium', 223, 1.7, 2, [1]), new Element(88, 'RA', 'Radium', 226.03, 1.7, 1.9, [2]), new Element(89, 'AC', 'Actinium', 227.03, 1.7, 1.88, [0]), new Element(90, 'TH', 'Thorium', 232.04, 1.7, 1.79, [0]), new Element(91, 'PA', 'Protactinium', 231.04, 1.7, 1.61, [0]), new Element(92, 'U', 'Uranium', 238.03, 1.86, 1.58, [0]), new Element(93, 'NP', 'Neptunium', 237.05, 1.7, 1.55, [0]), new Element(94, 'PU', 'Plutonium', 239.1, 1.7, 1.53, [0]), new Element(95, 'AM', 'Americium', 243.1, 1.7, 1.51, [0]), new Element(96, 'CM', 'Curium', 247.1, 1.7, 1.5, [0]), new Element(97, 'BK', 'Berkelium', 247.1, 1.7, 1.5, [0]), new Element(98, 'CF', 'Californium', 252.1, 1.7, 1.5, [0]), new Element(99, 'ES', 'Einsteinium', 252.1, 1.7, 1.5, [0]), new Element(100, 'FM', 'Fermium', 257.1, 1.7, 1.5, [0]), new Element(101, 'MD', 'Mendelevium', 256.1, 1.7, 1.5, [0]), new Element(102, 'NO', 'Nobelium', 259.1, 1.7, 1.5, [0]), new Element(103, 'LR', 'Lawrencium', 260.1, 1.7, 1.5, [0]), new Element(104, 'RF', 'Rutherfordium', 261, 1.7, 1.6, [0]), new Element(105, 'DB', 'Dubnium', 262, 1.7, 1.6, [0]), new Element(106, 'SG', 'Seaborgium', 263, 1.7, 1.6, [0]), new Element(107, 'BH', 'Bohrium', 262, 1.7, 1.6, [0]), new Element(108, 'HS', 'Hassium', 265, 1.7, 1.6, [0]), new Element(109, 'MT', 'Meitnerium', 268, 1.7, 1.6, [0])\r\n  /* eslint-enable no-magic-numbers */])();\r\n\r\n  // DO NOT EDIT MANUALLY! Autogenerated from atom_types.csv by atom_types.py.\r\n  static ByName = (() => ({\r\n    // Duplicate atomic numbers (isotopes)\r\n    /* eslint-disable no-magic-numbers */\r\n    D: new Element(1, 'D', 'Deuterium', 2.014, 1.2, 0.23, [1]),\r\n    T: new Element(1, 'T', 'Tritium', 3.016, 1.2, 0.23, [1])\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    // All regular elements will be added later, automatically\r\n  }))();\r\n}\r\n(function () {\r\n  const byAtomicNumber = Element.ByAtomicNumber;\r\n  const byName = Element.ByName;\r\n  for (let i = 0, n = byAtomicNumber.length; i < n; ++i) {\r\n    const element = byAtomicNumber[i];\r\n    if (element) {\r\n      byName[element.name] = element;\r\n    }\r\n  }\r\n})();\r\n\r\n// find atom type by chemical element (or create if missing)\r\nElement.getByName = function (element) {\r\n  let type = Element.ByName[element];\r\n  if (!type) {\r\n    type = Element.ByName[element] = new Element(0, element, 'Unknown', 0, 1.0, 0.01, [0]);\r\n  }\r\n  return type;\r\n};\r\n/* harmony default export */ const chem_Element = (Element);\r\n;// CONCATENATED MODULE: ./src/chem/Bond.js\r\nconst cBondTypes = {\r\n  /** Was generated manually */\r\n  UNKNOWN: 0,\r\n  /** Simple covalent bond */\r\n  COVALENT: 1,\r\n  /** Aromatic bond */\r\n  AROMATIC: 2\r\n};\r\nfunction getAtomPos(atom) {\r\n  return atom.position;\r\n}\r\n\r\n/**\r\n * Bond between atoms.\r\n *\r\n * @param {Atom} left     - The first atom.\r\n * @param {Atom} right    - The second atom.\r\n * @param {number} order - Order of current bond.\r\n * @param {number} type - Bond type.\r\n * @param {boolean} fixed - Indicator of a pre-specified connection (in contrast with guessed one).\r\n *\r\n * @exports Bond\r\n * @constructor\r\n */\r\nclass Bond {\r\n  constructor(left, right, order, type, fixed) {\r\n    this._left = left;\r\n    this._right = right;\r\n    this._fixed = fixed;\r\n    this._index = -1;\r\n    if (left > right) {\r\n      throw new Error('In a bond atom indices must be in increasing order');\r\n    }\r\n    this._order = order;\r\n    this._type = type;\r\n  }\r\n  getLeft() {\r\n    return this._left;\r\n  }\r\n  getRight() {\r\n    return this._right;\r\n  }\r\n  getOrder() {\r\n    return this._order;\r\n  }\r\n  calcLength() {\r\n    return this._left.position.distanceTo(this._right.position);\r\n  }\r\n  _forEachNeighbour(currAtom, process) {\r\n    const {\r\n      bonds\r\n    } = currAtom;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      process(bonds[i]._left !== currAtom ? bonds[i]._left : bonds[i]._right);\r\n    }\r\n  }\r\n  forEachLevelOne(process) {\r\n    const left = this._left;\r\n    const right = this._right;\r\n    this._forEachNeighbour(left, atom => {\r\n      if (atom === right) {\r\n        return;\r\n      }\r\n      process(atom);\r\n    });\r\n    this._forEachNeighbour(right, atom => {\r\n      if (atom === left) {\r\n        return;\r\n      }\r\n      process(atom);\r\n    });\r\n  }\r\n  forEachLevelTwo(process) {\r\n    // TODO refactor this piece of an art?\r\n    const left = this._left;\r\n    const right = this._right;\r\n    const self = this;\r\n    self._forEachNeighbour(left, atom => {\r\n      if (atom === right) {\r\n        return;\r\n      }\r\n      self._forEachNeighbour(atom, l2Atom => {\r\n        if (l2Atom === left) {\r\n          return;\r\n        }\r\n        process(l2Atom);\r\n      });\r\n    });\r\n    self._forEachNeighbour(right, atom => {\r\n      if (atom === left) {\r\n        return;\r\n      }\r\n      self._forEachNeighbour(atom, l2Atom => {\r\n        if (l2Atom === right) {\r\n          return;\r\n        }\r\n        process(l2Atom);\r\n      });\r\n    });\r\n  }\r\n  _fixDir(refPoint, currDir, posGetter) {\r\n    // count atoms to the right and to the left of the current plane\r\n    let rightCount = 0;\r\n    let leftCount = 0;\r\n    const tmpVec = refPoint.clone();\r\n    function checkDir(atom) {\r\n      tmpVec.copy(posGetter(atom));\r\n      tmpVec.sub(refPoint);\r\n      const dotProd = currDir.dot(tmpVec);\r\n      if (dotProd > 0) {\r\n        ++rightCount;\r\n      } else {\r\n        ++leftCount;\r\n      }\r\n    }\r\n    function checkCarbon(atom) {\r\n      if (atom.element.name === 'C') {\r\n        checkDir(atom);\r\n      }\r\n    }\r\n    // count all atoms to the left and right of our plane, start from level 1 and carbons\r\n    const stages = [[this.forEachLevelOne, checkCarbon], [this.forEachLevelOne, checkDir], [this.forEachLevelTwo, checkCarbon], [this.forEachLevelTwo, checkDir]];\r\n    for (let stageId = 0; stageId < stages.length; ++stageId) {\r\n      stages[stageId][0].call(this, stages[stageId][1]);\r\n      if (leftCount > rightCount) {\r\n        return currDir.multiplyScalar(-1);\r\n      }\r\n      if (leftCount < rightCount) {\r\n        return currDir;\r\n      }\r\n    }\r\n    return currDir;\r\n  }\r\n  calcNormalDir(posGetter) {\r\n    const left = this._left;\r\n    const right = this._right;\r\n    let first = left;\r\n    let second = right;\r\n    posGetter = posGetter === undefined ? getAtomPos : posGetter;\r\n    if (left.bonds.length > right.bonds.length) {\r\n      first = right;\r\n      second = left;\r\n    }\r\n    let third = first;\r\n    let maxNeibs = 0;\r\n    const {\r\n      bonds\r\n    } = second;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      let another = bonds[i]._left;\r\n      if (bonds[i]._left === second) {\r\n        another = bonds[i]._right;\r\n      }\r\n      if (another.bonds.length > maxNeibs && another !== first) {\r\n        third = another;\r\n        maxNeibs = another.bonds.length;\r\n      }\r\n    }\r\n    const secondPos = posGetter(second);\r\n    const firstV = posGetter(first).clone().sub(secondPos);\r\n    const secondV = posGetter(third).clone().sub(secondPos);\r\n    secondV.crossVectors(firstV, secondV);\r\n    if (secondV.lengthSq() < 0.0001) {\r\n      secondV.set(0, 1, 0);\r\n    }\r\n    firstV.normalize();\r\n    secondV.normalize();\r\n    firstV.crossVectors(secondV, firstV);\r\n    if (firstV.lengthSq() < 0.0001) {\r\n      firstV.set(0, 1, 0);\r\n    }\r\n    firstV.normalize();\r\n    return this._fixDir(secondPos, firstV, posGetter);\r\n  }\r\n  static BondType = (() => cBondTypes)();\r\n}\r\nBond.prototype.BondType = cBondTypes;\r\n/* harmony default export */ const chem_Bond = (Bond);\r\n;// CONCATENATED MODULE: ./src/chem/Residue.js\r\n\r\n\r\n\r\nconst cNucleicControlNames = ['C3\\'', 'C3*', 'P', 'H5T', 'H3T'];\r\nconst cNucleicWing1Names = ['OP1', 'O1P'];\r\nconst cNucleicWing2Names = ['OP2', 'O2P'];\r\nconst cCylinderSource = ['C3\\'', 'C3*', 'C1', 'C1\\'', 'C1*', 'P'];\r\nconst cCylinderTarget = [{\r\n  types: ['A', 'DA', 'G', 'DG'],\r\n  atoms: ['N1']\r\n}, {\r\n  types: ['C', 'DC'],\r\n  atoms: ['N3']\r\n}, {\r\n  types: ['T', 'DT', 'U', 'DU'],\r\n  atoms: ['O4']\r\n}];\r\n\r\n/**\r\n * Residue instance.\r\n *\r\n * @param {Chain} chain      - Chain this residue belongs to.\r\n * @param {ResidueType} type - Generic residue instance type.\r\n * @param {number} sequence  - Sequence ID.\r\n * @param {string} icode     - One character insertion code (usually space or A-Z).\r\n *\r\n * @exports Residue\r\n * @constructor\r\n */\r\nclass Residue {\r\n  constructor(chain, type, sequence, icode) {\r\n    this._chain = chain;\r\n    this._component = null;\r\n    this._type = type;\r\n    this._sequence = sequence;\r\n    this._icode = icode;\r\n    this._mask = 1 | 0;\r\n    this._index = -1;\r\n    this._atoms = [];\r\n    this._secondary = null;\r\n    this._firstAtom = null;\r\n    this._leadAtom = null;\r\n    this._wingAtom = null;\r\n    this._lastAtom = null;\r\n    this._controlPoint = null;\r\n    this._midPoint = null;\r\n    this._wingVector = null;\r\n    this._cylinders = null;\r\n    this._isValid = true;\r\n    this._het = false;\r\n    this._molecule = null;\r\n    this.temperature = null;\r\n    this.occupancy = null;\r\n  }\r\n\r\n  // Getters and setters\r\n  getChain() {\r\n    return this._chain;\r\n  }\r\n  getMolecule() {\r\n    return this._molecule;\r\n  }\r\n  getType() {\r\n    return this._type;\r\n  }\r\n  getSequence() {\r\n    return this._sequence;\r\n  }\r\n  getSecondary() {\r\n    return this._secondary;\r\n  }\r\n  getICode() {\r\n    return this._icode;\r\n  }\r\n\r\n  // Other methods\r\n\r\n  addAtom(name, type, xyz, role, het, serial, altLoc, occupancy, tempFactor, charge) {\r\n    const atom = new chem_Atom(this, name, type, xyz, role, het, serial, altLoc, occupancy, tempFactor, charge);\r\n    const complex = this._chain.getComplex();\r\n    complex.addAtom(atom);\r\n    this._atoms.push(atom);\r\n    this._het = this._het || het;\r\n    return atom;\r\n  }\r\n  getAtomCount() {\r\n    return this._atoms.length;\r\n  }\r\n  forEachAtom(process) {\r\n    const atoms = this._atoms;\r\n    for (let i = 0, n = atoms.length; i < n; ++i) {\r\n      if (process(atoms[i])) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  _findAtomByName(name) {\r\n    let res = null;\r\n    this.forEachAtom(atom => {\r\n      if (atom.name === name) {\r\n        res = atom;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    return res;\r\n  }\r\n  _findFirstAtomInList(names) {\r\n    let res = null;\r\n    for (let i = 0; i < names.length; ++i) {\r\n      res = this._findAtomByName(names[i]);\r\n      if (res !== null) {\r\n        return res;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  collectMask() {\r\n    let mask = 0xffffffff;\r\n    const atoms = this._atoms;\r\n    for (let i = 0, n = atoms.length; i < n; ++i) {\r\n      mask &= atoms[i].mask;\r\n    }\r\n    this._mask = mask;\r\n  }\r\n  getCylinderTargetList() {\r\n    const type = this._type._name;\r\n    for (let i = 0, n = cCylinderTarget.length; i < n; ++i) {\r\n      for (let j = 0, m = cCylinderTarget[i].types.length; j < m; ++j) {\r\n        if (type === cCylinderTarget[i].types[j]) {\r\n          return cCylinderTarget[i].atoms;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  _detectLeadWing(dst, next, getAtomPosition) {\r\n    const leadAtom = this._findFirstAtomInList(cNucleicControlNames);\r\n    let wingStart = this._findFirstAtomInList(cNucleicWing1Names);\r\n    let wingEnd = this._findFirstAtomInList(cNucleicWing2Names);\r\n    if (wingStart === null && next !== null) {\r\n      wingStart = next._findFirstAtomInList(cNucleicWing1Names);\r\n    }\r\n    if (wingEnd === null && next !== null) {\r\n      wingEnd = next._findFirstAtomInList(cNucleicWing2Names);\r\n    }\r\n    if (leadAtom === null || wingStart === null || wingEnd === null) {\r\n      return;\r\n    }\r\n    dst._leadAtom = leadAtom;\r\n    dst._controlPoint = getAtomPosition(leadAtom);\r\n    dst._wingVector = getAtomPosition(wingEnd).clone().sub(getAtomPosition(wingStart));\r\n    dst._isValid = true;\r\n    const cylSource = this._findFirstAtomInList(cCylinderSource);\r\n    const targetList = this.getCylinderTargetList();\r\n    const cylTarget = targetList !== null ? this._findFirstAtomInList(targetList) : null;\r\n    if (cylSource === null || cylTarget === null) {\r\n      return;\r\n    }\r\n    dst._cylinders = [getAtomPosition(cylSource), getAtomPosition(cylTarget)];\r\n  }\r\n  calcWing(prevLeadPos, currLeadPos, prevWingPos, prevWing) {\r\n    const vectorA = currLeadPos.clone().sub(prevLeadPos);\r\n    const vectorB = prevLeadPos.clone().sub(prevWingPos);\r\n    vectorB.crossVectors(vectorA, vectorB);\r\n    vectorB.crossVectors(vectorA, vectorB).normalize();\r\n    if (prevWing !== null && prevWing.length() > 0.0001) {\r\n      const needToNegate = vectorB.length() > 0.0001 && Math.abs(prevWing.angleTo(vectorB)) > Math.PI / 2;\r\n      if (needToNegate) {\r\n        vectorB.negate();\r\n      }\r\n    }\r\n    return vectorB;\r\n  }\r\n  _innerFinalize(prevRes, prev, nextRes, dst, chainAsNucleic, getAtomPosition) {\r\n    const bFirstInChain = prev === null;\r\n    const lp = getAtomPosition(this._leadAtom);\r\n    const currLeadPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(lp.x, lp.y, lp.z);\r\n    if (chainAsNucleic) {\r\n      this._detectLeadWing(dst, nextRes, getAtomPosition);\r\n      return;\r\n    }\r\n    if (bFirstInChain) {\r\n      // for first one in chain\r\n      dst._midPoint = getAtomPosition(this._firstAtom).clone();\r\n    } else {\r\n      const prevLeadPos = prev._controlPoint; // lead point of previous monomer\r\n      dst._midPoint = prevLeadPos.clone().lerp(currLeadPos, 0.5);\r\n      dst._wingVector = this.calcWing(prevLeadPos, currLeadPos, getAtomPosition(prevRes._wingAtom), prev._wingVector);\r\n    }\r\n    dst._controlPoint = currLeadPos;\r\n  }\r\n  _finalize2(prev, next, asNucleic) {\r\n    // Should be called AFTER first finalize\r\n    this._innerFinalize(prev, prev, next, this, asNucleic, atom => atom.position);\r\n  }\r\n  isConnected(anotherResidue) {\r\n    if (this._chain !== anotherResidue._chain) {\r\n      return false;\r\n    }\r\n    if (this === anotherResidue) {\r\n      return true;\r\n    }\r\n    let res = false;\r\n    this.forEachAtom(atom => {\r\n      const {\r\n        bonds\r\n      } = atom;\r\n      for (let i = 0, n = bonds.length; i < n; ++i) {\r\n        const bond = bonds[i];\r\n        if (bond._left.residue === anotherResidue || bond._right.residue === anotherResidue) {\r\n          res = true;\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n    return res;\r\n  }\r\n  _finalize() {\r\n    const self = this;\r\n    [this._firstAtom] = this._atoms;\r\n    this._lastAtom = this._atoms[this._atoms.length - 1];\r\n    this._leadAtom = null;\r\n    this._wingAtom = null;\r\n    let tempCount = 0;\r\n    let temperature = 0; // average temperature\r\n    let occupCount = 0;\r\n    let occupancy = 0; // average occupancy\r\n    this.forEachAtom(a => {\r\n      if (self._leadAtom === null) {\r\n        if (a.role === chem_Element.Constants.Lead) {\r\n          self._leadAtom = a;\r\n        }\r\n      }\r\n      if (self._wingAtom === null) {\r\n        if (a.role === chem_Element.Constants.Wing) {\r\n          self._wingAtom = a;\r\n        }\r\n      }\r\n      if (a.temperature) {\r\n        temperature += a.temperature;\r\n        tempCount++;\r\n      }\r\n      if (a.occupancy) {\r\n        occupancy += a.occupancy;\r\n        occupCount++;\r\n      }\r\n      return self._leadAtom !== null && self._wingAtom !== null;\r\n    });\r\n    if (tempCount > 0) {\r\n      this.temperature = temperature / tempCount;\r\n    }\r\n    if (occupCount > 0) {\r\n      this.occupancy = occupancy / occupCount;\r\n    }\r\n\r\n    // Still try to make monomer look valid\r\n    if (this._leadAtom === null || this._wingAtom === null) {\r\n      this._isValid = false;\r\n    }\r\n    if (this._leadAtom === null) {\r\n      this._leadAtom = this._firstAtom;\r\n    }\r\n    if (this._wingAtom === null) {\r\n      this._wingAtom = this._lastAtom;\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_Residue = (Residue);\r\n;// CONCATENATED MODULE: ./src/chem/ResidueType.js\r\n/**\r\n * Residue type.\r\n *\r\n * Predefined acid or created with HET, HETNAM, etc.\r\n *\r\n * @param {string} name            - Short name, either standard (ALA, MET, etc.) or non-standard one.\r\n * @param {string} fullName        - Full residue name.\r\n * @param {string} letterCode      - 1-letter symbol.\r\n *\r\n * @exports ResidueType\r\n * @constructor\r\n */\r\nclass ResidueType {\r\n  constructor(name, fullName, letterCode) {\r\n    this._name = name;\r\n    this._fullName = fullName;\r\n    this.letterCode = letterCode;\r\n    this.flags = 0x0000;\r\n  }\r\n  getName() {\r\n    return this._name;\r\n  }\r\n\r\n  // DO NOT EDIT MANUALLY! Autogenerated from residue_types.csv by residue_types.py.\r\n  static StandardTypes = (() => ({\r\n    /* eslint-disable no-magic-numbers */\r\n    ALA: new ResidueType('ALA', 'Alanine', 'A'),\r\n    ARG: new ResidueType('ARG', 'Arginine', 'R'),\r\n    ASN: new ResidueType('ASN', 'Asparagine', 'N'),\r\n    ASP: new ResidueType('ASP', 'Aspartic Acid', 'D'),\r\n    CYS: new ResidueType('CYS', 'Cysteine', 'C'),\r\n    GLN: new ResidueType('GLN', 'Glutamine', 'Q'),\r\n    GLU: new ResidueType('GLU', 'Glutamic Acid', 'E'),\r\n    GLY: new ResidueType('GLY', 'Glycine', 'G'),\r\n    HIS: new ResidueType('HIS', 'Histidine', 'H'),\r\n    ILE: new ResidueType('ILE', 'Isoleucine', 'I'),\r\n    LEU: new ResidueType('LEU', 'Leucine', 'L'),\r\n    LYS: new ResidueType('LYS', 'Lysine', 'K'),\r\n    MET: new ResidueType('MET', 'Methionine', 'M'),\r\n    PHE: new ResidueType('PHE', 'Phenylalanine', 'F'),\r\n    PRO: new ResidueType('PRO', 'Proline', 'P'),\r\n    PYL: new ResidueType('PYL', 'Pyrrolysine', 'O'),\r\n    SEC: new ResidueType('SEC', 'Selenocysteine', 'U'),\r\n    SER: new ResidueType('SER', 'Serine', 'S'),\r\n    THR: new ResidueType('THR', 'Threonine', 'T'),\r\n    TRP: new ResidueType('TRP', 'Tryptophan', 'W'),\r\n    TYR: new ResidueType('TYR', 'Tyrosine', 'Y'),\r\n    VAL: new ResidueType('VAL', 'Valine', 'V'),\r\n    A: new ResidueType('A', 'Adenine', 'A'),\r\n    C: new ResidueType('C', 'Cytosine', 'C'),\r\n    G: new ResidueType('G', 'Guanine', 'G'),\r\n    I: new ResidueType('I', 'Inosine', 'I'),\r\n    T: new ResidueType('T', 'Thymine', 'T'),\r\n    U: new ResidueType('U', 'Uracil', 'U'),\r\n    DA: new ResidueType('DA', 'Adenine', 'A'),\r\n    DC: new ResidueType('DC', 'Cytosine', 'C'),\r\n    DG: new ResidueType('DG', 'Guanine', 'G'),\r\n    DI: new ResidueType('DI', 'Inosine', 'I'),\r\n    DT: new ResidueType('DT', 'Thymine', 'T'),\r\n    DU: new ResidueType('DU', 'Uracil', 'U'),\r\n    '+A': new ResidueType('+A', 'Adenine', 'A'),\r\n    '+C': new ResidueType('+C', 'Cytosine', 'C'),\r\n    '+G': new ResidueType('+G', 'Guanine', 'G'),\r\n    '+I': new ResidueType('+I', 'Inosine', 'I'),\r\n    '+T': new ResidueType('+T', 'Thymine', 'T'),\r\n    '+U': new ResidueType('+U', 'Uracil', 'U'),\r\n    WAT: new ResidueType('WAT', 'Water', ''),\r\n    H2O: new ResidueType('H2O', 'Water', ''),\r\n    HOH: new ResidueType('HOH', 'Water', ''),\r\n    DOD: new ResidueType('DOD', 'Water', ''),\r\n    UNK: new ResidueType('UNK', 'Unknown', ''),\r\n    UNL: new ResidueType('UNL', 'Unknown Ligand', '')\r\n    /* eslint-enable no-magic-numbers */\r\n  }))();\r\n\r\n  /**\r\n   * Enumeration of residue flag values.\r\n   *\r\n   * @enum {number}\r\n   * @readonly\r\n   */\r\n  static Flags = {\r\n    // Amino acids\r\n    /** Amino acid residue */\r\n    PROTEIN: 0x0001,\r\n    /** Basic amino acid residue */\r\n    BASIC: 0x0002,\r\n    /** Acidic amino acid residue */\r\n    ACIDIC: 0x0004,\r\n    /** Polar uncharged side chain amino acid residue */\r\n    POLAR: 0x0008,\r\n    /** Non-polar hydrophobic side chain amino acid residue */\r\n    NONPOLAR: 0x0010,\r\n    /** Aromatic amino acid residue */\r\n    AROMATIC: 0x0020,\r\n    // Nucleic acids\r\n\r\n    /** Nucleic residue */\r\n    NUCLEIC: 0x0100,\r\n    /** Purine nucleic residue */\r\n    PURINE: 0x0200,\r\n    /** Pyrimidine nucleic residue */\r\n    PYRIMIDINE: 0x0400,\r\n    /** DNA */\r\n    DNA: 0x0800,\r\n    /** RNA */\r\n    RNA: 0x1000,\r\n    /** Water */\r\n    WATER: 0x10000\r\n  };\r\n}\r\n\r\n// Flag combinations\r\nfunction _addFlag(flag, list) {\r\n  for (let i = 0, n = list.length; i < n; ++i) {\r\n    const res = ResidueType.StandardTypes[list[i]];\r\n    if (res) {\r\n      res.flags |= flag;\r\n    }\r\n  }\r\n}\r\nconst {\r\n  Flags\r\n} = ResidueType;\r\n_addFlag(Flags.WATER, ['WAT', 'H2O', 'HOH', 'DOD']);\r\n_addFlag(Flags.PROTEIN, ['ALA', 'ARG', 'ASN', 'ASP', 'CYS', 'GLY', 'GLU', 'GLN', 'HIS', 'ILE', 'LEU', 'LYS', 'MET', 'PHE', 'PRO', 'PYL', 'SEC', 'SER', 'THR', 'TRP', 'TYR', 'VAL']);\r\n_addFlag(Flags.BASIC, ['ARG', 'HIS', 'LYS']);\r\n_addFlag(Flags.ACIDIC, ['ASP', 'GLU']);\r\n_addFlag(Flags.POLAR, ['ASN', 'CYS', 'GLN', 'SER', 'THR', 'TYR']);\r\n_addFlag(Flags.NONPOLAR, ['ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL', 'GLY']);\r\n_addFlag(Flags.AROMATIC, ['PHE', 'TRP', 'TYR']);\r\n_addFlag(Flags.NUCLEIC, ['A', 'G', 'I', 'DA', 'DG', 'DI', '+A', '+G', '+I', 'C', 'T', 'U', 'DC', 'DT', 'DU', '+C', '+T', '+U']);\r\n_addFlag(Flags.PURINE, ['A', 'G', 'I', 'DA', 'DG', 'DI', '+A', '+G', '+I']);\r\n_addFlag(Flags.PYRIMIDINE, ['C', 'T', 'U', 'DC', 'DT', 'DU', '+C', '+T', '+U']);\r\n_addFlag(Flags.DNA, ['DA', 'DG', 'DI', 'DC', 'DT', 'DU']);\r\n_addFlag(Flags.RNA, ['A', 'G', 'I', 'C', 'T', 'U']);\r\n// Table of kdHydrophobicity\r\nconst hydro = {\r\n  ILE: 4.5,\r\n  VAL: 4.2,\r\n  LEU: 3.8,\r\n  PHE: 2.8,\r\n  CYS: 2.5,\r\n  MET: 1.9,\r\n  ALA: 1.8,\r\n  GLY: -0.4,\r\n  THR: -0.7,\r\n  SER: -0.8,\r\n  TRP: -0.9,\r\n  TYR: -1.3,\r\n  PRO: -1.6,\r\n  HIS: -3.2,\r\n  GLU: -3.5,\r\n  GLN: -3.5,\r\n  ASP: -3.5,\r\n  ASN: -3.5,\r\n  LYS: -3.9,\r\n  ARG: -4.5\r\n};\r\nfunction _addParam(param, list) {\r\n  const keys = Object.keys(list);\r\n  for (let i = 0, n = keys.length; i < n; ++i) {\r\n    const key = keys[i];\r\n    const value = list[key];\r\n    ResidueType.StandardTypes[key][param] = value;\r\n  }\r\n}\r\n_addParam('hydrophobicity', hydro);\r\n/* harmony default export */ const chem_ResidueType = (ResidueType);\r\n;// CONCATENATED MODULE: ./src/chem/Chain.js\r\n\r\n\r\n\r\n\r\n/**\r\n * Residues in chain are either amino acid either nucleic acid (and water)\r\n * There might be some modified/mutated residues, which type could not be determined by their name (nucleic or amino); In this\r\n * case firstly program definites the chain type (by well-known residues) and then definites modified/mutated residues\r\n */\r\nconst ChainType = {\r\n  UNKNOWN: 0,\r\n  PROTEIN: 1,\r\n  NUCLEIC: 2\r\n};\r\n\r\n/**\r\n * Residue chain.\r\n *\r\n * @param {Complex} complex - Molecular complex this chain belongs to.\r\n * @param {string} name - One character identifier (usually space, A-Z, 0-9, or a-z).\r\n *\r\n * @exports Chain\r\n * @constructor\r\n */\r\nclass Chain {\r\n  constructor(complex, name) {\r\n    this._complex = complex;\r\n    this._name = name;\r\n    this._mask = 1 | 0;\r\n    this._index = -1;\r\n    this._residues = [];\r\n    this.minSequence = Number.POSITIVE_INFINITY;\r\n    this.maxSequence = Number.NEGATIVE_INFINITY;\r\n  }\r\n  getComplex() {\r\n    return this._complex;\r\n  }\r\n  getName() {\r\n    return this._name;\r\n  }\r\n  getResidues() {\r\n    return this._residues;\r\n  }\r\n  _determineType() {\r\n    const residues = this._residues;\r\n    const {\r\n      PROTEIN,\r\n      NUCLEIC\r\n    } = chem_ResidueType.Flags;\r\n    this.type = ChainType.UNKNOWN;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      const {\r\n        flags\r\n      } = residues[i]._type;\r\n      if ((flags & NUCLEIC) !== 0) {\r\n        this.type = ChainType.NUCLEIC;\r\n        break;\r\n      } else if ((flags & PROTEIN) !== 0) {\r\n        this.type = ChainType.PROTEIN;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds thre residue with specified sequence number and inserion code\r\n   * @param {Number} seqNum sequence number\r\n   * @param {string} iCode insertion code\r\n   * @returns {*} Residue or null if not found\r\n   */\r\n  findResidue(seqNum, iCode) {\r\n    const residues = this._residues;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      const res = residues[i];\r\n      if (res._sequence === seqNum && res._icode === iCode) {\r\n        return [res, i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  _finalize() {\r\n    this._determineType();\r\n    const residues = this._residues;\r\n    let prev = null;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      const next = i + 1 < n ? residues[i + 1] : null;\r\n      const curr = residues[i];\r\n      // TODO: skip invalid residues\r\n      if (true /* curr._isValid */) {\r\n        // eslint-disable-line no-constant-condition\r\n        curr._finalize2(prev, next, this.type === ChainType.NUCLEIC);\r\n        prev = curr;\r\n      }\r\n    }\r\n\r\n    // fix very first wing\r\n    if (residues.length > 1 && residues[1]._wingVector) {\r\n      const p = residues[1]._wingVector;\r\n      residues[0]._wingVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(p.x, p.y, p.z);\r\n    } else if (residues.length > 0) {\r\n      residues[0]._wingVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 0, 0);\r\n    }\r\n  }\r\n  updateToFrame(frameData) {\r\n    const residues = this._residues;\r\n    let prev = null;\r\n    let prevData = null;\r\n    const frameRes = frameData._residues;\r\n    const n = residues.length;\r\n    function getAtomPos(atom) {\r\n      return frameData.getAtomPos(atom.index);\r\n    }\r\n    for (let i = 0; i < n; ++i) {\r\n      const curr = residues[i];\r\n      const currData = frameRes[curr._index];\r\n      const nextRes = i + 1 < n ? residues[i + 1] : null;\r\n      curr._innerFinalize(prev, prevData, nextRes, currData, this.type === ChainType.NUCLEIC, getAtomPos);\r\n      prev = curr;\r\n      prevData = currData;\r\n    }\r\n    frameRes[residues[0]._index]._wingVector = n > 1 ? frameRes[residues[1]._index]._wingVector : new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Create a new residue.\r\n   *\r\n   * @param {string} name - Residue name.\r\n   * @param {number} sequence - Residue sequence number.\r\n   * @param {string} iCode - Insertion code.\r\n   * @returns {Residue} - Newly created residue instance.\r\n   */\r\n  addResidue(name, sequence, iCode) {\r\n    let type = this._complex.getResidueType(name);\r\n    if (type === null) {\r\n      type = this._complex.addResidueType(name);\r\n    }\r\n    const residue = new chem_Residue(this, type, sequence, iCode);\r\n    this._complex.addResidue(residue);\r\n    this._residues.push(residue);\r\n    if (type.flags & (chem_ResidueType.Flags.NUCLEIC | chem_ResidueType.Flags.PROTEIN)) {\r\n      if (this.maxSequence < sequence) {\r\n        this.maxSequence = sequence;\r\n      }\r\n      if (this.minSequence > sequence) {\r\n        this.minSequence = sequence;\r\n      }\r\n    }\r\n    return residue;\r\n  }\r\n  getResidueCount() {\r\n    return this._residues.length;\r\n  }\r\n  forEachResidue(process) {\r\n    const residues = this._residues;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      process(residues[i]);\r\n    }\r\n  }\r\n  collectMask() {\r\n    let mask = 0xffffffff;\r\n    const residues = this._residues;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      mask &= residues[i]._mask;\r\n    }\r\n    this._mask = mask;\r\n  }\r\n}\r\n/* harmony default export */ const chem_Chain = (Chain);\r\n;// CONCATENATED MODULE: ./src/chem/StructuralElement.js\r\n\r\n\r\n/** An element of protein secondary structure. */\r\nclass StructuralElement {\r\n  /**\r\n   * Create a secondary structural element of the specified type.\r\n   *\r\n   * @param {StructuralElement.Type} type Secondary structure type.\r\n   * @param {Residue} init Initial residue.\r\n   * @param {Residue} term Terminal residue.\r\n   */\r\n  constructor(type, init, term) {\r\n    /**\r\n     * Secondary structure type.\r\n     * @type {StructuralElement.Type}\r\n     */\r\n    this.type = type;\r\n    /**\r\n     * Generic secondary structure type.\r\n     * @type {StructuralElement.Generic}\r\n     */\r\n    this.generic = StructuralElement.genericByType[this.type] || 'loop';\r\n    /**\r\n     * Initial residue.\r\n     * @type Residue\r\n     */\r\n    this.init = init;\r\n    /**\r\n     * Terminal residue.\r\n     * @type Residue\r\n     */\r\n    this.term = term;\r\n  }\r\n\r\n  /**\r\n   * An internal method for making a final pass over the complex to set all required references.\r\n   *\r\n   * **NOTE:** I'm sorry. It's a legacy code waiting for refactoring.\r\n   * Just copying it as-is right now and hoping for the best.\r\n   *\r\n   * @param {object} serialAtomMap A dictionary of atoms\r\n   * @param {object} residueHash A dictionary of hashed residues to check.\r\n   * @param {Complex} complex The molecular complex this element belongs to.\r\n   */\r\n  _finalize(serialAtomMap, residueHash, complex) {\r\n    if (this.init instanceof chem_Residue && this.term instanceof chem_Residue) {\r\n      return;\r\n    }\r\n\r\n    // Link all intermediate residues to this structural element\r\n    const start = complex.splitUnifiedSerial(this.init);\r\n    const end = complex.splitUnifiedSerial(this.term);\r\n    for (let chainId = start.chain; chainId <= end.chain; chainId++) {\r\n      for (let serialId = start.serial; serialId <= end.serial; serialId++) {\r\n        for (let {\r\n          iCode\r\n        } = start; iCode <= end.iCode; iCode++) {\r\n          const hashCode = complex.getUnifiedSerial(chainId, serialId, iCode);\r\n          if (residueHash[hashCode]) {\r\n            residueHash[hashCode]._secondary = this;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Replace unfined serials by objects\r\n    this.init = residueHash[this.init];\r\n    this.term = residueHash[this.term];\r\n  }\r\n}\r\n\r\n/**\r\n * Specific type of a secondary structural element.\r\n * @enum {string}\r\n * @see StructuralElement.Generic\r\n */\r\nStructuralElement.Type = {\r\n  /** A strand of a [beta-sheet](https://en.wikipedia.org/wiki/Beta_sheet). */\r\n  STRAND: 'E',\r\n  /** An isolated beta-bridge (too small for a beta-sheet). */\r\n  BRIDGE: 'B',\r\n  /** A [3/10 helix](https://en.wikipedia.org/wiki/310_helix) (hydrogen bonding is 3 residues apart). */\r\n  HELIX_310: 'G',\r\n  /** An [alpha-helix](https://en.wikipedia.org/wiki/Alpha_helix) (hydrogen bonding is 4 residues apart). */\r\n  HELIX_ALPHA: 'H',\r\n  /** A [pi-helix](https://en.wikipedia.org/wiki/Pi_helix) (hydrogen bonding is 5 residues apart). */\r\n  HELIX_PI: 'I',\r\n  /** A generic helix of unspecified bonding distance. */\r\n  HELIX: 'X',\r\n  /** An isolated 3/10-like helical turn. */\r\n  TURN_310: '3',\r\n  /** An isolated alpha-like helical turn. */\r\n  TURN_ALPHA: '4',\r\n  /** An isolated pi-like helical turn. */\r\n  TURN_PI: '5',\r\n  /** An isolated helical [turn](https://en.wikipedia.org/wiki/Turn_(biochemistry)) of unspecified bonding distance. */\r\n  TURN: 'T',\r\n  /** A bend (a region of high curvature). */\r\n  BEND: 'S',\r\n  /** Just a protein section with no particular conformation. */\r\n  COIL: 'C'\r\n};\r\n\r\n/**\r\n * Generic type of a secondary structural element.\r\n * @enum {string}\r\n * @see StructuralElement.Type\r\n */\r\nStructuralElement.Generic = {\r\n  /** A strand of a sheet. */\r\n  STRAND: 'strand',\r\n  /** A helix. */\r\n  HELIX: 'helix',\r\n  /** Just a protein section with no particular conformation. */\r\n  LOOP: 'loop'\r\n};\r\nconst StructuralElementType = StructuralElement.Type;\r\nconst StructuralElementGeneric = StructuralElement.Generic;\r\n\r\n/**\r\n * A mapping from specific types to generic ones.\r\n * @type {Object<StructuralElement.Type, StructuralElement.Generic>}\r\n */\r\nStructuralElement.genericByType = {\r\n  [StructuralElementType.STRAND]: StructuralElementGeneric.STRAND,\r\n  [StructuralElementType.HELIX_310]: StructuralElementGeneric.HELIX,\r\n  [StructuralElementType.HELIX_ALPHA]: StructuralElementGeneric.HELIX,\r\n  [StructuralElementType.HELIX_PI]: StructuralElementGeneric.HELIX,\r\n  [StructuralElementType.HELIX]: StructuralElementGeneric.HELIX\r\n};\r\n/* harmony default export */ const chem_StructuralElement = (StructuralElement);\r\n;// CONCATENATED MODULE: ./src/chem/Helix.js\r\n\r\nconst Helix_StructuralElementType = chem_StructuralElement.Type;\r\nconst typeByPDBHelixClass = {\r\n  1: Helix_StructuralElementType.HELIX_ALPHA,\r\n  3: Helix_StructuralElementType.HELIX_PI,\r\n  5: Helix_StructuralElementType.HELIX_310\r\n};\r\n\r\n/**\r\n * Helical secondary structure of a protein.\r\n * @extends StructuralElement\r\n */\r\nclass Helix extends chem_StructuralElement {\r\n  /**\r\n   * Create a helix.\r\n   *\r\n   * @param {number} helixClass A helix class according to the\r\n   *   [PDB Format](http://www.wwpdb.org/documentation/file-format-content/format33/sect5.html#HELIX).\r\n   * @param {Residue} init Initial residue.\r\n   * @param {Residue} term Terminal residue.\r\n   * @param {number} serial Serial number of the helix (see PDB Format).\r\n   * @param {string} name Helix identifier (see PDB Format).\r\n   * @param {string} comment Comment about this helix (see PDB Format).\r\n   * @param {number} length Length of this helix, in residues (see PDB Format).\r\n   */\r\n  constructor(helixClass, init, term, serial, name, comment, length) {\r\n    super(typeByPDBHelixClass[helixClass] || chem_StructuralElement.Type.HELIX, init, term);\r\n\r\n    /**\r\n     * Serial number of the helix (see PDB Format).\r\n     * @type {number}\r\n     */\r\n    this.serial = serial;\r\n    /**\r\n     * Helix identifier (see PDB Format).\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n    /**\r\n     * Comment about this helix (see PDB Format).\r\n     * @type {string}\r\n     */\r\n    this.comment = comment;\r\n    /**\r\n     * Length of this helix, in residues (see PDB Format).\r\n     * @type {number}\r\n     */\r\n    this.length = length;\r\n  }\r\n}\r\n/* harmony default export */ const chem_Helix = (Helix);\r\n;// CONCATENATED MODULE: ./src/chem/Strand.js\r\n\r\n\r\n/**\r\n * A single strand of a sheet in a protein secondary structure.\r\n * @extends StructuralElement\r\n */\r\nclass Strand extends chem_StructuralElement {\r\n  /**\r\n   * Create a strand.\r\n   *\r\n   * @param {Sheet} sheet Parent sheet this strand belongs to.\r\n   * @param {Residue} init Initial residue.\r\n   * @param {Residue} term Terminal residue.\r\n   * @param {number} sense Sense of strand with respect to previous strand in the sheet.\r\n   *   - 0 if the first strand,\r\n   *   - 1 if parallel, and\r\n   *   - -1 if anti-parallel.\r\n   * @param {Atom} atomCur Atom in current strand (see PDB Format).\r\n   * @param {Atom} atomPrev Atom in previous strand (see PDB Format).\r\n   */\r\n  constructor(sheet, init, term, sense, atomCur, atomPrev) {\r\n    super(chem_StructuralElement.Type.STRAND, init, term);\r\n\r\n    /**\r\n     * Parent sheet this strand belongs to.\r\n     * @type {Sheet}\r\n     */\r\n    this.sheet = sheet;\r\n    /**\r\n     * Sense of strand with respect to previous strand in the sheet.\r\n     * - 0 if the first strand,\r\n     * - 1 if parallel, and\r\n     * - -1 if anti-parallel.\r\n     * @type {number}\r\n     */\r\n    this.sense = sense;\r\n    /**\r\n     * Atom in current strand (see PDB Format).\r\n     * @type {Atom}\r\n     */\r\n    this.atomCur = atomCur;\r\n    /**\r\n     * Atom in previous strand (see PDB Format).\r\n     * @type {Atom}\r\n     */\r\n    this.atomPrev = atomPrev;\r\n  }\r\n\r\n  /**\r\n   * An internal method for making a final pass over the complex to set all required references.\r\n   *\r\n   * **NOTE:** I'm sorry. It's a legacy code waiting for refactoring.\r\n   * Just copying it as-is right now and hoping for the best.\r\n   *\r\n   * @param {object} serialAtomMap A dictionary of atoms\r\n   * @param {object} residueHash A dictionary of hashed residues to check.\r\n   * @param {Complex} complex The molecular complex this element belongs to.\r\n   *\r\n   * @override\r\n   */\r\n  _finalize(serialAtomMap, residueHash, complex) {\r\n    super._finalize(serialAtomMap, residueHash, complex);\r\n    let as = this.atomCur;\r\n    if (as !== null && !Number.isNaN(as)) {\r\n      this.atomCur = serialAtomMap[as];\r\n    }\r\n    as = this.atomPrev;\r\n    if (as !== null && !Number.isNaN(as)) {\r\n      this.atomPrev = serialAtomMap[as];\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_Strand = (Strand);\r\n;// CONCATENATED MODULE: ./src/chem/Sheet.js\r\n\r\n\r\n/**\r\n * Sheet secondary structure of a protein.\r\n *\r\n * @param {string} name -\r\n * @param {number} width -\r\n *\r\n * @exports Sheet\r\n * @constructor\r\n */\r\nclass Sheet {\r\n  constructor(name, width) {\r\n    this._name = name;\r\n    this._width = width;\r\n    this._strands = [];\r\n  }\r\n\r\n  // Getters and setters\r\n  getName() {\r\n    return this._name;\r\n  }\r\n  getWidth() {\r\n    return this._width;\r\n  }\r\n  addStrand(strand) {\r\n    this._strands.push(strand);\r\n    this._width = this._strands.length;\r\n  }\r\n  addEmptyStrand() {\r\n    this._strands.push(new chem_Strand(null, null, null, null, null, null));\r\n  }\r\n  _finalize(serialAtomMap, residueHash, complex) {\r\n    const s = this._strands;\r\n    for (let i = 0, n = s.length; i < n; ++i) {\r\n      s[i]._finalize(serialAtomMap, residueHash, complex);\r\n    }\r\n    if (!this._width) {\r\n      this._width = s.length;\r\n    }\r\n    if (s.length !== this._width) {\r\n      throw new Error(`Sheet ${this._name} is inconsistent.`);\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_Sheet = (Sheet);\r\n;// CONCATENATED MODULE: ./src/chem/SGroup.js\r\n\r\n\r\n/**\r\n * Atom measurements.\r\n *\r\n * @param {string} id              - SGroup id\r\n * @param {string} name            - Name of the group\r\n * @param {THREE.Vector3} position - Registered coordinates\r\n * @param {array} atoms            - Atoms group consists of\r\n * @param {object} saveNode        - XML node from file for saving\r\n *\r\n * @exports SGroup\r\n * @constructor\r\n */\r\nclass SGroup {\r\n  constructor(id, name, position, atoms, saveNode) {\r\n    this._id = id;\r\n    this._name = name;\r\n    this._position = position || new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._atoms = atoms || [];\r\n    this._charge = 0; // default group charge\r\n    this._repeat = 1; // how many times group repeated: always > 0\r\n    this._center = null;\r\n    this.xmlNodeRef = saveNode || null;\r\n  }\r\n\r\n  /**\r\n   * Get atom full name.\r\n   * @returns {string} Atom full name.\r\n   */\r\n  getName() {\r\n    return this._name;\r\n  }\r\n  getPosition() {\r\n    return this._position;\r\n  }\r\n  getCentralPoint() {\r\n    return this._center;\r\n  }\r\n  _rebuildSGroupOnAtomChange() {\r\n    const nLimon = 100000000;\r\n    if (this._center === null) {\r\n      return; // nothing to do if we are not relative\r\n    }\r\n    const bLow = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(nLimon, nLimon, nLimon);\r\n    const bHight = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-nLimon, -nLimon, -nLimon);\r\n    for (let j = 0, n = this._atoms.length; j < n; j++) {\r\n      const aPos = this._atoms[j].position;\r\n      bLow.set(Math.min(bLow.x, aPos.x), Math.min(bLow.y, aPos.y), Math.min(bLow.z, aPos.z));\r\n      bHight.set(Math.max(bHight.x, aPos.x), Math.max(bHight.y, aPos.y), Math.max(bHight.z, aPos.z));\r\n    }\r\n    this._center.addVectors(bLow, bHight);\r\n    this._center.multiplyScalar(0.5);\r\n  }\r\n}\r\n/* harmony default export */ const chem_SGroup = (SGroup);\r\n// EXTERNAL MODULE: ./src/utils/SelectionParser.js\r\nvar SelectionParser = __nested_webpack_require_130507__(99);\r\n;// CONCATENATED MODULE: ./src/chem/selectors/selectArgs.js\r\n\r\n\r\n//----------------------------------------------------------------------------\r\nclass Range {\r\n  constructor(min, max) {\r\n    this.min = min;\r\n    this.max = typeof max === 'undefined' ? min : max;\r\n  }\r\n  includes(value) {\r\n    return this.min <= value && value <= this.max;\r\n  }\r\n  toString() {\r\n    const {\r\n      min,\r\n      max\r\n    } = this;\r\n    return min === max ? String(min) : [min, max].join(':');\r\n  }\r\n  toJSON() {\r\n    return [this.min, this.max];\r\n  }\r\n}\r\n\r\n// ////////////////////////////////////////////////////////////////////////////\r\n\r\nclass List {\r\n  constructor(arg) {\r\n    if (arg instanceof this.constructor) {\r\n      // delegate construction to a different class\r\n      // eslint-disable-next-line no-constructor-return\r\n      return arg;\r\n    }\r\n    if (arg instanceof Array) {\r\n      this._values = arg.slice(0);\r\n    } else if (arg) {\r\n      this._values = [arg];\r\n    } else {\r\n      this._values = [];\r\n    }\r\n  }\r\n  append(value) {\r\n    const values = this._values;\r\n    values[values.length] = value;\r\n    return this;\r\n  }\r\n  remove(value) {\r\n    const values = this._values;\r\n    const index = values.indexOf(value);\r\n    if (index >= 0) {\r\n      values.splice(index, 1);\r\n    }\r\n    return this;\r\n  }\r\n  toString() {\r\n    return this._values.join(',');\r\n  }\r\n  toJSON() {\r\n    const values = this._values;\r\n    const result = [];\r\n    for (let i = 0, n = values.length; i < n; ++i) {\r\n      const value = values[i];\r\n      result[i] = value.toJSON ? value.toJSON() : value;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n\r\nclass RangeList extends List {\r\n  includes(value) {\r\n    const list = this._values;\r\n    for (let i = 0, n = list.length; i < n; ++i) {\r\n      if (list[i].includes(value)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n//----------------------------------------------------------------------------\r\n\r\nconst valuesArray = [];\r\nclass ValueList extends List {\r\n  constructor(arg, upperOnly) {\r\n    const list = super(arg);\r\n    if (upperOnly) {\r\n      this.upperOnly = true;\r\n      const values = list._values;\r\n      for (let i = 0, n = values.length; i < n; ++i) {\r\n        const value = values[i];\r\n        if (typeof value === 'string') {\r\n          values[i] = value.toUpperCase();\r\n        }\r\n      }\r\n    } else {\r\n      this.upperOnly = false;\r\n    }\r\n    // return constructed object\r\n    // eslint-disable-next-line no-constructor-return\r\n    return list;\r\n  }\r\n  includes(value) {\r\n    // we do not convert to upper case here for perfomance reasons\r\n    // if list is upper case only, value must be converted before it is sent up to  here\r\n    return this._values.indexOf(value) !== -1;\r\n  }\r\n  toString() {\r\n    // Quote values that are not correct identifiers\r\n    const values = this._values;\r\n    valuesArray.length = 0;\r\n    for (let i = 0, n = values.length; i < n; ++i) {\r\n      valuesArray[i] = utils.correctSelectorIdentifier(String(values[i]));\r\n    }\r\n    return valuesArray.join(',');\r\n  }\r\n  _validate(value) {\r\n    return this.upperOnly && typeof value === 'string' ? value.toUpperCase() : value;\r\n  }\r\n  append(value) {\r\n    super.append(this._validate(value));\r\n    return this;\r\n  }\r\n  remove(value) {\r\n    super.remove(this._validate(value));\r\n    return this;\r\n  }\r\n}\r\n\r\n;// CONCATENATED MODULE: ./src/chem/selectors/selectorsBase.js\r\n\r\n\r\n/** Base class for atom selectors. */\r\nclass Selector {\r\n  toString() {\r\n    return this.keyword;\r\n  }\r\n  toJSON() {\r\n    return [this.name];\r\n  }\r\n}\r\nSelector.prototype.name = 'Error';\r\nSelector.prototype.keyword = 'error';\r\n\r\n/** Base class for list-based atom selectors. */\r\nclass ListSelector extends Selector {\r\n  constructor(list) {\r\n    super();\r\n    this.list = list;\r\n  }\r\n  toString() {\r\n    return `${this.keyword} ${this.list}`;\r\n  }\r\n  toJSON() {\r\n    return [this.name, this.list.toJSON()];\r\n  }\r\n}\r\nclass RangeListSelector extends ListSelector {\r\n  constructor(arg) {\r\n    super(new RangeList(arg));\r\n  }\r\n}\r\nclass ValueListSelector extends ListSelector {\r\n  constructor(arg, caseSensitive) {\r\n    super(new ValueList(arg, !caseSensitive));\r\n  }\r\n}\r\nclass NoneSelector extends Selector {\r\n  includesAtom(_atom) {\r\n    return false;\r\n  }\r\n}\r\nNoneSelector.prototype.name = 'None';\r\nNoneSelector.prototype.keyword = 'none';\r\nclass AllSelector extends Selector {\r\n  includesAtom(_atom) {\r\n    return true;\r\n  }\r\n}\r\nAllSelector.prototype.name = 'All';\r\nAllSelector.prototype.keyword = 'all';\r\n\r\n;// CONCATENATED MODULE: ./src/chem/selectors/selectOps.js\r\n\r\n\r\n//----------------------------------------------------------------------------\r\n// Operators\r\n//----------------------------------------------------------------------------\r\nconst none = new NoneSelector();\r\nclass PrefixOperator extends Selector {\r\n  constructor(rhs) {\r\n    super();\r\n    this.rhs = rhs || none;\r\n  }\r\n  toString() {\r\n    const rhs = this.rhs.priority && this.rhs.priority > this.priority ? `(${this.rhs})` : this.rhs;\r\n    return `${this.keyword} ${rhs}`;\r\n  }\r\n  toJSON() {\r\n    return [this.name, this.rhs.toJSON()];\r\n  }\r\n}\r\nPrefixOperator.prototype.priority = 1;\r\nclass InfixOperator extends Selector {\r\n  constructor(lhs, rhs) {\r\n    super();\r\n    this.lhs = lhs || none;\r\n    this.rhs = rhs || none;\r\n  }\r\n  toString() {\r\n    const lhs = this.lhs.priority && this.lhs.priority > this.priority ? `(${this.lhs})` : this.lhs;\r\n    const rhs = this.rhs.priority && this.rhs.priority > this.priority ? `(${this.rhs})` : this.rhs;\r\n    return `${lhs} ${this.keyword} ${rhs}`;\r\n  }\r\n  toJSON() {\r\n    return [this.name, this.lhs.toJSON(), this.rhs.toJSON()];\r\n  }\r\n}\r\nInfixOperator.prototype.priority = 1000;\r\n\r\n;// CONCATENATED MODULE: ./src/chem/selectors.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst keywords = {};\r\n\r\n//----------------------------------------------------------------------------\r\n// Named selectors\r\n//----------------------------------------------------------------------------\r\n\r\nfunction defineSelector(name, SelectorClass) {\r\n  const keyword = name.toLowerCase();\r\n  SelectorClass.prototype.keyword = keyword;\r\n  SelectorClass.prototype.name = name;\r\n  const factory = function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    return new SelectorClass(...args);\r\n  };\r\n  factory.SelectorClass = SelectorClass;\r\n  keywords[keyword] = factory;\r\n  return SelectorClass;\r\n}\r\ndefineSelector('Serial', class SerialSelector extends RangeListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.serial);\r\n  }\r\n});\r\ndefineSelector('Name', class NameSelector extends ValueListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.name);\r\n  }\r\n});\r\ndefineSelector('AltLoc', class AltLocSelector extends ValueListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(String.fromCharCode(atom.location));\r\n  }\r\n});\r\ndefineSelector('Elem', class ElemSelector extends ValueListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.element.name);\r\n  }\r\n});\r\ndefineSelector('Residue', class ResidueSelector extends ValueListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.residue._type._name);\r\n  }\r\n});\r\ndefineSelector('Sequence', class SequenceSelector extends RangeListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.residue._sequence);\r\n  }\r\n});\r\ndefineSelector('ICode', class ICodeSelector extends ValueListSelector {\r\n  constructor(arg) {\r\n    super(arg, true);\r\n  }\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.residue._icode);\r\n  }\r\n});\r\ndefineSelector('ResIdx', class ResIdxSelector extends RangeListSelector {\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.residue._index);\r\n  }\r\n});\r\ndefineSelector('Chain', class ChainSelector extends ValueListSelector {\r\n  constructor(arg) {\r\n    super(arg, true);\r\n  }\r\n  includesAtom(atom) {\r\n    return this.list.includes(atom.residue._chain._name);\r\n  }\r\n});\r\ndefineSelector('Hetatm', class HetatmSelector extends Selector {\r\n  includesAtom(atom) {\r\n    return atom.het;\r\n  }\r\n});\r\ndefineSelector('PolarH', class PolarHSelector extends Selector {\r\n  includesAtom(atom) {\r\n    return (atom.flags & chem_Atom.Flags.NONPOLARH) === chem_Atom.Flags.HYDROGEN;\r\n  }\r\n});\r\ndefineSelector('NonPolarH', class NonPolarHSelector extends Selector {\r\n  includesAtom(atom) {\r\n    return (atom.flags & chem_Atom.Flags.NONPOLARH) === chem_Atom.Flags.NONPOLARH;\r\n  }\r\n});\r\ndefineSelector('All', AllSelector);\r\ndefineSelector('None', NoneSelector);\r\nconst NULL_SELECTOR = keywords.none();\r\n\r\n//----------------------------------------------------------------------------\r\n// Named operators\r\n//----------------------------------------------------------------------------\r\n\r\nfunction defineOperator(name, priority, OperatorClass) {\r\n  OperatorClass.prototype.priority = priority;\r\n  return defineSelector(name, OperatorClass);\r\n}\r\ndefineOperator('Not', 1, class NotOperator extends PrefixOperator {\r\n  includesAtom(atom) {\r\n    return !this.rhs.includesAtom(atom);\r\n  }\r\n});\r\ndefineOperator('And', 2, class AndOperator extends InfixOperator {\r\n  includesAtom(atom) {\r\n    return this.lhs.includesAtom(atom) && this.rhs.includesAtom(atom);\r\n  }\r\n});\r\ndefineOperator('Or', 3, class OrOperator extends InfixOperator {\r\n  includesAtom(atom) {\r\n    return this.lhs.includesAtom(atom) || this.rhs.includesAtom(atom);\r\n  }\r\n});\r\n\r\n//----------------------------------------------------------------------------\r\n// Flag selectors\r\n//----------------------------------------------------------------------------\r\n\r\nfunction byResidueTypeFlag(flag, name) {\r\n  return defineSelector(name, class extends Selector {\r\n    includesAtom(atom) {\r\n      return (atom.residue._type.flags & flag) !== 0;\r\n    }\r\n  });\r\n}\r\nbyResidueTypeFlag(chem_ResidueType.Flags.PROTEIN, 'Protein');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.BASIC, 'Basic');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.ACIDIC, 'Acidic');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.BASIC | chem_ResidueType.Flags.ACIDIC, 'Charged');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.POLAR, 'Polar');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.NONPOLAR, 'NonPolar');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.AROMATIC, 'Aromatic');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.NUCLEIC, 'Nucleic');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.PURINE, 'Purine');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.PYRIMIDINE, 'Pyrimidine');\r\nbyResidueTypeFlag(chem_ResidueType.Flags.WATER, 'Water');\r\n\r\n//----------------------------------------------------------------------------\r\nconst selectors = Object.create(keywords);\r\nselectors.Selector = Selector;\r\nselectors.RangeListSelector = RangeListSelector;\r\nselectors.ValueListSelector = ValueListSelector;\r\nselectors.Range = Range;\r\nselectors.RangeList = RangeList;\r\nselectors.ValueList = ValueList;\r\nselectors.PrefixOperator = PrefixOperator;\r\nselectors.InfixOperator = InfixOperator;\r\nselectors.Context = Object.create({});\r\nselectors.GetSelector = function (key) {\r\n  if (!selectors.Context.hasOwnProperty(key)) {\r\n    const exc = {\r\n      message: `selector ${key} is not registered`\r\n    };\r\n    throw exc;\r\n  }\r\n  return selectors.Context[key] || NULL_SELECTOR;\r\n};\r\nselectors.ClearContext = function () {\r\n  Object.keys(selectors.Context).forEach(k => {\r\n    delete selectors.Context[k];\r\n  });\r\n};\r\nselectors.keyword = function (key) {\r\n  return keywords[key.toLowerCase()] || keywords.none;\r\n};\r\nselectors.parse = function (str) {\r\n  const res = {};\r\n  try {\r\n    res.selector = SelectionParser.parser.parse(str);\r\n  } catch (e) {\r\n    res.selector = NULL_SELECTOR;\r\n    res.error = e.message;\r\n  }\r\n  return res;\r\n};\r\nSelectionParser.parser.yy = selectors;\r\nSelectionParser.parser.yy.parseError = SelectionParser.parser.parseError; // workaround for incorrect JISON parser generator for AMD module\r\n\r\n/* harmony default export */ const chem_selectors = (selectors);\r\n;// CONCATENATED MODULE: ./src/chem/BiologicalUnit.js\r\n\r\n\r\n\r\n/**\r\n * Basic biological unit class.\r\n *\r\n * @exports BiologicalUnit\r\n * @constructor\r\n */\r\nclass BiologicalUnit {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    this._selector = chem_selectors.keyword('All')();\r\n    this._boundaries = {\r\n      boundingBox: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3(),\r\n      boundingSphere: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere()\r\n    };\r\n  }\r\n  computeBoundaries() {\r\n    const atoms = this._complex._atoms;\r\n    const n = atoms.length;\r\n    const selector = this._selector;\r\n    const {\r\n      boundingBox\r\n    } = this._boundaries;\r\n    boundingBox.makeEmpty();\r\n    if (n === 1) {\r\n      boundingBox.expandByPoint(atoms[0].position);\r\n      const bbc = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n      boundingBox.getCenter(bbc);\r\n      const s = 2 * atoms[0].element.radius;\r\n      boundingBox.setFromCenterAndSize(bbc, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(s, s, s));\r\n    } else {\r\n      for (let i = 0; i < n; ++i) {\r\n        if (selector.includesAtom(atoms[i])) {\r\n          boundingBox.expandByPoint(atoms[i].position);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Build bounding sphere\r\n    let radiusSquared = 0.0;\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    boundingBox.getCenter(center);\r\n    if (n === 1) {\r\n      this._boundaries.boundingSphere.set(center, atoms[0].element.radius);\r\n    } else {\r\n      for (let i = 0; i < n; ++i) {\r\n        if (!selector.includesAtom(atoms[i])) {\r\n          continue;\r\n        }\r\n        const pos = atoms[i].position;\r\n        const lengthSquared = center.distanceToSquared(pos);\r\n        if (radiusSquared < lengthSquared) {\r\n          radiusSquared = lengthSquared;\r\n        }\r\n      }\r\n      this._boundaries.boundingSphere.set(center, Math.sqrt(radiusSquared));\r\n    }\r\n  }\r\n  getTransforms() {\r\n    return [];\r\n  }\r\n  getSelector() {\r\n    return this._selector;\r\n  }\r\n  getBoundaries() {\r\n    return this._boundaries;\r\n  }\r\n  finalize() {}\r\n}\r\n/* harmony default export */ const chem_BiologicalUnit = (BiologicalUnit);\r\n;// CONCATENATED MODULE: ./src/chem/Assembly.js\r\n\r\n\r\n\r\n\r\n/**\r\n * Biological assembly.\r\n *\r\n * @exports Assembly\r\n * @constructor\r\n */\r\n\r\nclass Assembly extends chem_BiologicalUnit {\r\n  constructor(complex) {\r\n    super(complex);\r\n    this.chains = [];\r\n    this.matrices = [];\r\n  }\r\n  computeBoundaries() {\r\n    super.computeBoundaries();\r\n    // fix up the boundaries\r\n    const {\r\n      matrices\r\n    } = this;\r\n    const oldCenter = this._boundaries.boundingSphere.center;\r\n    const oldRad = this._boundaries.boundingSphere.radius;\r\n    const boundingBox = this._boundaries.boundingBox = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n    boundingBox.makeEmpty();\r\n    for (let i = 0, n = matrices.length; i < n; ++i) {\r\n      boundingBox.expandByPoint(oldCenter.clone().applyMatrix4(matrices[i]));\r\n    }\r\n    const newRad = boundingBox.max.distanceTo(boundingBox.min) / 2 + oldRad;\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    boundingBox.getCenter(center);\r\n    this._boundaries.boundingSphere = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere().set(center, newRad);\r\n    boundingBox.max.addScalar(oldRad);\r\n    boundingBox.min.subScalar(oldRad);\r\n  }\r\n\r\n  /**\r\n   * Mark a chain as belonging to this biological assembly.\r\n   * @param {string} chain - chain identifier, usually a single letter\r\n   */\r\n  addChain(chain) {\r\n    this.chains[this.chains.length] = chain;\r\n  }\r\n\r\n  /**\r\n   * Add a transformation matrix.\r\n   * @param {THREE.Matrix4} matrix - transformation matrix\r\n   */\r\n  addMatrix(matrix) {\r\n    this.matrices[this.matrices.length] = matrix;\r\n  }\r\n  getTransforms() {\r\n    return this.matrices;\r\n  }\r\n  finalize() {\r\n    if (this.chains.length > 0) {\r\n      this._selector = chem_selectors.keyword('Chain')(this.chains);\r\n    } else {\r\n      this._selector = chem_selectors.keyword('None')();\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_Assembly = (Assembly);\r\n;// CONCATENATED MODULE: ./src/chem/Component.js\r\n/**\r\n * This class represents connected component as a part of a complex.\r\n * WARNING! The whole component entity is build under the assumption that residues\r\n * are placed in the chains and complex in ascending order of indices\r\n *\r\n * @param {Complex} complex - Molecular complex this chain belongs to.\r\n *\r\n * @exports Component\r\n * @constructor\r\n */\r\nclass Component {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    this._index = -1;\r\n    this._residueIndices = [];\r\n    this._cycles = [];\r\n    this._subDivs = [];\r\n    this._residueCount = 0;\r\n  }\r\n  getResidues() {\r\n    return this._complex._residues;\r\n  }\r\n  getResidueCount() {\r\n    return this._residueCount;\r\n  }\r\n  forEachResidue(process) {\r\n    const residues = this._complex._residues;\r\n    const resIdc = this._residueIndices;\r\n    for (let idIdc = 0, idCount = resIdc.length; idIdc < idCount; ++idIdc) {\r\n      for (let idx = resIdc[idIdc].start, last = resIdc[idIdc].end; idx <= last; ++idx) {\r\n        process(residues[idx]);\r\n      }\r\n    }\r\n  }\r\n  setSubDivs(subDivs) {\r\n    this._subDivs = subDivs;\r\n    let curr = 0;\r\n    const resIdc = [];\r\n    let resCnt = 0;\r\n    for (let i = 0, n = subDivs.length; i < n; ++i) {\r\n      if (i === n - 1 || subDivs[i].end + 1 !== subDivs[i + 1].start) {\r\n        const {\r\n          start\r\n        } = subDivs[curr];\r\n        const {\r\n          end\r\n        } = subDivs[i];\r\n        resIdc[resIdc.length] = {\r\n          start,\r\n          end\r\n        };\r\n        resCnt += end - start + 1;\r\n        curr = i + 1;\r\n      }\r\n    }\r\n    this._residueIndices = resIdc;\r\n    this._residueCount = resCnt;\r\n  }\r\n  getComplex() {\r\n    return this._complex;\r\n  }\r\n  forEachBond(process) {\r\n    const bonds = this._complex._bonds;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      const bond = bonds[i];\r\n      if (bond._left.residue._component === this) {\r\n        process(bond);\r\n      }\r\n    }\r\n  }\r\n  update() {\r\n    this.forEachCycle(cycle => {\r\n      cycle.update();\r\n    });\r\n  }\r\n  forEachAtom(process) {\r\n    this.forEachResidue(residue => {\r\n      residue.forEachAtom(process);\r\n    });\r\n  }\r\n  addCycle(cycle) {\r\n    this._cycles.push(cycle);\r\n  }\r\n  forEachCycle(process) {\r\n    const cycles = this._cycles;\r\n    for (let i = 0, n = cycles.length; i < n; ++i) {\r\n      process(cycles[i]);\r\n    }\r\n  }\r\n  markResidues() {\r\n    const self = this;\r\n    self.forEachResidue(residue => {\r\n      residue._component = self;\r\n    });\r\n  }\r\n  _forEachSubChain(mask, process) {\r\n    const residues = this._complex._residues;\r\n    const subs = this._subDivs;\r\n    for (let i = 0, n = subs.length; i < n; ++i) {\r\n      for (let idx = subs[i].start, last = subs[i].end; idx <= last; ++idx) {\r\n        const currRes = residues[idx];\r\n        if (mask & currRes._mask && currRes._isValid) {\r\n          let end = idx + 1;\r\n          for (; end <= last; ++end) {\r\n            const endRes = residues[end];\r\n            if (!(mask & endRes._mask && endRes._isValid)) {\r\n              break;\r\n            }\r\n          }\r\n          process(i, idx, end - 1);\r\n          idx = end;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getMaskedSequences(mask) {\r\n    const subs = [];\r\n    let idx = 0;\r\n    this._forEachSubChain(mask, (_subIdx, start, end) => {\r\n      subs[idx++] = {\r\n        start,\r\n        end\r\n      };\r\n    });\r\n    return subs;\r\n  }\r\n  getMaskedSubdivSequences(mask) {\r\n    const subs = [];\r\n    let currIdx = -1;\r\n    let lastSubIdx = -1;\r\n    const subDivs = this._subDivs;\r\n    this._forEachSubChain(mask, (subIdx, start, end) => {\r\n      if (lastSubIdx !== subIdx) {\r\n        ++currIdx;\r\n        subs[currIdx] = {\r\n          arr: [],\r\n          boundaries: subDivs[subIdx]\r\n        };\r\n        lastSubIdx = subIdx;\r\n      }\r\n      subs[currIdx].arr[subs[currIdx].arr.length] = {\r\n        start,\r\n        end\r\n      };\r\n    });\r\n    return subs;\r\n  }\r\n}\r\n/* harmony default export */ const chem_Component = (Component);\r\n;// CONCATENATED MODULE: ./src/chem/AtomPairs.js\r\n\r\nconst cMaxPairsForHashCode = 32;\r\nconst cHashTableSize = 1024 * 1024;\r\nconst cNumbersPerPair = 4;\r\nconst cMaxNeighbours = 14;\r\nconst cInvalidVal = -1;\r\n// 89237 is a large simple number, can be used for pseudo random hash code create\r\nconst cBigPrime = 89237;\r\nclass AtomPairs {\r\n  constructor(maxPairsEstimate) {\r\n    this.numPairs = 0;\r\n    this.numMaxPairs = maxPairsEstimate;\r\n    this.intBuffer = utils.allocateTyped(Int32Array, maxPairsEstimate * cNumbersPerPair);\r\n    for (let i = 0; i < maxPairsEstimate * cNumbersPerPair; i++) {\r\n      this.intBuffer[i] = cInvalidVal;\r\n    }\r\n    this.hashBuffer = utils.allocateTyped(Int32Array, cHashTableSize * cMaxPairsForHashCode);\r\n    for (let i = 0; i < cHashTableSize * cMaxPairsForHashCode; i++) {\r\n      this.hashBuffer[i] = cInvalidVal;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all pairs memory\r\n   */\r\n  destroy() {\r\n    this.intBuffer = null;\r\n    this.hashBuffer = null;\r\n  }\r\n\r\n  /**\r\n   * Add pair of atoms to collection\r\n   * @param {number} indexA - Index of the 1st vertex.\r\n   * @param {number} indexB - Index of the 2nd vertex.\r\n   */\r\n  addPair(indexA, indexB) {\r\n    const ia = indexA < indexB ? indexA : indexB;\r\n    const ib = indexA > indexB ? indexA : indexB;\r\n    const codeToAdd = ia + (ib << cMaxNeighbours);\r\n    const hashCode = ia + ib * cBigPrime & cHashTableSize - 1;\r\n    let j = hashCode * cMaxPairsForHashCode;\r\n    let apI = 0;\r\n    for (; apI < cMaxPairsForHashCode; apI++) {\r\n      const code = this.hashBuffer[j + apI];\r\n      if (code === cInvalidVal) {\r\n        break;\r\n      }\r\n      if (code === codeToAdd) {\r\n        return false;\r\n      }\r\n    }\r\n    // add this new hash code\r\n    if (apI >= cMaxPairsForHashCode) {\r\n      throw new Error('addPair: increase cMaxPairsForHashCode');\r\n    }\r\n    this.hashBuffer[j + apI] = codeToAdd;\r\n\r\n    // actually add\r\n    if (this.numPairs >= this.numMaxPairs) {\r\n      throw new Error('addPair: increase num pairs');\r\n    }\r\n    j = this.numPairs * cNumbersPerPair;\r\n    this.intBuffer[j] = ia;\r\n    this.intBuffer[j + 1] = ib;\r\n    this.intBuffer[j + 2] = codeToAdd;\r\n    this.numPairs++;\r\n    return true;\r\n  }\r\n}\r\n/* harmony default export */ const chem_AtomPairs = (AtomPairs);\r\n;// CONCATENATED MODULE: ./src/chem/AutoBond.js\r\n\r\n\r\nconst cProfileBondBuilder = false;\r\nconst cEstBondsMultiplier = 4;\r\nconst cSpaceCode = 32;\r\nconst cBondTolerance = 0.45;\r\nconst cVMDTolerance = 0.6;\r\nconst cBondRadInJMOL = true;\r\nconst cEpsilon = 0.001;\r\n\r\n/**\r\n * Get radius used for building bonds.\r\n *\r\n * @param {Atom} atom - Atom object.\r\n * @returns {number} special value for bonding radius for this atom\r\n */\r\nfunction _getBondingRadius(atom) {\r\n  const {\r\n    element\r\n  } = atom;\r\n  if (element) {\r\n    return element.radiusBonding;\r\n  }\r\n  throw new Error('_getBondingRadius: Logic error.');\r\n}\r\nfunction _isAtomEligible(atom) {\r\n  // build for all non-hetatm and for hetatm without bonds\r\n  return !atom.isHet() || atom.bonds && atom.bonds.length === 0;\r\n}\r\n\r\n/**\r\n * Bond between atoms.\r\n *\r\n * @param {Complex} complex molecular complex\r\n\r\n * @exports AutoBond\r\n * @constructor\r\n */\r\nclass AutoBond {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    this._maxRad = 1.8;\r\n    const bBox = this._complex.getDefaultBoundaries().boundingBox;\r\n    this._vBoxMin = bBox.min.clone();\r\n    this._vBoxMax = bBox.max.clone();\r\n    this._pairCollection = null;\r\n  }\r\n\r\n  /**\r\n   * Add existing pairs of connectors (from pdb file after its reading)\r\n   * @returns {number} 0\r\n   */\r\n  _addExistingPairs() {\r\n    const atoms = this._complex.getAtoms();\r\n    const numAtoms = atoms.length;\r\n    let aInd = 0;\r\n    const collection = this._pairCollection;\r\n    for (; aInd < numAtoms; aInd++) {\r\n      const {\r\n        bonds\r\n      } = atoms[aInd];\r\n      const numBondsForAtom = bonds.length;\r\n      for (let bInd = 0; bInd < numBondsForAtom; bInd++) {\r\n        const bond = bonds[bInd];\r\n        const indTo = bond._left.index;\r\n        if (indTo === aInd) {\r\n          collection.addPair(aInd, bond._right.index);\r\n        }\r\n      } // for (b) all bonds in atom\r\n    } // for (a)\r\n    return 0;\r\n  }\r\n  _findPairs() {\r\n    const vw = this._complex.getVoxelWorld();\r\n    if (vw === null) {\r\n      return;\r\n    }\r\n    const atoms = this._complex._atoms;\r\n    const atomsNum = atoms.length;\r\n    const self = this;\r\n    let rA;\r\n    let isHydrogenA;\r\n    let posA;\r\n    let locationA;\r\n    let atomA;\r\n    const processAtom = function (atomB) {\r\n      if (isHydrogenA && atomB.isHydrogen()) {\r\n        return;\r\n      }\r\n      const locationB = atomB.location;\r\n      if (locationA !== cSpaceCode && locationB !== cSpaceCode && locationA !== locationB) {\r\n        return;\r\n      }\r\n      const dist2 = posA.distanceToSquared(atomB.position);\r\n      const rB = atomB.element.radiusBonding;\r\n      const maxAcceptable = cBondRadInJMOL ? rA + rB + cBondTolerance : cVMDTolerance * (rA + rB);\r\n      if (dist2 > maxAcceptable * maxAcceptable) {\r\n        return;\r\n      }\r\n      if (dist2 < cEpsilon) {\r\n        return;\r\n      }\r\n      self._pairCollection.addPair(atomA.index, atomB.index);\r\n    };\r\n    for (let i = 0; i < atomsNum; ++i) {\r\n      atomA = atoms[i];\r\n      if (!_isAtomEligible(atomA)) {\r\n        continue;\r\n      }\r\n      rA = atomA.element.radiusBonding;\r\n      isHydrogenA = atomA.isHydrogen();\r\n      posA = atomA.position;\r\n      locationA = atomA.location;\r\n      vw.forEachAtomWithinRadius(posA, 2 * this._maxRad + cBondTolerance, processAtom);\r\n    }\r\n  }\r\n  _addPairs() {\r\n    const atoms = this._complex._atoms;\r\n    for (let i = 0, k = 0; i < this._pairCollection.numPairs; i++, k += 4) {\r\n      const iA = this._pairCollection.intBuffer[k];\r\n      const iB = this._pairCollection.intBuffer[k + 1];\r\n      this._addPair(atoms[iA], atoms[iB]);\r\n    }\r\n  }\r\n  _addPair(atomA, atomB) {\r\n    const bondsA = atomA.bonds;\r\n    const indexA = atomA.index;\r\n    const indexB = atomB.index;\r\n    for (let j = 0, numBonds = bondsA.length; j < numBonds; ++j) {\r\n      const bond = bondsA[j];\r\n      if (bond._left.index === indexB || bond._right.index === indexB) {\r\n        return;\r\n      }\r\n    }\r\n    const left = indexA < indexB ? atomA : atomB;\r\n    const right = indexA < indexB ? atomB : atomA;\r\n    const newBond = this._complex.addBond(left, right, 0, chem_Bond.BondType.UNKNOWN, false);\r\n    bondsA.push(newBond);\r\n    atomB.bonds.push(newBond);\r\n  }\r\n  build() {\r\n    if (cProfileBondBuilder) {\r\n      console.time('Bonds Builder');\r\n    }\r\n    this._buildInner();\r\n    if (cProfileBondBuilder) {\r\n      console.timeEnd('Bonds Builder');\r\n    }\r\n  }\r\n  _buildInner() {\r\n    const atoms = this._complex._atoms;\r\n    if (atoms.length < 2) {\r\n      return;\r\n    }\r\n    if (atoms[0].index < 0) {\r\n      throw new Error('AutoBond: Atoms in complex were not indexed.');\r\n    }\r\n    this._calcBoundingBox();\r\n    this._pairCollection = new chem_AtomPairs(atoms.length * cEstBondsMultiplier);\r\n    this._addExistingPairs();\r\n    this._findPairs();\r\n    this._addPairs();\r\n  }\r\n  _calcBoundingBox() {\r\n    const atoms = this._complex._atoms;\r\n    const nAtoms = atoms.length;\r\n    let maxRad = _getBondingRadius(atoms[0]);\r\n    for (let i = 1; i < nAtoms; ++i) {\r\n      maxRad = Math.max(maxRad, _getBondingRadius(atoms[i]));\r\n    }\r\n    this._vBoxMax.addScalar(maxRad);\r\n    this._vBoxMin.addScalar(-maxRad);\r\n    this._maxRad = maxRad * 1.2;\r\n  }\r\n  destroy() {\r\n    if (this._pairCollection) {\r\n      this._pairCollection.destroy();\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_AutoBond = (AutoBond);\r\n;// CONCATENATED MODULE: ./src/chem/AromaticLoopsMarker.js\r\n\r\n\r\n\r\nconst cCrossThresh = 0.1;\r\nconst cAromaticType = chem_Bond.BondType.AROMATIC;\r\nconst cAromaticAtoms = [chem_Element.ByName.C.number, chem_Element.ByName.N.number\r\n// Element.ByName.O.number,\r\n// Element.ByName.S.number,\r\n];\r\n\r\n/** Conditions for bonds:\r\n   *   - Cross product with each subsequent bond to add is collinear and point to the same direction\r\n   *   - Each pair of a adjacent bonds belong to not more than one cycle\r\n   *   - If there is more than one candidates we try them in ascending order of angle values\r\n   */\r\n\r\nconst _coDirVectors = function () {\r\n  const v1Tmp = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const v2Tmp = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const cp = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (v1, v2) {\r\n    v1Tmp.copy(v1).normalize();\r\n    v2Tmp.copy(v2).normalize();\r\n    cp.crossVectors(v1Tmp, v2Tmp);\r\n    if (cp.length() > cCrossThresh) {\r\n      return false;\r\n    }\r\n    // zero vector in out terms must be collinear to any\r\n    return v1Tmp.dot(v2Tmp) >= 0;\r\n  };\r\n}();\r\nfunction _insertAscending(arr, val) {\r\n  let idx = 0;\r\n  while (idx < arr.length && arr[idx] < val) {\r\n    ++idx;\r\n  }\r\n  arr.splice(idx, 0, val);\r\n}\r\nfunction _anotherAtom(bond, currAtom) {\r\n  return bond._left === currAtom ? bond._right : bond._left;\r\n}\r\nfunction _cosBetween(v1, v2) {\r\n  const theta = v1.dot(v2) / Math.sqrt(v1.lengthSq() * v2.lengthSq());\r\n  return external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.clamp(theta, -1, 1);\r\n}\r\nfunction _markAromatic(bond) {\r\n  bond._type = cAromaticType;\r\n}\r\nclass Cycle {\r\n  constructor(atomsList) {\r\n    this.atoms = atomsList;\r\n    this.update();\r\n  }\r\n  update() {\r\n    const {\r\n      atoms\r\n    } = this;\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const nA = atoms.length;\r\n    for (let j = 0; j < nA; ++j) {\r\n      center.add(atoms[j].position);\r\n    }\r\n    center.multiplyScalar(1.0 / nA);\r\n    this.center = center;\r\n    this.radius = center.distanceTo(atoms[0].position.clone().lerp(atoms[1].position, 0.5));\r\n  }\r\n  forEachBond(process) {\r\n    const {\r\n      atoms\r\n    } = this;\r\n    const nA = atoms.length;\r\n    let currAtom = atoms[0];\r\n    let nextAtom;\r\n    function checkBond(bond) {\r\n      if (bond._left === nextAtom || bond._right === nextAtom) {\r\n        process(bond);\r\n      }\r\n    }\r\n    for (let i = 0; i < nA; ++i) {\r\n      nextAtom = atoms[(i + 1) % nA];\r\n      currAtom.forEachBond(checkBond);\r\n      currAtom = nextAtom;\r\n    }\r\n  }\r\n}\r\nfunction _isAromatic(bond) {\r\n  return bond._type === cAromaticType;\r\n}\r\nfunction _isPossibleAromatic(bond) {\r\n  if (bond.type === cAromaticType) {\r\n    return true;\r\n  }\r\n  const rightIdx = cAromaticAtoms.indexOf(bond._right.element.number);\r\n  const leftIdx = cAromaticAtoms.indexOf(bond._left.element.number);\r\n  return rightIdx !== -1 && leftIdx !== -1;\r\n}\r\nfunction _checkCycleSimple(cycle) {\r\n  return cycle.length > 3;\r\n}\r\nfunction _checkCycleComplex(cycle) {\r\n  console.assert(cycle.length > 2);\r\n  return true;\r\n}\r\nclass AromaticLoopsMarker {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    const bondsData = new Array(complex._bonds.length);\r\n    const bondMarks = new Array(complex._bonds.length);\r\n    for (let i = 0, n = bondsData.length; i < n; ++i) {\r\n      bondsData[i] = [];\r\n      bondMarks[i] = false;\r\n    }\r\n    this._bondsData = bondsData;\r\n    this._bondMarks = bondMarks;\r\n    this._resetCycles();\r\n  }\r\n  _resetCycles() {\r\n    this._cycles = [];\r\n    this._currIdx = -1;\r\n  }\r\n  _haveSameCycle(bondsData, bond1, bond2) {\r\n    const arr1 = bondsData[bond1._index];\r\n    const arr2 = bondsData[bond2._index];\r\n    const n1 = arr1.length;\r\n    const n2 = arr2.length;\r\n    let i1 = 0;\r\n    let i2 = 0;\r\n    while (i1 < n1 && i2 < n2) {\r\n      if (arr1[i1] === arr2[i2]) {\r\n        return true;\r\n      }\r\n      if (arr1[i1] > arr2[i2]) {\r\n        ++i2;\r\n      } else {\r\n        ++i1;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  _tryBond(prevBond, currRight, currDir) {\r\n    const bondsOrder = [];\r\n    const bondsData = this._bondsData;\r\n    const currLeft = _anotherAtom(prevBond, currRight);\r\n    const currVec = currRight.position.clone().sub(currLeft.position);\r\n    const startAtomRef = this._currStart;\r\n    const self = this;\r\n    const bondMarks = this._bondMarks;\r\n    let checkAromatic = this._checkBond;\r\n    bondMarks[prevBond._index] = true;\r\n    checkAromatic = checkAromatic === undefined ? _isAromatic : checkAromatic;\r\n    currRight.forEachBond(newBond => {\r\n      if (!checkAromatic(newBond) || newBond === prevBond || bondMarks[newBond._index] || self._haveSameCycle(bondsData, prevBond, newBond)) {\r\n        return;\r\n      }\r\n      const anotherAtom = _anotherAtom(newBond, currRight);\r\n      const anotherVec = anotherAtom.position.clone().sub(currRight.position);\r\n      const val = anotherAtom === startAtomRef ? -2.0 : 1 - _cosBetween(currVec, anotherVec);\r\n      const newDir = anotherVec.cross(currVec);\r\n      if (!_coDirVectors(newDir, currDir)) {\r\n        return;\r\n      }\r\n      let idx = 0;\r\n      while (idx < bondsOrder.length && bondsOrder[idx].val < val) {\r\n        ++idx;\r\n      }\r\n      bondsOrder.splice(idx, 0, {\r\n        bond: newBond,\r\n        val,\r\n        dir: newDir\r\n      });\r\n    });\r\n    for (let i = 0, n = bondsOrder.length; i < n; ++i) {\r\n      const {\r\n        bond\r\n      } = bondsOrder[i];\r\n      const newRight = bond._left === currRight ? bond._right : bond._left;\r\n      if (newRight === startAtomRef) {\r\n        ++this._currIdx;\r\n        this._cycles.push([currRight]);\r\n        bondMarks[prevBond._index] = false;\r\n        return true;\r\n      }\r\n      if (this._tryBond(bond, newRight, bondsOrder[i].dir)) {\r\n        _insertAscending(bondsData[bond._index], this._currIdx);\r\n        this._cycles[this._currIdx].push(currRight);\r\n        bondMarks[prevBond._index] = false;\r\n        return true;\r\n      }\r\n    }\r\n    bondMarks[prevBond._index] = false;\r\n    return false;\r\n  }\r\n  _startCycle(bond) {\r\n    // start from left to right\r\n    this._currStart = bond._left;\r\n    if (this._tryBond(bond, bond._right, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())) {\r\n      _insertAscending(this._bondsData[bond._index], this._currIdx);\r\n      this._cycles[this._currIdx].push(bond._left);\r\n    }\r\n  }\r\n  _findLoops(checkBond, checkCycle) {\r\n    this._checkBond = checkBond;\r\n    const complex = this._complex;\r\n    const self = this;\r\n    complex.forEachComponent(component => {\r\n      self._resetCycles();\r\n      component.forEachBond(bond => {\r\n        if (checkBond(bond)) {\r\n          self._startCycle(bond);\r\n        }\r\n      });\r\n      const cycles = self._cycles;\r\n      for (let i = 0, n = cycles.length; i < n; ++i) {\r\n        const cycle = cycles[i];\r\n        if (!checkCycle(cycle)) {\r\n          continue;\r\n        }\r\n        const newCycle = new Cycle(cycle);\r\n        newCycle.forEachBond(_markAromatic);\r\n        component.addCycle(newCycle);\r\n      }\r\n    });\r\n  }\r\n  markCycles() {\r\n    this._findLoops(_isAromatic, _checkCycleSimple);\r\n  }\r\n  detectCycles() {\r\n    this._findLoops(_isPossibleAromatic, _checkCycleComplex);\r\n  }\r\n}\r\n/* harmony default export */ const chem_AromaticLoopsMarker = (AromaticLoopsMarker);\r\n;// CONCATENATED MODULE: ./src/chem/VoxelWorld.js\r\n\r\n\r\n\r\n/**\r\n * Calculate min & max radius of a sphere slice between zMin & zMax\r\n *\r\n * @param {Vector3} center - center of the sphere\r\n * @param {number} radius  - sphere radius\r\n * @param {number} zMin - lower bound of the slice\r\n * @param {number} zMax - upper bound of the slice\r\n */\r\nfunction _getSphereSliceRadiusRange(center, radius, zMin, zMax) {\r\n  const dzMin = zMin - center.z;\r\n  const dzMax = zMax - center.z;\r\n  const rzMin = Math.sqrt(Math.max(radius * radius - dzMin * dzMin, 0.0));\r\n  const rzMax = Math.sqrt(Math.max(radius * radius - dzMax * dzMax, 0.0));\r\n  const rMin = Math.min(rzMin, rzMax);\r\n  let rMax;\r\n  if (zMin <= center.z && zMax >= center.z) {\r\n    // sphere's main diameter is inside slice\r\n    rMax = radius;\r\n  } else {\r\n    rMax = Math.max(rzMin, rzMax);\r\n  }\r\n  return [rMin, rMax];\r\n}\r\n\r\n/**\r\n * Calculate min & max radius of a circle slice between yMin & yMax.\r\n *\r\n * To maintain analogy with _getSphereSliceRadiusRange we call radius what in fact is\r\n * half-width (along X axis) of the slice, i.e. 1D-sphere radius.\r\n *\r\n * @param {Vector3} center - center of the circle (z can be ignored)\r\n * @param {number} radius  - circle radius\r\n * @param {number} yMin - lower bound of the slice\r\n * @param {number} yMax - upper bound of the slice\r\n * @returns {Array} - array of two numbers (min & max radius, or half-width)\r\n */\r\nfunction _getCircleSliceRadiusRange(center, radius, yMin, yMax) {\r\n  const dyMin = yMin - center.y;\r\n  const dyMax = yMax - center.y;\r\n  const ryMin = Math.sqrt(Math.max(radius * radius - dyMin * dyMin, 0.0));\r\n  const ryMax = Math.sqrt(Math.max(radius * radius - dyMax * dyMax, 0.0));\r\n  const rMin = Math.min(ryMin, ryMax);\r\n  let rMax;\r\n  if (yMin <= center.y && yMax >= center.y) {\r\n    // slice's main diameter is inside slice\r\n    rMax = radius;\r\n  } else {\r\n    rMax = Math.max(ryMin, ryMax);\r\n  }\r\n  return [rMin, rMax];\r\n}\r\n\r\n/**\r\n * VoxelWorld constructor\r\n *\r\n * @param {Box3} box - bounding box of the volume to be partitioned\r\n * @param {Vector3} vCellSizeHint - target voxel size (actual voxel size may differ from this)\r\n */\r\nclass VoxelWorld {\r\n  constructor(box, vCellSizeHint) {\r\n    this._box = box.clone();\r\n    const size = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    box.getSize(size);\r\n    this._count = size.clone().divide(vCellSizeHint).floor().max(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 1, 1));\r\n    this._last = this._count.clone().subScalar(1);\r\n    this._cellSize = size.clone().divide(this._count);\r\n    this._cellInnerR = 0.5 * Math.min(Math.min(this._cellSize.x, this._cellSize.y), this._cellSize.z);\r\n    this._cellOuterR = 0.5 * Math.sqrt(this._cellSize.dot(this._cellSize));\r\n\r\n    // array of voxels, each element contains index of first atom in voxel\r\n    const numVoxels = this._count.x * this._count.y * this._count.z;\r\n    this._voxels = utils.allocateTyped(Int32Array, numVoxels);\r\n    for (let i = 0; i < numVoxels; ++i) {\r\n      this._voxels[i] = -1;\r\n    }\r\n\r\n    // array of atoms that stores multiple single-linked lists\r\n    // two elements for each atom: Atom ref, index of next atom (in this array\r\n    this._atoms = [];\r\n  }\r\n\r\n  /**\r\n   * Add all atoms from a complex to voxel world\r\n   *\r\n   * @param {Complex} complex - complex\r\n   */\r\n  addAtoms(complex) {\r\n    const self = this;\r\n    let idx = this._atoms.length;\r\n\r\n    // resize array of atoms\r\n    this._atoms.length += 2 * complex.getAtomCount();\r\n    complex.forEachAtom(atom => {\r\n      // find which voxel contains this atom\r\n      const voxelIdx = self._findVoxel(atom.position);\r\n\r\n      // push current atom to the head of voxel's atom list\r\n      self._atoms[idx] = atom;\r\n      self._atoms[idx + 1] = self._voxels[voxelIdx];\r\n      self._voxels[voxelIdx] = idx;\r\n      idx += 2;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get voxel that contains specified 3D point (we use clamp at the edges)\r\n   *\r\n   * @param {Vector3} point - a point in 3D\r\n   * @returns {number} - index of voxel\r\n   */\r\n  static _zero = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0))();\r\n  static _voxel = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  _findVoxel(point) {\r\n    const zero = VoxelWorld._zero;\r\n    const voxel = VoxelWorld._voxel;\r\n    voxel.copy(point).sub(this._box.min).divide(this._cellSize).floor().clamp(zero, this._last);\r\n    return voxel.x + this._count.x * (voxel.y + this._count.y * voxel.z);\r\n  }\r\n\r\n  /**\r\n   * Call a function for each atom in voxel\r\n   *\r\n   * @param {number} voxel - index of voxel\r\n   * @param {function(Atom)} process - function to call\r\n   */\r\n  _forEachAtomInVoxel(voxel, process) {\r\n    for (let i = this._voxels[voxel]; i >= 0; i = this._atoms[i + 1]) {\r\n      process(this._atoms[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function for each voxel that is touched by given sphere. Callback also takes flag\r\n   * isInside specifying whether voxel lies inside the sphere entirely.\r\n   *\r\n   * @param {Vector3} center - center of the sphere\r\n   * @param {number} radius  - sphere radius\r\n   * @param {function(number,bool)} process - function to call that takes voxel index and boolean isInside\r\n   */\r\n\r\n  static _xRange = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2())();\r\n  static _yRange = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2())();\r\n  static _zRange = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2())();\r\n  _forEachVoxelWithinRadius(center, radius, process) {\r\n    const xRange = VoxelWorld._xRange;\r\n    const yRange = VoxelWorld._yRange;\r\n    const zRange = VoxelWorld._zRange;\r\n\r\n    // switch to a faster method unless cell size is much smaller than sphere radius\r\n    if (radius / this._cellInnerR < 10) {\r\n      this._forEachVoxelWithinRadiusSimple(center, radius, process);\r\n      return;\r\n    }\r\n    let rRangeXY;\r\n    let rRangeX;\r\n    let xVal;\r\n    let yVal;\r\n    let zVal;\r\n    let isInsideX;\r\n    let isInsideY;\r\n    let isInsideZ;\r\n    zRange.set(center.z - radius, center.z + radius);\r\n    zRange.subScalar(this._box.min.z).divideScalar(this._cellSize.z).floor().clampScalar(0, this._count.z - 1);\r\n    for (let z = zRange.x; z <= zRange.y; ++z) {\r\n      zVal = [this._box.min.z + z * this._cellSize.z, this._box.min.z + (z + 1) * this._cellSize.z];\r\n      isInsideZ = center.z - radius <= zVal[0] && zVal[1] <= center.z + radius;\r\n      rRangeXY = _getSphereSliceRadiusRange(center, radius, zVal[0], zVal[1]);\r\n      yRange.set(center.y - rRangeXY[1], center.y + rRangeXY[1]);\r\n      yRange.subScalar(this._box.min.y).divideScalar(this._cellSize.y).floor().clampScalar(0, this._count.y - 1);\r\n      for (let y = yRange.x; y <= yRange.y; ++y) {\r\n        yVal = [this._box.min.y + y * this._cellSize.y, this._box.min.y + (y + 1) * this._cellSize.y];\r\n        isInsideY = center.y - rRangeXY[0] <= yVal[0] && yVal[1] <= center.y + rRangeXY[0];\r\n        rRangeX = _getCircleSliceRadiusRange(center, rRangeXY[1], yVal[0], yVal[1]);\r\n        xRange.set(center.x - rRangeX[1], center.x + rRangeX[1]);\r\n        xRange.subScalar(this._box.min.x).divideScalar(this._cellSize.x).floor().clampScalar(0, this._count.x - 1);\r\n        for (let {\r\n          x\r\n        } = xRange; x <= xRange.y; ++x) {\r\n          xVal = [this._box.min.x + x * this._cellSize.x, this._box.min.x + (x + 1) * this._cellSize.x];\r\n          isInsideX = center.x - rRangeX[0] <= xVal[0] && xVal[1] <= center.x + rRangeX[0];\r\n          process(x + this._count.x * (y + this._count.y * z), isInsideX && isInsideY && isInsideZ);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function for each voxel that is touched by given sphere. Callback also takes flag\r\n   * isInside specifying whether voxel lies inside the sphere entirely.\r\n   * This is a version of method that doesn't try to \"calculate\" what voxels fall inside radius\r\n   * but instead just checks all voxels inside sphere's bounding box. This should be faster\r\n   * unless cell size is much smaller than sphere radius.\r\n   *\r\n   * @param {Vector3} center - center of the sphere\r\n   * @param {number} radius  - sphere radius\r\n   * @param {function(number,bool)} process - function to call that takes voxel index and boolean isInside\r\n   */\r\n\r\n  static _vCenter = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  _forEachVoxelWithinRadiusSimple(center, radius, process) {\r\n    const xRange = VoxelWorld._xRange;\r\n    const yRange = VoxelWorld._yRange;\r\n    const zRange = VoxelWorld._zRange;\r\n    const vCenter = VoxelWorld._vCenter;\r\n    const distTouch2 = (radius + this._cellOuterR) * (radius + this._cellOuterR);\r\n    let distInside2 = -1.0;\r\n    if (radius > this._cellOuterR) {\r\n      distInside2 = (radius - this._cellOuterR) * (radius - this._cellOuterR);\r\n    }\r\n\r\n    // calculate bounding box for the sphere\r\n    xRange.set(center.x - radius, center.x + radius);\r\n    xRange.subScalar(this._box.min.x).divideScalar(this._cellSize.x).floor();\r\n    xRange.x = Math.min(Math.max(xRange.x, 0), this._count.x - 1);\r\n    xRange.y = Math.min(Math.max(xRange.y, 0), this._count.x - 1);\r\n    yRange.set(center.y - radius, center.y + radius);\r\n    yRange.subScalar(this._box.min.y).divideScalar(this._cellSize.y).floor();\r\n    yRange.x = Math.min(Math.max(yRange.x, 0), this._count.y - 1);\r\n    yRange.y = Math.min(Math.max(yRange.y, 0), this._count.y - 1);\r\n    zRange.set(center.z - radius, center.z + radius);\r\n    zRange.subScalar(this._box.min.z).divideScalar(this._cellSize.z).floor();\r\n    zRange.x = Math.min(Math.max(zRange.x, 0), this._count.z - 1);\r\n    zRange.y = Math.min(Math.max(zRange.y, 0), this._count.z - 1);\r\n    for (let z = zRange.x; z <= zRange.y; ++z) {\r\n      const zVal = [this._box.min.z + z * this._cellSize.z, this._box.min.z + (z + 1) * this._cellSize.z];\r\n      vCenter.z = 0.5 * (zVal[0] + zVal[1]);\r\n      for (let y = yRange.x; y <= yRange.y; ++y) {\r\n        const yVal = [this._box.min.y + y * this._cellSize.y, this._box.min.y + (y + 1) * this._cellSize.y];\r\n        vCenter.y = 0.5 * (yVal[0] + yVal[1]);\r\n        for (let {\r\n          x\r\n        } = xRange; x <= xRange.y; ++x) {\r\n          const xVal = [this._box.min.x + x * this._cellSize.x, this._box.min.x + (x + 1) * this._cellSize.x];\r\n          vCenter.x = 0.5 * (xVal[0] + xVal[1]);\r\n          const d2 = center.distanceToSquared(vCenter);\r\n          if (d2 <= distTouch2) {\r\n            process(x + this._count.x * (y + this._count.y * z), d2 <= distInside2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function for each atom within given sphere\r\n   *\r\n   * @param {Vector3} center - center of the sphere\r\n   * @param {number} radius  - sphere radius\r\n   * @param {function(Atom)} process - function to call\r\n   */\r\n  forEachAtomWithinRadius(center, radius, process) {\r\n    const self = this;\r\n    const r2 = radius * radius;\r\n    self._forEachVoxelWithinRadius(center, radius, (voxel, isInside) => {\r\n      if (isInside) {\r\n        self._forEachAtomInVoxel(voxel, process);\r\n      } else {\r\n        self._forEachAtomInVoxel(voxel, atom => {\r\n          if (center.distanceToSquared(atom.position) <= r2) {\r\n            process(atom);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Call a function for each atom of given complex within given distance from group of atoms defined by mask\r\n   *\r\n   * @param {Complex} complex - complex\r\n   * @param {number} mask - bit mask\r\n   * @param {number} dist - distance\r\n   * @param {function(Atom)} process - function to call\r\n   */\r\n  forEachAtomWithinDistFromMasked(complex, mask, dist, process) {\r\n    this._forEachAtomWithinDistFromGroup(atomProc => {\r\n      complex.forEachAtom(atom => {\r\n        if ((atom.mask & mask) !== 0) {\r\n          atomProc(atom);\r\n        }\r\n      });\r\n    }, dist, process);\r\n  }\r\n\r\n  /**\r\n   * Call a function for each atom of given complex within given distance from group of atoms defined by selector\r\n   *\r\n   * @param {Complex} complex - complex\r\n   * @param {number} selector - selector\r\n   * @param {number} dist - distance\r\n   * @param {function(Atom)} process - function to call\r\n   */\r\n  forEachAtomWithinDistFromSelected(complex, selector, dist, process) {\r\n    this._forEachAtomWithinDistFromGroup(atomProc => {\r\n      complex.forEachAtom(atom => {\r\n        if (selector.includesAtom(atom)) {\r\n          atomProc(atom);\r\n        }\r\n      });\r\n    }, dist, process);\r\n  }\r\n\r\n  /**\r\n   * Call a function for each atom of given complex within given distance from group of atoms\r\n   *\r\n   * @param {function} forEachAtom - enumerator of atoms in the group\r\n   * @param {number} dist - distance\r\n   * @param {function(Atom)} process - function to call\r\n   */\r\n  _forEachAtomWithinDistFromGroup(forEachAtom, dist, process) {\r\n    const self = this;\r\n    const r2 = dist * dist;\r\n    const voxels = [];\r\n    const atoms = [];\r\n    let idx = 0;\r\n\r\n    // build \"within radius\" atom list for each voxel\r\n    forEachAtom(atom => {\r\n      self._forEachVoxelWithinRadius(atom.position, dist, (voxel, isInside) => {\r\n        if (isInside) {\r\n          // this voxel is inside circle -- no check will be required\r\n          voxels[voxel] = -1;\r\n        } else if (typeof voxels[voxel] === 'undefined') {\r\n          // this voxel isn't covered yet -- start building list of atoms\r\n          atoms.push(atom);\r\n          atoms.push(-1);\r\n          voxels[voxel] = idx;\r\n          idx += 2;\r\n        } else if (voxels[voxel] !== -1) {\r\n          // this voxel has a list of atoms required for distance check -- add atom to the list\r\n          atoms.push(atom);\r\n          atoms.push(voxels[voxel]);\r\n          voxels[voxel] = idx;\r\n          idx += 2;\r\n        }\r\n      });\r\n    });\r\n    let voxel;\r\n    const processIfWithin = function (atom) {\r\n      if (typeof voxels[voxel] === 'undefined') {\r\n        return;\r\n      }\r\n      idx = voxels[voxel];\r\n      if (idx === -1) {\r\n        // this voxel is fully covered\r\n        process(atom);\r\n        return;\r\n      }\r\n\r\n      // check distance to each atom within radius from this voxel\r\n      for (; idx >= 0; idx = atoms[idx + 1]) {\r\n        if (atom.position.distanceToSquared(atoms[idx].position) < r2) {\r\n          process(atom);\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n    // for each marked voxel\r\n    for (voxel in voxels) {\r\n      if (voxels.hasOwnProperty(voxel)) {\r\n        self._forEachAtomInVoxel(voxel, processIfWithin);\r\n      }\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const chem_VoxelWorld = (VoxelWorld);\r\n;// CONCATENATED MODULE: ./src/chem/HBondInfo.js\r\n\r\n\r\nconst MINIMAL_DISTANCE = 0.5;\r\nconst MIN_HBOND_ENERGY = -9.9;\r\nconst MAX_HBOND_ENERGY = -0.5;\r\nconst COUPLING_CONSTANT = -27.888; // = -332 * 0.42 * 0.2\r\nconst MAX_COUPLING_DISTANCE = 5.0; // how far is the closest atom of a potential partner residue from CA atom\r\nconst MAX_RESIDUES_THRESHOLD = 1000;\r\nclass HBondInfo {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    this._hbonds = []; // array of bond info for each residue\r\n    if (this._complex._residues.length > MAX_RESIDUES_THRESHOLD) {\r\n      this._buildVW(); // optimized version using voxel grid\r\n    } else {\r\n      this._build(); // test all pairs of residues\r\n    }\r\n  }\r\n  isBond(from, to) {\r\n    if (this._hbonds[from]) {\r\n      const [acc0, acc1] = this._hbonds[from].acceptor;\r\n      if (acc0 && acc0.residue === to && acc0.energy < MAX_HBOND_ENERGY) {\r\n        return true;\r\n      }\r\n      if (acc1 && acc1.residue === to && acc1.energy < MAX_HBOND_ENERGY) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  _build() {\r\n    const self = this;\r\n    for (let i = 0; i < this._complex._residues.length - 1; ++i) {\r\n      const ri = this._complex._residues[i];\r\n      if ((ri.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0) {\r\n        continue;\r\n      }\r\n\r\n      // get predecessor in chain\r\n      let preri = null;\r\n      if (i > 0 && this._complex._residues[i - 1].getType().flags & chem_ResidueType.Flags.PROTEIN && ri._sequence === this._complex._residues[i - 1]._sequence + 1) {\r\n        preri = this._complex._residues[i - 1];\r\n      }\r\n      for (let j = i + 1; j < this._complex._residues.length; ++j) {\r\n        const rj = this._complex._residues[j];\r\n        if ((rj.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0) {\r\n          continue;\r\n        }\r\n\r\n        // get predecessor in chain\r\n        let prerj = null;\r\n        if (this._complex._residues[j - 1].getType().flags & chem_ResidueType.Flags.PROTEIN && rj._sequence === this._complex._residues[j - 1]._sequence + 1) {\r\n          prerj = this._complex._residues[j - 1];\r\n        }\r\n        self._calcHBondEnergy(preri, ri, rj);\r\n        if (j !== i + 1) {\r\n          self._calcHBondEnergy(prerj, rj, ri);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _buildVW() {\r\n    const self = this;\r\n    const residues = this._complex._residues;\r\n    let ri;\r\n    let preri;\r\n    const vw = this._complex.getVoxelWorld();\r\n    if (vw === null) {\r\n      return;\r\n    }\r\n    const pairs = new chem_AtomPairs(this._complex._residues.length * this._complex._residues.length / 2);\r\n    function processAtom(atom) {\r\n      const rj = atom.residue;\r\n      if (rj._index === ri._index) {\r\n        return;\r\n      }\r\n      if ((rj.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0) {\r\n        return;\r\n      }\r\n      if (!pairs.addPair(ri._index, rj._index)) {\r\n        // we've seen this pair\r\n        return;\r\n      }\r\n\r\n      // get predecessor in chain\r\n      let prerj = rj._index > 0 ? residues[rj._index - 1] : null;\r\n      if (prerj && ((prerj.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0 || rj._sequence !== prerj._sequence + 1)) {\r\n        prerj = null;\r\n      }\r\n      self._calcHBondEnergy(preri, ri, rj);\r\n      if (rj._index !== ri._index + 1) {\r\n        self._calcHBondEnergy(prerj, rj, ri);\r\n      }\r\n    }\r\n    for (let i = 0; i < residues.length - 1; ++i) {\r\n      ri = residues[i];\r\n      if ((ri.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0) {\r\n        continue;\r\n      }\r\n\r\n      // get predecessor in chain\r\n      preri = i > 0 ? residues[i - 1] : null;\r\n      if (preri && ((preri.getType().flags & chem_ResidueType.Flags.PROTEIN) === 0 || ri._sequence !== preri._sequence + 1)) {\r\n        preri = null;\r\n      }\r\n      vw.forEachAtomWithinRadius(this._residueGetCAlpha(ri), MAX_COUPLING_DISTANCE, processAtom);\r\n    }\r\n  }\r\n  _residueGetCAlpha(res) {\r\n    for (let i = 0; i < res._atoms.length; ++i) {\r\n      const {\r\n        name\r\n      } = res._atoms[i];\r\n      if (name === 'CA' || name === 'C1') {\r\n        return res._atoms[i].position;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  _residueGetCO(res) {\r\n    let c = null;\r\n    let o = null;\r\n    res.forEachAtom(a => {\r\n      if (a.name === 'C') {\r\n        c = a.position;\r\n      } else if (a.name === 'O') {\r\n        o = a.position;\r\n      }\r\n    });\r\n    return [c, o];\r\n  }\r\n\r\n  // TODO Support hydrogen defined in complex\r\n  _residueGetNH(prev, res) {\r\n    const [c, o] = this._residueGetCO(prev);\r\n    let n;\r\n    res.forEachAtom(a => {\r\n      if (a.name === 'N') {\r\n        n = a.position;\r\n      }\r\n    });\r\n    if (c && o && n) {\r\n      // calculate hydrogen position\r\n      const h = c.clone();\r\n      h.sub(o);\r\n      h.multiplyScalar(1.0 / h.length());\r\n      h.add(n);\r\n      return [n, h];\r\n    }\r\n    return [null, null];\r\n  }\r\n  _calcHBondEnergy(predonor, donor, acceptor) {\r\n    let result = 0;\r\n    if (predonor === null) {\r\n      return result;\r\n    }\r\n    if (donor.getType().getName() !== 'PRO') {\r\n      const [n, h] = this._residueGetNH(predonor, donor);\r\n      const [c, o] = this._residueGetCO(acceptor);\r\n      if (n === null || h === null || c === null || o === null) {\r\n        return result;\r\n      }\r\n      const distanceHO = h.distanceTo(o);\r\n      const distanceHC = h.distanceTo(c);\r\n      const distanceNC = n.distanceTo(c);\r\n      const distanceNO = n.distanceTo(o);\r\n      if (distanceHO < MINIMAL_DISTANCE || distanceHC < MINIMAL_DISTANCE || distanceNC < MINIMAL_DISTANCE || distanceNO < MINIMAL_DISTANCE) {\r\n        result = MIN_HBOND_ENERGY;\r\n      } else {\r\n        result = COUPLING_CONSTANT / distanceHO - COUPLING_CONSTANT / distanceHC + COUPLING_CONSTANT / distanceNC - COUPLING_CONSTANT / distanceNO;\r\n      }\r\n\r\n      // DSSP compatibility mode:\r\n      result = Math.round(result * 1000) / 1000;\r\n      if (result < MIN_HBOND_ENERGY) {\r\n        result = MIN_HBOND_ENERGY;\r\n      }\r\n    }\r\n\r\n    // update donor\r\n    if (typeof this._hbonds[donor._index] === 'undefined') {\r\n      this._hbonds[donor._index] = {\r\n        donor: [],\r\n        acceptor: []\r\n      };\r\n    }\r\n    const donorInfo = this._hbonds[donor._index];\r\n    if (donorInfo.acceptor.length < 2) {\r\n      donorInfo.acceptor.push({\r\n        residue: acceptor._index,\r\n        energy: result\r\n      });\r\n    }\r\n    if (donorInfo.acceptor.length > 1) {\r\n      if (result < donorInfo.acceptor[0].energy) {\r\n        donorInfo.acceptor[1].residue = donorInfo.acceptor[0].residue;\r\n        donorInfo.acceptor[1].energy = donorInfo.acceptor[0].energy;\r\n        donorInfo.acceptor[0].residue = acceptor._index;\r\n        donorInfo.acceptor[0].energy = result;\r\n      } else if (result < donorInfo.acceptor[1].energy) {\r\n        donorInfo.acceptor[1].residue = acceptor._index;\r\n        donorInfo.acceptor[1].energy = result;\r\n      }\r\n    }\r\n\r\n    // update acceptor\r\n    if (typeof this._hbonds[acceptor._index] === 'undefined') {\r\n      this._hbonds[acceptor._index] = {\r\n        donor: [],\r\n        acceptor: []\r\n      };\r\n    }\r\n    const accInfo = this._hbonds[acceptor._index];\r\n    if (accInfo.donor.length < 2) {\r\n      accInfo.donor.push({\r\n        residue: donor._index,\r\n        energy: result\r\n      });\r\n    }\r\n    if (accInfo.donor.length > 1) {\r\n      if (result < accInfo.donor[0].energy) {\r\n        accInfo.donor[1].residue = accInfo.donor[0].residue;\r\n        accInfo.donor[1].energy = accInfo.donor[0].energy;\r\n        accInfo.donor[0].residue = donor._index;\r\n        accInfo.donor[0].energy = result;\r\n      } else if (result < accInfo.donor[1].energy) {\r\n        accInfo.donor[1].residue = donor._index;\r\n        accInfo.donor[1].energy = result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/chem/SecondaryStructureMap.js\r\n\r\n\r\nconst BridgeType = Object.freeze({\r\n  NO_BRIDGE: 0,\r\n  PARALLEL: 1,\r\n  ANTI_PARALLEL: 2\r\n});\r\nconst HelixFlag = Object.freeze({\r\n  START: 1,\r\n  MIDDLE: 2,\r\n  END: 3,\r\n  START_AND_END: 4\r\n});\r\nconst StructureType = Object.freeze({\r\n  STRAND: 'E',\r\n  BRIDGE: 'B',\r\n  HELIX_310: 'G',\r\n  HELIX_ALPHA: 'H',\r\n  HELIX_PI: 'I',\r\n  TURN: 'T',\r\n  BEND: 'S',\r\n  LOOP: ' '\r\n});\r\nclass SecondaryStructureMap {\r\n  constructor(complex) {\r\n    this._complex = complex;\r\n    this._build();\r\n  }\r\n  _build() {\r\n    const self = this;\r\n    this._hbonds = new HBondInfo(this._complex);\r\n    this._ss = []; // DSSP map by residue\r\n\r\n    // auxilliary data\r\n    this._sheet = [];\r\n    this._betaPartners = [];\r\n    this._bend = [];\r\n    for (let i = 0; i < this._complex.getResidues().length; ++i) {\r\n      this._betaPartners[i] = [];\r\n    }\r\n    this._helixFlags = [];\r\n    this._helixFlags[3] = [];\r\n    this._helixFlags[4] = [];\r\n    this._helixFlags[5] = [];\r\n\r\n    // calculate peptide chain lengths\r\n    this._chainLengths = [];\r\n    for (let i = 0; i < this._complex._chains.length; ++i) {\r\n      const chain = this._complex._chains[i].getResidues();\r\n      let len = 0;\r\n      for (; len < chain.length; ++len) {\r\n        if ((chain[len].getType().flags & chem_ResidueType.Flags.PROTEIN) === 0) {\r\n          break;\r\n        }\r\n      }\r\n      this._chainLengths[i] = len;\r\n    }\r\n    this._buildBetaSheets();\r\n    for (let i = 0; i < this._complex._chains.length; ++i) {\r\n      self._buildAlphaHelices(this._complex._chains[i].getResidues(), this._chainLengths[i], false);\r\n    }\r\n  }\r\n  _buildAlphaHelices(inResidues, chainLength, inPreferPiHelices) {\r\n    // Helix and Turn\r\n    for (let stride = 3; stride <= 5; ++stride) {\r\n      if (inResidues.length < stride) {\r\n        break;\r\n      }\r\n      for (let i = 0; i + stride < chainLength; ++i) {\r\n        if (this._hbonds.isBond(inResidues[i + stride]._index, inResidues[i]._index)\r\n        /* && NoChainBreak(res[i], res[i + stride]) */) {\r\n          this._helixFlags[stride][inResidues[i + stride]._index] = HelixFlag.END;\r\n          for (let j = i + 1; j < i + stride; ++j) {\r\n            if (typeof this._helixFlags[stride][inResidues[j]._index] === 'undefined') {\r\n              this._helixFlags[stride][inResidues[j]._index] = HelixFlag.MIDDLE;\r\n            }\r\n          }\r\n          if (this._helixFlags[stride][inResidues[i]._index] === HelixFlag.END) {\r\n            this._helixFlags[stride][inResidues[i]._index] = HelixFlag.START_AND_END;\r\n          } else {\r\n            this._helixFlags[stride][inResidues[i]._index] = HelixFlag.START;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = 2; i < chainLength - 2; ++i) {\r\n      const kappa = this._kappa(inResidues[i - 2], inResidues[i], inResidues[i + 2]);\r\n      this._bend[inResidues[i]._index] = kappa !== 360 && kappa > 70;\r\n    }\r\n    for (let i = 1; i + 4 < chainLength; ++i) {\r\n      if (this._isHelixStart(inResidues[i]._index, 4) && this._isHelixStart(inResidues[i - 1]._index, 4)) {\r\n        for (let j = i; j <= i + 3; ++j) {\r\n          this._ss[inResidues[j]._index] = StructureType.HELIX_ALPHA;\r\n        }\r\n      }\r\n    }\r\n    for (let i = 1; i + 3 < chainLength; ++i) {\r\n      if (this._isHelixStart(inResidues[i]._index, 3) && this._isHelixStart(inResidues[i - 1]._index, 3)) {\r\n        let empty = true;\r\n        for (let j = i; empty && j <= i + 2; ++j) {\r\n          empty = typeof this._ss[inResidues[j]._index] === 'undefined' || this._ss[inResidues[j]._index] === StructureType.HELIX_310;\r\n        }\r\n        if (empty) {\r\n          for (let j = i; j <= i + 2; ++j) {\r\n            this._ss[inResidues[j]._index] = StructureType.HELIX_310;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = 1; i + 5 < chainLength; ++i) {\r\n      if (this._isHelixStart(inResidues[i]._index, 5) && this._isHelixStart(inResidues[i - 1]._index, 5)) {\r\n        let empty = true;\r\n        for (let j = i; empty && j <= i + 4; ++j) {\r\n          empty = typeof this._ss[inResidues[j]._index] === 'undefined' || this._ss[inResidues[j]._index] === StructureType.HELIX_PI || inPreferPiHelices && this._ss[inResidues[j]._index] === StructureType.HELIX_ALPHA;\r\n        }\r\n        if (empty) {\r\n          for (let j = i; j <= i + 4; ++j) {\r\n            this._ss[inResidues[j]._index] = StructureType.HELIX_PI;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let i = 1; i + 1 < chainLength; ++i) {\r\n      if (typeof this._ss[inResidues[i]._index] === 'undefined') {\r\n        let isTurn = false;\r\n        for (let stride = 3; stride <= 5 && !isTurn; ++stride) {\r\n          for (let k = 1; k < stride && !isTurn; ++k) {\r\n            isTurn = i >= k && this._isHelixStart(inResidues[i - k]._index, stride);\r\n          }\r\n        }\r\n        if (isTurn) {\r\n          this._ss[inResidues[i]._index] = StructureType.TURN;\r\n        } else if (this._bend[inResidues[i]._index]) {\r\n          this._ss[inResidues[i]._index] = StructureType.BEND;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _residueGetCAlpha(res) {\r\n    for (let i = 0; i < res._atoms.length; ++i) {\r\n      const {\r\n        name\r\n      } = res._atoms[i];\r\n      if (name === 'CA' || name === 'C1') {\r\n        return res._atoms[i].position;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  _cosinusAngle(p1, p2, p3, p4) {\r\n    const v12 = p1.clone().sub(p2);\r\n    const v34 = p3.clone().sub(p4);\r\n    let result = 0;\r\n    const x = v12.dot(v12) * v34.dot(v34);\r\n    if (x > 0) {\r\n      result = v12.dot(v34) / Math.sqrt(x);\r\n    }\r\n    return result;\r\n  }\r\n  _kappa(prevPrev, res, nextNext) {\r\n    const curCA = this._residueGetCAlpha(res);\r\n    const ppCA = this._residueGetCAlpha(prevPrev);\r\n    const nnCA = this._residueGetCAlpha(nextNext);\r\n    if (curCA === null || ppCA === null || nnCA === null) {\r\n      return 180;\r\n    }\r\n    const ckap = this._cosinusAngle(curCA, ppCA, nnCA, curCA);\r\n    const skap = Math.sqrt(1 - ckap * ckap);\r\n    return Math.atan2(skap, ckap) * 180 / Math.PI;\r\n  }\r\n  _isHelixStart(res, stride) {\r\n    return this._helixFlags[stride][res] === HelixFlag.START || this._helixFlags[stride][res] === HelixFlag.START_AND_END;\r\n  }\r\n  _buildBetaSheets() {\r\n    // find bridges\r\n    // check each chain against each other chain, and against itself\r\n    const bridges = [];\r\n    for (let a = 0; a < this._complex._chains.length; ++a) {\r\n      const lenA = this._chainLengths[a];\r\n      if (lenA <= 4) {\r\n        continue;\r\n      }\r\n      const chainA = this._complex._chains[a].getResidues();\r\n      for (let b = a; b < this._complex._chains.length; ++b) {\r\n        const lenB = this._chainLengths[b];\r\n        if (lenB <= 4) {\r\n          continue;\r\n        }\r\n        const chainB = this._complex._chains[b].getResidues();\r\n        for (let i = 1; i + 1 < lenA; ++i) {\r\n          const ri = chainA[i];\r\n          let j = 1;\r\n          if (b === a) {\r\n            j = i + 3; // check for self-bridges forward down the chain\r\n          }\r\n          for (; j + 1 < lenB; ++j) {\r\n            const rj = chainB[j];\r\n            const type = this._testBridge(chainA, i, chainB, j);\r\n            if (type === BridgeType.NO_BRIDGE) {\r\n              continue;\r\n            }\r\n\r\n            // there is a bridge, try to attach it to previously found sequence\r\n            let found = false;\r\n            for (const bridge of bridges) {\r\n              if (type !== bridge.type || ri._index !== bridge.i[bridge.i.length - 1] + 1) {\r\n                continue;\r\n              }\r\n              if (type === BridgeType.PARALLEL && bridge.j[bridge.j.length - 1] + 1 === rj._index) {\r\n                bridge.i.push(ri._index);\r\n                bridge.j.push(rj._index);\r\n                found = true;\r\n                break;\r\n              }\r\n              if (type === BridgeType.ANTI_PARALLEL && bridge.j[0] - 1 === rj._index) {\r\n                bridge.i.push(ri._index);\r\n                bridge.j.unshift(rj._index);\r\n                found = true;\r\n                break;\r\n              }\r\n            }\r\n\r\n            // this bridge cannot be attached anywhere, start a new sequence\r\n            if (!found) {\r\n              bridges.push({\r\n                type,\r\n                i: [ri._index],\r\n                chainI: ri.getChain()._index,\r\n                j: [rj._index],\r\n                chainJ: rj.getChain()._index\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // extend ladders\r\n    bridges.sort((a, b) => {\r\n      if (a.chainI < b.chainI || a.chainI === b.chainI && a.i[0] < b.i[0]) {\r\n        return -1;\r\n      }\r\n      return 1;\r\n    });\r\n    for (let i = 0; i < bridges.length; ++i) {\r\n      for (let j = i + 1; j < bridges.length; ++j) {\r\n        const ibi = bridges[i].i[0];\r\n        const iei = bridges[i].i[bridges[i].i.length - 1];\r\n        const jbi = bridges[i].j[0];\r\n        const jei = bridges[i].j[bridges[i].j.length - 1];\r\n        const ibj = bridges[j].i[0];\r\n        const iej = bridges[j].i[bridges[j].i.length - 1];\r\n        const jbj = bridges[j].j[0];\r\n        const jej = bridges[j].j[bridges[j].j.length - 1];\r\n        if (bridges[i].type !== bridges[j].type || this._hasChainBreak(Math.min(ibi, ibj), Math.max(iei, iej)) || this._hasChainBreak(Math.min(jbi, jbj), Math.max(jei, jej)) || ibj - iei >= 6 || iei >= ibj && ibi <= iej) {\r\n          continue;\r\n        }\r\n        let bulge = false;\r\n        if (bridges[i].type === BridgeType.PARALLEL) {\r\n          bulge = jbj - jei < 6 && ibj - iei < 3 || jbj - jei < 3;\r\n        } else {\r\n          bulge = jbi - jej < 6 && ibj - iei < 3 || jbi - jej < 3;\r\n        }\r\n        if (bulge) {\r\n          bridges[i].i = bridges[i].i.concat(bridges[j].i);\r\n          if (bridges[i].type === BridgeType.PARALLEL) {\r\n            bridges[i].j = bridges[i].j.concat(bridges[j].j);\r\n          } else {\r\n            bridges[i].j = bridges[j].j.concat(bridges[i].j);\r\n          }\r\n          bridges.splice(j--, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sheet\r\n    const ladderset = new Set();\r\n    for (let i = 0; i < bridges.length; ++i) {\r\n      ladderset.add(bridges[i]);\r\n    }\r\n    let sheet = 1;\r\n    let ladder = 0;\r\n    while (ladderset.size > 0) {\r\n      let bridge = ladderset.values().next().value;\r\n      ladderset.delete(bridge);\r\n      const sheetset = new Set();\r\n      sheetset.add(bridge);\r\n      let toMove;\r\n      do {\r\n        toMove = new Set();\r\n        for (const a of sheetset.values()) {\r\n          for (const b of ladderset.values()) {\r\n            if (this._areBridgesLinked(a, b)) {\r\n              toMove.add(b);\r\n            }\r\n          }\r\n        }\r\n        for (bridge of toMove.values()) {\r\n          sheetset.add(bridge);\r\n          ladderset.delete(bridge);\r\n        }\r\n      } while (toMove.size > 0);\r\n      for (bridge of sheetset.values()) {\r\n        bridge.ladder = ladder;\r\n        bridge.sheet = sheet;\r\n        bridge.link = sheetset;\r\n        ++ladder;\r\n      }\r\n      ++sheet;\r\n    }\r\n    for (let i = 0; i < bridges.length; ++i) {\r\n      const bridge = bridges[i];\r\n\r\n      // find out if any of the i and j set members already have\r\n      // a bridge assigned, if so, we're assigning bridge 2\r\n\r\n      let betai = 0;\r\n      let betaj = 0;\r\n      for (let l = 0; l < bridge.i.length; ++l) {\r\n        if (this._betaPartners[bridge.i[l]][0]) {\r\n          betai = 1;\r\n          break;\r\n        }\r\n      }\r\n      for (let l = 0; l < bridge.j.length; ++l) {\r\n        if (this._betaPartners[bridge.j[l]][0]) {\r\n          betaj = 1;\r\n          break;\r\n        }\r\n      }\r\n      let ss = StructureType.BRIDGE;\r\n      if (bridge.i.length > 1) {\r\n        ss = StructureType.STRAND;\r\n      }\r\n      if (bridge.type === BridgeType.PARALLEL) {\r\n        let j = 0;\r\n        for (let k = 0; k < bridge.i.length; ++k) {\r\n          this._betaPartners[bridge.i[k]][betai] = {\r\n            residue: bridge.j[j++],\r\n            ladder: bridge.ladder,\r\n            parallel: true\r\n          };\r\n        }\r\n        j = 0;\r\n        for (let k = 0; k < bridge.j.length; ++k) {\r\n          this._betaPartners[bridge.j[k]][betaj] = {\r\n            residue: bridge.i[j++],\r\n            ladder: bridge.ladder,\r\n            parallel: true\r\n          };\r\n        }\r\n      } else {\r\n        let j = bridge.j.length - 1;\r\n        for (let k = 0; k < bridge.i.length; ++k) {\r\n          this._betaPartners[bridge.i[k]][betai] = {\r\n            residue: bridge.j[j--],\r\n            ladder: bridge.ladder,\r\n            parallel: false\r\n          };\r\n        }\r\n        j = bridge.i.length - 1;\r\n        for (let k = 0; k < bridge.j.length; ++k) {\r\n          this._betaPartners[bridge.j[k]][betaj] = {\r\n            residue: bridge.i[j--],\r\n            ladder: bridge.ladder,\r\n            parallel: false\r\n          };\r\n        }\r\n      }\r\n      for (let k = bridge.i[0]; k <= bridge.i[bridge.i.length - 1]; ++k) {\r\n        if (this._ss[k] !== StructureType.STRAND) {\r\n          this._ss[k] = ss;\r\n          this._sheet[k] = bridge.sheet;\r\n        }\r\n      }\r\n      for (let k = bridge.j[0]; k <= bridge.j[bridge.j.length - 1]; ++k) {\r\n        if (this._ss[k] !== StructureType.STRAND) {\r\n          this._ss[k] = ss;\r\n          this._sheet[k] = bridge.sheet;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _testBridge(chainA, from, chainB, to) {\r\n    let result = BridgeType.NO_BRIDGE;\r\n    const a = chainA[from - 1]._index;\r\n    const b = chainA[from]._index;\r\n    const c = chainA[from + 1]._index;\r\n    const d = chainB[to - 1]._index;\r\n    const e = chainB[to]._index;\r\n    const f = chainB[to + 1]._index;\r\n    const isBond = this._hbonds.isBond.bind(this._hbonds);\r\n    if (isBond(c, e) && isBond(e, a) || isBond(f, b) && isBond(b, d)) {\r\n      result = BridgeType.PARALLEL;\r\n    } else if (isBond(c, d) && isBond(f, a) || isBond(e, b) && isBond(b, e)) {\r\n      result = BridgeType.ANTI_PARALLEL;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // return true if any of the residues in bridge a is identical to any of the residues in bridge b\r\n  _areBridgesLinked(a, b) {\r\n    const ai = new Set(a.i);\r\n    const aj = new Set(a.j);\r\n    for (const i of b.i) {\r\n      if (ai.has(i) || aj.has(i)) {\r\n        return true;\r\n      }\r\n    }\r\n    for (const i of b.j) {\r\n      if (ai.has(i) || aj.has(i)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  _hasChainBreak(from, to) {\r\n    for (let i = from + 1; i <= to; ++i) {\r\n      if (this._complex._residues[i]._sequence !== this._complex._residues[i - 1]._sequence + 1) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\nSecondaryStructureMap.StructureType = StructureType;\r\n;// CONCATENATED MODULE: ./src/chem/Complex.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst VOXEL_SIZE = 5.0;\r\nconst {\r\n  StructureType: Complex_StructureType\r\n} = SecondaryStructureMap;\r\nconst Complex_StructuralElementType = chem_StructuralElement.Type;\r\n\r\n// see http://www.wwpdb.org/documentation/file-format-content/format33/sect5.html#HELIX\r\nconst helixClassMap = {\r\n  [Complex_StructureType.HELIX_ALPHA]: 1,\r\n  [Complex_StructureType.HELIX_PI]: 3,\r\n  [Complex_StructureType.HELIX_310]: 5\r\n};\r\nconst loopMap = {\r\n  [Complex_StructureType.BRIDGE]: Complex_StructuralElementType.BRIDGE,\r\n  [Complex_StructureType.TURN]: Complex_StructuralElementType.TURN,\r\n  [Complex_StructureType.BEND]: Complex_StructuralElementType.BEND,\r\n  [Complex_StructureType.LOOP]: Complex_StructuralElementType.COIL\r\n};\r\n\r\n/**\r\n * The entire complex of the molecules under study.\r\n *\r\n * @exports Complex\r\n * @constructor\r\n */\r\nclass Complex {\r\n  constructor() {\r\n    this._chains = [];\r\n    this._components = [];\r\n    this._helices = [];\r\n    this._sheets = [];\r\n    this.structures = [];\r\n    this._residueTypes = Object.create(chem_ResidueType.StandardTypes);\r\n    this._atoms = [];\r\n    this._residues = [];\r\n    this._bonds = [];\r\n    this._sgroups = [];\r\n    this._molecules = [];\r\n    this._maskNeedsUpdate = false;\r\n    this.metadata = {};\r\n    this.symmetry = [];\r\n    this.units = [new chem_BiologicalUnit(this)];\r\n    this._currentUnit = 0; // default biological unit is the asymmetric unit\r\n  }\r\n  addAtom(atom) {\r\n    const index = this._atoms.length;\r\n    this._atoms.push(atom);\r\n    return index;\r\n  }\r\n  addSheet(sheet) {\r\n    const index = this._sheets.length;\r\n    this._sheets.push(sheet);\r\n    return index;\r\n  }\r\n  addHelix(helix) {\r\n    const index = this._helices.length;\r\n    this._helices.push(helix);\r\n    return index;\r\n  }\r\n  getAtoms() {\r\n    return this._atoms;\r\n  }\r\n  getBonds() {\r\n    return this._bonds;\r\n  }\r\n  getAtomCount() {\r\n    return this._atoms.length;\r\n  }\r\n  addResidue(residue) {\r\n    const index = this._residues.length;\r\n    this._residues.push(residue);\r\n    return index;\r\n  }\r\n  updateToFrame(frameData) {\r\n    this.forEachChain(chain => {\r\n      chain.updateToFrame(frameData);\r\n    });\r\n  }\r\n  addResidueType(resName) {\r\n    const rt = this._residueTypes[resName] = new chem_ResidueType(resName, 'Unknown', '');\r\n    return rt;\r\n  }\r\n  getResidueCount() {\r\n    return this._residues.length;\r\n  }\r\n  getResidues() {\r\n    return this._residues;\r\n  }\r\n  getSGroupCount() {\r\n    return this._sgroups.length;\r\n  }\r\n  getSGroups() {\r\n    return this._sgroups;\r\n  }\r\n\r\n  /*\r\n     Extract atom by its fullname: #chainName#.#residueId#.#atomName#\r\n     */\r\n  getAtomByFullname(fullName) {\r\n    const parts = fullName.split('.');\r\n    if (parts.length !== 3) {\r\n      return null;\r\n    }\r\n    const chainName = parts[0];\r\n    const resId = parseInt(parts[1], 10);\r\n    if (Number.isNaN(resId)) {\r\n      return null;\r\n    }\r\n    const atomName = parts[2].toUpperCase();\r\n    let currAtom = null;\r\n    this.forEachChain(chain => {\r\n      if (currAtom) {\r\n        return;\r\n      }\r\n      if (chain._name.localeCompare(chainName) === 0) {\r\n        chain.forEachResidue(residue => {\r\n          if (currAtom) {\r\n            return;\r\n          }\r\n          if (residue._sequence === resId) {\r\n            residue.forEachAtom(atom => {\r\n              if (currAtom) {\r\n                return;\r\n              }\r\n              if (atomName.localeCompare(atom.name) === 0) {\r\n                currAtom = atom;\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return currAtom;\r\n  }\r\n\r\n  /**\r\n   * Create a new chain.\r\n   *\r\n   * @param {string} name - Chain name.\r\n   * @returns {Chain} - Newly created chain.\r\n   */\r\n  addChain(name) {\r\n    const result = new chem_Chain(this, name);\r\n    this._chains.push(result);\r\n    return result;\r\n  }\r\n  getChain(name) {\r\n    for (let i = 0, n = this._chains.length; i < n; ++i) {\r\n      const chain = this._chains[i];\r\n      if (chain.getName() === name) {\r\n        return chain;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  getChainCount() {\r\n    return this._chains.length;\r\n  }\r\n  getMolecules() {\r\n    return this._molecules;\r\n  }\r\n  getMoleculeCount() {\r\n    return this._molecules.length;\r\n  }\r\n  forEachAtom(process) {\r\n    const atoms = this._atoms;\r\n    for (let i = 0, n = atoms.length; i < n; ++i) {\r\n      process(atoms[i]);\r\n    }\r\n  }\r\n  forEachBond(process) {\r\n    const bonds = this._bonds;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      process(bonds[i]);\r\n    }\r\n  }\r\n  forEachResidue(process) {\r\n    const residues = this._residues;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      process(residues[i]);\r\n    }\r\n  }\r\n  forEachChain(process) {\r\n    const chains = this._chains;\r\n    for (let i = 0, n = chains.length; i < n; ++i) {\r\n      process(chains[i]);\r\n    }\r\n  }\r\n  forEachMolecule(process) {\r\n    const molecules = this._molecules;\r\n    const n = molecules.length;\r\n    for (let i = 0; i < n; ++i) {\r\n      process(molecules[i]);\r\n    }\r\n  }\r\n  forEachSGroup(process) {\r\n    const groups = this._sgroups;\r\n    for (let i = 0, n = groups.length; i < n; ++i) {\r\n      process(groups[i]);\r\n    }\r\n  }\r\n  forEachComponent(process) {\r\n    const components = this._components;\r\n    for (let i = 0, n = components.length; i < n; ++i) {\r\n      process(components[i]);\r\n    }\r\n  }\r\n  forEachVisibleComponent(process) {\r\n    const components = this._components;\r\n    for (let i = 0, n = components.length; i < n; ++i) {\r\n      process(components[i]);\r\n    }\r\n  }\r\n  addBond(left, right, order, type, fixed) {\r\n    const bond = new chem_Bond(left, right, order, type, fixed);\r\n    this._bonds.push(bond);\r\n    return bond;\r\n  }\r\n  getBondCount() {\r\n    return this._bonds.length;\r\n  }\r\n  getResidueType(name) {\r\n    return this._residueTypes[name] || null;\r\n  }\r\n  getUnifiedSerial(chain, serial, iCode) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const maxSerial = 65536;\r\n    const chainShift = maxSerial * 256;\r\n    /* eslint-enable no-magic-numbers */\r\n    return serial + iCode * maxSerial + chain * chainShift;\r\n  }\r\n  splitUnifiedSerial(uniSerial) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const maxSerial = 65536;\r\n    const chainShift = maxSerial * 256;\r\n    /* eslint-enable no-magic-numbers */\r\n    const chainId = Math.floor(uniSerial / chainShift);\r\n    const remnant = uniSerial - chainId * chainShift;\r\n    const insCode = Math.floor(remnant / maxSerial);\r\n    const ser = remnant - insCode * maxSerial;\r\n    return {\r\n      chain: chainId,\r\n      serial: ser,\r\n      iCode: insCode\r\n    };\r\n  }\r\n  _fillCmpEdit() {\r\n    const self = this;\r\n    const components = this._components;\r\n    function addComp() {\r\n      const comp = new chem_Component(self);\r\n      comp._index = components.length;\r\n      components[comp._index] = comp;\r\n      return comp;\r\n    }\r\n    this.forEachChain(chain => {\r\n      const residues = chain._residues;\r\n      const resCount = residues.length;\r\n      if (resCount < 1) {\r\n        return;\r\n      }\r\n      let comp = addComp();\r\n      let currStart = residues[0]._index;\r\n      for (let i = 0; i < resCount; ++i) {\r\n        const currRes = residues[i];\r\n        currRes._component = comp;\r\n        const nextRes = i === resCount - 1 ? null : residues[i + 1];\r\n        if (!nextRes || !currRes.isConnected(nextRes) || currRes._index !== nextRes._index - 1) {\r\n          // the last condition is broken and incorrect\r\n          // the refactoring of the Component is required in order to fix this issue\r\n          comp.setSubDivs([{\r\n            start: currStart,\r\n            end: currRes._index\r\n          }]);\r\n          if (nextRes) {\r\n            currStart = nextRes._index;\r\n            comp = addComp();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // This function was added in the moment of despair\r\n  // It was the dark times for miew\r\n  _fillCmpNoedit() {\r\n    const comp = new chem_Component(this);\r\n    comp._index = 0;\r\n    const residues = this._residues;\r\n    const resCount = residues.length;\r\n    if (resCount === 0) {\r\n      return;\r\n    }\r\n    const currSubDivs = [];\r\n    let currStart = 0;\r\n    for (let i = 0; i < resCount; ++i) {\r\n      const currRes = residues[i];\r\n      currRes._component = comp;\r\n      const nextRes = i === resCount - 1 ? null : residues[i + 1];\r\n      if (!nextRes || !currRes.isConnected(nextRes)) {\r\n        // wrap up this interval\r\n        currSubDivs[currSubDivs.length] = {\r\n          start: currStart,\r\n          end: i\r\n        };\r\n        if (nextRes) {\r\n          currStart = i + 1;\r\n        }\r\n      }\r\n    }\r\n    comp.setSubDivs(currSubDivs);\r\n    this._components[comp._index] = comp;\r\n  }\r\n\r\n  /**\r\n   * Fill components information.\r\n   * @param {boolean} enableEditing - Restructure Complex to enable per-component editing.\r\n   */\r\n  _fillComponents(enableEditing) {\r\n    if (enableEditing) {\r\n      this._fillCmpEdit();\r\n    } else {\r\n      this._fillCmpNoedit();\r\n    }\r\n  }\r\n  getCurrentUnit() {\r\n    return this._currentUnit;\r\n  }\r\n  getDefaultBoundaries() {\r\n    return this.units[0].getBoundaries();\r\n  }\r\n  getBoundaries() {\r\n    return this.units[this._currentUnit].getBoundaries();\r\n  }\r\n  getTransforms() {\r\n    return this.units[this._currentUnit].getTransforms();\r\n  }\r\n  getSelector() {\r\n    return this.units[this._currentUnit].getSelector();\r\n  }\r\n  resetCurrentUnit() {\r\n    this._currentUnit = 0;\r\n    this.setCurrentUnit(1);\r\n  }\r\n  setCurrentUnit(newUnit) {\r\n    if (newUnit !== null && newUnit !== undefined && newUnit !== this._currentUnit && newUnit >= 0 && newUnit < this.units.length) {\r\n      this._currentUnit = newUnit;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  _computeBounds() {\r\n    const {\r\n      units\r\n    } = this;\r\n    for (let i = 0, n = units.length; i < n; ++i) {\r\n      units[i].computeBoundaries();\r\n    }\r\n  }\r\n  onAtomPositionChanged() {\r\n    this.forEachChain(a => {\r\n      a._finalize();\r\n    });\r\n    this.forEachComponent(c => {\r\n      c.update();\r\n    });\r\n    // Update bounding sphere and box\r\n    this._computeBounds();\r\n    this._finalizeBonds();\r\n    this.forEachSGroup(s => {\r\n      s._rebuildSGroupOnAtomChange();\r\n    });\r\n  }\r\n  update() {\r\n    if (this._maskNeedsUpdate) {\r\n      this.updateStructuresMask();\r\n      this._maskNeedsUpdate = false;\r\n    }\r\n  }\r\n  _finalizeBonds() {\r\n    const bonds = this.getBonds();\r\n    const n = bonds.length;\r\n    for (let i = 0; i < n; ++i) {\r\n      bonds[i]._index = i;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finalizes complex's inner data(i.e. after parsing).\r\n   * @param {objects} opts - Build bonds automatically.\r\n   * @param {boolean} opts.needAutoBonding     - Build bonds automatically.\r\n   * @param {boolean} opts.detectAromaticLoops - Find/mark aromatic loops.\r\n   * @param {boolean} opts.enableEditing       - Restructure Complex to enable per-component editing.\r\n   * @param {Array<Atom>} [opts.serialAtomMap] - Array of atoms ordered by their serials.\r\n   */\r\n  finalize(opts) {\r\n    opts = opts || {};\r\n    // Put bonds into atoms\r\n    const bonds = this._bonds;\r\n    let i;\r\n    let n;\r\n    // remove invalid bonds\r\n    for (i = bonds.length - 1; i >= 0; i--) {\r\n      const bond = bonds[i];\r\n      if (bond._left === null || bond._right === null) {\r\n        bonds.splice(i, 1);\r\n      } else {\r\n        bond._left.bonds.push(bond);\r\n        bond._right.bonds.push(bond);\r\n      }\r\n    }\r\n    const residues = this._residues;\r\n    for (i = 0, n = residues.length; i < n; ++i) {\r\n      residues[i]._finalize();\r\n    }\r\n    this.forEachChain(a => {\r\n      a._finalize();\r\n    });\r\n\r\n    // WARNING! this MUST be done BEFORE computeBounds is called\r\n    const {\r\n      units\r\n    } = this;\r\n    for (i = 0, n = units.length; i < n; ++i) {\r\n      units[i].finalize();\r\n    }\r\n    // try setting first biomolecule by defaults\r\n    this.setCurrentUnit(1);\r\n    const residueHash = {};\r\n    for (i = 0, n = residues.length; i < n; ++i) {\r\n      const res = residues[i];\r\n      // This code is extremely dangerous for non-PDB formats\r\n      residueHash[this.getUnifiedSerial(res.getChain().getName().charCodeAt(0), res.getSequence(), res.getICode().charCodeAt(0))] = res;\r\n    }\r\n    const {\r\n      structures\r\n    } = this;\r\n    for (i = 0, n = structures.length; i < n; ++i) {\r\n      structures[i]._finalize(opts.serialAtomMap, residueHash, this);\r\n    }\r\n    const helices = this._helices;\r\n    for (i = 0, n = helices.length; i < n; ++i) {\r\n      helices[i]._finalize(opts.serialAtomMap, residueHash, this);\r\n    }\r\n    const sheets = this._sheets;\r\n    for (i = 0, n = sheets.length; i < n; ++i) {\r\n      sheets[i]._finalize(opts.serialAtomMap, residueHash, this);\r\n    }\r\n\r\n    // Update bounding sphere and box\r\n    this._computeBounds();\r\n    const atoms = this._atoms;\r\n    for (i = 0, n = atoms.length; i < n; ++i) {\r\n      const currAtom = atoms[i];\r\n      currAtom.index = i;\r\n    }\r\n    if (opts.needAutoBonding) {\r\n      const autoConnector = new chem_AutoBond(this);\r\n      autoConnector.build();\r\n      autoConnector.destroy();\r\n    }\r\n    const chains = this._chains;\r\n    for (i = 0, n = chains.length; i < n; ++i) {\r\n      chains[i]._index = i;\r\n    }\r\n    for (i = 0, n = residues.length; i < n; ++i) {\r\n      residues[i]._index = i;\r\n    }\r\n\r\n    // mark non-polar hydrogens\r\n    for (i = 0, n = atoms.length; i < n; ++i) {\r\n      const atom = atoms[i];\r\n      if (atom.flags & chem_Atom.Flags.HYDROGEN && atom.bonds.length === 1) {\r\n        const bond = atom.bonds[0];\r\n        const other = bond._left !== atom && bond._left || bond._right;\r\n        if (other.flags & chem_Atom.Flags.CARBON) {\r\n          atom.flags |= chem_Atom.Flags.NONPOLARH;\r\n        }\r\n      }\r\n    }\r\n    this._finalizeBonds();\r\n    this._fillComponents(opts.enableEditing);\r\n    const marker = new chem_AromaticLoopsMarker(this);\r\n    marker.markCycles();\r\n    if (opts.detectAromaticLoops) {\r\n      // TODO remove this condition clause, it is for debug purposes only!\r\n      marker.detectCycles(); // TODO add conditional detection\r\n    }\r\n    this._finalizeMolecules();\r\n  }\r\n  _finalizeMolecules() {\r\n    // add reference to molecule into residue\r\n    for (let i = 0; i < this._molecules.length; i++) {\r\n      const molecule = this._molecules[i];\r\n      const count = molecule.residues.length;\r\n      for (let j = 0; j < count; j++) {\r\n        const residue = molecule.residues[j];\r\n        residue._molecule = molecule;\r\n      }\r\n    }\r\n  }\r\n  updateStructuresMask() {\r\n    const updater = structure => structure.collectMask();\r\n    this.forEachResidue(updater);\r\n    this.forEachChain(updater);\r\n    this.forEachMolecule(updater);\r\n  }\r\n  countAtomsByMask(mask) {\r\n    let count = 0;\r\n    this.forEachAtom(atom => {\r\n      if ((atom.mask & mask) !== 0) {\r\n        count++;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n  getNumAtomsBySelector(selector) {\r\n    let count = 0;\r\n    this.forEachAtom(atom => {\r\n      if (selector.includesAtom(atom)) {\r\n        count++;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n  resetAtomMask(mask) {\r\n    this.forEachAtom(atom => {\r\n      atom.mask = mask;\r\n    });\r\n  }\r\n  markAtoms(selector, mask) {\r\n    const setMask = mask;\r\n    const clearMask = ~setMask;\r\n    let count = 0;\r\n    const totalSelector = chem_selectors.keyword('And')(selector, this.getSelector());\r\n    this.forEachAtom(atom => {\r\n      if (totalSelector.includesAtom(atom)) {\r\n        atom.mask |= setMask;\r\n        count++;\r\n      } else {\r\n        atom.mask &= clearMask;\r\n      }\r\n    });\r\n    this._maskNeedsUpdate = true;\r\n    return count;\r\n  }\r\n  markAtomsAdditionally(selector, mask) {\r\n    const setMask = mask;\r\n    let count = 0;\r\n    this.forEachAtom(atom => {\r\n      if (selector.includesAtom(atom) && (atom.mask & mask) !== mask) {\r\n        atom.mask |= setMask;\r\n        count++;\r\n      }\r\n    });\r\n    return count;\r\n  }\r\n  clearAtomBits(mask) {\r\n    const clearMask = ~mask;\r\n    this.forEachAtom(atom => {\r\n      atom.mask &= clearMask;\r\n    });\r\n    const reseter = a => {\r\n      a._mask &= clearMask;\r\n    };\r\n    this.forEachAtom(reseter);\r\n    this.forEachResidue(reseter);\r\n    this.forEachChain(reseter);\r\n    this.forEachMolecule(reseter);\r\n  }\r\n  getAtomNames() {\r\n    if (this.hasOwnProperty('_atomNames')) {\r\n      return this._atomNames;\r\n    }\r\n    const dict = {};\r\n    this.forEachAtom(atom => {\r\n      dict[atom.name] = 1;\r\n    });\r\n    this._atomNames = Object.keys(dict);\r\n    return this._atomNames;\r\n  }\r\n  getElements() {\r\n    if (this.hasOwnProperty('_elements')) {\r\n      return this._elements;\r\n    }\r\n    const dict = {};\r\n    this.forEachAtom(atom => {\r\n      dict[atom.element.name] = 1;\r\n    });\r\n    this._elements = Object.keys(dict);\r\n    return this._elements;\r\n  }\r\n  getResidueNames() {\r\n    if (this.hasOwnProperty('_residueNames')) {\r\n      return this._residueNames;\r\n    }\r\n    const dict = {};\r\n    this.forEachResidue(res => {\r\n      dict[res._type._name] = 1;\r\n    });\r\n    this._residueNames = Object.keys(dict);\r\n    return this._residueNames;\r\n  }\r\n  getChainNames() {\r\n    if (this.hasOwnProperty('_chainNames')) {\r\n      return this._chainNames;\r\n    }\r\n    const dict = {};\r\n    this.forEachChain(chain => {\r\n      dict[chain._name] = 1;\r\n    });\r\n    this._chainNames = Object.keys(dict);\r\n    return this._chainNames;\r\n  }\r\n  getAltLocNames() {\r\n    if (this.hasOwnProperty('_altlocNames')) {\r\n      return this._altlocNames;\r\n    }\r\n    const dict = {};\r\n    this.forEachAtom(atom => {\r\n      dict[String.fromCharCode(atom.location)] = 1;\r\n    });\r\n    this._altlocNames = Object.keys(dict);\r\n    return this._altlocNames;\r\n  }\r\n  getVoxelWorld() {\r\n    if (!this.hasOwnProperty('_voxelWorld')) {\r\n      try {\r\n        this._voxelWorld = new chem_VoxelWorld(this.getDefaultBoundaries().boundingBox, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(VOXEL_SIZE, VOXEL_SIZE, VOXEL_SIZE));\r\n        this._voxelWorld.addAtoms(this);\r\n      } catch (e) {\r\n        logger.warn('Unable to create voxel world');\r\n        this._voxelWorld = null;\r\n      }\r\n    }\r\n    return this._voxelWorld;\r\n  }\r\n\r\n  /**\r\n   * Simple function to make unified routine procedure without code duplication.\r\n   * @param {Array} srcArray   - Source chemical structure array (will be part of resulting chemical structure array).\r\n   * @param {Array} dstArray   - Resulting chemical structure array.\r\n   * @param {number} param     - Parameter for processor.\r\n   * @param {function} functor - Processor for every element in array.\r\n   */\r\n  addElement(srcArray, dstArray, param, functor) {\r\n    const {\r\n      length\r\n    } = srcArray;\r\n    for (let i = 0; i < length; ++i) {\r\n      const elem = srcArray[i];\r\n      functor(elem, param);\r\n      dstArray.push(elem);\r\n    }\r\n  }\r\n\r\n  // this function joins multiple complexes into one (this)\r\n  // atom, bond, ... objects are reused -- so input complexes are no longer valid\r\n  joinComplexes(complexes) {\r\n    // clear target complex\r\n    this._chains = [];\r\n    this._components = [];\r\n    this._helices = [];\r\n    this._sheets = [];\r\n    this.structures = [];\r\n    this._atoms = [];\r\n    this._residues = [];\r\n    this._bonds = [];\r\n    this._sgroups = [];\r\n    const self = this;\r\n    let atomBias = 0;\r\n    let bondBias = 0;\r\n    let residueBias = 0;\r\n    let chainBias = 0;\r\n    let componentBias = 0;\r\n    function processAtom(atom, bias) {\r\n      atom.serial += bias;\r\n      atom.index += bias;\r\n    }\r\n    function processBond(bond, bias) {\r\n      bond._index += bias;\r\n    }\r\n    function processResidue(residue, bias) {\r\n      residue._index += bias;\r\n    }\r\n    function processChain(chain, bias) {\r\n      chain._complex = self;\r\n      chain._index += bias;\r\n    }\r\n    function processComponent(component, bias) {\r\n      component._complex = self;\r\n      component._index += bias;\r\n    }\r\n\r\n    /**\r\n     * Simple function to do nothing.\r\n     */\r\n    function doNothing() {}\r\n    for (let i = 0; i < complexes.length; ++i) {\r\n      const c = complexes[i];\r\n      this.addElement(c._atoms, this._atoms, atomBias, processAtom);\r\n      this.addElement(c._bonds, this._bonds, bondBias, processBond);\r\n      this.addElement(c._residues, this._residues, residueBias, processResidue);\r\n      this.addElement(c._chains, this._chains, chainBias, processChain);\r\n      this.addElement(c._sheets, this._sheets, 0, doNothing);\r\n      this.addElement(c._helices, this._helices, 0, doNothing);\r\n      this.addElement(c._sgroups, this._sgroups, 0, doNothing);\r\n      this.addElement(c._components, this._components, componentBias, processComponent);\r\n      this.addElement(c.structures, this.structures, 0, doNothing);\r\n      // merge residue types\r\n      for (const rt in c._residueTypes) {\r\n        if (c._residueTypes.hasOwnProperty(rt)) {\r\n          this._residueTypes[rt] = c._residueTypes[rt];\r\n        }\r\n      }\r\n      atomBias += c._atoms.length;\r\n      bondBias += c._bonds.length;\r\n      residueBias += c._residues.length;\r\n      chainBias += c._chains.length;\r\n      componentBias += c._components.length;\r\n    }\r\n    this._computeBounds();\r\n  }\r\n\r\n  /**\r\n   * Replace secondary structure with calculated one.\r\n   *\r\n   * DSSP algorithm implementation is used.\r\n   *\r\n   * Kabsch W, Sander C. 1983. Dictionary of protein secondary structure: pattern recognition of hydrogen-bonded and\r\n   * geometrical features. Biopolymers. 22(12):2577-2637. doi:10.1002/bip.360221211.\r\n   */\r\n  dssp() {\r\n    const ssMap = new SecondaryStructureMap(this);\r\n    const structures = this.structures = [];\r\n    const helices = this._helices = [];\r\n    const sheets = this._sheets = [];\r\n    const getSheet = index => {\r\n      let item = sheets[index];\r\n      if (!item) {\r\n        item = sheets[index] = new chem_Sheet(String(index), 0);\r\n      }\r\n      return item;\r\n    };\r\n    let lastCode;\r\n    let lastSheetIndex;\r\n    let lastHelixIndex = 0;\r\n    let curStructure = null;\r\n    for (let i = 0, n = this._residues.length; i < n; ++i) {\r\n      const curCode = ssMap._ss[i];\r\n      const curResidue = this._residues[i];\r\n      const curSheetIndex = ssMap._sheet[i];\r\n\r\n      // expand the last structure\r\n      if (curCode === lastCode && curSheetIndex === lastSheetIndex) {\r\n        curResidue._secondary = curStructure;\r\n        if (curStructure) {\r\n          curStructure.term = curResidue;\r\n        }\r\n        if (curStructure instanceof chem_Helix) {\r\n          curStructure.length++;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // create a new structure\r\n      const helixClass = helixClassMap[curCode];\r\n      const loopType = loopMap[curCode];\r\n      if (curCode === Complex_StructureType.STRAND) {\r\n        const curSheet = getSheet(curSheetIndex);\r\n        curStructure = new chem_Strand(curSheet, curResidue, curResidue, 0, null, null);\r\n        curSheet.addStrand(curStructure);\r\n      } else if (helixClass !== undefined) {\r\n        lastHelixIndex++;\r\n        curStructure = new chem_Helix(helixClass, curResidue, curResidue, lastHelixIndex, String(lastHelixIndex), '', 1);\r\n        helices.push(curStructure);\r\n      } else if (loopType !== undefined) {\r\n        curStructure = new chem_StructuralElement(loopType, curResidue, curResidue);\r\n      } else {\r\n        curStructure = null;\r\n      }\r\n      if (curStructure) {\r\n        structures.push(curStructure);\r\n      }\r\n      curResidue._secondary = curStructure;\r\n      lastCode = curCode;\r\n      lastSheetIndex = curSheetIndex;\r\n    }\r\n    this._sheets = sheets.filter(_sheet => true); // squeeze sheets array\r\n  }\r\n}\r\nComplex.prototype.id = 'Complex';\r\nComplex.prototype.name = '';\r\n/* harmony default export */ const chem_Complex = (Complex);\r\n;// CONCATENATED MODULE: ./src/chem/Volume.js\r\n\r\n\r\nfunction pow2ceil(v) {\r\n  let p = 2;\r\n  v = v - 1 >> 1;\r\n  while (v) {\r\n    p <<= 1;\r\n    v >>= 1;\r\n  }\r\n  return p;\r\n}\r\n\r\n/**\r\n * Volume constructor\r\n *\r\n * @param {Object} type - Float32Array, Int8Array, etc...\r\n * @param {Object|Array} dimensions - number of data points on each axis (x, y, z)\r\n * @param {Box3} box - bounding box defining data place in metric space,\r\n *                     it's corners correspond to extreme data points\r\n * @param {Number} vecSize - dimension of the field data point (1 = scalar, 3 = 3D vector)\r\n * @param {Object} data - typed array of the same type as specified by the 1st parameter,\r\n *                        layout: point by point along X,\r\n *                                row by row along Y,\r\n *                                plane by plane along Z\r\n * @param {Number} volumeInfo - volume info values to define threshold to filter the noise\r\n */\r\n\r\nclass Volume {\r\n  constructor(type, dimensions, box, vecSize, data, volumeInfo) {\r\n    this._box = box.clone();\r\n    this._dimVec = Math.max(Math.floor(vecSize || 1), 1);\r\n    this._volumeInfo = volumeInfo;\r\n    if (dimensions instanceof Array) {\r\n      [this._dimX, this._dimY, this._dimZ] = dimensions;\r\n    } else {\r\n      this._dimX = dimensions.x;\r\n      this._dimY = dimensions.y;\r\n      this._dimZ = dimensions.z;\r\n    }\r\n    this._dimX = Math.max(Math.floor(this._dimX), 1);\r\n    this._dimY = Math.max(Math.floor(this._dimY), 1);\r\n    this._dimZ = Math.max(Math.floor(this._dimZ), 1);\r\n    this._rowElements = this._dimVec * this._dimX;\r\n    this._planeElements = this._rowElements * this._dimY;\r\n    this._totalElements = this._planeElements * this._dimZ;\r\n    this._data = data || utils.allocateTyped(type, this._totalElements);\r\n\r\n    // override getter/setter for vector fields\r\n    switch (this._dimVec) {\r\n      case 1:\r\n        break;\r\n      case 2:\r\n        this.getValue = function (x, y, z) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          return [this._data[idx], this._data[idx + 1]];\r\n        };\r\n        this.setValue = function (x, y, z, a, b) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          this._data[idx] = a;\r\n          this._data[idx + 1] = b;\r\n        };\r\n        this.addValue = function (x, y, z, a, b) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          this._data[idx] += a;\r\n          this._data[idx + 1] += b;\r\n        };\r\n        break;\r\n      case 3:\r\n        this.getValue = function (x, y, z) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          return [this._data[idx], this._data[idx + 1], this._data[idx + 2]];\r\n        };\r\n        this.setValue = function (x, y, z, a, b, c) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          this._data[idx] = a;\r\n          this._data[idx + 1] = b;\r\n          this._data[idx + 2] = c;\r\n        };\r\n        this.addValue = function (x, y, z, a, b, c) {\r\n          const idx = x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n          this._data[idx] += a;\r\n          this._data[idx + 1] += b;\r\n          this._data[idx + 2] += c;\r\n        };\r\n        break;\r\n      default:\r\n        throw new Error('Volume: invalid vector dimension');\r\n    }\r\n  }\r\n\r\n  // default getter assumes it's a scalar field\r\n  getValue(x, y, z) {\r\n    return this._data[x + y * this._rowElements + z * this._planeElements];\r\n  }\r\n\r\n  // default setter assumes it's a scalar field\r\n  setValue(x, y, z, val) {\r\n    this._data[x + y * this._rowElements + z * this._planeElements] = val;\r\n  }\r\n\r\n  // default adder assumes it's a scalar field\r\n  addValue(x, y, z, val) {\r\n    this._data[x + y * this._rowElements + z * this._planeElements] += val;\r\n  }\r\n  getDimensions() {\r\n    return [this._dimX, this._dimY, this._dimZ];\r\n  }\r\n  getBox() {\r\n    return this._box;\r\n  }\r\n  getVolumeInfo() {\r\n    return this._volumeInfo;\r\n  }\r\n  getCellSize() {\r\n    const boxSize = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._box.getSize(boxSize);\r\n    const res = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    res.x = this._dimX > 1 ? boxSize.x / (this._dimX - 1) : 0;\r\n    res.y = this._dimY > 1 ? boxSize.y / (this._dimY - 1) : 0;\r\n    res.z = this._dimZ > 1 ? boxSize.z / (this._dimZ - 1) : 0;\r\n    return res;\r\n  }\r\n  computeGradient() {\r\n    if (this._dimVec !== 1) {\r\n      // gradient can only be computed for scalar fields\r\n      return null;\r\n    }\r\n\r\n    // create a 3D vector field of gradients\r\n    const gradient = new Volume(Float32Array, [this._dimX, this._dimY, this._dimZ], this._box, 3);\r\n\r\n    // calculate cell side lengths\r\n    const vl = this.getCellSize();\r\n\r\n    // gradient axis scaling values and averaging factors, to correctly\r\n    // calculate the gradient for volumes with irregular cell spacing\r\n    const vs = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.5 / vl.x, -0.5 / vl.y, -0.5 / vl.z);\r\n\r\n    // TODO Check for intended bug in VMD (min is zero)\r\n    function clamp(val, min, max) {\r\n      return Math.min(max, Math.max(min, val));\r\n    }\r\n    const xSize = this._dimX;\r\n    const ySize = this._dimY;\r\n    const zSize = this._dimZ;\r\n    const volMap = this._data;\r\n    function _voxelValue(x, y, z) {\r\n      return volMap[z * xSize * ySize + y * xSize + x];\r\n    }\r\n    for (let zi = 0; zi < zSize; ++zi) {\r\n      const zm = clamp(zi - 1, 0, zSize - 1);\r\n      const zp = clamp(zi + 1, 0, zSize - 1);\r\n      for (let yi = 0; yi < ySize; ++yi) {\r\n        const ym = clamp(yi - 1, 0, ySize - 1);\r\n        const yp = clamp(yi + 1, 0, ySize - 1);\r\n        for (let xi = 0; xi < xSize; ++xi) {\r\n          const xm = clamp(xi - 1, 0, xSize - 1);\r\n          const xp = clamp(xi + 1, 0, xSize - 1);\r\n\r\n          // Calculate the volume gradient at each grid cell.\r\n          // Gradients are now stored unnormalized, since we need them in pure\r\n          // form in order to draw field lines etc.  Shading code will now have\r\n          // to do renormalization for itself on-the-fly.\r\n\r\n          // XXX this gradient is only correct for orthogonal grids, since\r\n          // we're using the array index offsets rather to calculate the gradient\r\n          // rather than voxel coordinate offsets.  This will have to be\r\n          // re-worked for non-orthogonal datasets.\r\n\r\n          gradient.setValue(xi, yi, zi, (_voxelValue(xp, yi, zi) - _voxelValue(xm, yi, zi)) * vs.x, (_voxelValue(xi, yp, zi) - _voxelValue(xi, ym, zi)) * vs.y, (_voxelValue(xi, yi, zp) - _voxelValue(xi, yi, zm)) * vs.z);\r\n        }\r\n      }\r\n    }\r\n    return gradient;\r\n  }\r\n  normalize() {\r\n    const data = this._data;\r\n\r\n    // get min/max\r\n    let min = data[0];\r\n    let max = data[0];\r\n    for (let i = 1; i < data.length; ++i) {\r\n      min = Math.min(min, data[i]);\r\n      max = Math.max(max, data[i]);\r\n    }\r\n    const d = 1.0 / (max - min);\r\n    if (d === 0) {\r\n      return;\r\n    }\r\n\r\n    // normalize\r\n    for (let i = 0; i < data.length; ++i) {\r\n      data[i] = d * (data[i] - min);\r\n    }\r\n  }\r\n  getTiledTextureStride() {\r\n    return [this._dimX + 2, this._dimY + 2];\r\n  }\r\n  buildTiledTexture() {\r\n    let tilesX = Math.ceil(Math.sqrt(this._dimZ * this._dimY / this._dimX));\r\n    let width = tilesX * (this._dimX + 2) - 1;\r\n    width = pow2ceil(width);\r\n    tilesX = Math.floor(width / (this._dimX + 2));\r\n    const tilesY = Math.ceil(this._dimZ / tilesX);\r\n    let height = tilesY * (this._dimY + 2) - 1;\r\n    height = pow2ceil(height);\r\n    const data = new Uint8Array(width * height);\r\n    let src;\r\n    let dst;\r\n    for (let tileRow = 0; tileRow < tilesY; ++tileRow) {\r\n      // process each pixel row of this tile row\r\n      for (let row = 0; row < this._dimY; ++row) {\r\n        src = tileRow * tilesX * this._planeElements + row * this._rowElements;\r\n        dst = width * (tileRow * (this._dimY + 2) + row);\r\n        // copy a series of rows through several XY planes\r\n        for (let t = 0; t < tilesX; ++t) {\r\n          // copy one row of one XY plane\r\n          for (let x = 0; x < this._dimX; ++x) {\r\n            data[dst++] = 255.0 * this._data[src++];\r\n          }\r\n\r\n          // repeat last pixel of previous tile\r\n          data[dst++] = 255.0 * this._data[src - 1];\r\n          if (t < tilesX - 1) {\r\n            // skip to the same row of next XY plane\r\n            src += this._planeElements - this._rowElements;\r\n            // repeat first pixel of next tile\r\n            data[dst++] = 255.0 * this._data[src];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // fill pixels between tile rows with copy of edge pixels\r\n    for (let tileRow = 0; tileRow < tilesY; ++tileRow) {\r\n      // copy last pixel row of this tile row to the following pixel row of the texture\r\n      src = width * (tileRow * (this._dimY + 2) + this._dimY - 1);\r\n      dst = src + width;\r\n      for (let x = 0; x < width; ++x) {\r\n        data[dst++] = data[src++];\r\n      }\r\n      if (tileRow < tilesY - 1) {\r\n        // copy first pixel row of next tile row to the preceding pixel row of the texture\r\n        src = width * (tileRow + 1) * (this._dimY + 2);\r\n        dst = src - width;\r\n        for (let x = 0; x < width; ++x) {\r\n          data[dst++] = data[src++];\r\n        }\r\n      }\r\n    }\r\n    const texture = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.DataTexture(data, width, height, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LuminanceFormat, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UnsignedByteType, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UVMapping, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ClampToEdgeWrapping, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ClampToEdgeWrapping, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter);\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n  }\r\n\r\n  /* ********************************************************************************\r\n   *\r\n   * Methods that provide direct access to internal array (for better performance)\r\n   *\r\n   ******************************************************************************** */\r\n\r\n  getData() {\r\n    return this._data;\r\n  }\r\n  getDirectIdx(x, y, z) {\r\n    return x * this._dimVec + y * this._rowElements + z * this._planeElements;\r\n  }\r\n  getStrideX() {\r\n    return this._dimVec;\r\n  }\r\n  getStrideY() {\r\n    return this._rowElements;\r\n  }\r\n  getStrideZ() {\r\n    return this._planeElements;\r\n  }\r\n}\r\nVolume.prototype.id = 'Volume';\r\n/* harmony default export */ const chem_Volume = (Volume);\r\n;// CONCATENATED MODULE: ./src/chem/Molecule.js\r\n/**\r\n * Residue Molecule.\r\n *\r\n * @param {Complex} complex - Molecular complex this Molecule belongs to.\r\n * @param {String} name - Molecule's name.\r\n * @param {Integer} index - Molecule's index in file.\r\n *\r\n * @exports Molecule\r\n * @constructor\r\n */\r\nclass Molecule {\r\n  constructor(complex, name, index) {\r\n    this.complex = complex;\r\n    this.name = name || '';\r\n    this.residues = [];\r\n    this.mask = 1 | 0;\r\n    this.index = index || -1; // start with 1\r\n  }\r\n  forEachResidue(process) {\r\n    const {\r\n      residues\r\n    } = this;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      process(residues[i]);\r\n    }\r\n  }\r\n  collectMask() {\r\n    let mask = 0xffffffff;\r\n    const {\r\n      residues\r\n    } = this;\r\n    for (let i = 0, n = residues.length; i < n; ++i) {\r\n      mask &= residues[i]._mask;\r\n    }\r\n    this.mask = mask;\r\n  }\r\n}\r\n/* harmony default export */ const chem_Molecule = (Molecule);\r\n;// CONCATENATED MODULE: ./src/chem.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const chem = ({\r\n  Atom: chem_Atom,\r\n  Element: chem_Element,\r\n  Bond: chem_Bond,\r\n  Residue: chem_Residue,\r\n  ResidueType: chem_ResidueType,\r\n  Chain: chem_Chain,\r\n  Helix: chem_Helix,\r\n  Strand: chem_Strand,\r\n  Sheet: chem_Sheet,\r\n  SGroup: chem_SGroup,\r\n  Assembly: chem_Assembly,\r\n  Complex: chem_Complex,\r\n  Volume: chem_Volume,\r\n  VoxelWorld: chem_VoxelWorld,\r\n  selectors: chem_selectors,\r\n  Molecule: chem_Molecule\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/CSS2DObject.js\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\nclass CSS2DObject extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D {\r\n  constructor(element) {\r\n    super();\r\n    const self = this;\r\n    this._element = element;\r\n    this._element.style.position = 'absolute';\r\n    this.addEventListener('removed', () => {\r\n      if (self._element.parentNode !== null) {\r\n        self._element.parentNode.removeChild(self._element);\r\n      }\r\n    });\r\n  }\r\n  getElement() {\r\n    return this._element;\r\n  }\r\n\r\n  /**\r\n   * Sets label transparency.\r\n   *\r\n   * @param {number} transp    - in [0; 1] 1 means fully transparent\r\n   */\r\n  setTransparency(transp) {\r\n    const el = this.getElement();\r\n    if (el === null) {\r\n      return;\r\n    }\r\n    if (transp === 1.0) {\r\n      el.style.display = 'none';\r\n      return;\r\n    }\r\n    el.style.display = 'inline';\r\n    const op = 1.0 - transp;\r\n    const top = op.toString();\r\n    const op100 = op * 100;\r\n    el.style.opacity = top;\r\n    el.style.filter = `alpha(opacity=${op100})`; // IE fallback\r\n  }\r\n  clone() {\r\n    const obj = new CSS2DObject(this._element);\r\n    obj.copy(this);\r\n    return obj;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_CSS2DObject = (CSS2DObject);\r\n;// CONCATENATED MODULE: ./src/gfx/RCGroup.js\r\n\r\nclass RCGroup extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group {\r\n  raycast(raycaster, intersects) {\r\n    if (!this.visible) {\r\n      return;\r\n    }\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      children[i].raycast(raycaster, intersects);\r\n    }\r\n  }\r\n  enableSubset(mask, innerOnly) {\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].enableSubset) {\r\n        children[i].enableSubset(mask, innerOnly);\r\n      }\r\n    }\r\n  }\r\n  disableSubset(mask, innerOnly) {\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].disableSubset) {\r\n        children[i].disableSubset(mask, innerOnly);\r\n      }\r\n    }\r\n  }\r\n  isEmpty() {\r\n    return this.children.length === 0;\r\n  }\r\n  updateToFrame(frameData) {\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].updateToFrame) {\r\n        children[i].updateToFrame(frameData);\r\n      }\r\n    }\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        Array.prototype.push.apply(totalSubset, children[i].getSubset(mask, innerOnly));\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_RCGroup = (RCGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/ScreenQuad.vert\r\nconst ScreenQuad_namespaceObject = \"uniform mat4 projectionMatrix;\\r\\nuniform mat4 modelViewMatrix;\\r\\n\\r\\nattribute vec2 uv;\\r\\nattribute vec3 position;\\r\\n\\r\\nvarying vec2 vUv;\\r\\n\\r\\nvoid main() {\\r\\n  vUv = uv;\\r\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/ScreenQuadFromTex.frag\r\nconst ScreenQuadFromTex_namespaceObject = \"precision highp float;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nuniform sampler2D srcTex;\\r\\nuniform float opacity;\\r\\n\\r\\nvoid main() {\\r\\n  vec4 color = texture2D(srcTex, vUv);\\r\\n  gl_FragColor = vec4(color.xyz, color.a * opacity);\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/ScreenQuadFromTexWithDistortion.frag\r\nconst ScreenQuadFromTexWithDistortion_namespaceObject = \"precision highp float;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nuniform sampler2D srcTex;\\r\\nuniform float coef;\\r\\n\\r\\nvoid main() {\\r\\n  vec2 uv = vUv * 2.0 - 1.0;\\r\\n  float r2 = dot(uv, uv);\\r\\n  vec2 tc = uv * (1.0 + coef * r2);\\r\\n  if (!all(lessThan(abs(tc), vec2(1.0))))\\r\\n    discard;\\r\\n  tc = 0.5 * (tc + 1.0);\\r\\n  gl_FragColor = texture2D(srcTex, tc);\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/gfxutils.js\r\n/* eslint-disable no-magic-numbers */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst LAYERS = {\r\n  DEFAULT: 0,\r\n  VOLUME: 1,\r\n  TRANSPARENT: 2,\r\n  PREPASS_TRANSPARENT: 3,\r\n  VOLUME_BFPLANE: 4,\r\n  COLOR_FROM_POSITION: 5,\r\n  SHADOWMAP: 6\r\n};\r\nconst SELECTION_LAYERS = [\r\n// These layers, that are used in the selection by ray casting\r\nLAYERS.DEFAULT, LAYERS.TRANSPARENT];\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D.prototype.resetTransform = function () {\r\n  this.position.set(0, 0, 0);\r\n  this.quaternion.set(0, 0, 0, 1);\r\n  this.scale.set(1, 1, 1);\r\n};\r\n\r\n// update world matrix of this object and all its ancestors\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D.prototype.updateMatrixWorldRecursive = function () {\r\n  if (this.parent != null) {\r\n    this.parent.updateMatrixWorldRecursive();\r\n  }\r\n  this.updateMatrixWorld();\r\n};\r\n// add object to parent, saving objects' world transform\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D.prototype.addSavingWorldTransform = function () {\r\n  const _worldMatrixInverse = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  return function (object) {\r\n    if (object instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D) {\r\n      _worldMatrixInverse.copy(this.matrixWorld).invert();\r\n      _worldMatrixInverse.multiply(object.matrixWorld);\r\n      object.matrix.copy(_worldMatrixInverse);\r\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\r\n      this.add(object);\r\n    }\r\n  };\r\n}();\r\n\r\n// render a tiny transparent quad in the center of the screen\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderer.prototype.renderDummyQuad = function () {\r\n  const _material = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MeshBasicMaterial({\r\n    transparent: true,\r\n    opacity: 0.0,\r\n    depthWrite: false\r\n  });\r\n  const _scene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n  const _quad = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PlaneGeometry(0.01, 0.01), _material);\r\n  _scene.add(_quad);\r\n  const _camera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, -10000, 10000);\r\n  _camera.position.z = 100;\r\n  return function () {\r\n    this.render(_scene, _camera);\r\n  };\r\n}();\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderer.prototype.renderScreenQuad = function () {\r\n  const _scene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n  const _quad = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PlaneGeometry(1.0, 1.0));\r\n  _scene.add(_quad);\r\n  const _camera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, -10000, 10000);\r\n  _camera.position.z = 100;\r\n  return function (material) {\r\n    _quad.material = material;\r\n    this.render(_scene, _camera);\r\n  };\r\n}();\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4.prototype.isIdentity = function () {\r\n  const identity = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  return function () {\r\n    return identity.equals(this);\r\n  };\r\n}();\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4.prototype.applyToPointsArray = function (array, stride, w) {\r\n  if (!array || !stride || stride < 3) {\r\n    return array;\r\n  }\r\n  w = w || 0; // use point as normal by default\r\n  const e = this.elements;\r\n  for (let i = 0; i < array.length; i += stride) {\r\n    const x = array[i];\r\n    const y = array[i + 1];\r\n    const z = array[i + 2];\r\n    const persp = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n    array[i] = (e[0] * x + e[4] * y + e[8] * z + e[12] * w) * persp;\r\n    array[i + 1] = (e[1] * x + e[5] * y + e[9] * z + e[13] * w) * persp;\r\n    array[i + 2] = (e[2] * x + e[6] * y + e[10] * z + e[14] * w) * persp;\r\n  }\r\n  return array;\r\n};\r\nclass ScreenQuadMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor(params) {\r\n    if (params.uniforms === undefined) {\r\n      params.uniforms = {};\r\n    }\r\n    params.uniforms.srcTex = {\r\n      type: 't',\r\n      value: null\r\n    };\r\n    params.vertexShader = ScreenQuad_namespaceObject;\r\n    params.transparent = false;\r\n    params.depthTest = false;\r\n    params.depthWrite = false;\r\n    super(params);\r\n  }\r\n}\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderer.prototype.renderScreenQuadFromTex = function () {\r\n  const _material = new ScreenQuadMaterial({\r\n    uniforms: {\r\n      opacity: {\r\n        type: 'f',\r\n        value: 1.0\r\n      }\r\n    },\r\n    fragmentShader: ScreenQuadFromTex_namespaceObject,\r\n    transparent: true\r\n  });\r\n  return function (srcTex, opacity) {\r\n    _material.uniforms.srcTex.value = srcTex;\r\n    _material.transparent = opacity < 1.0;\r\n    _material.uniforms.opacity.value = opacity;\r\n    this.renderScreenQuad(_material);\r\n  };\r\n}();\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderer.prototype.renderScreenQuadFromTexWithDistortion = function () {\r\n  const _material = new ScreenQuadMaterial({\r\n    uniforms: {\r\n      coef: {\r\n        type: 'f',\r\n        value: 1.0\r\n      }\r\n    },\r\n    fragmentShader: ScreenQuadFromTexWithDistortion_namespaceObject\r\n  });\r\n  return function (srcTex, coef) {\r\n    _material.uniforms.srcTex.value = srcTex;\r\n    _material.uniforms.coef.value = coef;\r\n    this.renderScreenQuad(_material);\r\n  };\r\n}();\r\n\r\n/**\r\n * @param {number} angle - Field of view in degrees.\r\n */\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PerspectiveCamera.prototype.setMinimalFov = function (angle) {\r\n  if (this.aspect >= 1.0) {\r\n    this.fov = angle;\r\n  } else {\r\n    this.fov = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.radToDeg(2 * Math.atan(Math.tan(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.degToRad(angle) * 0.5) / this.aspect));\r\n  }\r\n};\r\n\r\n/**\r\n * @param {THREE.PerspectiveCamera} camera - Base camera for this stereo camera.\r\n * @param {number} angle - Field of view in degrees.\r\n */\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.StereoCamera.prototype.updateHalfSized = function (camera, angle) {\r\n  const originalAspect = camera.aspect;\r\n  const originalFov = camera.fov;\r\n  camera.aspect = originalAspect / 2.0;\r\n  camera.setMinimalFov(angle);\r\n  camera.updateProjectionMatrix();\r\n  this.update(camera);\r\n  camera.aspect = originalAspect;\r\n  camera.fov = originalFov;\r\n  camera.updateProjectionMatrix();\r\n};\r\n\r\n/**\r\n * @param {number} radius - Radius of bounding sphere in angstroms to fit on screen.\r\n * @param {number} angle - Field of view in degrees.\r\n */\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PerspectiveCamera.prototype.setDistanceToFit = function (radius, angle) {\r\n  this.position.z = radius / Math.sin(0.5 * external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.degToRad(angle));\r\n};\r\n\r\n/**\r\n * @param {RCGroup} gfxObj - All objects on scene.\r\n * @param {THREE.PerspectiveCamera} camera - Camera used for rendering.\r\n * @param {number} clipPlane - Distance to clip plane.\r\n * @param {number} fogFarPlane - Distance to fog far plane.\r\n */\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Raycaster.prototype.intersectVisibleObject = function (gfxObj, camera, clipPlane, fogFarPlane) {\r\n  const intersects = this.intersectObject(gfxObj, false);\r\n  if (intersects.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // find point closest to camera that doesn't get clipped by camera near plane or clipPlane (if it exists)\r\n  const nearPlane = Math.min(camera.near, clipPlane);\r\n  let i;\r\n  let p = intersects[0];\r\n  const v = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  for (i = 0; i < intersects.length; ++i) {\r\n    p = intersects[i];\r\n    v.copy(p.point);\r\n    v.applyMatrix4(camera.matrixWorldInverse);\r\n    if (v.z <= -nearPlane) {\r\n      break;\r\n    }\r\n  }\r\n  if (i === intersects.length) {\r\n    return null;\r\n  }\r\n\r\n  // check that selected intersection point is not clipped by camera far plane or occluded by fog (if it exists)\r\n  const farPlane = Math.min(camera.far, fogFarPlane);\r\n  v.copy(p.point);\r\n  v.applyMatrix4(camera.matrixWorldInverse);\r\n  if (v.z <= -farPlane) {\r\n    return null;\r\n  }\r\n  return p;\r\n};\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4.prototype.extractScale = function () {\r\n  const _v = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (scale) {\r\n    if (scale === undefined) {\r\n      logger.debug('extractScale(): new is too expensive operation to do it on-the-fly');\r\n      scale = _v.clone();\r\n    }\r\n    const te = this.elements;\r\n    scale.x = _v.set(te[0], te[1], te[2]).length();\r\n    scale.y = _v.set(te[4], te[5], te[6]).length();\r\n    scale.z = _v.set(te[8], te[9], te[10]).length();\r\n\r\n    // if determine is negative, we need to invert one scale\r\n    const det = this.determinant();\r\n    if (det < 0) {\r\n      scale.x = -scale.x;\r\n    }\r\n    return scale;\r\n  };\r\n}();\r\nfunction _calcCylinderMatrix(posBegin, posEnd, radius) {\r\n  const posCenter = posBegin.clone().lerp(posEnd, 0.5);\r\n  const matScale = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  matScale.makeScale(radius, posBegin.distanceTo(posEnd), radius);\r\n  const matRotHalf = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  matRotHalf.makeRotationX(Math.PI / 2);\r\n  const matRotLook = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  const vUp = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 1, 0);\r\n  matRotLook.lookAt(posCenter, posEnd, vUp);\r\n  matRotLook.multiply(matRotHalf);\r\n  matRotLook.multiply(matScale);\r\n  matRotLook.setPosition(posCenter);\r\n  return matRotLook;\r\n}\r\nfunction _calcChunkMatrix(eye, target, up, rad) {\r\n  const matScale = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  matScale.makeScale(rad.x, rad.y, 0);\r\n  const matRotLook = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  matRotLook.lookAt(eye, target, up);\r\n  matRotLook.multiply(matScale);\r\n  matRotLook.setPosition(eye);\r\n  return matRotLook;\r\n}\r\nfunction _groupHasGeometryToRender(group) {\r\n  let hasGeoms = false;\r\n  group.traverse(node => {\r\n    if (node.hasOwnProperty('geometry') || node instanceof gfx_CSS2DObject) {\r\n      hasGeoms = true;\r\n    }\r\n  });\r\n  return hasGeoms;\r\n}\r\nfunction _buildDistorionMesh(widthSegments, heightSegements, coef) {\r\n  // solve equation r_u = r_d * (1 + k * r_d^2)\r\n  // for r_d using iterations\r\n  // takes: r_u^2\r\n  // returns: r_d / r_u  factor that can be used to distort point coords\r\n  function calcInverseBarrel(r2) {\r\n    const epsilon = 1e-5;\r\n    let prevR2 = 0.0;\r\n    let curR2 = r2;\r\n    let dr = 1.0;\r\n    while (Math.abs(curR2 - prevR2) > epsilon) {\r\n      dr = 1.0 + coef * curR2;\r\n      prevR2 = curR2;\r\n      curR2 = r2 / (dr * dr);\r\n    }\r\n    return 1.0 / dr;\r\n  }\r\n  const geo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PlaneGeometry(2.0, 2.0, widthSegments, heightSegements);\r\n  const pos = geo.getAttribute('position');\r\n  for (let i = 0; i < pos.count; ++i) {\r\n    const x = pos.array[3 * i];\r\n    const y = pos.array[3 * i + 1];\r\n    const c = calcInverseBarrel(x * x + y * y);\r\n    pos.setXY(i, c * x, c * y);\r\n  }\r\n  return geo;\r\n}\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute.prototype.copyAtList = function (attribute, indexList) {\r\n  console.assert(this.itemSize === attribute.itemSize, 'DEBUG: BufferAttribute.copyAtList buffers have different item size.');\r\n  const {\r\n    itemSize\r\n  } = this;\r\n  for (let i = 0, n = indexList.length; i < n; ++i) {\r\n    for (let j = 0; j < itemSize; ++j) {\r\n      this.array[i * itemSize + j] = attribute.array[indexList[i] * itemSize + j];\r\n    }\r\n  }\r\n  return this;\r\n};\r\nfunction fillArray(array, value, startIndex, endIndex) {\r\n  startIndex = typeof startIndex !== 'undefined' ? startIndex : 0;\r\n  endIndex = typeof endIndex !== 'undefined' ? endIndex : array.length;\r\n  for (let i = startIndex; i < endIndex; ++i) {\r\n    array[i] = value;\r\n  }\r\n}\r\n\r\n/** @param {THREE.Object3D} object - Parent object. */\r\nfunction removeChildren(object) {\r\n  const {\r\n    children\r\n  } = object;\r\n  for (let i = 0, n = children.length; i < n; ++i) {\r\n    const child = children[i];\r\n    child.parent = null;\r\n    child.dispatchEvent({\r\n      type: 'removed'\r\n    });\r\n  }\r\n  object.children = [];\r\n}\r\nfunction clearTree(object) {\r\n  object.traverse(obj => {\r\n    if (obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh || obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments || obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Line) {\r\n      obj.geometry.dispose();\r\n    }\r\n  });\r\n  removeChildren(object);\r\n}\r\nfunction destroyObject(object) {\r\n  clearTree(object);\r\n  if (object.parent) {\r\n    object.parent.remove(object);\r\n  } else {\r\n    object.dispatchEvent({\r\n      type: 'removed'\r\n    });\r\n  }\r\n}\r\nfunction belongToSelectLayers(object) {\r\n  for (let i = 0; i < SELECTION_LAYERS.length; i++) {\r\n    if ((object.layers.mask >> SELECTION_LAYERS[i] & 1) === 1) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\nfunction processObjRenderOrder(root, idMaterial) {\r\n  // set renderOrder to 0 for Backdrop and to 1 in other cases to render Backdrop earlier all other materials\r\n  const renderOrder = +(idMaterial !== 'BA');\r\n  root.traverse(object => {\r\n    if (object.isGroup) {\r\n      object.renderOrder = renderOrder;\r\n    }\r\n  });\r\n}\r\nfunction applySelectionMaterial(geo) {\r\n  geo.traverse(node => {\r\n    if ('material' in node) {\r\n      node.material = node.material.clone(true);\r\n      // using z-offset to magically fix selection rendering artifact (on z-sprites)\r\n      node.material.setValues({\r\n        depthFunc: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LessEqualDepth,\r\n        overrideColor: true,\r\n        fog: false,\r\n        lights: false,\r\n        shadowmap: false\r\n      });\r\n      node.material.setUberOptions({\r\n        fixedColor: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xFFFF00),\r\n        zOffset: -1e-6\r\n      });\r\n    }\r\n  });\r\n}\r\nfunction getMiddlePoint(point1, point2, optionalTarget) {\r\n  const result = optionalTarget || new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  result.set(0, 0, 0);\r\n  result.addScaledVector(point1, 0.5);\r\n  result.addScaledVector(point2, 0.5);\r\n  return result;\r\n}\r\n\r\n// Monkey-patch for \"InstancedBufferGeometry.instanceCount becomes undefined after copy()\"\r\n// https://github.com/mrdoob/three.js/issues/22151\r\nconst _oldInstancedBufferGeometryCopy = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry.prototype.copy;\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry.prototype.copy = function (source) {\r\n  _oldInstancedBufferGeometryCopy.call(this, source);\r\n  if (this.instanceCount === undefined) {\r\n    this.instanceCount = Infinity;\r\n  }\r\n};\r\n/* harmony default export */ const gfxutils = ({\r\n  calcCylinderMatrix: _calcCylinderMatrix,\r\n  calcChunkMatrix: _calcChunkMatrix,\r\n  groupHasGeometryToRender: _groupHasGeometryToRender,\r\n  buildDistorionMesh: _buildDistorionMesh,\r\n  RCGroup: gfx_RCGroup,\r\n  fillArray,\r\n  clearTree,\r\n  destroyObject,\r\n  belongToSelectLayers,\r\n  processObjRenderOrder,\r\n  applySelectionMaterial,\r\n  getMiddlePoint,\r\n  LAYERS\r\n});\r\n;// CONCATENATED MODULE: ./src/Visual.js\r\n\r\n\r\nconst _defaultBoundaries = {\r\n  boundingBox: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1, -1, -1), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 1, 1)),\r\n  boundingSphere: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0), 1)\r\n};\r\nclass Visual extends gfxutils.RCGroup {\r\n  constructor(name, dataSource) {\r\n    super(name, dataSource);\r\n    this.name = name;\r\n    this._dataSource = dataSource;\r\n  }\r\n  release() {\r\n    if (this.parent) {\r\n      this.parent.remove(this);\r\n    }\r\n  }\r\n  getDataSource() {\r\n    return this._dataSource;\r\n  }\r\n  getBoundaries() {\r\n    return _defaultBoundaries;\r\n  }\r\n}\r\n/* harmony default export */ const src_Visual = (Visual);\r\n;// CONCATENATED MODULE: ./src/utils/EntityList.js\r\nfunction _ensureArray(x) {\r\n  if (x === null || x === undefined || Array.isArray(x)) {\r\n    return x;\r\n  }\r\n  return [x];\r\n}\r\n\r\n/** An indexed list of objects or classes. */\r\nclass EntityList {\r\n  /**\r\n   * Create a list of objects.\r\n   * The objects can be indexed by one or more properties for the later retrieval.\r\n   *\r\n   * @param {!Array<Object>=} entities A list of objects to automatically register at creation time.\r\n   * @param {!Array<string>=} indices A list of property names to use for case-insensitive indexing.\r\n   *   By default, a single `.id` property is used.\r\n   * @see EntityList#register\r\n   */\r\n  constructor() {\r\n    let entities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n    let indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['id'];\r\n    this._list = [];\r\n    this._dict = {};\r\n    this._indices = [...indices];\r\n    this._indices.forEach(index => {\r\n      this._dict[index] = {};\r\n    });\r\n    entities.forEach(entity => this.register(entity));\r\n  }\r\n\r\n  /**\r\n   * Add a value to the end of a list.\r\n   * The list will contain only one copy of the value.\r\n   *\r\n   * @param {!Array} list An array.\r\n   * @param {*} value A value to add.\r\n   * @see EntityList.unregisterFromList\r\n   * @see EntityList.registerInDict\r\n   */\r\n  static registerInList(list, value) {\r\n    if (!list.includes(value)) {\r\n      list.push(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a value from a list if it is there.\r\n   *\r\n   * @param {!Array} list An array.\r\n   * @param {*} value A value to remove.\r\n   * @see EntityList.registerInList\r\n   */\r\n  static unregisterFromList(list, value) {\r\n    const pos = list.indexOf(value);\r\n    if (pos !== -1) {\r\n      list.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a value to a dictionary.\r\n   * The value may be stored under multiple different keys (aliases).\r\n   * There might be multiples values stored under the same key.\r\n   *\r\n   * @param {!Object<string,*>} dict A dictionary.\r\n   * @param {!Array<string>} keys An array of keys.\r\n   * @param {*} value A value to add.\r\n   * @see EntityList.unregisterFromDict\r\n   * @see EntityList.registerInList\r\n   */\r\n  static registerInDict(dict, keys, value) {\r\n    keys.forEach(key => {\r\n      key = key.toLowerCase();\r\n      const list = dict[key] = dict[key] || [];\r\n      if (!list.includes(value)) {\r\n        list.push(value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove a value from a dictionary.\r\n   * The value may be stored under multiple different keys (aliases).\r\n   * There might be multiples values stored under the same key.\r\n   *\r\n   * @param {!Object<string,*>} dict A dictionary.\r\n   * @param {!Array<string>} keys An array of keys.\r\n   * @param {*} value A value to add.\r\n   * @see EntityList.registerInDict\r\n   */\r\n  static unregisterFromDict(dict, keys, value) {\r\n    keys.forEach(key => {\r\n      key = key.toLowerCase();\r\n      const list = dict[key];\r\n      if (list) {\r\n        const pos = list.indexOf(value);\r\n        if (pos !== -1) {\r\n          list.splice(pos, 1);\r\n        }\r\n        if (list.length === 0) {\r\n          delete dict[key];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add an entity to this list.\r\n   *\r\n   * @param {!Object} entity An object or a class to register. The object must include all\r\n   *   properties specified as indices on construction.\r\n   * @see EntityList#unregister\r\n   */\r\n  register(entity) {\r\n    EntityList.registerInList(this._list, entity);\r\n    this._indices.forEach(index => {\r\n      EntityList.registerInDict(this._dict[index], _ensureArray(entity[index]), entity);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove an entity from this list.\r\n   *\r\n   * @param {!Object} entity An object or a class to unregister. The object may be\r\n   *   missing from the list but it must include all properties specified as indices\r\n   *   on construction.\r\n   * @see EntityList#register\r\n   */\r\n  unregister(entity) {\r\n    EntityList.unregisterFromList(this._list, entity);\r\n    this._indices.forEach(index => {\r\n      EntityList.unregisterFromDict(this._dict[index], _ensureArray(entity[index]), entity);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * An ordered list of all registered entities.\r\n   * It is a read-only copy, use {@link EntityList#register} and {@link EntityList#unregister}\r\n   * to modify it.\r\n   *\r\n   * @type {!Array<Object>}\r\n   */\r\n  get all() {\r\n    return [...this._list];\r\n  }\r\n\r\n  /**\r\n   * The first registered entity.\r\n   * Use it if you do not care which entity you are referring to.\r\n   *\r\n   * @type {Object=}\r\n   */\r\n  get first() {\r\n    return this._list[0];\r\n  }\r\n\r\n  /**\r\n   * Retrieve a list of keys for the index.\r\n   *\r\n   * @param {string=} index One of the indices specified during the list construction. If omitted,\r\n   *   the first of the indices is used.\r\n   * @returns {!Array<string>} An unordered list of keys in the index, i.e. particular property\r\n   *   values for all registered entities.\r\n   */\r\n  keys(index) {\r\n    return Object.keys(this._dict[index || this._indices[0]]);\r\n  }\r\n\r\n  /**\r\n   * Retrieve an entity by its key.\r\n   *\r\n   * @param {string} key A case-insensitive property value to look-up.\r\n   * @param {string=} index One of the indices specified during the list construction. If omitted,\r\n   *   the first of the indices is used.\r\n   * @returns {Object=} An object registered in the index under the key. If there are multiple\r\n   *   objects under the same key, the first one is returned.\r\n   */\r\n  get(key, index) {\r\n    const dict = this._dict[index || this._indices[0]];\r\n    if (dict) {\r\n      const values = dict[key && key.toLowerCase()];\r\n      return values && values.length > 0 ? values[0] : undefined;\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n/* harmony default export */ const utils_EntityList = (EntityList);\r\n;// CONCATENATED MODULE: ./src/utils/makeContextDependent.js\r\n\r\n\r\nfunction makeContextDependent(prototype) {\r\n  Object.defineProperties(prototype, {\r\n    logger: {\r\n      get() {\r\n        return this.context && this.context.logger ? this.context.logger : logger;\r\n      }\r\n    },\r\n    settings: {\r\n      get() {\r\n        return this.context && this.context.settings ? this.context.settings : settings;\r\n      }\r\n    }\r\n  });\r\n}\r\n/* harmony default export */ const utils_makeContextDependent = (makeContextDependent);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/SphereCollisionGeo.js\r\n\r\nclass CollisionSphere {\r\n  constructor(position, radius) {\r\n    this._position = position;\r\n    this._radius = radius;\r\n  }\r\n  static _sphere = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere())();\r\n  raycast(raycaster) {\r\n    const sphere = CollisionSphere._sphere;\r\n    sphere.set(this._position, this._radius);\r\n    const p = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    if (raycaster.ray.intersectSphere(sphere, p)) {\r\n      return {\r\n        distance: raycaster.ray.origin.distanceTo(p),\r\n        point: p\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n}\r\nconst SphereCollisionGeo = base => class extends base {\r\n  constructor(count) {\r\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      args[_key - 1] = arguments[_key];\r\n    }\r\n    super(...args);\r\n    this._objects = new Array(count);\r\n    this.boundingSphere = null;\r\n    this.boundingBox = null;\r\n  }\r\n  setSphere(idx, position, radius) {\r\n    this._objects[idx] = new CollisionSphere(position, radius);\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    // TODO raycast with bounding sphere? How to deal with updates?\r\n    for (let i = 0, n = this._objects.length; i < n; ++i) {\r\n      const inters = this._objects[i].raycast(raycaster);\r\n      if (inters) {\r\n        inters.chunkIdx = i;\r\n        intersects.push(inters);\r\n      }\r\n    }\r\n  }\r\n  computeBoundingBox() {\r\n    const objects = this._objects;\r\n    let {\r\n      boundingBox\r\n    } = this;\r\n    if (boundingBox === null) {\r\n      this.boundingBox = boundingBox = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n    }\r\n    boundingBox.makeEmpty();\r\n    for (let i = 0, n = objects.length; i < n; ++i) {\r\n      boundingBox.expandByPoint(objects[i]._position);\r\n    }\r\n  }\r\n  computeBoundingSphere() {\r\n    this.computeBoundingBox();\r\n    const objects = this._objects;\r\n    const {\r\n      boundingBox\r\n    } = this;\r\n    // Build bounding sphere\r\n    let radiusSquared = 0.0;\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    boundingBox.getCenter(center);\r\n    for (let i = 0, n = objects.length; i < n; ++i) {\r\n      const pos = objects[i]._position;\r\n      const lengthSquared = center.distanceToSquared(pos);\r\n      if (radiusSquared < lengthSquared) {\r\n        radiusSquared = lengthSquared;\r\n      }\r\n    }\r\n    if (this.boundingSphere === null) {\r\n      this.boundingSphere = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere();\r\n    }\r\n    this.boundingSphere.set(center, Math.sqrt(radiusSquared));\r\n  }\r\n};\r\n/* harmony default export */ const geometries_SphereCollisionGeo = (SphereCollisionGeo);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/InstancedSpheresGeometry.js\r\n\r\n\r\n\r\n\r\nconst tmpColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\nconst OFFSET_SIZE = 4;\r\nconst COLOR_SIZE = 3;\r\nconst {\r\n  copySubArrays: InstancedSpheresGeometry_copySubArrays\r\n} = utils;\r\nfunction setArrayXYZ(arr, idx, x, y, z) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n}\r\nfunction setArrayXYZW(arr, idx, x, y, z, w) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n  arr[idx + 3] = w;\r\n}\r\nclass InstancedSpheresGeometry extends geometries_SphereCollisionGeo(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry) {\r\n  constructor(spheresCount, sphereComplexity, useZSprites) {\r\n    super(spheresCount);\r\n    this._sphGeometry = useZSprites ? new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PlaneGeometry(2, 2, 1, 1) : new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.SphereBufferGeometry(1, sphereComplexity * 2, sphereComplexity, 0, Math.PI * 2, 0, Math.PI);\r\n    this._init(spheresCount, this._sphGeometry);\r\n  }\r\n  setItem(itemIdx, itemPos, itemRad) {\r\n    setArrayXYZW(this._offsets, itemIdx * OFFSET_SIZE, itemPos.x, itemPos.y, itemPos.z, itemRad);\r\n    this.setSphere(itemIdx, itemPos, itemRad);\r\n  }\r\n  setColor(itemIdx, colorVal) {\r\n    tmpColor.set(colorVal);\r\n    setArrayXYZ(this._colors, itemIdx * COLOR_SIZE, tmpColor.r, tmpColor.g, tmpColor.b);\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  finishUpdate() {\r\n    this.getAttribute('offset').needsUpdate = true;\r\n    this.getAttribute('color').needsUpdate = true;\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n  setOpacity(chunkIndices, value) {\r\n    const alphaArr = this._alpha;\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      alphaArr[chunkIndices[i]] = value;\r\n    }\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n  }\r\n  getSubset(chunkIndices) {\r\n    const instanceCount = chunkIndices.length;\r\n    const geom = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry();\r\n    this._init.call(geom, instanceCount, this._sphGeometry);\r\n    InstancedSpheresGeometry_copySubArrays(this._offsets, geom._offsets, chunkIndices, OFFSET_SIZE);\r\n    InstancedSpheresGeometry_copySubArrays(this._colors, geom._colors, chunkIndices, COLOR_SIZE);\r\n    geom.boundingSphere = this.boundingSphere;\r\n    geom.boundingBox = this.boundingBox;\r\n    return [geom];\r\n  }\r\n  _init(spheresCount, sphereGeo) {\r\n    this.copy(sphereGeo);\r\n    this._offsets = utils.allocateTyped(Float32Array, spheresCount * OFFSET_SIZE);\r\n    this._colors = utils.allocateTyped(Float32Array, spheresCount * COLOR_SIZE);\r\n    const alpha = this._alpha = utils.allocateTyped(Float32Array, spheresCount);\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(alpha, 1.0);\r\n    this.setAttribute('offset', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._offsets, OFFSET_SIZE, false, 1));\r\n    this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._colors, COLOR_SIZE, false, 1));\r\n    this.setAttribute('alphaColor', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(alpha, 1, false, 1));\r\n  }\r\n}\r\n/* harmony default export */ const geometries_InstancedSpheresGeometry = (InstancedSpheresGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ChunkedObjectsGeometry.js\r\n\r\n\r\n\r\nconst MAX_IDC_16BIT = 65535;\r\nconst VEC_SIZE = 3;\r\nconst ChunkedObjectsGeometry_tmpColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\n\r\n/**\r\n * This class represents geometry which consists of separate chunks.\r\n * Each chunk has same index and similar geometry with equal points and faces count.\r\n * Each chunk has by default only one color.\r\n * @constructor\r\n */\r\n\r\nclass ChunkedObjectsGeometry extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry {\r\n  constructor(chunkGeo, chunksCount) {\r\n    super();\r\n    if (this.constructor === ChunkedObjectsGeometry) {\r\n      throw new Error('Can not instantiate abstract class!');\r\n    }\r\n    this._chunkGeo = chunkGeo;\r\n    this._init(chunkGeo, chunksCount);\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  finishUpdate() {\r\n    this.getAttribute('position').needsUpdate = true;\r\n    this.getAttribute('normal').needsUpdate = true;\r\n    this.getAttribute('color').needsUpdate = true;\r\n  }\r\n  setColor(chunkIdx, colorVal) {\r\n    ChunkedObjectsGeometry_tmpColor.set(colorVal);\r\n    const colors = this._colors;\r\n    const chunkSize = this._chunkSize;\r\n    for (let i = chunkIdx * chunkSize, end = i + chunkSize; i < end; ++i) {\r\n      const idx = i * VEC_SIZE;\r\n      colors[idx] = ChunkedObjectsGeometry_tmpColor.r;\r\n      colors[idx + 1] = ChunkedObjectsGeometry_tmpColor.g;\r\n      colors[idx + 2] = ChunkedObjectsGeometry_tmpColor.b;\r\n    }\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n  setOpacity(chunkIndices, value) {\r\n    const alphaArr = this._alpha;\r\n    const chunkSize = this._chunkSize;\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      const left = chunkIndices[i] * chunkSize;\r\n      external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(alphaArr, value, left, left + chunkSize);\r\n    }\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    const inters = [];\r\n    // use THREE.Mesh raycasting interface for the Geometry. The Mesh is\r\n    // created with existed geometry and default material, so it doesn't slowdown.\r\n    const mesh = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh();\r\n    mesh.geometry = this;\r\n    mesh.raycast(raycaster, inters);\r\n    const facesPerChunk = this._chunkGeo.index.count / 3;\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('faceIndex')) {\r\n        continue;\r\n      }\r\n      inters[i].chunkIdx = Math.floor(inters[i].faceIndex / facesPerChunk);\r\n      intersects.push(inters[i]);\r\n    }\r\n  }\r\n  getSubset(chunkIndices) {\r\n    const instanceCount = chunkIndices.length;\r\n    const geom = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    this._init.call(geom, this._chunkGeo, instanceCount);\r\n    const srcPos = this._positions;\r\n    const srcNorm = this._normals;\r\n    const srcColor = this._colors;\r\n    const dstPos = geom._positions;\r\n    const dstNorm = geom._normals;\r\n    const dstColor = geom._colors;\r\n    const chunkSize = this._chunkSize * VEC_SIZE;\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      const dstPtOffset = i * chunkSize;\r\n      const ptIdxBegin = chunkIndices[i] * chunkSize;\r\n      const ptIdxEnd = ptIdxBegin + chunkSize;\r\n      dstPos.set(srcPos.subarray(ptIdxBegin, ptIdxEnd), dstPtOffset);\r\n      dstNorm.set(srcNorm.subarray(ptIdxBegin, ptIdxEnd), dstPtOffset);\r\n      dstColor.set(srcColor.subarray(ptIdxBegin, ptIdxEnd), dstPtOffset);\r\n    }\r\n    geom.boundingSphere = this.boundingSphere;\r\n    geom.boundingBox = this.boundingBox;\r\n    return [geom];\r\n  }\r\n  _init(chunkGeo, chunksCount) {\r\n    const chunkSize = this._chunkSize = chunkGeo.attributes.position.count;\r\n    const chunkIndex = chunkGeo.index.array;\r\n    const chunkIndexSize = chunkIndex.length;\r\n    const pointsCount = this._chunkSize * chunksCount;\r\n    const use32bitIndex = pointsCount > MAX_IDC_16BIT;\r\n    const indexSize = chunkIndexSize * chunksCount;\r\n    const index = this._index = utils.allocateTyped(use32bitIndex ? Uint32Array : Uint16Array, indexSize);\r\n    this._positions = utils.allocateTyped(Float32Array, pointsCount * VEC_SIZE);\r\n    this._normals = utils.allocateTyped(Float32Array, pointsCount * VEC_SIZE);\r\n    this._colors = utils.allocateTyped(Float32Array, pointsCount * VEC_SIZE);\r\n    const alpha = this._alpha = utils.allocateTyped(Float32Array, pointsCount);\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(alpha, 1.0);\r\n    for (let i = 0; i < chunksCount; ++i) {\r\n      const offset = i * chunkIndexSize;\r\n      const posOffset = i * chunkSize;\r\n      index.set(chunkIndex, offset);\r\n      for (let j = 0; j < chunkIndexSize; ++j) {\r\n        index[offset + j] += posOffset;\r\n      }\r\n    }\r\n    this.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._index, 1));\r\n    this.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._positions, VEC_SIZE));\r\n    this.setAttribute('normal', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._normals, VEC_SIZE));\r\n    this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._colors, VEC_SIZE));\r\n    this.setAttribute('alphaColor', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(alpha, 1));\r\n  }\r\n}\r\n/* harmony default export */ const geometries_ChunkedObjectsGeometry = (ChunkedObjectsGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/SimpleSpheresGeometry.js\r\n\r\n\r\n\r\n\r\nconst SimpleSpheresGeometry_VEC_SIZE = 3;\r\nclass SimpleSpheresGeometry extends geometries_SphereCollisionGeo(geometries_ChunkedObjectsGeometry) {\r\n  constructor(spheresCount, sphereComplexity) {\r\n    const sphGeometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.SphereBufferGeometry(1, sphereComplexity * 2, sphereComplexity, 0, Math.PI * 2, 0, Math.PI);\r\n    super(spheresCount, sphGeometry, spheresCount);\r\n    const normals = this._normals;\r\n    const geoNormals = sphGeometry.attributes.normal.array;\r\n    const chunkSize = this._chunkSize;\r\n    this._chunkPos = this._chunkGeo.attributes.position.array;\r\n    this._tmpPositions = utils.allocateTyped(Float32Array, chunkSize * SimpleSpheresGeometry_VEC_SIZE);\r\n    for (let i = 0; i < spheresCount; ++i) {\r\n      normals.set(geoNormals, chunkSize * SimpleSpheresGeometry_VEC_SIZE * i);\r\n    }\r\n  }\r\n  setItem(itemIdx, itemPos, itemRad) {\r\n    const tmpPos = this._tmpPositions;\r\n    const chunkSize = this._chunkSize;\r\n    const geoPos = this._chunkPos;\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      const idx = i * 3;\r\n      tmpPos[idx] = itemPos.x + geoPos[idx] * itemRad;\r\n      tmpPos[idx + 1] = itemPos.y + geoPos[idx + 1] * itemRad;\r\n      tmpPos[idx + 2] = itemPos.z + geoPos[idx + 2] * itemRad;\r\n    }\r\n    this._positions.set(tmpPos, chunkSize * itemIdx * SimpleSpheresGeometry_VEC_SIZE);\r\n    this.setSphere(itemIdx, itemPos, itemRad);\r\n  }\r\n}\r\n/* harmony default export */ const geometries_SimpleSpheresGeometry = (SimpleSpheresGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/Simple2CCylindersGeometry.js\r\n\r\n\r\n\r\n\r\nconst Simple2CCylindersGeometry_VEC_SIZE = 3;\r\nconst centerPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst tmpVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst normMtx = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix3();\r\nclass Simple2CCylindersGeometry extends geometries_ChunkedObjectsGeometry {\r\n  constructor(instanceCount, polyComplexity) {\r\n    const cylGeometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.CylinderGeometry(1, 1, 1.0, Math.max(3, polyComplexity), 2, true);\r\n    super(cylGeometry, 2 * instanceCount);\r\n    const chunkSize = this._chunkSize;\r\n    this._chunkPos = this._chunkGeo.attributes.position.array;\r\n    this._chunkNorms = this._chunkGeo.attributes.normal.array;\r\n    this._tmpVector = utils.allocateTyped(Float32Array, chunkSize * Simple2CCylindersGeometry_VEC_SIZE);\r\n  }\r\n  setItem(itemIdx, botPos, topPos, itemRad) {\r\n    const chunkSize = this._chunkSize;\r\n    const firstOffset = chunkSize * 2 * itemIdx * Simple2CCylindersGeometry_VEC_SIZE;\r\n    const secondOffset = firstOffset + chunkSize * Simple2CCylindersGeometry_VEC_SIZE;\r\n    const tmpArray = this._tmpVector;\r\n    const geoPos = this._chunkPos;\r\n    const geoNorm = this._chunkNorms;\r\n    centerPos.lerpVectors(botPos, topPos, 0.5);\r\n    const mtx1 = gfxutils.calcCylinderMatrix(botPos, centerPos, itemRad);\r\n    normMtx.getNormalMatrix(mtx1);\r\n    let idx;\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      idx = i * Simple2CCylindersGeometry_VEC_SIZE;\r\n      tmpVector.fromArray(geoPos, idx);\r\n      tmpVector.applyMatrix4(mtx1);\r\n      tmpVector.toArray(tmpArray, idx);\r\n    }\r\n    this._positions.set(tmpArray, firstOffset);\r\n\r\n    // now shift center to get another part of the cylinder\r\n    centerPos.sub(botPos);\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      idx = i * Simple2CCylindersGeometry_VEC_SIZE;\r\n      tmpArray[idx] += centerPos.x;\r\n      tmpArray[idx + 1] += centerPos.y;\r\n      tmpArray[idx + 2] += centerPos.z;\r\n    }\r\n    this._positions.set(tmpArray, secondOffset);\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      idx = i * Simple2CCylindersGeometry_VEC_SIZE;\r\n      tmpVector.fromArray(geoNorm, idx);\r\n      tmpVector.applyMatrix3(normMtx);\r\n      tmpVector.toArray(tmpArray, idx);\r\n    }\r\n    this._normals.set(tmpArray, firstOffset);\r\n    this._normals.set(tmpArray, secondOffset);\r\n  }\r\n  setColor(itemIdx, colorVal1, colorVal2) {\r\n    const first = 2 * itemIdx;\r\n    super.setColor(first, colorVal1);\r\n    const second = first + 1;\r\n    super.setColor(second, colorVal2);\r\n  }\r\n}\r\n/* harmony default export */ const geometries_Simple2CCylindersGeometry = (Simple2CCylindersGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/CylinderBufferGeometry.js\r\n\r\n\r\nconst MAX_POINTS_COUNT_16BIT = 65536;\r\nconst PTS_PER_TRIANGLE = 3;\r\nclass CylinderBufferGeometry extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry {\r\n  constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded) {\r\n    super();\r\n    const thetaStart = 0;\r\n    const thetaLength = 2 * Math.PI;\r\n    this.type = 'CylinderBufferGeometry';\r\n    this.parameters = {\r\n      radiusTop,\r\n      radiusBottom,\r\n      height,\r\n      radialSegments,\r\n      heightSegments,\r\n      openEnded\r\n    };\r\n    const hasTop = openEnded === false && radiusTop > 0;\r\n    const hasBottom = openEnded === false && radiusBottom > 0;\r\n    const vertexCount = (heightSegments + 1) * radialSegments + hasTop * (radialSegments + 1) + hasBottom * (radialSegments + 1);\r\n    const facesCount = (2 * heightSegments + hasTop + hasBottom) * radialSegments;\r\n    const heightHalf = height / 2;\r\n\r\n    /* eslint-disable no-magic-numbers */\r\n    const positions = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(utils.allocateTyped(Float32Array, vertexCount * 3), 3);\r\n    const normals = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(utils.allocateTyped(Float32Array, vertexCount * 3), 3);\r\n    const indices = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Uint16BufferAttribute(utils.allocateTyped(Uint16Array, facesCount * PTS_PER_TRIANGLE), 1);\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    const uvs = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(utils.allocateTyped(Float32Array, vertexCount * 2), 2);\r\n    console.assert(vertexCount < MAX_POINTS_COUNT_16BIT, 'DEBUG: Cylinder Geometry has too many vertices (65536 max).');\r\n    let currVtxIdx = 0;\r\n    let currFaceIdx = 0;\r\n    const tanTheta = -(radiusBottom - radiusTop) / height;\r\n\r\n    // setup cylinder data\r\n    for (let y = 0; y <= heightSegments; y++) {\r\n      // faces\r\n      if (y !== heightSegments) {\r\n        for (let i = 0; i < radialSegments; i++) {\r\n          const v1 = currVtxIdx + i;\r\n          const v2 = currVtxIdx + radialSegments + i;\r\n          const v3 = currVtxIdx + radialSegments + (i + 1) % radialSegments;\r\n          const v4 = currVtxIdx + (i + 1) % radialSegments;\r\n          indices.setXYZ(currFaceIdx * PTS_PER_TRIANGLE, v1, v4, v2);\r\n          currFaceIdx++;\r\n          indices.setXYZ(currFaceIdx * PTS_PER_TRIANGLE, v2, v4, v3);\r\n          currFaceIdx++;\r\n        }\r\n      }\r\n\r\n      // vertices\r\n      const v = y / heightSegments;\r\n      const radius = v * (radiusBottom - radiusTop) + radiusTop;\r\n      for (let x = 0; x < radialSegments; x++) {\r\n        const u = x / radialSegments;\r\n        const vx = radius * Math.sin(u * thetaLength + thetaStart);\r\n        const vy = v * height - heightHalf;\r\n        const vz = radius * Math.cos(u * thetaLength + thetaStart);\r\n        const normal = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(vx, Math.sqrt(vx * vx + vz * vz) * tanTheta, vz).normalize();\r\n        positions.setXYZ(currVtxIdx, vx, vy, vz);\r\n        normals.setXYZ(currVtxIdx, normal.x, normal.y, normal.z);\r\n        uvs.setXY(currVtxIdx, u, v);\r\n        ++currVtxIdx;\r\n      }\r\n    }\r\n\r\n    // top cap\r\n    if (hasTop) {\r\n      const startTIdx = currVtxIdx;\r\n      const lastIdx = currVtxIdx + radialSegments;\r\n      for (let fTIdx = 0; fTIdx < radialSegments; ++fTIdx) {\r\n        const currSrcIdx = currVtxIdx - radialSegments;\r\n        positions.setXYZ(currVtxIdx, positions.getX(currSrcIdx), positions.getY(currSrcIdx), positions.getZ(currSrcIdx));\r\n        normals.setXYZ(currVtxIdx, 0, 1, 0);\r\n        uvs.setXY(currVtxIdx, 1, 1);\r\n        const nextTVtx = startTIdx + (fTIdx + 1) % radialSegments;\r\n        indices.setXYZ(currFaceIdx * PTS_PER_TRIANGLE, currVtxIdx, nextTVtx, lastIdx);\r\n        currFaceIdx++;\r\n        currVtxIdx++;\r\n      }\r\n      positions.setXYZ(currVtxIdx, 0, heightHalf, 0);\r\n      normals.setXYZ(currVtxIdx, 0, 1, 0);\r\n      uvs.setXY(currVtxIdx, 1, 1);\r\n      ++currVtxIdx;\r\n    }\r\n\r\n    // bottom cap\r\n    if (hasBottom) {\r\n      const startBIdx = currVtxIdx;\r\n      const lastBIdx = currVtxIdx + radialSegments;\r\n      for (let fBIdx = 0; fBIdx < radialSegments; ++fBIdx) {\r\n        const currSrcBIdx = fBIdx;\r\n        positions.setXYZ(currVtxIdx, positions.getX(currSrcBIdx), positions.getY(currSrcBIdx), positions.getZ(currSrcBIdx));\r\n        normals.setXYZ(currVtxIdx, 0, -1, 0);\r\n        uvs.setXY(currVtxIdx, 0, 0);\r\n        const nextBVtx = startBIdx + (fBIdx + 1) % radialSegments;\r\n        indices.setXYZ(currFaceIdx * PTS_PER_TRIANGLE, nextBVtx, currVtxIdx, lastBIdx);\r\n        currFaceIdx++;\r\n        currVtxIdx++;\r\n      }\r\n      positions.setXYZ(currVtxIdx, 0, -heightHalf, 0);\r\n      normals.setXYZ(currVtxIdx, 0, -1, 0);\r\n      uvs.setXY(currVtxIdx, 0, 0);\r\n    }\r\n    this.setIndex(indices);\r\n    this.setAttribute('position', positions);\r\n    this.setAttribute('normal', normals);\r\n    this.setAttribute('uv', uvs);\r\n  }\r\n  clone() {\r\n    const {\r\n      parameters\r\n    } = this;\r\n    return new CylinderBufferGeometry(parameters.radiusTop, parameters.radiusBottom, parameters.height, parameters.radialSegments, parameters.heightSegments, parameters.openEnded);\r\n  }\r\n}\r\n/* harmony default export */ const geometries_CylinderBufferGeometry = (CylinderBufferGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/Instanced2CCylindersGeometry.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Instanced2CCylindersGeometry_tmpColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\nconst invMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\nconst Instanced2CCylindersGeometry_OFFSET_SIZE = 4;\r\nconst Instanced2CCylindersGeometry_COLOR_SIZE = 3;\r\nconst {\r\n  copySubArrays: Instanced2CCylindersGeometry_copySubArrays\r\n} = utils;\r\nfunction Instanced2CCylindersGeometry_setArrayXYZ(arr, idx, x, y, z) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n}\r\nfunction Instanced2CCylindersGeometry_setArrayXYZW(arr, idx, x, y, z, w) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n  arr[idx + 3] = w;\r\n}\r\nfunction sortNumber(a, b) {\r\n  return a - b;\r\n}\r\nfunction _prepareCylinderInfo(chunkIndices) {\r\n  chunkIndices.sort(sortNumber);\r\n  const chunksIdx = [];\r\n  const cylinderInfo = [];\r\n  for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n    const val = chunkIndices[i];\r\n    const even = (val | 0) % 2 === 0;\r\n    const newPar = {\r\n      first: false,\r\n      second: false\r\n    };\r\n    if (even) {\r\n      newPar.first = true;\r\n      newPar.second = i + 1 < n && chunkIndices[i + 1] === chunkIndices[i] + 1;\r\n      if (newPar.second) {\r\n        ++i;\r\n      }\r\n    } else {\r\n      newPar.second = true;\r\n    }\r\n    chunksIdx.push(Math.floor(val / 2));\r\n    cylinderInfo.push(newPar);\r\n  }\r\n  return {\r\n    indices: chunksIdx,\r\n    cylinderInfo\r\n  };\r\n}\r\nfunction _assignOpacity(cylinderInfo, color1, color2) {\r\n  for (let i = 0, n = cylinderInfo.length; i < n; ++i) {\r\n    const info = cylinderInfo[i];\r\n    if (!info.first) {\r\n      color1[Instanced2CCylindersGeometry_COLOR_SIZE * i] = -0.5;\r\n    }\r\n    if (!info.second) {\r\n      color2[Instanced2CCylindersGeometry_COLOR_SIZE * i] = -0.5;\r\n    }\r\n  }\r\n}\r\nclass Instanced2CCylindersGeometry extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry {\r\n  constructor(instanceCount, polyComplexity, useZSprites, openEnded) {\r\n    super();\r\n    this._useZSprites = useZSprites;\r\n    this._cylGeometry = useZSprites ? new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PlaneGeometry(2, 2, 1, 1) : new geometries_CylinderBufferGeometry(1, 1, 1.0, Math.max(3, polyComplexity), 2, openEnded);\r\n    this._init(instanceCount, this._cylGeometry, this._useZSprites);\r\n    this._collisionGeo = new geometries_Simple2CCylindersGeometry(instanceCount, 3);\r\n  }\r\n  setItem(itemIdx, botPos, topPos, itemRad) {\r\n    const matrix = gfxutils.calcCylinderMatrix(botPos, topPos, itemRad);\r\n    let me = matrix.elements;\r\n    const mtxOffset = itemIdx * Instanced2CCylindersGeometry_OFFSET_SIZE;\r\n    this._collisionGeo.setItem(itemIdx, botPos, topPos, itemRad);\r\n    Instanced2CCylindersGeometry_setArrayXYZW(this._matVector1, mtxOffset, me[0], me[4], me[8], me[12]);\r\n    Instanced2CCylindersGeometry_setArrayXYZW(this._matVector2, mtxOffset, me[1], me[5], me[9], me[13]);\r\n    Instanced2CCylindersGeometry_setArrayXYZW(this._matVector3, mtxOffset, me[2], me[6], me[10], me[14]);\r\n    if (this._useZSprites) {\r\n      invMatrix.copy(matrix).invert();\r\n      me = invMatrix.elements;\r\n      Instanced2CCylindersGeometry_setArrayXYZW(this._invmatVector1, mtxOffset, me[0], me[4], me[8], me[12]);\r\n      Instanced2CCylindersGeometry_setArrayXYZW(this._invmatVector2, mtxOffset, me[1], me[5], me[9], me[13]);\r\n      Instanced2CCylindersGeometry_setArrayXYZW(this._invmatVector3, mtxOffset, me[2], me[6], me[10], me[14]);\r\n    }\r\n  }\r\n  setColor(itemIdx, colorVal1, colorVal2) {\r\n    const colorIdx = itemIdx * Instanced2CCylindersGeometry_COLOR_SIZE;\r\n    Instanced2CCylindersGeometry_tmpColor.set(colorVal1);\r\n    Instanced2CCylindersGeometry_setArrayXYZ(this._color1, colorIdx, Instanced2CCylindersGeometry_tmpColor.r, Instanced2CCylindersGeometry_tmpColor.g, Instanced2CCylindersGeometry_tmpColor.b);\r\n    Instanced2CCylindersGeometry_tmpColor.set(colorVal2);\r\n    Instanced2CCylindersGeometry_setArrayXYZ(this._color2, colorIdx, Instanced2CCylindersGeometry_tmpColor.r, Instanced2CCylindersGeometry_tmpColor.g, Instanced2CCylindersGeometry_tmpColor.b);\r\n  }\r\n  computeBoundingSphere() {\r\n    this._collisionGeo.computeBoundingSphere();\r\n    this.boundingSphere = this._collisionGeo.boundingSphere;\r\n  }\r\n  computeBoundingBox() {\r\n    this._collisionGeo.computeBoundingBox();\r\n    this.boundingBox = this._collisionGeo.boundingBox;\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    this._collisionGeo.raycast(raycaster, intersects);\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  finishUpdate() {\r\n    this.getAttribute('matVector1').needsUpdate = true;\r\n    this.getAttribute('matVector2').needsUpdate = true;\r\n    this.getAttribute('matVector3').needsUpdate = true;\r\n    this.getAttribute('color').needsUpdate = true;\r\n    this.getAttribute('color2').needsUpdate = true;\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n    if (this._useZSprites) {\r\n      this.getAttribute('invmatVector1').needsUpdate = true;\r\n      this.getAttribute('invmatVector2').needsUpdate = true;\r\n      this.getAttribute('invmatVector3').needsUpdate = true;\r\n    }\r\n    this._collisionGeo.finishUpdate();\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n  setOpacity(chunkIndices, value) {\r\n    const alphaArr = this._alpha;\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      alphaArr[Math.floor(chunkIndices[i] / 2)] = value;\r\n    }\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n  }\r\n  getSubset(chunkIndices) {\r\n    const info = _prepareCylinderInfo(chunkIndices);\r\n    const cylinderIndices = info.indices;\r\n    const instanceCount = cylinderIndices.length;\r\n    const geom = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry();\r\n    this._init.call(geom, instanceCount, this._cylGeometry, this._useZSprites);\r\n    Instanced2CCylindersGeometry_copySubArrays(this._matVector1, geom._matVector1, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    Instanced2CCylindersGeometry_copySubArrays(this._matVector2, geom._matVector2, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    Instanced2CCylindersGeometry_copySubArrays(this._matVector3, geom._matVector3, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    if (this._useZSprites) {\r\n      Instanced2CCylindersGeometry_copySubArrays(this._invmatVector1, geom._invmatVector1, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n      Instanced2CCylindersGeometry_copySubArrays(this._invmatVector2, geom._invmatVector2, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n      Instanced2CCylindersGeometry_copySubArrays(this._invmatVector3, geom._invmatVector3, cylinderIndices, Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    }\r\n    Instanced2CCylindersGeometry_copySubArrays(this._color1, geom._color1, cylinderIndices, Instanced2CCylindersGeometry_COLOR_SIZE);\r\n    Instanced2CCylindersGeometry_copySubArrays(this._color2, geom._color2, cylinderIndices, Instanced2CCylindersGeometry_COLOR_SIZE);\r\n    _assignOpacity(info.cylinderInfo, geom._color1, geom._color2);\r\n    geom.boundingSphere = this.boundingSphere;\r\n    geom.boundingBox = this.boundingBox;\r\n    return [geom];\r\n  }\r\n  getGeoParams() {\r\n    return this._cylGeometry.parameters;\r\n  }\r\n  _init(instanceCount, cylinderGeo, useZSprites) {\r\n    this.copy(cylinderGeo);\r\n    this._matVector1 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    this._matVector2 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    this._matVector3 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n    this._color1 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_COLOR_SIZE);\r\n    this._color2 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_COLOR_SIZE);\r\n    const alpha = this._alpha = utils.allocateTyped(Float32Array, instanceCount);\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(alpha, 1.0);\r\n    this.setAttribute('matVector1', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._matVector1, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n    this.setAttribute('matVector2', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._matVector2, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n    this.setAttribute('matVector3', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._matVector3, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n    this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._color1, Instanced2CCylindersGeometry_COLOR_SIZE, false, 1));\r\n    this.setAttribute('color2', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._color2, Instanced2CCylindersGeometry_COLOR_SIZE, false, 1));\r\n    this.setAttribute('alphaColor', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._alpha, 1, false, 1));\r\n    if (useZSprites) {\r\n      this._invmatVector1 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n      this._invmatVector2 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n      this._invmatVector3 = utils.allocateTyped(Float32Array, instanceCount * Instanced2CCylindersGeometry_OFFSET_SIZE);\r\n      this.setAttribute('invmatVector1', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._invmatVector1, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n      this.setAttribute('invmatVector2', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._invmatVector2, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n      this.setAttribute('invmatVector3', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute(this._invmatVector3, Instanced2CCylindersGeometry_OFFSET_SIZE, false, 1));\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const geometries_Instanced2CCylindersGeometry = (Instanced2CCylindersGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ExtrudedObjectsGeometry.js\r\n\r\n\r\n\r\nconst ExtrudedObjectsGeometry_VEC_SIZE = 3;\r\nconst TRI_SIZE = 3;\r\nconst tmpPrev = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst tmpNext = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst tmpRes = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst simpleNormal = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1.0, 0.0, 0.0);\r\nconst normalOnCut = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst nearRingPt = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nfunction _createExtrudedChunkGeometry(shape, ringsCount) {\r\n  const geo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n  const ptsCount = shape.length;\r\n  const totalPts = ptsCount * ringsCount;\r\n  const type = totalPts <= 65536 ? Uint16Array : Uint32Array;\r\n  const facesPerChunk = (ringsCount - 1) * ptsCount * 2;\r\n  const indices = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(utils.allocateTyped(type, facesPerChunk * TRI_SIZE), 1);\r\n  let currVtxIdx = 0;\r\n  let currFaceIdx = 0;\r\n  for (let y = 0; y < ringsCount; y++) {\r\n    // faces\r\n    if (y !== ringsCount - 1) {\r\n      for (let i = 0; i < ptsCount; i++) {\r\n        const v1 = currVtxIdx + i;\r\n        const v2 = currVtxIdx + ptsCount + i;\r\n        const v3 = currVtxIdx + ptsCount + (i + 1) % ptsCount;\r\n        const v4 = currVtxIdx + (i + 1) % ptsCount;\r\n        indices.setXYZ(currFaceIdx * TRI_SIZE, v1, v4, v2);\r\n        currFaceIdx++;\r\n        indices.setXYZ(currFaceIdx * TRI_SIZE, v2, v4, v3);\r\n        currFaceIdx++;\r\n      }\r\n    }\r\n    currVtxIdx += ptsCount;\r\n  }\r\n  geo.setIndex(indices);\r\n  const pos = utils.allocateTyped(Float32Array, totalPts * ExtrudedObjectsGeometry_VEC_SIZE);\r\n  geo.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(pos, ExtrudedObjectsGeometry_VEC_SIZE));\r\n  geo._positions = shape;\r\n  return geo;\r\n}\r\nclass ExtrudedObjectsGeometry extends geometries_ChunkedObjectsGeometry {\r\n  constructor(shape, ringsCount, chunksCount) {\r\n    const chunkGeo = _createExtrudedChunkGeometry(shape, ringsCount);\r\n    super(chunkGeo, chunksCount);\r\n    this._ringsCount = ringsCount;\r\n    const tmpShape = this._tmpShape = [];\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      tmpShape[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    }\r\n  }\r\n  setItem(itemIdx, matrices) {\r\n    let hasSlope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n    let hasCut = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n    const ptsCount = this._chunkGeo._positions.length;\r\n    const ringsCount = this._ringsCount;\r\n    const chunkStartIdx = ptsCount * this._ringsCount * itemIdx * ExtrudedObjectsGeometry_VEC_SIZE;\r\n    this._setPoints(matrices, ptsCount, ringsCount, chunkStartIdx);\r\n    if (hasSlope) {\r\n      this._setSlopeNormals(ptsCount, ringsCount, chunkStartIdx);\r\n    } else {\r\n      this._setBaseNormals(ptsCount, ringsCount, chunkStartIdx);\r\n    }\r\n    if (hasCut) {\r\n      this._addCut(ptsCount, ringsCount, chunkStartIdx);\r\n    }\r\n  }\r\n  _setPoints(matrices, ptsCount, ringsCount, chunkStartIdx) {\r\n    const tmpShape = this._tmpShape;\r\n    const positions = this._positions;\r\n    const shape = this._chunkGeo._positions;\r\n    for (let i = 0, vtxIdx = chunkStartIdx; i < ringsCount; ++i) {\r\n      const mtx = matrices[i];\r\n      for (let j = 0; j < ptsCount; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n        tmpShape[j].copy(shape[j]).applyMatrix4(mtx).toArray(positions, vtxIdx);\r\n      }\r\n    }\r\n  }\r\n  _setBaseNormals(ptsCount, ringsCount, chunkStartIdx) {\r\n    const nPtsInRing = ptsCount * ExtrudedObjectsGeometry_VEC_SIZE;\r\n    for (let i = 0, vtxIdx = chunkStartIdx; i < ringsCount; ++i, vtxIdx += nPtsInRing) {\r\n      this._countNormalsInRing(ptsCount, vtxIdx, false);\r\n    }\r\n  }\r\n  _setSlopeNormals(ptsCount, ringsCount, chunkStartIdx) {\r\n    const normals = this._normals;\r\n    const nPtsInRing = ptsCount * ExtrudedObjectsGeometry_VEC_SIZE;\r\n    let vtxIdx = chunkStartIdx;\r\n    // First ring\r\n    // In all cases, besides cut, second ring is coincident to first. So values of first ring's normals doesn't\r\n    // matter (In the cut case special handler will be applied later and will set them to correct values)\r\n    for (let j = 0; j < ptsCount; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n      simpleNormal.toArray(normals, vtxIdx);\r\n    }\r\n    // second ring\r\n    // If it isn't first Item we take normals' values from the last ring of the previous item (these rings are coincident)\r\n    // else we count normals' values based on next ring information\r\n    if (vtxIdx - 2 * nPtsInRing > 0) {\r\n      for (let j = 0; j < ptsCount; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n        tmpRes.fromArray(normals, vtxIdx - 2 * nPtsInRing).toArray(normals, vtxIdx);\r\n      }\r\n    } else {\r\n      this._countNormalsInRing(ptsCount, vtxIdx, true, +nPtsInRing);\r\n      vtxIdx += nPtsInRing;\r\n    }\r\n    // other rings\r\n    // we count normals' values based on previous ring information\r\n    for (let i = 2; i < ringsCount; ++i, vtxIdx += nPtsInRing) {\r\n      this._countNormalsInRing(ptsCount, vtxIdx, true, -nPtsInRing);\r\n    }\r\n  }\r\n\r\n  // Counting normals:\r\n  // - Slope\r\n  //   Radius changes throught part => normals aren't parallel with the plane contains section points\r\n  //   normal = vTangentInSectionPlane x vToSuchPointInPrevSection (all vectors are scaled for being 1 in length)\r\n  // - No slope\r\n  //   Radius doesn't change throught part => normals are parallel with the plane contains section points\r\n  //   normal = vToPrevPointInSection + vToNextPointInSection (all vectors are scaled for being 1 in length)\r\n  _countNormalsInRing(ptsCount, vtxIdx, isSlope, shiftToExtraPt) {\r\n    const tmpShape = this._tmpShape;\r\n    const normals = this._normals;\r\n    tmpShape[0].fromArray(this._positions, vtxIdx);\r\n    tmpShape[ptsCount - 1].fromArray(this._positions, vtxIdx + (ptsCount - 1) * ExtrudedObjectsGeometry_VEC_SIZE);\r\n    for (let j = 0; j < ptsCount; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n      if (j < ptsCount - 1) {\r\n        tmpShape[j + 1].fromArray(this._positions, vtxIdx + ExtrudedObjectsGeometry_VEC_SIZE);\r\n      }\r\n      if (isSlope) {\r\n        nearRingPt.fromArray(this._positions, vtxIdx + shiftToExtraPt);\r\n        tmpPrev.subVectors(tmpShape[(j + ptsCount - 1) % ptsCount], tmpShape[(j + 1) % ptsCount]).normalize();\r\n        tmpNext.subVectors(tmpShape[j], nearRingPt).normalize();\r\n        tmpRes.crossVectors(tmpNext, tmpPrev).normalize().toArray(normals, vtxIdx);\r\n      } else {\r\n        tmpPrev.subVectors(tmpShape[j], tmpShape[(j + ptsCount - 1) % ptsCount]).normalize();\r\n        tmpNext.subVectors(tmpShape[j], tmpShape[(j + 1) % ptsCount]).normalize();\r\n        tmpRes.addVectors(tmpPrev, tmpNext).normalize().toArray(normals, vtxIdx);\r\n      }\r\n    }\r\n  }\r\n  _addCut(ptsCount, ringsCount, chunkStartIdx) {\r\n    // Nothing to do if item is flat or only line\r\n    if (ptsCount < 3 || ringsCount < 2) {\r\n      return;\r\n    }\r\n    const positions = this._positions;\r\n    const normals = this._normals;\r\n    const tmpShape = this._tmpShape;\r\n    const nPtsInRing = ptsCount * ExtrudedObjectsGeometry_VEC_SIZE;\r\n\r\n    // Normal to the cut plane is equal to cross product of two vectors which are lying in it\r\n    tmpShape[0].fromArray(positions, chunkStartIdx);\r\n    tmpShape[1].fromArray(positions, chunkStartIdx + ExtrudedObjectsGeometry_VEC_SIZE);\r\n    tmpShape[2].fromArray(positions, chunkStartIdx + 2 * ExtrudedObjectsGeometry_VEC_SIZE);\r\n    tmpPrev.subVectors(tmpShape[1], tmpShape[0]).normalize();\r\n    tmpNext.subVectors(tmpShape[1], tmpShape[2]).normalize();\r\n    normalOnCut.crossVectors(tmpPrev, tmpNext).normalize();\r\n    let vtxIdx = chunkStartIdx;\r\n    // First and second rings normals' values are equal to value of normal to the cutting plane\r\n    for (let j = 0; j < ptsCount * 2; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n      normalOnCut.toArray(normals, vtxIdx);\r\n    }\r\n    if (ringsCount > 2) {\r\n      // Third ring points are coincident to first ring points, but have different normals. It makes sharp angle near cut\r\n      for (let j = 0; j < ptsCount; ++j, vtxIdx += ExtrudedObjectsGeometry_VEC_SIZE) {\r\n        tmpRes.fromArray(positions, vtxIdx - nPtsInRing).toArray(positions, vtxIdx);\r\n      }\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const geometries_ExtrudedObjectsGeometry = (ExtrudedObjectsGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ThickLinesGeometry.js\r\n\r\n\r\n\r\nconst ThickLinesGeometry_MAX_IDC_16BIT = 65535;\r\nconst VERTEX_PER_SEGMENT = 4;\r\nconst POS_SIZE = 4;\r\nconst DIR_SIZE = 3;\r\nconst COL_SIZE = 3;\r\nconst ThickLinesGeometry_tmpColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\nconst direction = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nfunction ThickLinesGeometry_setArrayXYZ(arr, idx, x, y, z) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n}\r\nfunction ThickLinesGeometry_setArrayXYZW(arr, idx, x, y, z, w) {\r\n  arr[idx] = x;\r\n  arr[idx + 1] = y;\r\n  arr[idx + 2] = z;\r\n  arr[idx + 3] = w;\r\n}\r\nfunction getSubset(arr, startSegmentIdx, segmentsCount, elemSize) {\r\n  const start = startSegmentIdx * VERTEX_PER_SEGMENT;\r\n  const end = start + segmentsCount * VERTEX_PER_SEGMENT;\r\n  return arr.subarray(start * elemSize, end * elemSize);\r\n}\r\n\r\n/**\r\n * This class represents lines geometry which consists of screen-aligned narrow quad of variable width.\r\n *\r\n * @constructor\r\n *\r\n * @param {number}  segmentsCount   Number of segments per chunk.\r\n * collision geometry.\r\n */\r\n\r\nclass ThickLinesGeometry extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry {\r\n  constructor(segmentsCount) {\r\n    super();\r\n    this._initVertices(segmentsCount);\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  finishUpdate() {\r\n    this.getAttribute('position').needsUpdate = true;\r\n    this.getAttribute('color').needsUpdate = true;\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n    this.getAttribute('direction').needsUpdate = true;\r\n  }\r\n  setColor(segmentIdx, colorVal) {\r\n    ThickLinesGeometry_tmpColor.set(colorVal);\r\n    let idx = segmentIdx * VERTEX_PER_SEGMENT * COL_SIZE;\r\n    ThickLinesGeometry_setArrayXYZ(this._colors, idx, ThickLinesGeometry_tmpColor.r, ThickLinesGeometry_tmpColor.g, ThickLinesGeometry_tmpColor.b);\r\n    idx += COL_SIZE;\r\n    ThickLinesGeometry_setArrayXYZ(this._colors, idx, ThickLinesGeometry_tmpColor.r, ThickLinesGeometry_tmpColor.g, ThickLinesGeometry_tmpColor.b);\r\n    idx += COL_SIZE;\r\n    ThickLinesGeometry_setArrayXYZ(this._colors, idx, ThickLinesGeometry_tmpColor.r, ThickLinesGeometry_tmpColor.g, ThickLinesGeometry_tmpColor.b);\r\n    idx += COL_SIZE;\r\n    ThickLinesGeometry_setArrayXYZ(this._colors, idx, ThickLinesGeometry_tmpColor.r, ThickLinesGeometry_tmpColor.g, ThickLinesGeometry_tmpColor.b);\r\n  }\r\n  setSegment(segmentIdx, pos1, pos2) {\r\n    direction.subVectors(pos1, pos2);\r\n    direction.normalize();\r\n    const positions = this._positions;\r\n    const directions = this._directions;\r\n    let idx = segmentIdx * VERTEX_PER_SEGMENT * POS_SIZE;\r\n    let dirIdx = segmentIdx * VERTEX_PER_SEGMENT * DIR_SIZE;\r\n    ThickLinesGeometry_setArrayXYZW(positions, idx, pos1.x, pos1.y, pos1.z, 0.5);\r\n    ThickLinesGeometry_setArrayXYZ(directions, dirIdx, direction.x, direction.y, direction.z);\r\n    idx += POS_SIZE;\r\n    dirIdx += DIR_SIZE;\r\n    ThickLinesGeometry_setArrayXYZW(positions, idx, pos1.x, pos1.y, pos1.z, -0.5);\r\n    ThickLinesGeometry_setArrayXYZ(directions, dirIdx, direction.x, direction.y, direction.z);\r\n    idx += POS_SIZE;\r\n    dirIdx += DIR_SIZE;\r\n    ThickLinesGeometry_setArrayXYZW(positions, idx, pos2.x, pos2.y, pos2.z, 0.5);\r\n    ThickLinesGeometry_setArrayXYZ(directions, dirIdx, direction.x, direction.y, direction.z);\r\n    idx += POS_SIZE;\r\n    dirIdx += DIR_SIZE;\r\n    ThickLinesGeometry_setArrayXYZW(positions, idx, pos2.x, pos2.y, pos2.z, -0.5);\r\n    ThickLinesGeometry_setArrayXYZ(directions, dirIdx, direction.x, direction.y, direction.z);\r\n  }\r\n  setOpacity(startSegIdx, endSegIdx, value) {\r\n    const start = startSegIdx * VERTEX_PER_SEGMENT;\r\n    const end = endSegIdx * VERTEX_PER_SEGMENT;\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(this.alpha, value, end, start);\r\n    this.getAttribute('alphaColor').needsUpdate = true;\r\n  }\r\n  getSubsetSegments(startSegmentIdx, segmentsCount) {\r\n    return [getSubset(this._positions, startSegmentIdx, segmentsCount, POS_SIZE), getSubset(this._directions, startSegmentIdx, segmentsCount, DIR_SIZE)];\r\n  }\r\n  getSubsetColors(startSegmentIdx, segmentsCount) {\r\n    return getSubset(this._colors, startSegmentIdx, segmentsCount, COL_SIZE);\r\n  }\r\n  getSubsetOpacities(startSegmentIdx, segmentsCount) {\r\n    return getSubset(this._alpha, startSegmentIdx, segmentsCount, 1);\r\n  }\r\n  getNumVertexPerSegment() {\r\n    return VERTEX_PER_SEGMENT;\r\n  }\r\n  getPositionSize() {\r\n    return POS_SIZE;\r\n  }\r\n  setSegments(startSegmentIdx, positions) {\r\n    const startPos = startSegmentIdx * VERTEX_PER_SEGMENT * POS_SIZE;\r\n    if (positions instanceof Array && positions.length === 2) {\r\n      this._positions.set(positions[0], startPos);\r\n      const startDir = startSegmentIdx * VERTEX_PER_SEGMENT * DIR_SIZE;\r\n      this._directions.set(positions[1], startDir); // dirs are geo part of vertex\r\n    } else {\r\n      this._positions.set(positions, startPos);\r\n    }\r\n  }\r\n  setColors(startSegmentIdx, colors) {\r\n    const start = startSegmentIdx * VERTEX_PER_SEGMENT * COL_SIZE;\r\n    this._colors.set(colors, start);\r\n  }\r\n  _initVertices(segmentsCount) {\r\n    this._buffersSize = segmentsCount * VERTEX_PER_SEGMENT;\r\n    const pointsCount = this._buffersSize;\r\n    const use32bitIndex = pointsCount > ThickLinesGeometry_MAX_IDC_16BIT;\r\n    this._index = utils.allocateTyped(use32bitIndex ? Uint32Array : Uint16Array, segmentsCount * 6);\r\n    this._positions = utils.allocateTyped(Float32Array, pointsCount * POS_SIZE);\r\n    this._colors = utils.allocateTyped(Float32Array, pointsCount * COL_SIZE);\r\n    this._directions = utils.allocateTyped(Float32Array, pointsCount * DIR_SIZE);\r\n    const alpha = this._alpha = utils.allocateTyped(Float32Array, pointsCount);\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fill(alpha, 1.0);\r\n    const index = this._index;\r\n    let indexOffset = 0;\r\n    let pointOffset = 0;\r\n    for (let j = 0; j < segmentsCount; j++, indexOffset += 6, pointOffset += VERTEX_PER_SEGMENT) {\r\n      index[indexOffset] = pointOffset;\r\n      index[indexOffset + 1] = pointOffset + 1;\r\n      index[indexOffset + 2] = pointOffset + 3;\r\n      index[indexOffset + 3] = pointOffset;\r\n      index[indexOffset + 4] = pointOffset + 2;\r\n      index[indexOffset + 5] = pointOffset + 3;\r\n    }\r\n    this.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._index, 1));\r\n    this.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._positions, POS_SIZE));\r\n    this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._colors, COL_SIZE));\r\n    this.setAttribute('alphaColor', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(alpha, 1));\r\n    this.setAttribute('direction', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._directions, DIR_SIZE));\r\n  }\r\n}\r\n/* harmony default export */ const geometries_ThickLinesGeometry = (ThickLinesGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/LinesGeometry.js\r\n\r\n\r\n\r\n/**\r\n * This class represents geometry which consists lines. This can build bounding volumes\r\n * @constructor\r\n *\r\n * @param {number}  segmentsCount   Number of segments per chunk.\r\n */\r\nclass LinesGeometry extends geometries_ThickLinesGeometry {\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  computeBoundingSphere() {\r\n    const {\r\n      boundingBox\r\n    } = this;\r\n    // Build bounding sphere\r\n    let radiusSquared = 0.0;\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    if (boundingBox) {\r\n      boundingBox.getCenter(center);\r\n    }\r\n    const positions = this._positions;\r\n    const sphere = this.boundingSphere || new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere();\r\n    const size = this._positions.length;\r\n    const pos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const posSize = this.getPositionSize();\r\n    for (let i = 0; i < size; i += posSize) {\r\n      pos.set(positions[i], positions[i + 1], positions[i + 2]);\r\n      const lengthSquared = center.distanceToSquared(pos);\r\n      if (radiusSquared < lengthSquared) {\r\n        radiusSquared = lengthSquared;\r\n      }\r\n    }\r\n    sphere.set(center, Math.sqrt(radiusSquared));\r\n    this.boundingSphere = sphere;\r\n  }\r\n  computeBoundingBox() {\r\n    const positions = this._positions;\r\n    const box = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n    const size = this._positions.length;\r\n    const tmpVec = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const posSize = this.getPositionSize();\r\n    for (let i = 0; i < size; i += posSize) {\r\n      tmpVec.set(positions[i], positions[i + 1], positions[i + 2]);\r\n      box.expandByPoint(tmpVec);\r\n    }\r\n    this.boundingBox = box;\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n}\r\n/* harmony default export */ const geometries_LinesGeometry = (LinesGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/CylinderCollisionGeo.js\r\n\r\n\r\n\r\n\r\nconst CylinderCollisionGeo_VEC_SIZE = 3;\r\nconst CylinderCollisionGeo_tmpVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst CylinderCollisionGeo_normMtx = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix3();\r\nclass CylinderCollisionGeo extends geometries_ChunkedObjectsGeometry {\r\n  constructor(instanceCount, polyComplexity) {\r\n    const cylGeometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.CylinderGeometry(1, 1, 1.0, Math.max(3, polyComplexity), 2, true);\r\n    super(cylGeometry, instanceCount);\r\n    const chunkSize = this._chunkSize;\r\n    this._chunkPos = this._chunkGeo.attributes.position.array;\r\n    this._chunkNorms = this._chunkGeo.attributes.normal.array;\r\n    this._tmpVector = utils.allocateTyped(Float32Array, chunkSize * CylinderCollisionGeo_VEC_SIZE);\r\n  }\r\n  setItem(itemIdx, botPos, topPos, itemRad) {\r\n    const chunkSize = this._chunkSize;\r\n    const itemOffset = chunkSize * itemIdx * CylinderCollisionGeo_VEC_SIZE;\r\n    const tmpArray = this._tmpVector;\r\n    const geoPos = this._chunkPos;\r\n    const geoNorm = this._chunkNorms;\r\n    const mtx1 = gfxutils.calcCylinderMatrix(botPos, topPos, itemRad);\r\n    CylinderCollisionGeo_normMtx.getNormalMatrix(mtx1);\r\n    let idx;\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      idx = i * CylinderCollisionGeo_VEC_SIZE;\r\n      CylinderCollisionGeo_tmpVector.fromArray(geoPos, idx);\r\n      CylinderCollisionGeo_tmpVector.applyMatrix4(mtx1);\r\n      CylinderCollisionGeo_tmpVector.toArray(tmpArray, idx);\r\n    }\r\n    this._positions.set(tmpArray, itemOffset);\r\n    for (let i = 0; i < chunkSize; ++i) {\r\n      idx = i * CylinderCollisionGeo_VEC_SIZE;\r\n      CylinderCollisionGeo_tmpVector.fromArray(geoNorm, idx);\r\n      CylinderCollisionGeo_tmpVector.applyMatrix3(CylinderCollisionGeo_normMtx);\r\n      CylinderCollisionGeo_tmpVector.toArray(tmpArray, idx);\r\n    }\r\n    this._normals.set(tmpArray, itemOffset);\r\n  }\r\n}\r\n/* harmony default export */ const geometries_CylinderCollisionGeo = (CylinderCollisionGeo);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ChunkedLinesGeometry.js\r\n\r\n\r\nconst COLLISION_RAD = 0.1;\r\n\r\n/**\r\n * This class represents geometry which consists of separate chunks.\r\n * Each chunk has same index and similar geometry with equal points and faces count.\r\n * Each chunk has by default only one color.\r\n * @constructor\r\n *\r\n * @param {number}  chunksCount     Total chunks count.\r\n * @param {number}  segmentsCount   Number of segments per chunk.\r\n * @param {boolean} enableCollision Enable or disable collision where each segment is\r\n *                                  a collidable cylinder.\r\n * collision geometry.\r\n */\r\nclass ChunkedLinesGeometry extends geometries_LinesGeometry {\r\n  constructor(chunksCount, segmentsCount, enableCollision) {\r\n    super(chunksCount * segmentsCount);\r\n    this._init(segmentsCount);\r\n    this._collisionGeo = enableCollision ? new geometries_CylinderCollisionGeo(chunksCount * segmentsCount, 3) : null;\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  computeBoundingSphere() {\r\n    const collisionGeo = this._collisionGeo;\r\n    if (collisionGeo) {\r\n      collisionGeo.computeBoundingSphere();\r\n      this.boundingSphere = collisionGeo.boundingSphere;\r\n      return;\r\n    }\r\n    super.computeBoundingSphere();\r\n  }\r\n  computeBoundingBox() {\r\n    const collisionGeo = this._collisionGeo;\r\n    if (collisionGeo) {\r\n      collisionGeo.computeBoundingBox();\r\n      this.boundingBox = collisionGeo.boundingBox;\r\n      return;\r\n    }\r\n    super.computeBoundingBox();\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    const collisionGeo = this._collisionGeo;\r\n    if (!collisionGeo) {\r\n      return;\r\n    }\r\n    const segCount = this._chunkSize;\r\n    this._collisionGeo.raycast(raycaster, intersects);\r\n    for (let i = 0, n = intersects.length; i < n; ++i) {\r\n      let {\r\n        chunkIdx\r\n      } = intersects[i];\r\n      if (chunkIdx === undefined) {\r\n        continue;\r\n      }\r\n      chunkIdx = chunkIdx / segCount | 0;\r\n      intersects[i].chunkIdx = chunkIdx;\r\n    }\r\n  }\r\n  setColor(chunkIdx, colorVal) {\r\n    const chunkSize = this._chunkSize;\r\n    for (let i = chunkIdx * chunkSize, end = i + chunkSize; i < end; ++i) {\r\n      super.setColor(i, colorVal);\r\n    }\r\n  }\r\n  setSegment(chunkIdx, segIdx, pos1, pos2) {\r\n    const chunkSize = this._chunkSize;\r\n    const idx = chunkIdx * chunkSize + segIdx;\r\n    super.setSegment(idx, pos1, pos2);\r\n    if (this._collisionGeo) {\r\n      this._collisionGeo.setItem(chunkIdx * chunkSize + segIdx, pos1, pos2, COLLISION_RAD);\r\n    }\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n  setOpacity(chunkIndices, value) {\r\n    const chunkSize = this._chunkSize;\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      const left = chunkIndices[i] * chunkSize;\r\n      super.setOpacity(left, left + chunkSize - 1, value);\r\n    }\r\n  }\r\n  getSubset(chunkIndices) {\r\n    const instanceCount = chunkIndices.length;\r\n    const chunkSize = this._chunkSize;\r\n    const subset = new ChunkedLinesGeometry(instanceCount, chunkSize, false);\r\n    for (let i = 0, n = chunkIndices.length; i < n; ++i) {\r\n      const dstPtOffset = i * chunkSize;\r\n      const startSegIdx = chunkIndices[i] * chunkSize;\r\n      subset.setSegments(dstPtOffset, this.getSubsetSegments(startSegIdx, chunkSize));\r\n      subset.setColors(dstPtOffset, this.getSubsetColors(startSegIdx, chunkSize));\r\n    }\r\n    subset.boundingSphere = this.boundingSphere;\r\n    subset.boundingBox = this.boundingBox;\r\n    return [subset];\r\n  }\r\n  _init(chunkSize) {\r\n    this._chunkSize = chunkSize;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_ChunkedLinesGeometry = (ChunkedLinesGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/TwoColorLinesGeometry.js\r\n\r\n\r\n\r\nconst TwoColorLinesGeometry_COLLISION_RAD = 0.3;\r\nconst TwoColorLinesGeometry_tmpVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nclass TwoColorLinesGeometry extends geometries_LinesGeometry {\r\n  constructor(segmentsCount) {\r\n    super(segmentsCount * 2);\r\n    this._init(segmentsCount);\r\n    this._collisionGeo = new geometries_Simple2CCylindersGeometry(segmentsCount, 3);\r\n  }\r\n  setItem(itemIdx, botPos, topPos) {\r\n    this._collisionGeo.setItem(itemIdx, botPos, topPos, TwoColorLinesGeometry_COLLISION_RAD);\r\n    const offset = 2 * itemIdx; // there are two points per segment\r\n    TwoColorLinesGeometry_tmpVector.lerpVectors(botPos, topPos, 0.5);\r\n    super.setSegment(offset, botPos, TwoColorLinesGeometry_tmpVector);\r\n    super.setSegment(offset + 1, TwoColorLinesGeometry_tmpVector, topPos);\r\n  }\r\n  setColor(itemIdx, colorVal1, colorVal2) {\r\n    const offset = 2 * itemIdx; // there are two points per segment\r\n    super.setColor(offset, colorVal1);\r\n    super.setColor(offset + 1, colorVal2);\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    if (this._collisionGeo) {\r\n      this._collisionGeo.raycast(raycaster, intersects);\r\n    }\r\n  }\r\n  getSubset(segmentIndices) {\r\n    const instanceCount = segmentIndices.length;\r\n    const subset = new TwoColorLinesGeometry(instanceCount, false);\r\n    for (let i = 0, n = instanceCount; i < n; ++i) {\r\n      const startSegIdx = segmentIndices[i];\r\n      subset.setSegments(i, this.getSubsetSegments(startSegIdx, 1));\r\n      subset.setColors(i, this.getSubsetColors(startSegIdx, 1));\r\n    }\r\n    subset.boundingSphere = this.boundingSphere;\r\n    subset.boundingBox = this.boundingBox;\r\n    return [subset];\r\n  }\r\n  _init(segmentsCount) {\r\n    this._segCounts = segmentsCount * 2;\r\n  }\r\n}\r\n// (???)parent = LinesGeometry.prototype;\r\n\r\n/* harmony default export */ const geometries_TwoColorLinesGeometry = (TwoColorLinesGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/CrossGeometry.js\r\n\r\n\r\n\r\nconst vectors = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 0, 0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1, 0, 0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 1, 0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, -1, 0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 1), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, -1)];\r\nconst vecCount = vectors.length;\r\nconst tempPos1 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nconst tempPos2 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\nclass CrossGeometry extends geometries_SphereCollisionGeo(geometries_ChunkedLinesGeometry) {\r\n  constructor(chunksCount) {\r\n    super(chunksCount, chunksCount, vecCount / 2 | 0, false);\r\n  }\r\n  setItem(itemIdx, itemPos, itemRad) {\r\n    this.setSphere(itemIdx, itemPos, itemRad);\r\n    for (let i = 0; i < vecCount / 2; ++i) {\r\n      const first = i * 2;\r\n      tempPos1.x = itemPos.x + vectors[first].x * itemRad;\r\n      tempPos1.y = itemPos.y + vectors[first].y * itemRad;\r\n      tempPos1.z = itemPos.z + vectors[first].z * itemRad;\r\n      const second = first + 1;\r\n      tempPos2.x = itemPos.x + vectors[second].x * itemRad;\r\n      tempPos2.y = itemPos.y + vectors[second].y * itemRad;\r\n      tempPos2.z = itemPos.z + vectors[second].z * itemRad;\r\n      this.setSegment(itemIdx, i, tempPos1, tempPos2);\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const geometries_CrossGeometry = (CrossGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsoSurfaceGeometry.js\r\n\r\n\r\nconst POS_RAD_SIZE = 4;\r\nconst IsoSurfaceGeometry_COLOR_SIZE = 3;\r\nconst IsoSurfaceGeometry_tmpColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\n\r\n/**\r\n * This is a base class for isosurface algorithms.\r\n * @param spheresCount - number of atoms/spheres\r\n * @param opts - geometry specific options\r\n * @constructor\r\n */\r\nclass IsoSurfaceGeometry extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry {\r\n  constructor(spheresCount, opts) {\r\n    super();\r\n    this._opts = opts;\r\n    this.zClip = this._opts.zClip;\r\n    this._posRad = utils.allocateTyped(Float32Array, spheresCount * POS_RAD_SIZE);\r\n    this._colors = utils.allocateTyped(Float32Array, spheresCount * IsoSurfaceGeometry_COLOR_SIZE);\r\n  }\r\n  setItem(chunkIdx, pos, radius) {\r\n    const posRad = this._posRad;\r\n    let idx = POS_RAD_SIZE * chunkIdx;\r\n    posRad[idx++] = pos.x;\r\n    posRad[idx++] = pos.y;\r\n    posRad[idx++] = pos.z;\r\n    posRad[idx] = radius;\r\n  }\r\n  setColor(chunkIdx, colorVal) {\r\n    IsoSurfaceGeometry_tmpColor.set(colorVal);\r\n    const colors = this._colors;\r\n    let idx = IsoSurfaceGeometry_COLOR_SIZE * chunkIdx;\r\n    colors[idx++] = IsoSurfaceGeometry_tmpColor.r;\r\n    colors[idx++] = IsoSurfaceGeometry_tmpColor.g;\r\n    colors[idx] = IsoSurfaceGeometry_tmpColor.b;\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n    this.computeBoundingSphere();\r\n  }\r\n  finishUpdate() {\r\n    this._build();\r\n  }\r\n  setOpacity() {\r\n    // not implemented\r\n  }\r\n  raycast() {}\r\n  getSubset() {\r\n    return [];\r\n  }\r\n}\r\n/* harmony default export */ const geometries_IsoSurfaceGeometry = (IsoSurfaceGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsoSurfaceMarchCube.js\r\n\r\n\r\n/**\r\n * Class for marching cube\r\n * Stores 8 points and 8 float values are stored together in linear array\r\n * Int values for has intersection or not - in integer32 linear array\r\n * Int values for bits flags - in integer32 linear array\r\n *\r\n */\r\nclass IsoSurfaceMarchCube {\r\n  constructor() {\r\n    this.pointsValuesLinear = null;\r\n    this.hasIntersection = null;\r\n    this.bitsInside = null;\r\n  }\r\n  create(numCellsPerSide) {\r\n    const vx7000000 = 0x7000000;\r\n    const n3 = numCellsPerSide * numCellsPerSide * numCellsPerSide;\r\n    if (n3 > vx7000000) {\r\n      throw new Error('Too large cube dimension: lead to memory huge uasge');\r\n    }\r\n    this.pointsValuesLinear = utils.allocateTyped(Float32Array, (2 << 2 + 2) * n3);\r\n    this.hasIntersection = utils.allocateTyped(Int32Array, n3);\r\n    this.bitsInside = utils.allocateTyped(Int32Array, n3);\r\n    return 0;\r\n  }\r\n  destroy() {\r\n    this.bitsInside = null;\r\n    this.hasIntersection = null;\r\n    this.pointsValuesLinear = null;\r\n  }\r\n}\r\n\r\n/* eslint-disable no-magic-numbers */\r\nIsoSurfaceMarchCube.prototype.striIndicesMarchCube = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n/* eslint-enable no-magic-numbers */\r\n\r\n/* harmony default export */ const geometries_IsoSurfaceMarchCube = (IsoSurfaceMarchCube);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsoSurface.js\r\n\r\n\r\n\r\nconst edgeTable = [0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230, 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0];\r\nfunction _voxelGradientFast(v, point, grad) {\r\n  const g = v.getValue(point.x, point.y, point.z);\r\n  grad.set(g[0], g[1], g[2]);\r\n}\r\n\r\n// Helper class GridCell\r\nclass GridCell {\r\n  constructor() {\r\n    this._arrSize = 8;\r\n    this.p = new Array(this._arrSize);\r\n    this.g = new Array(this._arrSize);\r\n    this.val = new Array(this._arrSize);\r\n    for (let i = 0; i < this._arrSize; ++i) {\r\n      this.p[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n      this.g[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    }\r\n    this.cubeIndex = 0;\r\n  }\r\n}\r\n\r\n// Helper class Triangle\r\nclass Triangle {\r\n  constructor() {\r\n    this.a = {\r\n      p: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n      n: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3()\r\n    };\r\n    this.b = {\r\n      p: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n      n: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3()\r\n    };\r\n    this.c = {\r\n      p: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n      n: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3()\r\n    };\r\n  }\r\n}\r\nfunction createArray(arrSize) {\r\n  const arr = new Array(arrSize);\r\n  for (let i = 0; i < arrSize; ++i) {\r\n    arr[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  }\r\n  return arr;\r\n}\r\nclass IsoSurface {\r\n  constructor() {\r\n    this._numTriangles = 0;\r\n    this._numVertices = 0;\r\n    this._position = [];\r\n    this._normals = [];\r\n    this._colors = null;\r\n    this._indices = [];\r\n    this._volumetricData = null;\r\n    this._xAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._yAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._zAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._xDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._yDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._zDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  }\r\n  _prepareAxesAndDirs() {\r\n    const volData = this._volumetricData;\r\n    const cellSize = volData.getCellSize();\r\n\r\n    // calculate cell axes\r\n    const xAxis = this._xAxis;\r\n    const yAxis = this._yAxis;\r\n    const zAxis = this._zAxis;\r\n    const xDir = this._xDir;\r\n    const yDir = this._yDir;\r\n    const zDir = this._zDir;\r\n    xAxis.set(cellSize.x, 0, 0);\r\n    yAxis.set(0, cellSize.y, 0);\r\n    zAxis.set(0, 0, cellSize.z);\r\n    xDir.set(1, 0, 0);\r\n    yDir.set(0, 1, 0);\r\n    zDir.set(0, 0, 1);\r\n\r\n    // flip normals if coordinate system is in the wrong handedness\r\n    const tmp = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    tmp.crossVectors(xDir, yDir);\r\n    if (tmp.dot(zDir) < 0) {\r\n      xDir.negate();\r\n      yDir.negate();\r\n      zDir.negate();\r\n    }\r\n\r\n    // check that the grid is in the all-positive octant of the coordinate system\r\n    if (xDir.x < 0 || xDir.y < 0 || xDir.z < 0 || yDir.x < 0 || yDir.y < 0 || yDir.z < 0 || zDir.x < 0 || zDir.y < 0 || zDir.z < 0) {\r\n      return false;\r\n    }\r\n\r\n    // check that the grid is axis-aligned\r\n    const notZero = axe => Math.abs(axe) > Number.EPSILON;\r\n    return !(notZero(xAxis.y) || notZero(xAxis.z) || notZero(yAxis.x) || notZero(yAxis.z) || notZero(zAxis.x) || notZero(zAxis.y));\r\n  }\r\n  _vertexInterp(isoLevel, grid, ind1, ind2, vertex, normal) {\r\n    const p1 = grid.p[ind1];\r\n    const p2 = grid.p[ind2];\r\n    const n1 = grid.g[ind1];\r\n    const n2 = grid.g[ind2];\r\n    const valP1 = grid.val[ind1];\r\n    const valP2 = grid.val[ind2];\r\n    const isoDiffP1 = isoLevel - valP1;\r\n    const diffValP2P1 = valP2 - valP1;\r\n    let mu = 0.0;\r\n    if (Math.abs(diffValP2P1) > 0.0) {\r\n      mu = isoDiffP1 / diffValP2P1;\r\n    }\r\n    mu = mu > 1.0 ? 1.0 : mu;\r\n    vertex.lerpVectors(p1, p2, mu);\r\n    normal.lerpVectors(n1, n2, mu);\r\n  }\r\n  static _triTable = (() => geometries_IsoSurfaceMarchCube.prototype.striIndicesMarchCube)();\r\n  static _arrSize = 12;\r\n  static _firstIndices = [0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3];\r\n  static _secondIndices = [1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7];\r\n  static _vertexList = (() => createArray(IsoSurface._arrSize))();\r\n  static _normalList = (() => createArray(IsoSurface._arrSize))();\r\n  _polygonize(grid, isoLevel, triangles) {\r\n    const {\r\n      cubeIndex\r\n    } = grid;\r\n    let i = 0;\r\n    const arrSize = IsoSurface._arrSize;\r\n    const firstIndices = IsoSurface._firstIndices;\r\n    const secondIndices = IsoSurface._secondIndices;\r\n    const vertexList = IsoSurface._vertexList;\r\n    const normalList = IsoSurface._normalList;\r\n    for (; i < arrSize; ++i) {\r\n      if (edgeTable[cubeIndex] & 1 << i) {\r\n        this._vertexInterp(isoLevel, grid, firstIndices[i], secondIndices[i], vertexList[i], normalList[i]);\r\n      }\r\n    }\r\n    let triCount = 0;\r\n    const triTblIdx = cubeIndex * 16;\r\n    const triTable = IsoSurface._triTable;\r\n    for (i = 0; triTable[triTblIdx + i] !== -1; i += 3) {\r\n      triangles[triCount].a.p.copy(vertexList[triTable[triTblIdx + i]]);\r\n      triangles[triCount].a.n.copy(normalList[triTable[triTblIdx + i]]);\r\n      triangles[triCount].b.p.copy(vertexList[triTable[triTblIdx + i + 1]]);\r\n      triangles[triCount].b.n.copy(normalList[triTable[triTblIdx + i + 1]]);\r\n      triangles[triCount].c.p.copy(vertexList[triTable[triTblIdx + i + 2]]);\r\n      triangles[triCount].c.n.copy(normalList[triTable[triTblIdx + i + 2]]);\r\n      ++triCount;\r\n    }\r\n    return triCount;\r\n  }\r\n  _doGridPosNorms(isoValue, step, appendSimple) {\r\n    const vol = this._volumetricData;\r\n    const volData = this._volumetricData.getData();\r\n    const dim = vol.getDimensions();\r\n    const xSize = dim[0];\r\n    const ySize = dim[1];\r\n    const zSize = dim[2];\r\n    const stepX = step * vol.getStrideX();\r\n    const stepY = step * vol.getStrideY();\r\n    const stepZ = step * vol.getStrideZ();\r\n    const gc = new GridCell();\r\n    const gcVal = gc.val;\r\n    const gcValSize = gc.val.length;\r\n    const additions = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0),\r\n    // 0\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(step, 0, 0),\r\n    // 1\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(step, step, 0),\r\n    // 2\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, step, 0),\r\n    // 3\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, step),\r\n    // 4\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(step, 0, step),\r\n    // 5\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(step, step, step),\r\n    // 6\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, step, step) // 7\r\n    ];\r\n    const tmpTriCount = 5;\r\n    const triangles = new Array(tmpTriCount);\r\n    for (let j = 0; j < tmpTriCount; ++j) {\r\n      triangles[j] = new Triangle();\r\n    }\r\n    let appendVertex;\r\n    const self = this;\r\n    const positions = this._position;\r\n    const normals = this._normals;\r\n    if (appendSimple) {\r\n      // Special case for axis-aligned grid with positive unit vector normals\r\n      appendVertex = function () {\r\n        const axis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(self._xAxis.x, self._yAxis.y, self._zAxis.z);\r\n        return function (triVertex) {\r\n          const vertex = triVertex.p.clone();\r\n          vertex.multiply(axis);\r\n          positions.push(vertex.add(self._origin));\r\n          normals.push(triVertex.n.clone());\r\n        };\r\n      }();\r\n    } else {\r\n      appendVertex = function () {\r\n        const posMtx = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix3();\r\n        posMtx.set(self._xAxis.x, self._yAxis.x, self._zAxis.x, self._xAxis.y, self._yAxis.y, self._zAxis.y, self._xAxis.z, self._yAxis.z, self._zAxis.z);\r\n        const normMtx = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix3();\r\n        normMtx.set(self._xDir.x, self._yDir.x, self._zDir.x, self._xDir.y, self._yDir.y, self._zDir.y, self._xDir.z, self._yDir.z, self._zDir.z);\r\n        return function (triVertex) {\r\n          positions.push(triVertex.p.clone().applyMatrix3(posMtx).add(self._origin));\r\n          normals.push(triVertex.n.clone().applyMatrix3(normMtx));\r\n        };\r\n      }();\r\n    }\r\n    const indices = this._indices;\r\n    let globTriCount = 0;\r\n    for (let z = 0; z < zSize - step; z += step) {\r\n      for (let y = 0; y < ySize - step; y += step) {\r\n        let idx = vol.getDirectIdx(0, y, z);\r\n        for (let x = 0; x < xSize - step; x += step, idx += stepX) {\r\n          /* eslint-disable no-multi-spaces */\r\n          /* eslint-disable computed-property-spacing */\r\n          gcVal[0] = volData[idx];\r\n          gcVal[1] = volData[idx + stepX];\r\n          gcVal[3] = volData[idx + stepY];\r\n          gcVal[2] = volData[idx + stepX + stepY];\r\n          gcVal[4] = volData[idx + stepZ];\r\n          gcVal[5] = volData[idx + stepX + stepZ];\r\n          gcVal[7] = volData[idx + stepY + stepZ];\r\n          gcVal[6] = volData[idx + stepX + stepY + stepZ];\r\n          /* eslint-enable no-multi-spaces */\r\n          /* eslint-enable computed-property-spacing */\r\n\r\n          // Determine the index into the edge table which\r\n          // tells us which vertices are inside of the surface\r\n          let cubeIndex = 0;\r\n          let i = 0;\r\n          for (; i < gcValSize; ++i) {\r\n            if (gcVal[i] < isoValue) {\r\n              cubeIndex |= 1 << i;\r\n            }\r\n          }\r\n          if (edgeTable[cubeIndex] === 0) {\r\n            continue;\r\n          }\r\n          gc.cubeIndex = cubeIndex;\r\n          for (i = 0; i < gcValSize; ++i) {\r\n            gc.p[i].set(x + additions[i].x, y + additions[i].y, z + additions[i].z);\r\n            _voxelGradientFast(this._gradient, gc.p[i], gc.g[i]);\r\n          }\r\n\r\n          // calculate vertices and facets for this cube,\r\n          // calculate normals by interpolating between the negated\r\n          // normalized volume gradients for the 8 reference voxels\r\n          const triCount = this._polygonize(gc, isoValue, triangles);\r\n          globTriCount += triCount;\r\n\r\n          // append triangles using different techniques\r\n          for (i = 0; i < triCount; ++i) {\r\n            indices.push(this._numTriangles * 3);\r\n            indices.push(this._numTriangles * 3 + 1);\r\n            indices.push(this._numTriangles * 3 + 2);\r\n            ++this._numTriangles;\r\n            appendVertex(triangles[i].a);\r\n            appendVertex(triangles[i].b);\r\n            appendVertex(triangles[i].c);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return globTriCount;\r\n  }\r\n  compute(volData, origin, isoValue, step) {\r\n    this._volumetricData = volData;\r\n    this._origin = origin;\r\n    this._gradient = volData.computeGradient();\r\n    this._doGridPosNorms(isoValue, step, this._prepareAxesAndDirs());\r\n  }\r\n  _remapIndices(vertexMap, idcCount) {\r\n    const indices = this._indices;\r\n    const newIndices = utils.allocateTyped(Uint32Array, idcCount);\r\n    for (let i = 0; i < idcCount; ++i) {\r\n      indices[i] = vertexMap[indices[i]];\r\n      newIndices[i] = indices[i];\r\n    }\r\n    this._indices = newIndices;\r\n  }\r\n  _remapVertices(vertices, normals, count) {\r\n    const newPositions = utils.allocateTyped(Float32Array, count * 3);\r\n    const newNormals = utils.allocateTyped(Float32Array, count * 3);\r\n    for (let i = 0; i < count; ++i) {\r\n      const pos = vertices[i];\r\n      newPositions[i * 3] = pos.x;\r\n      newPositions[i * 3 + 1] = pos.y;\r\n      newPositions[i * 3 + 2] = pos.z;\r\n      const norm = normals[i].normalize();\r\n      newNormals[i * 3] = norm.x;\r\n      newNormals[i * 3 + 1] = norm.y;\r\n      newNormals[i * 3 + 2] = norm.z;\r\n    }\r\n    this._position = newPositions;\r\n    this._normals = newNormals;\r\n  }\r\n  vertexFusion(offset, len) {\r\n    const faceVer = this._indices.length;\r\n    const vertices = this._position;\r\n    const normals = this._normals;\r\n    const oldVerCount = vertices.length | 0;\r\n    if (faceVer === 0 || oldVerCount === 0) {\r\n      return;\r\n    }\r\n    const vMap = utils.allocateTyped(Uint32Array, oldVerCount);\r\n    vMap[0] = 0;\r\n    let newVer = 1;\r\n    let i = 1;\r\n    for (; i < oldVerCount; ++i) {\r\n      const start = newVer - offset < 0 ? 0 : newVer - offset;\r\n      const end = start + len > newVer ? newVer : start + len;\r\n      let matchedIndex = -1;\r\n      for (let j = start; j < end; ++j) {\r\n        if (Math.abs(vertices[i] - vertices[j]) < Number.EPSILON) {\r\n          matchedIndex = j;\r\n          break;\r\n        }\r\n      }\r\n      if (matchedIndex !== -1) {\r\n        vMap[i] = matchedIndex;\r\n      } else {\r\n        vertices[newVer].copy(vertices[i]);\r\n        normals[newVer].copy(normals[i]);\r\n        vMap[i] = newVer;\r\n        ++newVer;\r\n      }\r\n    }\r\n    this._remapIndices(vMap, faceVer);\r\n    this._remapVertices(vertices, normals, newVer);\r\n  }\r\n\r\n  // Assign per-vertex colors from a volumetric texture map (same dimensions as the original volumetric data).\r\n  // Along with color dominating atom is determined for each vertex\r\n  // and vertices with atom out of \"visible\" subset get filtered out.\r\n  // XXX only handles orthogonal volumes currently\r\n  setColorVolTex(colorMap, atomMap, atomWeightMap, visibilitySelector) {\r\n    let i;\r\n    let idx;\r\n    const numVerts = this._position.length / 3;\r\n    const vertices = this._position;\r\n    const origin = this._origin;\r\n    const dim = this._volumetricData.getDimensions();\r\n    const xs = dim[0] - 1;\r\n    const ys = dim[1] - 1;\r\n    const zs = dim[2] - 1;\r\n    const colorData = colorMap.getData();\r\n    const strideX = colorMap.getStrideX();\r\n    const strideY = colorMap.getStrideY();\r\n    const strideZ = colorMap.getStrideZ();\r\n    let atomWeightData;\r\n    let atomStrideX;\r\n    let atomStrideY;\r\n    let atomStrideZ;\r\n    if (visibilitySelector !== null) {\r\n      atomWeightData = atomWeightMap.getData();\r\n      atomStrideX = atomWeightMap.getStrideX();\r\n      atomStrideY = atomWeightMap.getStrideY();\r\n      atomStrideZ = atomWeightMap.getStrideZ();\r\n    }\r\n    const xInv = 1.0 / this._xAxis.x;\r\n    const yInv = 1.0 / this._yAxis.y;\r\n    const zInv = 1.0 / this._zAxis.z;\r\n    let atomLookup = [];\r\n    let atomWeights = [];\r\n    const colors = utils.allocateTyped(Float32Array, numVerts * 3);\r\n    function interp(mu, idx1, idx2, c) {\r\n      c[0] = (1 - mu) * colorData[idx1] + mu * colorData[idx2];\r\n      c[1] = (1 - mu) * colorData[idx1 + 1] + mu * colorData[idx2 + 1];\r\n      c[2] = (1 - mu) * colorData[idx1 + 2] + mu * colorData[idx2 + 2];\r\n    }\r\n    function collectWeight(ai, coefX, coefY, coefZ) {\r\n      const a = atomMap[ai]; // atomWeightMap is a scalar field, so index into atom map should be the same\r\n      if (a != null) {\r\n        atomLookup[a.index] = a;\r\n        const w = coefX * coefY * coefZ * atomWeightData[ai];\r\n        if (typeof atomWeights[a.index] === 'undefined') {\r\n          atomWeights[a.index] = w;\r\n        } else {\r\n          atomWeights[a.index] += w;\r\n        }\r\n      }\r\n    }\r\n    const vMap = utils.allocateTyped(Int32Array, numVerts);\r\n    let newVerCount = 0;\r\n    for (i = 0; i < numVerts; i++) {\r\n      const ind = i * 3;\r\n      const vx = (vertices[ind] - origin.x) * xInv;\r\n      const vy = (vertices[ind + 1] - origin.y) * yInv;\r\n      const vz = (vertices[ind + 2] - origin.z) * zInv;\r\n      const x = Math.min(Math.max(vx, 0), xs) | 0;\r\n      const y = Math.min(Math.max(vy, 0), ys) | 0;\r\n      const z = Math.min(Math.max(vz, 0), zs) | 0;\r\n      const mux = vx - x;\r\n      const muy = vy - y;\r\n      const muz = vz - z;\r\n      if (visibilitySelector != null) {\r\n        // collect atom weights\r\n        atomLookup = [];\r\n        atomWeights = [];\r\n        idx = atomWeightMap.getDirectIdx(x, y, z);\r\n        collectWeight(idx, 1 - mux, 1 - muy, 1 - muz);\r\n        collectWeight(idx + atomStrideX, mux, 1 - muy, 1 - muz);\r\n        collectWeight(idx + atomStrideY, 1 - mux, muy, 1 - muz);\r\n        collectWeight(idx + atomStrideX + atomStrideY, mux, muy, 1 - muz);\r\n        collectWeight(idx + atomStrideZ, 1 - mux, 1 - muy, muz);\r\n        collectWeight(idx + atomStrideX + atomStrideZ, mux, 1 - muy, muz);\r\n        collectWeight(idx + atomStrideY + atomStrideZ, 1 - mux, muy, muz);\r\n        collectWeight(idx + atomStrideX + atomStrideY + atomStrideZ, mux, muy, muz);\r\n\r\n        // find dominant atom\r\n        let maxWeight = 0.0;\r\n        let dominantIdx = -1;\r\n        for (const atomIdx in atomWeights) {\r\n          if (atomWeights[atomIdx] > maxWeight) {\r\n            dominantIdx = atomIdx;\r\n            maxWeight = atomWeights[atomIdx];\r\n          }\r\n        }\r\n        if (dominantIdx < 0 || !visibilitySelector.includesAtom(atomLookup[dominantIdx])) {\r\n          // this vertex doesn't belong to visible subset and will be skipped\r\n          vMap[i] = -1;\r\n          continue;\r\n        }\r\n      }\r\n      vMap[i] = newVerCount++;\r\n\r\n      // color tri-linear interpolation\r\n      const dx = x < xs ? strideX : 0;\r\n      const dy = y < ys ? strideY : 0;\r\n      const dz = z < zs ? strideZ : 0;\r\n      const c0 = [0, 0, 0];\r\n      const c1 = [0, 0, 0];\r\n      const c2 = [0, 0, 0];\r\n      const c3 = [0, 0, 0];\r\n      idx = colorMap.getDirectIdx(x, y, z);\r\n      interp(mux, idx, idx + dx, c0);\r\n      interp(mux, idx + dy, idx + dx + dy, c1);\r\n      interp(mux, idx + dz, idx + dx + dz, c2);\r\n      interp(mux, idx + dy + dz, idx + dx + dy + dz, c3);\r\n      const cz0 = [0, 0, 0];\r\n      cz0[0] = (1 - muy) * c0[0] + muy * c1[0];\r\n      cz0[1] = (1 - muy) * c0[1] + muy * c1[1];\r\n      cz0[2] = (1 - muy) * c0[2] + muy * c1[2];\r\n      const cz1 = [0, 0, 0];\r\n      cz1[0] = (1 - muy) * c2[0] + muy * c3[0];\r\n      cz1[1] = (1 - muy) * c2[1] + muy * c3[1];\r\n      cz1[2] = (1 - muy) * c2[2] + muy * c3[2];\r\n      colors[ind] = (1 - muz) * cz0[0] + muz * cz1[0];\r\n      colors[ind + 1] = (1 - muz) * cz0[1] + muz * cz1[1];\r\n      colors[ind + 2] = (1 - muz) * cz0[2] + muz * cz1[2];\r\n    }\r\n    this._colors = colors;\r\n    if (visibilitySelector != null) {\r\n      // shift visible vertices towards beginning of array\r\n      for (i = 0; i < numVerts; ++i) {\r\n        const j = vMap[i];\r\n        if (j < 0) {\r\n          continue;\r\n        }\r\n\r\n        // assert: j <= i\r\n        this._position[j * 3] = this._position[i * 3];\r\n        this._position[j * 3 + 1] = this._position[i * 3 + 1];\r\n        this._position[j * 3 + 2] = this._position[i * 3 + 2];\r\n        this._normals[j * 3] = this._normals[i * 3];\r\n        this._normals[j * 3 + 1] = this._normals[i * 3 + 1];\r\n        this._normals[j * 3 + 2] = this._normals[i * 3 + 2];\r\n        this._colors[j * 3] = this._colors[i * 3];\r\n        this._colors[j * 3 + 1] = this._colors[i * 3 + 1];\r\n        this._colors[j * 3 + 2] = this._colors[i * 3 + 2];\r\n      }\r\n\r\n      // rebuild index list\r\n      const numTriangles = this._indices.length / 3;\r\n      let newTriCount = 0;\r\n      for (i = 0; i < numTriangles; ++i) {\r\n        const i0 = vMap[this._indices[3 * i]];\r\n        const i1 = vMap[this._indices[3 * i + 1]];\r\n        const i2 = vMap[this._indices[3 * i + 2]];\r\n        if (i0 >= 0 && i1 >= 0 && i2 >= 0) {\r\n          this._indices[3 * newTriCount] = i0;\r\n          this._indices[3 * newTriCount + 1] = i1;\r\n          this._indices[3 * newTriCount + 2] = i2;\r\n          ++newTriCount;\r\n        }\r\n      }\r\n\r\n      // shrink arrays to data size\r\n      this._position = new Float32Array(this._position.buffer.slice(0, newVerCount * 3 * 4));\r\n      this._normals = new Float32Array(this._normals.buffer.slice(0, newVerCount * 3 * 4));\r\n      this._colors = new Float32Array(this._colors.buffer.slice(0, newVerCount * 3 * 4));\r\n      this._indices = new Uint32Array(this._indices.buffer.slice(0, newTriCount * 3 * 4));\r\n    }\r\n  }\r\n  toMesh() {\r\n    const geo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    geo.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._indices, 1));\r\n    geo.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._position, 3));\r\n    geo.setAttribute('normal', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._normals, 3));\r\n    geo.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(this._colors, 3));\r\n    geo.computeBoundingSphere();\r\n    return geo;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_IsoSurface = (IsoSurface);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/VolumeSurfaceGeometry.js\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * This is a base class for volumetric maps based isosurface algorithms.\r\n * @param spheresCount - number of atoms/spheres\r\n * @param opts - geometry specific options\r\n * @constructor\r\n */\r\n\r\nclass VolumeSurfaceGeometry extends geometries_IsoSurfaceGeometry {\r\n  _build() {\r\n    const params = this._opts;\r\n    this.numVoxels = [128, 128, 128];\r\n    this.xAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1.0, 0.0, 0.0);\r\n    this.yAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 1.0, 0.0);\r\n    this.zAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 1.0);\r\n    this.origin = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n    this._visibilitySelector = params.visibilitySelector;\r\n    this._calcSurface(params);\r\n  }\r\n  _findMinMax(posRadArray) {\r\n    const itemSize = 4;\r\n    const itemsCount = posRadArray.length / itemSize;\r\n    const maxPosRad = [posRadArray[0], posRadArray[1], posRadArray[2], posRadArray[3]];\r\n    const minPosRad = [posRadArray[0], posRadArray[1], posRadArray[2], posRadArray[3]];\r\n    for (let i = 1; i < itemsCount; ++i) {\r\n      const ind = i * itemSize;\r\n      for (let itemIdx = 0; itemIdx < itemSize; ++itemIdx) {\r\n        const tmpVal = posRadArray[ind + itemIdx];\r\n        maxPosRad[itemIdx] = Math.max(tmpVal, maxPosRad[itemIdx]);\r\n        minPosRad[itemIdx] = Math.min(tmpVal, minPosRad[itemIdx]);\r\n      }\r\n    }\r\n    return {\r\n      maxPosRad,\r\n      minPosRad\r\n    };\r\n  }\r\n  _findNumVoxels(posRadArray, params) {\r\n    const {\r\n      numVoxels\r\n    } = this;\r\n    const minMaxValues = this._findMinMax(posRadArray);\r\n    const minCoordRad = minMaxValues.minPosRad;\r\n    const maxCoordRad = minMaxValues.maxPosRad;\r\n\r\n    // minrad\r\n    if (minCoordRad[3] > 4.0) {\r\n      params.gridSpacing *= minCoordRad[3];\r\n    }\r\n    let gridPadding = params.radScale * maxCoordRad[3] * 1.7;\r\n    let padRad = gridPadding;\r\n    padRad = 0.65 * Math.sqrt(4.0 / 3.0 * Math.PI * padRad * padRad * padRad);\r\n    gridPadding = Math.max(gridPadding, padRad);\r\n    let i = 0;\r\n    for (; i < 3; ++i) {\r\n      minCoordRad[i] -= gridPadding;\r\n      maxCoordRad[i] += gridPadding;\r\n    }\r\n    for (i = 0; i < 3; ++i) {\r\n      numVoxels[i] = Math.ceil((maxCoordRad[i] - minCoordRad[i]) / params.gridSpacing);\r\n    }\r\n    this.xAxis.x = (numVoxels[0] - 1) * params.gridSpacing;\r\n    this.yAxis.y = (numVoxels[1] - 1) * params.gridSpacing;\r\n    this.zAxis.z = (numVoxels[2] - 1) * params.gridSpacing;\r\n    [this.origin.x, this.origin.y, this.origin.z] = minCoordRad;\r\n    return {\r\n      bbox: minMaxValues,\r\n      dim: numVoxels\r\n    };\r\n  }\r\n  _makeSurface(surface, params) {\r\n    const isoSurf = new geometries_IsoSurface();\r\n    isoSurf.compute(surface.volMap, this.origin, params.isoValue, 1);\r\n    isoSurf.vertexFusion(9, 9); // normalization is included\r\n\r\n    if (isoSurf._numTriangles > 0) {\r\n      isoSurf.setColorVolTex(surface.volTexMap, surface.atomMap, surface.atomWeightMap, this._visibilitySelector);\r\n      this.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(isoSurf._indices, 1));\r\n      this.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(isoSurf._position, 3));\r\n      this.setAttribute('normal', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(isoSurf._normals, 3));\r\n      this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(isoSurf._colors, 3));\r\n    } else {\r\n      // geometry should have at least empty position attributes to be processed in wireframe mode by three.js\r\n      this.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(utils.allocateTyped(Float32Array, 0), 3));\r\n    }\r\n  }\r\n  _calcSurface(params) {\r\n    const packedArrays = {\r\n      posRad: this._posRad,\r\n      colors: this._colors,\r\n      atoms: this._opts.atoms\r\n    };\r\n    if (packedArrays.posRad.length === 0) {\r\n      return;\r\n    }\r\n    const boundaries = this._findNumVoxels(packedArrays.posRad, params);\r\n    const box = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3(this.origin, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(this.xAxis.x, this.yAxis.y, this.zAxis.z).add(this.origin));\r\n    const surface = this._computeSurface(packedArrays, box, boundaries, params);\r\n    this._makeSurface(surface, params);\r\n  }\r\n}\r\n/* harmony default export */ const geometries_VolumeSurfaceGeometry = (VolumeSurfaceGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/QuickSurfGeometry.js\r\n\r\n\r\nconst {\r\n  Volume: QuickSurfGeometry_Volume\r\n} = chem;\r\n\r\n/**\r\n * This class implements 'quick' isosurface geometry generation algorithm.\r\n * @param spheresCount - number of atoms/spheres\r\n * @param opts - geometry specific options\r\n * @constructor\r\n */\r\n\r\nclass QuickSurfGeometry extends geometries_VolumeSurfaceGeometry {\r\n  _computeSurface(packedArrays, box, boundaries, params) {\r\n    // beware of shifting this multiple times!\r\n    this._shiftByOrigin(packedArrays.posRad);\r\n    const surface = {\r\n      volMap: new QuickSurfGeometry_Volume(Float32Array, this.numVoxels, box),\r\n      volTexMap: new QuickSurfGeometry_Volume(Float32Array, this.numVoxels, box, 3)\r\n    };\r\n    if (this._visibilitySelector != null) {\r\n      surface.atomMap = [];\r\n      surface.atomWeightMap = new QuickSurfGeometry_Volume(Float32Array, this.numVoxels, box);\r\n    }\r\n    this.gaussdensity(surface, packedArrays, null, params);\r\n    return surface;\r\n  }\r\n  gaussdensity(surface, packedArrays, atomicNum, params) {\r\n    const numAtoms = packedArrays.posRad.length / 4;\r\n    const {\r\n      posRad,\r\n      colors\r\n    } = packedArrays;\r\n    const {\r\n      numVoxels\r\n    } = this;\r\n    const {\r\n      radScale,\r\n      gaussLim,\r\n      gridSpacing\r\n    } = params;\r\n    const invIsoValue = 1.0 / params.isoValue;\r\n    const invGridSpacing = 1.0 / gridSpacing;\r\n    const maxVoxelX = numVoxels[0] - 1;\r\n    const maxVoxelY = numVoxels[1] - 1;\r\n    const maxVoxelZ = numVoxels[2] - 1;\r\n    // TODO is densityMap and volTexMap initialized?\r\n\r\n    const {\r\n      volMap,\r\n      volTexMap\r\n    } = surface;\r\n    const volData = volMap.getData();\r\n    const strideX = volMap.getStrideX();\r\n    const volTexData = volTexMap.getData();\r\n    const texStrideX = volTexMap.getStrideX();\r\n    let atomWeightData;\r\n    if (this._visibilitySelector != null) {\r\n      atomWeightData = surface.atomWeightMap.getData();\r\n    }\r\n    const {\r\n      atomMap\r\n    } = surface;\r\n    for (let i = 0; i < numAtoms; ++i) {\r\n      const ind = i * 4;\r\n      const scaledRad = posRad[ind + 3] * radScale;\r\n      const atomicNumFactor = atomicNum === null ? 1.0 : atomicNum[i];\r\n      const radInv = 1 / (2 * scaledRad * scaledRad);\r\n      let radLim = gaussLim * scaledRad;\r\n      const radLim2 = radLim * radLim;\r\n      radLim *= invGridSpacing;\r\n      let tmp = posRad[ind] * invGridSpacing;\r\n      const xMin = Math.max(tmp - radLim | 0, 0);\r\n      const xMax = Math.min(tmp + radLim | 0, maxVoxelX);\r\n      tmp = posRad[ind + 1] * invGridSpacing;\r\n      const yMin = Math.max(tmp - radLim | 0, 0);\r\n      const yMax = Math.min(tmp + radLim | 0, maxVoxelY);\r\n      tmp = posRad[ind + 2] * invGridSpacing;\r\n      const zMin = Math.max(tmp - radLim | 0, 0);\r\n      const zMax = Math.min(tmp + radLim | 0, maxVoxelZ);\r\n      let dz = zMin * gridSpacing - posRad[ind + 2];\r\n      for (let z = zMin; z <= zMax; ++z, dz += gridSpacing) {\r\n        let dy = yMin * gridSpacing - posRad[ind + 1];\r\n        for (let y = yMin; y <= yMax; ++y, dy += gridSpacing) {\r\n          const dy2dz2 = dy * dy + dz * dz;\r\n          if (dy2dz2 >= radLim2) {\r\n            continue;\r\n          }\r\n          let addr = volMap.getDirectIdx(xMin, y, z);\r\n          let texAddr = volTexMap.getDirectIdx(xMin, y, z);\r\n          let dx = xMin * gridSpacing - posRad[ind];\r\n          for (let x = xMin; x <= xMax; ++x, dx += gridSpacing, addr += strideX, texAddr += texStrideX) {\r\n            const r2 = dx * dx + dy2dz2;\r\n            const expVal = -r2 * radInv;\r\n            let density = Math.exp(expVal) * atomicNumFactor;\r\n\r\n            // store most relevant atom (with highest density)\r\n            if (this._visibilitySelector != null && density > atomWeightData[addr]) {\r\n              // NOSONAR\r\n              atomWeightData[addr] = density;\r\n              // we use same index into atom map and atomWeightMap\r\n              atomMap[addr] = packedArrays.atoms[i];\r\n            }\r\n            volData[addr] += density;\r\n\r\n            // TODO check for volTexMap routine?\r\n            density *= invIsoValue;\r\n            const colInd = i * 3;\r\n            volTexData[texAddr] += density * colors[colInd];\r\n            volTexData[texAddr + 1] += density * colors[colInd + 1];\r\n            volTexData[texAddr + 2] += density * colors[colInd + 2];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _shiftByOrigin(posRadArray) {\r\n    const originX = this.origin.x;\r\n    const originY = this.origin.y;\r\n    const originZ = this.origin.z;\r\n    const itemSize = 4;\r\n    const itemsCount = posRadArray.length / itemSize;\r\n    for (let i = 0; i < itemsCount; ++i) {\r\n      const ind = i * itemSize;\r\n      posRadArray[ind] -= originX;\r\n      posRadArray[ind + 1] -= originY;\r\n      posRadArray[ind + 2] -= originZ;\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const geometries_QuickSurfGeometry = (QuickSurfGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ContactSurface.js\r\n\r\n\r\n\r\n/**\r\n * Modifed from SpatialHash\r\n *\r\n * Main differences are:\r\n * - Optimized grid size to ensure we only ever need to look +/-1 cell\r\n * - Aware of atomic radii and will only output atoms within rAtom + rExtra\r\n *   (see withinRadii method)\r\n *\r\n * (Uses rounding rather than bitshifting as consequence of arbitrary grid size)\r\n * @class\r\n * @param {Float32Array} posRad - x, y, z coordinates and radiuses\r\n * @param {Float32Array} min - xyz min coordinates\r\n * @param {Float32Array} max - xyz max coordinates\r\n * @param {number} maxDistance - max distance\r\n */\r\nfunction AVHash(posRad, min, max, maxDistance) {\r\n  const itemSize = 4;\r\n  const nAtoms = posRad.length / itemSize;\r\n  const minX = min[0];\r\n  const minY = min[1];\r\n  const minZ = min[2];\r\n  const maxX = max[0];\r\n  const maxY = max[1];\r\n  const maxZ = max[2];\r\n  function hashFunc(w, minW) {\r\n    return Math.floor((w - minW) / maxDistance);\r\n  }\r\n  const iDim = hashFunc(maxX, minX) + 1;\r\n  const jDim = hashFunc(maxY, minY) + 1;\r\n  const kDim = hashFunc(maxZ, minZ) + 1;\r\n  const nCells = iDim * jDim * kDim;\r\n  const jkDim = jDim * kDim;\r\n\r\n  /* Get cellID for cartesian x,y,z */\r\n  const cellID = function (x, y, z) {\r\n    return (hashFunc(x, minX) * jDim + hashFunc(y, minY)) * kDim + hashFunc(z, minZ);\r\n  };\r\n\r\n  /* Initial building, could probably be optimized further */\r\n  const preHash = [];\r\n  let i;\r\n  let cid;\r\n  for (i = 0; i < nAtoms; i++) {\r\n    const iIdx = itemSize * i;\r\n    cid = cellID(posRad[iIdx], posRad[iIdx + 1], posRad[iIdx + 2]);\r\n    if (preHash[cid] === undefined) {\r\n      preHash[cid] = [i];\r\n    } else {\r\n      preHash[cid].push(i);\r\n    }\r\n  }\r\n  const cellOffsets = utils.allocateTyped(Uint32Array, nCells);\r\n  const cellLengths = utils.allocateTyped(Uint16Array, nCells);\r\n  const data = utils.allocateTyped(Uint32Array, nAtoms);\r\n  let offset = 0;\r\n  let maxCellLength = 0;\r\n  let j;\r\n  for (i = 0; i < nCells; i++) {\r\n    const start = cellOffsets[i] = offset;\r\n    const subArray = preHash[i];\r\n    if (subArray !== undefined) {\r\n      for (j = 0; j < subArray.length; j++) {\r\n        data[offset] = subArray[j];\r\n        offset++;\r\n      }\r\n    }\r\n    const cellLength = offset - start;\r\n    cellLengths[i] = cellLength;\r\n    if (cellLength > maxCellLength) {\r\n      maxCellLength = cellLength;\r\n    }\r\n  }\r\n\r\n  // Maximum number of neighbours we could ever produce (27 adjacent cells of equal population)\r\n  this.neighbourListLength = 27 * maxCellLength + 1;\r\n\r\n  /**\r\n   * Populate the supplied out array with atom indices that are within rAtom + rExtra\r\n   * of x,y,z\r\n   *\r\n   * -1 in out array indicates the end of the list\r\n   *\r\n   * @param  {number} x - x coordinate\r\n   * @param  {number} y - y coordinate\r\n   * @param  {number} z - z coordinate\r\n   * @param  {number} rExtra - additional radius\r\n   * @param  {Float32Array} out - pre-allocated output array\r\n   * @return {undefined}\r\n   */\r\n  this.withinRadii = function (x, y, z, rExtra, out) {\r\n    let outIdx = 0;\r\n    const nearI = hashFunc(x, minX);\r\n    const nearJ = hashFunc(y, minY);\r\n    const nearK = hashFunc(z, minZ);\r\n    const loI = Math.max(0, nearI - 1);\r\n    const loJ = Math.max(0, nearJ - 1);\r\n    const loK = Math.max(0, nearK - 1);\r\n    const hiI = Math.min(iDim - 1, nearI + 1);\r\n    const hiJ = Math.min(jDim - 1, nearJ + 1);\r\n    const hiK = Math.min(kDim - 1, nearK + 1);\r\n    for (i = loI; i <= hiI; ++i) {\r\n      const iOffset = i * jkDim;\r\n      for (j = loJ; j <= hiJ; ++j) {\r\n        const jOffset = j * kDim;\r\n        for (let k = loK; k <= hiK; ++k) {\r\n          cid = iOffset + jOffset + k;\r\n          const cellStart = cellOffsets[cid];\r\n          const cellEnd = cellStart + cellLengths[cid];\r\n          for (let dataIndex = cellStart; dataIndex < cellEnd; dataIndex++) {\r\n            const atomIndex = data[dataIndex];\r\n            const baseIndex = itemSize * atomIndex;\r\n            const dx = posRad[baseIndex] - x;\r\n            const dy = posRad[baseIndex + 1] - y;\r\n            const dz = posRad[baseIndex + 2] - z;\r\n            const rSum = posRad[baseIndex + 3] + rExtra;\r\n            if (dx * dx + dy * dy + dz * dz <= rSum * rSum) {\r\n              out[outIdx++] = data[dataIndex];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Add terminator\r\n    out[outIdx] = -1;\r\n  };\r\n}\r\nfunction ContactSurface(packedArrays, boundaries, params, _indexList) {\r\n  // Field generation method adapted from AstexViewer (Mike Hartshorn)\r\n  // by Fred Ludlow.\r\n  // Other parts based heavily on NGL (Alexander Rose) EDT Surface class\r\n  //\r\n  // Should work as a drop-in alternative to EDTSurface (though some of\r\n  // the EDT paramters are not relevant in this method).\r\n\r\n  const itemSize = 4;\r\n  const {\r\n    posRad,\r\n    colors,\r\n    atoms\r\n  } = packedArrays;\r\n  const nAtoms = posRad.length / itemSize;\r\n  const {\r\n    bbox\r\n  } = boundaries;\r\n  const min = bbox.minPosRad;\r\n  const max = bbox.maxPosRad;\r\n  let r2; // Atom positions, expanded radii (squared)\r\n  let maxRadius;\r\n\r\n  // Parameters\r\n  let probeRadius;\r\n  let scaleFactor;\r\n  let probePositions;\r\n\r\n  // Cache last value for obscured test\r\n  let lastClip = -1;\r\n\r\n  // Grid params\r\n  let dim;\r\n  let grid;\r\n  let volTex;\r\n  let weights;\r\n  let weightsMap = null;\r\n  let atomMap = null;\r\n  let visibilitySelector = null;\r\n\r\n  // grid indices -> xyz coords\r\n  let gridx;\r\n  let gridy;\r\n  let gridz;\r\n\r\n  // Lookup tables:\r\n  let sinTable;\r\n  let cosTable;\r\n\r\n  // Spatial Hash\r\n  let hash;\r\n\r\n  // Neighbour array to be filled by hash\r\n  let neighbours;\r\n\r\n  // Vectors for Torus Projection\r\n  const mid = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n  const n1 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n  const n2 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n  let ngTorus;\r\n  function uniformArray(TypeName, n, a) {\r\n    const array = utils.allocateTyped(TypeName, n);\r\n    for (let innI = 0; innI < n; ++innI) {\r\n      array[innI] = a;\r\n    }\r\n    return array;\r\n  }\r\n  function fillGridDim(a, start, step) {\r\n    for (let innI = 0; innI < a.length; innI++) {\r\n      a[innI] = start + step * innI;\r\n    }\r\n  }\r\n  function initializeGrid() {\r\n    ({\r\n      scaleFactor\r\n    } = params);\r\n    ({\r\n      dim\r\n    } = boundaries);\r\n    ngTorus = Math.min(5, 2 + Math.floor(probeRadius * scaleFactor));\r\n    const gridSize = dim[0] * dim[1] * dim[2];\r\n    grid = uniformArray(Float32Array, gridSize, -1001.0);\r\n    volTex = utils.allocateTyped(Float32Array, gridSize * 3);\r\n    weights = utils.allocateTyped(Float32Array, gridSize);\r\n    if (visibilitySelector) {\r\n      weightsMap = utils.allocateTyped(Float32Array, gridSize);\r\n      atomMap = [];\r\n    }\r\n    gridx = utils.allocateTyped(Float32Array, dim[0]);\r\n    gridy = utils.allocateTyped(Float32Array, dim[1]);\r\n    gridz = utils.allocateTyped(Float32Array, dim[2]);\r\n    fillGridDim(gridx, min[0], 1 / scaleFactor);\r\n    fillGridDim(gridy, min[1], 1 / scaleFactor);\r\n    fillGridDim(gridz, min[2], 1 / scaleFactor);\r\n  }\r\n  function initializeAngleTables() {\r\n    let theta = 0.0;\r\n    const step = 2 * Math.PI / probePositions;\r\n    cosTable = utils.allocateTyped(Float32Array, probePositions);\r\n    sinTable = utils.allocateTyped(Float32Array, probePositions);\r\n    for (let innI = 0; innI < probePositions; innI++) {\r\n      cosTable[innI] = Math.cos(theta);\r\n      sinTable[innI] = Math.sin(theta);\r\n      theta += step;\r\n    }\r\n  }\r\n  function initializeHash() {\r\n    hash = new AVHash(posRad, min, max, 2.01 * maxRadius);\r\n    neighbours = new Int32Array(hash.neighbourListLength);\r\n  }\r\n  function init() {\r\n    ({\r\n      probeRadius,\r\n      scaleFactor,\r\n      probePositions,\r\n      visibilitySelector\r\n    } = params);\r\n    r2 = utils.allocateTyped(Float32Array, nAtoms);\r\n    maxRadius = 0;\r\n    for (let innI = 0; innI < nAtoms; ++innI) {\r\n      const rExt = posRad[innI * itemSize + 3] += probeRadius;\r\n      if (rExt > maxRadius) {\r\n        maxRadius = rExt;\r\n      }\r\n      r2[innI] = rExt * rExt;\r\n    }\r\n    initializeGrid();\r\n    initializeAngleTables();\r\n    initializeHash();\r\n    lastClip = -1;\r\n  }\r\n  function singleAtomObscures(ai, innX, innY, innZ) {\r\n    const innCI = itemSize * ai;\r\n    const ra2 = r2[ai];\r\n    const dx = posRad[innCI] - innX;\r\n    const dy = posRad[innCI + 1] - innY;\r\n    const dz = posRad[innCI + 2] - innZ;\r\n    const d2 = dx * dx + dy * dy + dz * dz;\r\n    return d2 < ra2;\r\n  }\r\n  function obscured(innX, innY, innZ, a, b) {\r\n    // Is the point at x,y,z obscured by any of the atoms\r\n    // specifeid by indices in neighbours. Ignore indices\r\n    // a and b (these are the relevant atoms in projectPoints/Torii)\r\n\r\n    // Cache the last clipped atom (as very often the same one in\r\n    // subsequent calls)\r\n    let ai;\r\n    if (lastClip !== -1) {\r\n      ai = lastClip;\r\n      if (ai !== a && ai !== b && singleAtomObscures(ai, innX, innY, innZ)) {\r\n        return ai;\r\n      }\r\n      lastClip = -1;\r\n    }\r\n    let ni = 0;\r\n    ai = neighbours[ni];\r\n    while (ai >= 0) {\r\n      if (ai !== a && ai !== b && singleAtomObscures(ai, innX, innY, innZ)) {\r\n        lastClip = ai;\r\n        return ai;\r\n      }\r\n      ai = neighbours[++ni];\r\n    }\r\n    lastClip = -1;\r\n    return -1;\r\n  }\r\n  function projectPoints() {\r\n    // For each atom:\r\n    //     Iterate over a subsection of the grid, for each point:\r\n    //         If current value < 0.0, unvisited, set positive\r\n    //\r\n    //         In any case: Project this point onto surface of the atomic sphere\r\n    //         If this projected point is not obscured by any other atom\r\n    //             Calcualte delta distance and set grid value to minimum of\r\n    //             itself and delta\r\n\r\n    // Should we alias frequently accessed closure constiables??\r\n    // Assume JS engine capable of optimizing this\r\n    // anyway...\r\n    const maxRad = 4.0;\r\n    const sigma = maxRad / 3;\r\n    const sigma2Inv = 1 / (2 * sigma * sigma);\r\n    for (let innI = 0; innI < nAtoms; innI++) {\r\n      const innCI = itemSize * innI;\r\n      const ax = posRad[innCI];\r\n      const ay = posRad[innCI + 1];\r\n      const az = posRad[innCI + 2];\r\n      const ar = posRad[innCI + 3];\r\n      const ar2 = r2[innI];\r\n      hash.withinRadii(ax, ay, az, ar, neighbours);\r\n\r\n      // Number of grid points, round this up...\r\n      const ng = Math.ceil(ar * scaleFactor);\r\n\r\n      // Center of the atom, mapped to grid points (take floor)\r\n      const iax = Math.floor(scaleFactor * (ax - min[0]));\r\n      const iay = Math.floor(scaleFactor * (ay - min[1]));\r\n      const iaz = Math.floor(scaleFactor * (az - min[2]));\r\n\r\n      // Extents of grid to consider for this atom\r\n      const minx = Math.max(0, iax - ng);\r\n      const miny = Math.max(0, iay - ng);\r\n      const minz = Math.max(0, iaz - ng);\r\n\r\n      // Add two to these points:\r\n      // - iax are floor'd values so this ensures coverage\r\n      // - these are loop limits (exclusive)\r\n      const maxx = Math.min(dim[0], iax + ng + 2);\r\n      const maxy = Math.min(dim[1], iay + ng + 2);\r\n      const maxz = Math.min(dim[2], iaz + ng + 2);\r\n      const colIdx = innI * 3;\r\n      const cr = colors[colIdx];\r\n      const cg = colors[colIdx + 1];\r\n      const cb = colors[colIdx + 2];\r\n      for (let iz = minz; iz < maxz; iz++) {\r\n        const dz = gridz[iz] - az;\r\n        const zOffset = dim[1] * dim[0] * iz;\r\n        for (let iy = miny; iy < maxy; iy++) {\r\n          const dy = gridy[iy] - ay;\r\n          const dzy2 = dz * dz + dy * dy;\r\n          const zyOffset = zOffset + dim[0] * iy;\r\n          for (let ix = minx; ix < maxx; ix++) {\r\n            const idx = ix + zyOffset;\r\n            const dx = gridx[ix] - ax;\r\n            const d2 = dzy2 + dx * dx;\r\n            if (d2 < ar2) {\r\n              const w = Math.exp(-d2 * sigma2Inv);\r\n              const cIdx = idx * 3;\r\n              volTex[cIdx] += cr * w;\r\n              volTex[cIdx + 1] += cg * w;\r\n              volTex[cIdx + 2] += cb * w;\r\n              weights[idx] += w;\r\n              if (visibilitySelector !== null && w > weightsMap[idx]) {\r\n                weightsMap[idx] = w;\r\n                atomMap[idx] = atoms[innI];\r\n              }\r\n              if (grid[idx] < 0.0) {\r\n                // Unvisited, make positive\r\n                grid[idx] = -grid[idx];\r\n              }\r\n              // Project on to the surface of the sphere\r\n              // sp is the projected point ( dx, dy, dz ) * ( ra / d )\r\n              const d = Math.sqrt(d2);\r\n              const ap = ar / d;\r\n              let spx = dx * ap;\r\n              let spy = dy * ap;\r\n              let spz = dz * ap;\r\n              spx += ax;\r\n              spy += ay;\r\n              spz += az;\r\n              if (obscured(spx, spy, spz, innI, -1) === -1) {\r\n                const dd = ar - d;\r\n                if (dd < grid[idx]) {\r\n                  grid[idx] = dd;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function normalToLine(out, p) {\r\n    out.x = out.y = out.z = 1.0;\r\n    if (p.x !== 0) {\r\n      out.x = (p.y + p.z) / -p.x;\r\n    } else if (p.y !== 0) {\r\n      out.y = (p.x + p.z) / -p.y;\r\n    } else if (p.z !== 0) {\r\n      out.z = (p.x + p.y) / -p.z;\r\n    }\r\n    return out;\r\n  }\r\n  function projectTorus(a, b) {\r\n    const aIdx = itemSize * a;\r\n    const bIdx = itemSize * b;\r\n    const xa = posRad[aIdx];\r\n    const ya = posRad[aIdx + 1];\r\n    const za = posRad[aIdx + 2];\r\n    const r1 = posRad[aIdx + 3];\r\n    let dx = mid.x = posRad[bIdx] - xa;\r\n    let dy = mid.y = posRad[bIdx + 1] - ya;\r\n    let dz = mid.z = posRad[bIdx + 2] - za;\r\n    const innR2 = posRad[bIdx + 3];\r\n    let d2 = dx * dx + dy * dy + dz * dz;\r\n\r\n    // This check now redundant as already done in AVHash.withinRadii\r\n    // if( d2 > (( r1 + r2 ) * ( r1 + r2 )) ){ return; }\r\n\r\n    const d = Math.sqrt(d2);\r\n\r\n    // Find angle between a->b vector and the circle\r\n    // of their intersection by cosine rule\r\n    const cosA = (r1 * r1 + d * d - innR2 * innR2) / (2.0 * r1 * d);\r\n\r\n    // distance along a->b at intersection\r\n    const dmp = r1 * cosA;\r\n    mid.normalize();\r\n\r\n    // Create normal to line\r\n    normalToLine(n1, mid);\r\n    n1.normalize();\r\n\r\n    // Cross together for second normal vector\r\n    n2.crossVectors(mid, n1);\r\n    n2.normalize();\r\n\r\n    // r is radius of circle of intersection\r\n    const rInt = Math.sqrt(r1 * r1 - dmp * dmp);\r\n    n1.multiplyScalar(rInt);\r\n    n2.multiplyScalar(rInt);\r\n    mid.multiplyScalar(dmp);\r\n    mid.x += xa;\r\n    mid.y += ya;\r\n    mid.z += za;\r\n    lastClip = -1;\r\n    const ng = ngTorus;\r\n    for (let innI = 0; innI < probePositions; innI++) {\r\n      const cost = cosTable[innI];\r\n      const sint = sinTable[innI];\r\n      const px = mid.x + cost * n1.x + sint * n2.x;\r\n      const py = mid.y + cost * n1.y + sint * n2.y;\r\n      const pz = mid.z + cost * n1.z + sint * n2.z;\r\n      if (obscured(px, py, pz, a, b) === -1) {\r\n        // As above, iterate over our grid...\r\n        // px, py, pz in grid coords\r\n        const iax = Math.floor(scaleFactor * (px - min[0]));\r\n        const iay = Math.floor(scaleFactor * (py - min[1]));\r\n        const iaz = Math.floor(scaleFactor * (pz - min[2]));\r\n        const minx = Math.max(0, iax - ng);\r\n        const miny = Math.max(0, iay - ng);\r\n        const minz = Math.max(0, iaz - ng);\r\n        const maxx = Math.min(dim[0], iax + ng + 2);\r\n        const maxy = Math.min(dim[1], iay + ng + 2);\r\n        const maxz = Math.min(dim[2], iaz + ng + 2);\r\n        for (let iz = minz; iz < maxz; iz++) {\r\n          dz = pz - gridz[iz];\r\n          const zOffset = dim[1] * dim[0] * iz;\r\n          for (let iy = miny; iy < maxy; iy++) {\r\n            dy = py - gridy[iy];\r\n            const dzy2 = dz * dz + dy * dy;\r\n            const zyOffset = zOffset + dim[0] * iy;\r\n            for (let ix = minx; ix < maxx; ix++) {\r\n              dx = px - gridx[ix];\r\n              d2 = dzy2 + dx * dx;\r\n              const idx = ix + zyOffset;\r\n              const current = grid[idx];\r\n              if (current > 0.0 && d2 < current * current) {\r\n                grid[idx] = Math.sqrt(d2);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function projectTorii() {\r\n    for (let innI = 0; innI < nAtoms; innI++) {\r\n      const innIdx = itemSize * innI;\r\n      hash.withinRadii(posRad[innIdx], posRad[innIdx + 1], posRad[innIdx + 2], posRad[innIdx + 3], neighbours);\r\n      let ia = 0;\r\n      let ni = neighbours[ia];\r\n      while (ni >= 0) {\r\n        if (innI < ni) {\r\n          projectTorus(innI, ni);\r\n        }\r\n        ni = neighbours[++ia];\r\n      }\r\n    }\r\n  }\r\n  function fixNegatives() {\r\n    for (let innI = 0, n = grid.length; innI < n; innI++) {\r\n      if (grid[innI] < 0) grid[innI] = 0;\r\n      let w = weights[innI];\r\n      if (w > 0) {\r\n        w = 1 / w;\r\n        const innInnI = innI * 3;\r\n        volTex[innInnI] *= w;\r\n        volTex[innInnI + 1] *= w;\r\n        volTex[innInnI + 2] *= w;\r\n      }\r\n    }\r\n  }\r\n  function getVolume() {\r\n    // Basic steps are:\r\n    // 1) Initialize\r\n    // 2) Project points\r\n    // 3) Project torii\r\n    console.time('ContactSurface.getVolume');\r\n    console.time('ContactSurface.init');\r\n    init();\r\n    console.timeEnd('ContactSurface.init');\r\n    console.time('ContactSurface.projectPoints');\r\n    projectPoints();\r\n    console.timeEnd('ContactSurface.projectPoints');\r\n    console.time('ContactSurface.projectTorii');\r\n    projectTorii();\r\n    console.timeEnd('ContactSurface.projectTorii');\r\n    fixNegatives();\r\n    console.timeEnd('ContactSurface.getVolume');\r\n  }\r\n  this.build = function () {\r\n    // type and cutoff left in for compatibility with EDTSurface.getSurface\r\n    // function signature\r\n    getVolume();\r\n    this.volTexMap = volTex;\r\n    this.weightsMap = weightsMap;\r\n    this.atomMap = atomMap;\r\n    this.volMap = grid;\r\n  };\r\n}\r\n/* harmony default export */ const geometries_ContactSurface = (ContactSurface);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/ContactSurfaceGeometry.js\r\n\r\n\r\n\r\nconst {\r\n  Volume: ContactSurfaceGeometry_Volume\r\n} = chem;\r\n\r\n/**\r\n * This class implements 'contact' isosurface geometry generation algorithm.\r\n * @param spheresCount - number of atoms/spheres\r\n * @param opts - geometry specific options\r\n * @constructor\r\n */\r\n\r\nclass ContactSurfaceGeometry extends geometries_VolumeSurfaceGeometry {\r\n  _computeSurface(packedArrays, box, boundaries, params) {\r\n    const contactSurface = new geometries_ContactSurface(packedArrays, boundaries, params);\r\n    contactSurface.build();\r\n    const surface = {\r\n      volMap: new ContactSurfaceGeometry_Volume(Float32Array, this.numVoxels, box, 1, contactSurface.volMap),\r\n      volTexMap: new ContactSurfaceGeometry_Volume(Float32Array, this.numVoxels, box, 3, contactSurface.volTexMap),\r\n      atomMap: contactSurface.atomMap,\r\n      atomWeightMap: new ContactSurfaceGeometry_Volume(Float32Array, this.numVoxels, box, 1, contactSurface.weightsMap)\r\n    };\r\n    return surface;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_ContactSurfaceGeometry = (ContactSurfaceGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsoSurfaceAtomColored.js\r\n\r\n\r\n/**\r\n * Class for colored atom. Need for atom structure clusterization\r\n *\r\n * @param {Vector3} vCenter   Center of atom\r\n * @param {number}  radiusAt  Radius of atom\r\n */\r\nclass IsoSurfaceAtomColored {\r\n  constructor(vCenter, radiusAt) {\r\n    this.coord = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this.coord.copy(vCenter);\r\n    this.radius = radiusAt;\r\n    this.colorX = 0.99999;\r\n    this.colorY = 0.0;\r\n    this.colorZ = 0.0;\r\n    this.atomType = 0;\r\n    this.srcAtom = null;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_IsoSurfaceAtomColored = (IsoSurfaceAtomColored);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsosurfaceBuildNormals.js\r\n\r\n\r\n\r\n// suppress some JSHint warnings\r\n/* jshint bitwise: false */\r\n\r\n/**\r\n * Build normals for isosurface, using atoms information\r\n *\r\n * @param {number} numAtoms     - Number of atoms in molecule\r\n * @param {Element} atoms      - Array of atoms\r\n * @param {Vector3} vBoxMin     - Bounding box min\r\n * @param {Vector3} vBoxMax     - Bounding box max\r\n * @param {number} probeRadius     - Normals for output\r\n *\r\n */\r\nclass IsosurfaceBuildNormals {\r\n  constructor(numAtoms, atoms, vBoxMin, vBoxMax, probeRadius) {\r\n    this._numAtoms = numAtoms;\r\n    this._atoms = atoms;\r\n    this._vBoxMin = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._vBoxMax = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._vBoxMin.copy(vBoxMin);\r\n    this._vBoxMax.copy(vBoxMax);\r\n    this._probeRadius = probeRadius;\r\n    this._atomsList = null;\r\n    this._voxelList = null;\r\n  }\r\n  createVoxels() {\r\n    let numAtomsRefs;\r\n    let rad;\r\n    const ATOM_VOXEL_REF_SCALE = 4.5;\r\n    const numAtoms = this._numAtoms | 0;\r\n    const atoms = this._atoms;\r\n    const dx = this._vBoxMax.x - this._vBoxMin.x;\r\n    const dy = this._vBoxMax.y - this._vBoxMin.y;\r\n    const dz = this._vBoxMax.z - this._vBoxMin.z;\r\n    let w = dx < dy ? dx : dy;\r\n    w = dz < w ? dz : w;\r\n    let maxRad = 0.0;\r\n    let aveRad = 0.0;\r\n    let i;\r\n    for (i = 0; i < numAtoms; i++) {\r\n      rad = (atoms[i].radius + this._probeRadius) * 2.0;\r\n      maxRad = rad > maxRad ? rad : maxRad;\r\n      aveRad += rad;\r\n    }\r\n    let numCells = Math.floor(w / maxRad);\r\n    if (numCells < 2) {\r\n      numCells = 2;\r\n    }\r\n    aveRad /= numAtoms;\r\n    this._numCells = numCells;\r\n    this._aveRad = aveRad;\r\n    this._maxRad = maxRad;\r\n    const side = numCells;\r\n    const side2 = numCells * numCells;\r\n    const side3 = numCells * numCells * numCells;\r\n    const xScale = this._xScale = 1.0 / (this._vBoxMax.x - this._vBoxMin.x);\r\n    const yScale = this._yScale = 1.0 / (this._vBoxMax.y - this._vBoxMin.y);\r\n    const zScale = this._zScale = 1.0 / (this._vBoxMax.z - this._vBoxMin.z);\r\n\r\n    // estimate number of individual atom refs in each voxel list\r\n    let maxAtomsRefs = 0;\r\n    const xNumVoxMult = xScale * numCells;\r\n    const yNumVoxMult = yScale * numCells;\r\n    const zNumVoxMult = zScale * numCells;\r\n    for (i = 0; i < numAtoms; i++) {\r\n      const radAffect = (atoms[i].radius + this._probeRadius) * ATOM_VOXEL_REF_SCALE;\r\n      const diaAffect = radAffect * 2.0;\r\n      let numVoxX = Math.floor(xNumVoxMult * diaAffect + 0.8);\r\n      let numVoxY = Math.floor(yNumVoxMult * diaAffect + 0.8);\r\n      let numVoxZ = Math.floor(zNumVoxMult * diaAffect + 0.8);\r\n      // avoid case numVox? == 0\r\n      // also use loop i <=\r\n      numVoxX++;\r\n      numVoxY++;\r\n      numVoxZ++;\r\n      maxAtomsRefs += numVoxX * numVoxY * numVoxZ;\r\n    } // for (i)\r\n    // maxAtomsRefs = numAtoms * MAX_ATOMS_IN_SINGLE_VOXEL;\r\n\r\n    this._voxelList = utils.allocateTyped(Int32Array, side3);\r\n    const atomsList = [];\r\n    atomsList.length = maxAtomsRefs;\r\n    if (this._voxelList === null || atomsList === null) {\r\n      return 0 - 1;\r\n    }\r\n    // init voxel list\r\n    for (i = 0; i < side3; i++) {\r\n      this._voxelList[i] = -1;\r\n    }\r\n    numAtomsRefs = 0;\r\n\r\n    // create voxel lists\r\n    for (i = 0; i < numAtoms; i++) {\r\n      // use multiplier 4 to locate this atom in different voxels\r\n      rad = (atoms[i].radius + this._probeRadius) * ATOM_VOXEL_REF_SCALE;\r\n      let xIndMin = Math.floor((atoms[i].coord.x - this._vBoxMin.x - rad) * numCells * xScale);\r\n      let yIndMin = Math.floor((atoms[i].coord.y - this._vBoxMin.y - rad) * numCells * yScale);\r\n      let zIndMin = Math.floor((atoms[i].coord.z - this._vBoxMin.z - rad) * numCells * zScale);\r\n      let xIndMax = Math.floor((atoms[i].coord.x - this._vBoxMin.x + rad) * numCells * xScale);\r\n      let yIndMax = Math.floor((atoms[i].coord.y - this._vBoxMin.y + rad) * numCells * yScale);\r\n      let zIndMax = Math.floor((atoms[i].coord.z - this._vBoxMin.z + rad) * numCells * zScale);\r\n      xIndMin = xIndMin >= 0 ? xIndMin : 0;\r\n      yIndMin = yIndMin >= 0 ? yIndMin : 0;\r\n      zIndMin = zIndMin >= 0 ? zIndMin : 0;\r\n      xIndMax = xIndMax < numCells ? xIndMax : numCells - 1;\r\n      yIndMax = yIndMax < numCells ? yIndMax : numCells - 1;\r\n      zIndMax = zIndMax < numCells ? zIndMax : numCells - 1;\r\n      for (let z = zIndMin; z <= zIndMax; z++) {\r\n        for (let y = yIndMin; y <= yIndMax; y++) {\r\n          for (let x = xIndMin; x <= xIndMax; x++) {\r\n            // add atom with index \"i\" to this voxel list\r\n            const indVoxel = x + y * side + z * side2;\r\n            // assert indVoxel >= 0\r\n            // assert indVoxel < side3\r\n\r\n            // add first\r\n            if (this._voxelList[indVoxel] < 0) {\r\n              atomsList[numAtomsRefs * 2 + 0] = i;\r\n              atomsList[numAtomsRefs * 2 + 1] = 0 - 1;\r\n              this._voxelList[indVoxel] = numAtomsRefs;\r\n              numAtomsRefs++;\r\n              // assert numAtomsRefs < maxAtomsRefs - 1\r\n              continue;\r\n            }\r\n            // insert into head of list\r\n            const indexNext = this._voxelList[indVoxel];\r\n            this._voxelList[indVoxel] = numAtomsRefs;\r\n            atomsList[numAtomsRefs * 2 + 0] = i;\r\n            atomsList[numAtomsRefs * 2 + 1] = indexNext;\r\n            numAtomsRefs++;\r\n          } // for (x)\r\n        } // for (y)\r\n      } // for (z)\r\n    } // for (i)\r\n\r\n    // convert Array to Int32Array\r\n    this._atomsList = Int32Array.from(atomsList);\r\n    return 0;\r\n  }\r\n  destroyVoxels() {\r\n    this._atomsList = null;\r\n    this._voxelList = null;\r\n    this._atoms = null;\r\n    this._vertices = null;\r\n    this._vBoxMin = null;\r\n    this._vBoxMax = null;\r\n  }\r\n\r\n  /**\r\n   * Enumerate all atoms affecting specified point\r\n   *\r\n   * @param {Vector3}    point    - point in 3D\r\n   * @param {func(atom)} process  - function to call for each atom\r\n   */\r\n  forEachRelatedAtom(point, process) {\r\n    // find corresponding voxel\r\n    const xInd = Math.floor((point.x - this._vBoxMin.x) * this._numCells * this._xScale);\r\n    const yInd = Math.floor((point.y - this._vBoxMin.y) * this._numCells * this._yScale);\r\n    const zInd = Math.floor((point.z - this._vBoxMin.z) * this._numCells * this._zScale);\r\n    const indVoxel = xInd + yInd * this._numCells + zInd * this._numCells * this._numCells;\r\n\r\n    // run through atoms affecting this voxel\r\n    const atoms = this._atoms;\r\n    for (let ref = this._voxelList[indVoxel]; ref >= 0; ref = this._atomsList[ref * 2 + 1]) {\r\n      const indexAtom = this._atomsList[ref * 2];\r\n      process(atoms[indexAtom]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get atom closest to specified point\r\n   *\r\n   * @param {Vector3} point  - point in 3D\r\n   *\r\n   * @returns {IsoSurfaceAtomColored} atom, or null if not found\r\n   */\r\n  getClosestAtom(point) {\r\n    let closest = null;\r\n    let minDist2 = Number.MAX_VALUE;\r\n    this.forEachRelatedAtom(point, atom => {\r\n      const dist2 = point.distanceToSquared(atom.coord);\r\n      if (dist2 < minDist2) {\r\n        minDist2 = dist2;\r\n        closest = atom;\r\n      }\r\n    });\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Build normals for isosurface, using atoms information\r\n   *\r\n   * @param {number} numVertices  - Number of vertices in final geometry (to render)\r\n   * @param {Vector3} vertices    - Geometry vertices (3d coordinates array)\r\n   * @param {Vector3} normals     - Normals for output\r\n   *\r\n   * @returns {number} 0, if success\r\n   */\r\n  buildNormals(numVertices, vertices, normals) {\r\n    const self = this;\r\n    let numCloseAtoms = 0;\r\n    let vx = 0;\r\n    let vy = 0;\r\n    let vz = 0;\r\n    let dist2;\r\n    let vNormalX = 0;\r\n    let vNormalY = 0;\r\n    let vNormalZ = 0;\r\n    let koef = 0;\r\n    let w = 0;\r\n    const r25 = 2.5;\r\n    const r01 = 0.1;\r\n    const maxRadAffect = this._aveRad * r25;\r\n    const maxRadAffect2 = maxRadAffect * maxRadAffect;\r\n    const expScale = -this._aveRad * r01;\r\n\r\n    // some stats\r\n    // numSlowAtoms = 0;\r\n\r\n    const gatherNormals = function (atom) {\r\n      const dx = vx - atom.coord.x;\r\n      const dy = vy - atom.coord.y;\r\n      const dz = vz - atom.coord.z;\r\n      dist2 = dx * dx + dy * dy + dz * dz;\r\n      if (dist2 > maxRadAffect2) {\r\n        return;\r\n      }\r\n\r\n      // get weight for gaussian smoothing\r\n      const rad = atom.radius + self._probeRadius;\r\n      koef = dist2 - rad * rad;\r\n      if (koef < 0.0) {\r\n        koef = -koef;\r\n      }\r\n      w = Math.exp(expScale * koef);\r\n      vNormalX += dx * w;\r\n      vNormalY += dy * w;\r\n      vNormalZ += dz * w;\r\n      numCloseAtoms++;\r\n    };\r\n    let maxClosedAtoms = 0;\r\n    // process all vertices, one by one\r\n    for (let i = 0; i < numVertices; i++) {\r\n      vx = vertices[i].x;\r\n      vy = vertices[i].y;\r\n      vz = vertices[i].z;\r\n      numCloseAtoms = 0;\r\n      vNormalX = vNormalY = vNormalZ = 0.0;\r\n      this.forEachRelatedAtom(vertices[i], gatherNormals);\r\n      maxClosedAtoms = numCloseAtoms > maxClosedAtoms ? numCloseAtoms : maxClosedAtoms;\r\n\r\n      // normalize vNormal\r\n      dist2 = vNormalX * vNormalX + vNormalY * vNormalY + vNormalZ * vNormalZ;\r\n      if (numCloseAtoms > 0) {\r\n        koef = 1.0 / Math.sqrt(dist2);\r\n        vNormalX *= koef;\r\n        vNormalY *= koef;\r\n        vNormalZ *= koef;\r\n      }\r\n      normals[i].x = vNormalX;\r\n      normals[i].y = vNormalY;\r\n      normals[i].z = vNormalZ;\r\n    } // for (i) all vertices\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Build vertex colors for isosurface, using atoms information\r\n   *\r\n   * @param {number} numVertices  - Number of vertices in final geometry (to render)\r\n   * @param {Vector3} vertices    - Geometry vertices (3d coordinates array)\r\n   * @param {Vector3} colors                - Colors for output\r\n   * @param {number} radiusColorSmoothness  - Radius of smoothness sphere\r\n   *\r\n   * @returns {number} 0, if success\r\n   */\r\n  buildColors(numVertices, vertices, colors, radiusColorSmoothness) {\r\n    const self = this;\r\n    let vx = 0.0;\r\n    let vy = 0.0;\r\n    let vz = 0.0;\r\n    let koef = 0.0;\r\n    let w = 0.0;\r\n    const KOEF_ADD = 0.8;\r\n    const maxRadAffect = radiusColorSmoothness;\r\n    const maxRadAffect2 = maxRadAffect * maxRadAffect;\r\n    let colorsClose = [];\r\n    let weights = [];\r\n    let weightsSum = 0;\r\n    const gatherColors = function (atom) {\r\n      const dx = vx - atom.coord.x;\r\n      const dy = vy - atom.coord.y;\r\n      const dz = vz - atom.coord.z;\r\n      const dist2 = dx * dx + dy * dy + dz * dz;\r\n      if (dist2 > maxRadAffect2) {\r\n        return;\r\n      }\r\n\r\n      // get weight for gaussian smoothing\r\n      const rad = atom.radius + self._probeRadius;\r\n      koef = dist2 - rad * rad;\r\n      if (koef < 0.0) {\r\n        koef = -koef;\r\n      }\r\n      w = 1.0 / (KOEF_ADD + koef);\r\n      colorsClose.push([atom.colorX, atom.colorY, atom.colorZ]);\r\n      weights.push(w); // save weights for use\r\n      weightsSum += w; // calc sum of weights fo further normalization\r\n    };\r\n\r\n    // process all vertices, one by one\r\n    for (let i = 0; i < numVertices; i++) {\r\n      vx = vertices[i].x;\r\n      vy = vertices[i].y;\r\n      vz = vertices[i].z;\r\n      colorsClose = [];\r\n      weights = [];\r\n      weightsSum = 0;\r\n      this.forEachRelatedAtom(vertices[i], gatherColors);\r\n\r\n      // normalized weighted sum of colors\r\n      for (let j = 0; j < colorsClose.length; ++j) {\r\n        const weightNormalized = weights[j] / weightsSum;\r\n        colors[i].x += colorsClose[j][0] * weightNormalized;\r\n        colors[i].y += colorsClose[j][1] * weightNormalized;\r\n        colors[i].z += colorsClose[j][2] * weightNormalized;\r\n      }\r\n    } // for (i) all vertices\r\n    return 0;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_IsosurfaceBuildNormals = (IsosurfaceBuildNormals);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/IsoSurfaceGeo.js\r\n\r\n\r\n/**\r\n * Class for geometry (triangle mesh) representation\r\n *\r\n *\r\n * @param {number} maxNumVertices Maximum possible number of vertices in mesh\r\n * @param {number} maxNumTriangles Maximum possible number of triangles in mesh\r\n * @param {boolean} needVertexColors Obvious\r\n */\r\nclass IsoSurfaceGeo {\r\n  constructor(maxNumVertices, maxNumTriangles, needVertexColors) {\r\n    this._maxNumVertices = maxNumVertices;\r\n    this._maxNumTriangles = maxNumTriangles;\r\n    this._vertices = new Array(maxNumVertices);\r\n    this._normals = new Array(maxNumVertices);\r\n    this._colors = null;\r\n    if (needVertexColors) {\r\n      this._colors = new Array(maxNumVertices);\r\n    }\r\n    this._indices = new Array(maxNumTriangles * (1 + 2));\r\n    this._numVertices = 0;\r\n    this._numTriangles = 0;\r\n    let i;\r\n    for (i = 0; i < maxNumVertices; i++) {\r\n      this._vertices[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n      this._normals[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    }\r\n    for (i = 0; i < maxNumTriangles * (1 + 2); i++) {\r\n      this._indices[i] = -1;\r\n    }\r\n    if (needVertexColors) {\r\n      for (i = 0; i < maxNumVertices; i++) {\r\n        this._colors[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n      }\r\n    }\r\n  }\r\n  destroy() {\r\n    this._vertices = null;\r\n    this._normals = null;\r\n    this._indices = null;\r\n  }\r\n}\r\n/* harmony default export */ const geometries_IsoSurfaceGeo = (IsoSurfaceGeo);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/SSIsosurfaceGeometry.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst SSIsosurfaceGeometry_COLOR_SIZE = 3;\r\nconst HASH_SIZE = 32768;\r\nconst {\r\n  Element: SSIsosurfaceGeometry_Element\r\n} = chem;\r\n\r\n/**\r\n * This class implements 'quick' isosurface geometry generation algorithm.\r\n * @param spheresCount - number of atoms/spheres\r\n * @param opts - geometry specific options\r\n * @constructor\r\n */\r\n\r\nclass SSIsosurfaceGeometry extends geometries_IsoSurfaceGeometry {\r\n  _build() {\r\n    // convert geoOut into arrays of positions, indices, normals\r\n    this._innerBuild();\r\n    const geoOut = this.getGeo();\r\n    this.destroy();\r\n    this._fromGeo(geoOut);\r\n  }\r\n  _fromGeo(geoOut) {\r\n    let colors = null;\r\n    const positions = utils.allocateTyped(Float32Array, (1 + 2) * geoOut._numVertices);\r\n    const normals = utils.allocateTyped(Float32Array, (1 + 2) * geoOut._numVertices);\r\n    if (geoOut._colors !== null) {\r\n      colors = utils.allocateTyped(Float32Array, (1 + 2) * geoOut._numVertices);\r\n    }\r\n    const indices = utils.allocateTyped(Uint32Array, (1 + 2) * geoOut._numTriangles);\r\n    for (let i = 0, j = 0; i < geoOut._numVertices; i++) {\r\n      positions[j + 0] = geoOut._vertices[i].x;\r\n      positions[j + 1] = geoOut._vertices[i].y;\r\n      positions[j + 2] = geoOut._vertices[i].z;\r\n      normals[j + 0] = geoOut._normals[i].x;\r\n      normals[j + 1] = geoOut._normals[i].y;\r\n      normals[j + 2] = geoOut._normals[i].z;\r\n      j += 3;\r\n    }\r\n    if (colors !== null) {\r\n      for (let i = 0, j = 0; i < geoOut._numVertices; i++, j += 3) {\r\n        colors[j + 0] = geoOut._colors[i].x;\r\n        colors[j + 1] = geoOut._colors[i].y;\r\n        colors[j + 2] = geoOut._colors[i].z;\r\n      }\r\n    }\r\n    const numTri3 = geoOut._numTriangles * (1 + 2);\r\n    for (let i = 0; i < numTri3; i++) {\r\n      indices[i] = geoOut._indices[i];\r\n    }\r\n    this.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(indices, 1));\r\n    this.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(positions, 3));\r\n    this.setAttribute('normal', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(normals, 3));\r\n    this.setAttribute('color', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(colors, 3));\r\n    this.computeBoundingBox();\r\n    this.computeBoundingSphere();\r\n    geoOut.destroy();\r\n  }\r\n  convertToAtomsColored(packedArrays, atomsColored) {\r\n    const {\r\n      atoms,\r\n      colors\r\n    } = packedArrays;\r\n    for (let i = 0, numAtoms = atoms.length; i < numAtoms; i++) {\r\n      const vCenter = atoms[i].position;\r\n      const {\r\n        radius\r\n      } = atoms[i].element;\r\n      atomsColored[i] = new geometries_IsoSurfaceAtomColored(vCenter, radius);\r\n      const nm = atoms[i].element.number;\r\n      atomsColored[i].atomType = this.getType(nm);\r\n      let cIdx = SSIsosurfaceGeometry_COLOR_SIZE * i;\r\n      atomsColored[i].colorX = colors[cIdx++];\r\n      atomsColored[i].colorY = colors[cIdx++];\r\n      atomsColored[i].colorZ = colors[cIdx];\r\n      atomsColored[i].srcAtom = atoms[i];\r\n    }\r\n  }\r\n  getGeo() {\r\n    return this.geoOut;\r\n  }\r\n  destroy() {\r\n    this.atoms = null;\r\n    this.hashLines = null;\r\n    this.hashEntries = null;\r\n  }\r\n\r\n  /**\r\n   * Calculates bounding box for array with spheres (atoms)\r\n   *\r\n   * @param {Object}  atoms      Atoms array\r\n   * @param {Vector3} vBoxMin    Bounding box min point\r\n   * @param {Vector3} vBoxMax    Bounding box max point\r\n   */\r\n  getBoundingBox(atoms, vBoxMin, vBoxMax) {\r\n    const bigNum = 10000000.0;\r\n    vBoxMin.x = vBoxMin.y = vBoxMin.z = bigNum;\r\n    vBoxMax.x = vBoxMax.y = vBoxMax.z = 0 - bigNum;\r\n    const probeRadius2 = this.probeRadius * this.atomRadiusScale;\r\n    let radMax = 0.0;\r\n    for (let i = 0, num = atoms.length; i < num; i++) {\r\n      const vCenter = atoms[i].coord;\r\n      const rad = atoms[i].radius + probeRadius2;\r\n      radMax = rad > radMax ? rad : radMax;\r\n      if (vCenter.x - rad < vBoxMin.x) {\r\n        vBoxMin.x = vCenter.x - rad;\r\n      }\r\n      if (vCenter.y - rad < vBoxMin.y) {\r\n        vBoxMin.y = vCenter.y - rad;\r\n      }\r\n      if (vCenter.z - rad < vBoxMin.z) {\r\n        vBoxMin.z = vCenter.z - rad;\r\n      }\r\n      if (vCenter.x + rad > vBoxMax.x) {\r\n        vBoxMax.x = vCenter.x + rad;\r\n      }\r\n      if (vCenter.y + rad > vBoxMax.y) {\r\n        vBoxMax.y = vCenter.y + rad;\r\n      }\r\n      if (vCenter.z + rad > vBoxMax.z) {\r\n        vBoxMax.z = vCenter.z + rad;\r\n      }\r\n    }\r\n    vBoxMin.x -= radMax;\r\n    vBoxMin.y -= radMax;\r\n    vBoxMin.z -= radMax;\r\n    vBoxMax.x += radMax;\r\n    vBoxMax.y += radMax;\r\n    vBoxMax.z += radMax;\r\n  }\r\n\r\n  /**\r\n   * Calculate (x,y,z) cordinate of the cell corner point\r\n   *\r\n   * @param {Vector3} vBoxMin Bounding box min point\r\n   * @param {Vector3} vBoxMax Bounding box max point\r\n   * @param {number} x Cell integer x coordinate\r\n   * @param {number} y Cell integer y coordinate\r\n   * @param {number} z Cell integer z coordinate\r\n   * @param {number} numPoints NUm points in cell on side\r\n   * @param {Vector3} vOut Output vector\r\n   */\r\n  getCornerCoord(vBoxMin, vBoxMax, x, y, z, numPoints, vOut) {\r\n    const invNP = 1.0 / (numPoints - 1.0);\r\n    const tx = x * invNP;\r\n    const ty = y * invNP;\r\n    const tz = z * invNP;\r\n    vOut.x = vBoxMin.x * (1.0 - tx) + vBoxMax.x * tx;\r\n    vOut.y = vBoxMin.y * (1.0 - ty) + vBoxMax.y * ty;\r\n    vOut.z = vBoxMin.z * (1.0 - tz) + vBoxMax.z * tz;\r\n  }\r\n\r\n  /**\r\n   * Calculate point of intersection of sphere surface\r\n   * and cell edge, given by [indexA, indexB] line\r\n   *\r\n   * @param {number} indexA Cell vertex index in [0..11]\r\n   * @param {number} indexB Cell vertex index in [0..11]\r\n   * @param {array}  sign   Sign array for all 8 vertices\r\n   * @param {object} cube   Cube\r\n   * @param {number} indexPointValue for value placement\r\n   * @param {Vector3} vOut  Point of intersection\r\n   */\r\n  buildEdgePoint(indexA, indexB, sign, cube, indexPointValue, vOut) {\r\n    if (sign[indexA] ^ sign[indexB]) {\r\n      const cTwentyFour = 24;\r\n      const t = (0 - cube.pointsValuesLinear[indexPointValue + cTwentyFour + indexA]) / (cube.pointsValuesLinear[indexPointValue + cTwentyFour + indexB] - cube.pointsValuesLinear[indexPointValue + cTwentyFour + indexA]);\r\n      const xa = cube.pointsValuesLinear[indexPointValue + indexA * (2 + 1) + 0];\r\n      const ya = cube.pointsValuesLinear[indexPointValue + indexA * (2 + 1) + 1];\r\n      const za = cube.pointsValuesLinear[indexPointValue + indexA * (2 + 1) + 2];\r\n      const xb = cube.pointsValuesLinear[indexPointValue + indexB * (2 + 1) + 0];\r\n      const yb = cube.pointsValuesLinear[indexPointValue + indexB * (2 + 1) + 1];\r\n      const zb = cube.pointsValuesLinear[indexPointValue + indexB * (2 + 1) + 2];\r\n      vOut.x = xa * (1.0 - t) + xb * t;\r\n      vOut.y = ya * (1.0 - t) + yb * t;\r\n      vOut.z = za * (1.0 - t) + zb * t;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if triangle is visible (vertices are close to atoms included in visibility set)\r\n   *\r\n   * @param {Vector3} v0 Vertex #0\r\n   * @param {Vector3} v1 Vertex #1\r\n   * @param {Vector3} v2 Vertex #2\r\n   * @returns {boolean} true if triangle is visible\r\n   */\r\n  isTriangleVisible(v0, v1, v2) {\r\n    const a0 = this.voxelWorld.getClosestAtom(v0);\r\n    const a1 = this.voxelWorld.getClosestAtom(v1);\r\n    const a2 = this.voxelWorld.getClosestAtom(v2);\r\n    if (a0 === null || a1 === null || a2 === null || a0.srcAtom === null || a1.srcAtom === null || a2.srcAtom === null) {\r\n      return false;\r\n    }\r\n    return this.visibilitySelector.includesAtom(a0.srcAtom) && this.visibilitySelector.includesAtom(a1.srcAtom) && this.visibilitySelector.includesAtom(a2.srcAtom);\r\n  }\r\n\r\n  /**\r\n   * Add triangle to result geometry\r\n   *\r\n   * @param {Vector3} v0 Vertex #0\r\n   * @param {Vector3} v1 Vertex #1\r\n   * @param {Vector3} v2 Vertex #2\r\n   * @returns {boolean} false if no more triangles can be added\r\n   */\r\n  addTriangle(v0, v1, v2) {\r\n    if (this.visibilitySelector && !this.isTriangleVisible(v0, v1, v2)) {\r\n      return true;\r\n    }\r\n    const geo = this.geoOut;\r\n    if (geo._numTriangles >= this.maxNumTriangles) {\r\n      return false;\r\n    }\r\n\r\n    // Add vertex with optimize\r\n    const indInGeo0 = this.addVertexToGeo(geo, v0);\r\n    const indInGeo1 = this.addVertexToGeo(geo, v1);\r\n    const indInGeo2 = this.addVertexToGeo(geo, v2);\r\n    if ((indInGeo0 | indInGeo1 | indInGeo2) < 0) {\r\n      return false;\r\n    }\r\n    const itr = 3 * geo._numTriangles;\r\n    geo._indices[itr + 0] = indInGeo0;\r\n    geo._indices[itr + 1] = indInGeo1;\r\n    geo._indices[itr + 2] = indInGeo2;\r\n    geo._numTriangles++;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Build result geometry (triangle mesh) from marching cube cells\r\n   *\r\n   * @param {number} meshRes Marchnig cube vertex count on each side\r\n   * @param {Vector3} vBoxMin Bounding box point min\r\n   * @param {Vector3} vBoxMax Bounding box point max\r\n   * @param {number} corners float values array for each cube point\r\n   * @param {Vector3} vCellStep vector to next cube cell diagonal point\r\n   * @param {object} cube IsoSurfaceMarchCube object\r\n   * @returns {number} 0, if success (<0) is error\r\n   */\r\n  buildGeoFromCorners(meshRes, vBoxMin, vBoxMax, corners, vCellStep, cube) {\r\n    const arrSize = 12;\r\n    const cNumVerts = 8;\r\n    const numCells = meshRes - 1;\r\n    const side = meshRes;\r\n    const side2 = meshRes * meshRes;\r\n    const vaEdges = new Array(arrSize);\r\n    for (let i = 0; i < arrSize; i++) {\r\n      vaEdges[i] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    }\r\n    const sign = [];\r\n    for (let i = 0; i < cNumVerts; i++) {\r\n      sign[i] = 1.0;\r\n    }\r\n    const vCorner = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let indCell = 0;\r\n    let indY = 0;\r\n    for (let y = 0; y < numCells; y++, indY += side2) {\r\n      let indZ = 0;\r\n      for (let z = 0; z < numCells; z++, indZ += side) {\r\n        for (let x = 0; x < numCells; x++) {\r\n          if (!cube.hasIntersection[indCell]) {\r\n            // next cell\r\n            indCell++;\r\n            continue;\r\n          }\r\n          const bitsInside = cube.bitsInside[indCell];\r\n          this.getCornerCoord(vBoxMin, vBoxMax, x, y, z, meshRes, vCorner);\r\n          const indPointValues = indCell * (2 << 2 + 2);\r\n          for (let i = 0, j = 0; i < cNumVerts; i++) {\r\n            cube.pointsValuesLinear[indPointValues + j++] = vCorner.x;\r\n            cube.pointsValuesLinear[indPointValues + j++] = vCorner.y;\r\n            cube.pointsValuesLinear[indPointValues + j++] = vCorner.z;\r\n          }\r\n          cube.pointsValuesLinear[indPointValues + 3] += vCellStep.x;\r\n          cube.pointsValuesLinear[indPointValues + 2 * 3] += vCellStep.x;\r\n          cube.pointsValuesLinear[indPointValues + 5 * 3] += vCellStep.x;\r\n          cube.pointsValuesLinear[indPointValues + 6 * 3] += vCellStep.x;\r\n          cube.pointsValuesLinear[indPointValues + 2 * 3 + 2] += vCellStep.z;\r\n          cube.pointsValuesLinear[indPointValues + 3 * 3 + 2] += vCellStep.z;\r\n          cube.pointsValuesLinear[indPointValues + 6 * 3 + 2] += vCellStep.z;\r\n          cube.pointsValuesLinear[indPointValues + 7 * 3 + 2] += vCellStep.z;\r\n          cube.pointsValuesLinear[indPointValues + 4 * 3 + 1] += vCellStep.y;\r\n          cube.pointsValuesLinear[indPointValues + 5 * 3 + 1] += vCellStep.y;\r\n          cube.pointsValuesLinear[indPointValues + 6 * 3 + 1] += vCellStep.y;\r\n          cube.pointsValuesLinear[indPointValues + 7 * 3 + 1] += vCellStep.y;\r\n\r\n          // now current cell has intersections (from -x to +x) on some cube edges\r\n          const indValues = indPointValues + 24;\r\n          for (let i = 0; i < cNumVerts; ++i) {\r\n            sign[i] = cube.pointsValuesLinear[indValues + i] < 0.0 ? 1 : 0;\r\n          }\r\n          this.buildEdgePoint(0, 1, sign, cube, indPointValues, vaEdges[0]);\r\n          this.buildEdgePoint(1, 2, sign, cube, indPointValues, vaEdges[1]);\r\n          this.buildEdgePoint(2, 3, sign, cube, indPointValues, vaEdges[2]);\r\n          this.buildEdgePoint(3, 0, sign, cube, indPointValues, vaEdges[3]);\r\n          this.buildEdgePoint(4, 5, sign, cube, indPointValues, vaEdges[4]);\r\n          this.buildEdgePoint(5, 6, sign, cube, indPointValues, vaEdges[5]);\r\n          this.buildEdgePoint(6, 7, sign, cube, indPointValues, vaEdges[6]);\r\n          this.buildEdgePoint(7, 4, sign, cube, indPointValues, vaEdges[7]);\r\n          this.buildEdgePoint(0, 4, sign, cube, indPointValues, vaEdges[8]);\r\n          this.buildEdgePoint(1, 5, sign, cube, indPointValues, vaEdges[9]);\r\n          this.buildEdgePoint(2, 6, sign, cube, indPointValues, vaEdges[10]);\r\n          this.buildEdgePoint(3, 7, sign, cube, indPointValues, vaEdges[11]);\r\n          const offs = bitsInside * (2 << 1 + 2);\r\n          for (let numTri = 0, indTri = 0; numTri < 2 + 2 + 2; numTri++, indTri += 3) {\r\n            // s_triIndicesMarchCube is external array, defined in mold_ind.js\r\n            const i0 = cube.striIndicesMarchCube[offs + indTri];\r\n            if (i0 < 0) {\r\n              break;\r\n            }\r\n            const i1 = cube.striIndicesMarchCube[offs + indTri + 1];\r\n            const i2 = cube.striIndicesMarchCube[offs + indTri + 2];\r\n            if (!this.addTriangle(vaEdges[i0], vaEdges[i1], vaEdges[i2])) {\r\n              return 0 - 2;\r\n            }\r\n          } // for numTri\r\n\r\n          // next cell (cube)\r\n          indCell++;\r\n        } // for (x)\r\n      } // for (z)\r\n    } // for (y)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns number of cell with intersection with at least one sphere.\r\n   * Using this number, we can estimate required number of vertices\r\n   * and triangles to build result mesh.\r\n   *\r\n   * @param {number} side Number of points in cube voxels\r\n   * @param {number} numCells Number of cells in cube voxels (per direction)\r\n   * @param {array} corners Array of float values for cube corner points\r\n   * @param {object} cube IsoSurfaceMarchCube object\r\n   * @returns {number} numIntersectedCells\r\n   */\r\n  getNumIntersectedCells(side, numCells, corners, cube) {\r\n    const side2 = side * side;\r\n    const cNumVerts = 8;\r\n    let numIntersectedCells = 0;\r\n    let indCell = 0;\r\n    let indY = 0;\r\n    for (let y = 0; y < numCells; y++, indY += side2) {\r\n      let indZ = 0;\r\n      for (let z = 0; z < numCells; z++, indZ += side) {\r\n        for (let x = 0; x < numCells; x++) {\r\n          const cubeValuesIndex = indCell * (2 << 2 + 2) + 24;\r\n          const indCorner = x + indZ + indY;\r\n          cube.pointsValuesLinear[cubeValuesIndex] = corners[indCorner];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 1] = corners[indCorner + 1];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 2] = corners[indCorner + side + 1];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 3] = corners[indCorner + side];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 4] = corners[side2 + indCorner];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 5] = corners[side2 + indCorner + 1];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 6] = corners[side2 + indCorner + side + 1];\r\n          cube.pointsValuesLinear[cubeValuesIndex + 7] = corners[side2 + indCorner + side];\r\n\r\n          // check read exception\r\n          // assert(side2 + indCorner + side + 1 < side3);\r\n\r\n          // get bit flags inside\r\n          let bitsInside = 0;\r\n          for (let i = 0; i < cNumVerts; ++i) {\r\n            if (cube.pointsValuesLinear[cubeValuesIndex + i] < 0.0) {\r\n              bitsInside |= 1 << i;\r\n            }\r\n          }\r\n          if (bitsInside === 0 || bitsInside === (1 << cNumVerts) - 1) {\r\n            cube.hasIntersection[indCell] = false;\r\n          } else {\r\n            cube.hasIntersection[indCell] = true;\r\n            numIntersectedCells++;\r\n          }\r\n          cube.bitsInside[indCell] = bitsInside;\r\n          // next cell\r\n          indCell++;\r\n        } // for (x)\r\n      } // for (z)\r\n    } // for (y)\r\n    return numIntersectedCells;\r\n  }\r\n  getType(letter) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const atomT = [0, 0, 1, 1, 2, 6, 3, 6, 4, 6, 5, 6, 6, 0, 7, 3, 8, 2, 9, 6, 10, 6, 11, 6, 12, 6, 13, 6, 14, 6, 15, 4, 16, 5, 17, 6, 18, 6, 19, 6, 20, 6, 21, 6, 22, 6, 23, 6, 24, 6, 25, 6, 26, 6, 27, 6, 28, 6, 29, 6, 30, 6, 31, 6, 32, 6, 33, 6, 34, 6, 35, 6, 36, 6, 37, 6, 38, 6, 39, 6, 40, 6, 41, 6, 42, 6, 43, 6, 44, 6, 45, 6, 46, 6, 47, 6, 48, 6, 49, 6, 50, 6, 51, 6, 52, 6, 53, 6, 54, 6, 55, 6, 56, 6, 57, 6, 58, 6, 59, 6, 60, 6, 61, 6, 62, 6, 63, 6, 64, 6, 65, 6, 66, 6, 67, 6, 68, 6, 69, 6, 70, 6, 71, 6, 72, 6, 73, 6, 74, 6, 75, 6, 76, 6, 77, 6, 78, 6, 79, 6, 80, 6, 81, 6, 82, 6, 83, 6, 84, 6, 85, 6, 86, 6, 87, 6, 88, 6, 89, 6, 90, 6, 91, 6, 92, 6, 93, 6, 94, 6, 95, 6, 96, 6, 97, 6, 98, 6, 99, 6, 100, 6, 101, 6, 102, 6, 103, 6, 104, 6, 105, 6, 106, 6, 107, 6, 108, 6, 109, 6];\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    if (letter < 1 || letter > atomT.length / 2 || Object.keys(SSIsosurfaceGeometry_Element.ByAtomicNumber).length * 2 !== atomT.length) {\r\n      throw new Error('atomT.length  should be equal Element.ByAtomicNumber.length * 2');\r\n    }\r\n    return atomT[letter * 2];\r\n  }\r\n\r\n  /**\r\n   * Calculate values for marching cube grid points\r\n   * positive values are outside sphere, negative - is inside\r\n   *\r\n   * @param {array} corners array of float values\r\n   * @param {number} side Number of point in cube in 1 dimennsion\r\n   * @param {Vector3} vBoxMin Bounding box min point\r\n   * @param {Vector3} vBoxMax Bounding box max point\r\n   * @param {array} atoms Array of input atoms\r\n   * @param {number} probeRad radius for atom probing\r\n   */\r\n  calculateGridCorners(corners, side, vBoxMin, vBoxMax, atoms, probeRad) {\r\n    const side2 = side * side;\r\n    const side3 = side2 * side;\r\n    const vCorner = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const vDif = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    /* eslint-disable no-magic-numbers */\r\n    const aLot = +1.0e12;\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    for (let i = 0; i < side3; i++) {\r\n      corners[i] = aLot; // to large value\r\n    }\r\n    const xScale = (side - 1) / (vBoxMax.x - vBoxMin.x);\r\n    const yScale = (side - 1) / (vBoxMax.y - vBoxMin.y);\r\n    const zScale = (side - 1) / (vBoxMax.z - vBoxMin.z);\r\n    for (let s = 0, numAtoms = atoms.length; s < numAtoms; s++) {\r\n      const atom = atoms[s];\r\n      const radius = atom.radius + probeRad;\r\n      const fx = (atom.coord.x - radius - vBoxMin.x) * xScale;\r\n      const fy = (atom.coord.y - radius - vBoxMin.y) * yScale;\r\n      const fz = (atom.coord.z - radius - vBoxMin.z) * zScale;\r\n      const indXMin = Math.floor(fx);\r\n      const indYMin = Math.floor(fy);\r\n      const indZMin = Math.floor(fz);\r\n      let indXMax = Math.floor((atom.coord.x + radius - vBoxMin.x) * xScale);\r\n      let indYMax = Math.floor((atom.coord.y + radius - vBoxMin.y) * yScale);\r\n      let indZMax = Math.floor((atom.coord.z + radius - vBoxMin.z) * zScale);\r\n      indXMax++;\r\n      indYMax++;\r\n      indZMax++;\r\n      indXMax = indXMax <= side - 1 ? indXMax : side - 1;\r\n      indYMax = indYMax <= side - 1 ? indYMax : side - 1;\r\n      indZMax = indZMax <= side - 1 ? indZMax : side - 1;\r\n      for (let y = indYMin; y <= indYMax; y++) {\r\n        const indY = y * side2;\r\n        for (let z = indZMin; z <= indZMax; z++) {\r\n          const indZ = z * side;\r\n          for (let x = indXMin; x <= indXMax; x++) {\r\n            const ind = indY + indZ + x;\r\n            this.getCornerCoord(vBoxMin, vBoxMax, x, y, z, side, vCorner);\r\n            vDif.x = vCorner.x - atom.coord.x;\r\n            vDif.y = vCorner.y - atom.coord.y;\r\n            vDif.z = vCorner.z - atom.coord.z;\r\n            const distToSphere = Math.sqrt(vDif.x * vDif.x + vDif.y * vDif.y + vDif.z * vDif.z);\r\n            // val: < 0, if inside sphere\r\n            // val: > 0, if outside sphere\r\n            const val = distToSphere - radius;\r\n            if (val < corners[ind]) {\r\n              corners[ind] = val;\r\n            }\r\n          } // for (x)\r\n        } // for (z)\r\n      } // for (y)\r\n    } // for (s)\r\n  }\r\n\r\n  /**\r\n   * Create memory pool for vertex hash management\r\n   *\r\n   * @param {number} maxNumVertices Maximum possible number of vertices (that will be build)\r\n   * @param {number} maxNumTriangles Maximum possible number of triangles (that will be build)\r\n   * @returns {number} 0, if success. (<0) is non memory\r\n   */\r\n  createVertexHash(maxNumVertices, maxNumTriangles) {\r\n    this.hashLines = utils.allocateTyped(Int32Array, HASH_SIZE * 2);\r\n    if (this.hashLines === null) {\r\n      return 0 - 1;\r\n    }\r\n    for (let i = 0, j = 0; i < HASH_SIZE; i++) {\r\n      this.hashLines[j++] = 0; // num vertices in this hash line\r\n      this.hashLines[j++] = 0 - 1; // index of the first entry\r\n    }\r\n    this.maxNumVertices = maxNumVertices;\r\n    this.maxNumTriangles = maxNumTriangles;\r\n    this.numHashEtriesAllocated = maxNumVertices;\r\n    this.hashEntries = utils.allocateTyped(Int32Array, 2 * this.numHashEtriesAllocated);\r\n    if (this.hashEntries === null) {\r\n      return 0 - 1;\r\n    }\r\n    for (let i = 0, j = 0; i < this.numHashEtriesAllocated; i++) {\r\n      this.hashEntries[j++] = 0 - 1; // index of vertex\r\n      this.hashEntries[j++] = 0 - 1; // next hash entry index\r\n    }\r\n    this.numHashEntryIndex = 0;\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Allocate and return new hash entry. Just check possible amount.\r\n   *\r\n   * @returns {number} index of hash entry, that can be used for geometry add vertex functionality\r\n   */\r\n  getNewHashEntry() {\r\n    if (this.numHashEntryIndex < this.numHashEtriesAllocated) {\r\n      const i = this.numHashEntryIndex;\r\n      this.numHashEntryIndex++;\r\n      return i;\r\n    }\r\n    return 0 - 1;\r\n  }\r\n\r\n  /**\r\n   * Add vertex to geometry structure\r\n   * using vertex hash table to quickly check, is this vertex already exist in geometry\r\n   *\r\n   * @param {object} geoOut Geometry to build\r\n   * @param {Vector3} vAdd Vertex to add\r\n   * @returns {number} index of added (or existing) vertex in geometry.\r\n   */\r\n  addVertexToGeo(geoOut, vAdd) {\r\n    let entry;\r\n    const oneHynberes = 0.01;\r\n    const n815851 = 815851;\r\n    const n37633 = 37633;\r\n    const n2453543 = 2453543;\r\n    const r106 = 1.0e-6;\r\n    const hashResolution = this.marCubeResoultion << 2;\r\n    const v = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const ix = Math.floor(hashResolution * (vAdd.x - this.vBoxMin.x) / (this.vBoxMax.x + oneHynberes - this.vBoxMin.x));\r\n    const iy = Math.floor(hashResolution * (vAdd.y - this.vBoxMin.y) / (this.vBoxMax.y + oneHynberes - this.vBoxMin.y));\r\n    const iz = Math.floor(hashResolution * (vAdd.z - this.vBoxMin.z) / (this.vBoxMax.z + oneHynberes - this.vBoxMin.z));\r\n    let iHash = ix * n815851 + iz * n37633 + iy * n2453543;\r\n    iHash &= HASH_SIZE - 1;\r\n    const hLineIndex = iHash + iHash;\r\n\r\n    // search vertex via hash\r\n    // search in hash list\r\n    if (this.vBoxMin !== null && this.vBoxMax !== null) {\r\n      for (entry = this.hashLines[hLineIndex + 1]; entry >= 0; entry = this.hashEntries[entry * 2 + 1]) {\r\n        const ind = this.hashEntries[entry * 2 + 0]; // vertex index\r\n        v.copy(geoOut._vertices[ind]);\r\n        v.x -= vAdd.x;\r\n        v.y -= vAdd.y;\r\n        v.z -= vAdd.z;\r\n        const dot2 = v.x * v.x + v.y * v.y + v.z * v.z;\r\n        if (dot2 < r106) {\r\n          return ind;\r\n        } // if (found)\r\n      } // for (entry)\r\n    } // search\r\n\r\n    // add new vertex to geometry\r\n    if (geoOut._numVertices >= this.maxNumVertices) {\r\n      return 0 - 1;\r\n    }\r\n    const iVertAdd = geoOut._numVertices;\r\n    geoOut._vertices[iVertAdd].copy(vAdd);\r\n\r\n    // add to hash\r\n    if (this.vBoxMin !== null && this.vBoxMax !== null) {\r\n      entry = this.getNewHashEntry();\r\n      if (entry < 0) {\r\n        return 0 - 1;\r\n      }\r\n      const entryFirst = this.hashLines[hLineIndex + 1];\r\n      this.hashLines[hLineIndex + 1] = entry;\r\n      this.hashEntries[entry * 2 + 0] = iVertAdd;\r\n      this.hashEntries[entry * 2 + 1] = entryFirst;\r\n      this.hashLines[hLineIndex + 0]++; // num vertices in line ++\r\n    }\r\n    geoOut._numVertices++;\r\n    return iVertAdd;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} side some placeholder description\r\n   * @param {number} probeSphereRadius some placeholder description\r\n   * @param {object} vBoxMin some placeholder description\r\n   * @param {object} vBoxMax some placeholder description\r\n   * @param {object} geoOut some placeholder description\r\n   * @param {object} corners some placeholder description\r\n   * @returns {number} always 0\r\n   */\r\n  modifyExcludedFromGeo(side, probeSphereRadius, vBoxMin, vBoxMax, geoOut, corners) {\r\n    let ind;\r\n    let distToSphere;\r\n    let distToBorder;\r\n    const r11 = 1.1;\r\n    function innerBlockWorkAround() {\r\n      if (distToBorder > 0.0) {\r\n        // point is inside probe sphere\r\n        if (corners[ind] < 0.0) {\r\n          corners[ind] = distToBorder; // was inside surface, now is oustide ( > 0)\r\n        }\r\n        if (distToBorder > corners[ind]) {\r\n          corners[ind] = distToBorder; // find positive maximum\r\n        }\r\n      } else if (distToBorder > corners[ind]) {\r\n        // point is outside sphere\r\n        corners[ind] = distToBorder; // find negative maximum\r\n      }\r\n    }\r\n    const side2 = side * side;\r\n    const xScale = (side - 1) / (vBoxMax.x - vBoxMin.x);\r\n    const yScale = (side - 1) / (vBoxMax.y - vBoxMin.y);\r\n    const zScale = (side - 1) / (vBoxMax.z - vBoxMin.z);\r\n    const probeSpRad2 = probeSphereRadius * 2 * (probeSphereRadius * 2);\r\n    const sideInv = 1.0 / (side - 1);\r\n    for (let i = 0; i < geoOut._numVertices; i++) {\r\n      const vCenter = geoOut._vertices[i];\r\n      const radEst = probeSphereRadius * r11;\r\n      let indXMin = Math.floor((vCenter.x - radEst - vBoxMin.x) * xScale);\r\n      let indYMin = Math.floor((vCenter.y - radEst - vBoxMin.y) * yScale);\r\n      let indZMin = Math.floor((vCenter.z - radEst - vBoxMin.z) * zScale);\r\n      let indXMax = Math.floor((vCenter.x + radEst - vBoxMin.x) * xScale);\r\n      let indYMax = Math.floor((vCenter.y + radEst - vBoxMin.y) * yScale);\r\n      let indZMax = Math.floor((vCenter.z + radEst - vBoxMin.z) * zScale);\r\n      indXMin = indXMin >= 0 ? indXMin : 0;\r\n      indYMin = indYMin >= 0 ? indYMin : 0;\r\n      indZMin = indZMin >= 0 ? indZMin : 0;\r\n      indXMax = indXMax <= side - 1 ? indXMax : side - 1;\r\n      indYMax = indYMax <= side - 1 ? indYMax : side - 1;\r\n      indZMax = indZMax <= side - 1 ? indZMax : side - 1;\r\n      for (let iy = indYMin; iy <= indYMax; iy++) {\r\n        const indY = iy * side2;\r\n        for (let iz = indZMin; iz <= indZMax; iz++) {\r\n          const indZ = iz * side;\r\n          for (let ix = indXMin; ix <= indXMax; ix++) {\r\n            ind = indY + indZ + ix;\r\n            // getCornerCoord(vBoxMin, vBoxMax, ix, iy, iz, side, &vCorner);\r\n            let t = ix * sideInv;\r\n            const xCorner = vBoxMin.x * (1.0 - t) + vBoxMax.x * t;\r\n            t = iy * sideInv;\r\n            const yCorner = vBoxMin.y * (1.0 - t) + vBoxMax.y * t;\r\n            t = iz * sideInv;\r\n            const zCorner = vBoxMin.z * (1.0 - t) + vBoxMax.z * t;\r\n            const dx = xCorner - vCenter.x;\r\n            const dy = yCorner - vCenter.y;\r\n            const dz = zCorner - vCenter.z;\r\n            const dist2 = dx * dx + dy * dy + dz * dz;\r\n            if (dist2 < probeSpRad2) {\r\n              distToSphere = Math.sqrt(dist2);\r\n              distToBorder = -(distToSphere - probeSphereRadius);\r\n              innerBlockWorkAround();\r\n            } // if (dist from corner point to sphere center more 2 radiuses)\r\n          } // for (ix)\r\n        } // for (iz)\r\n      } // for (iy)\r\n    } // for (i) all geo vertices\r\n    return 0;\r\n  }\r\n  _innerBuild() {\r\n    let ok;\r\n    const expandFactor = 1.2;\r\n\r\n    // performance test\r\n    // this.performanceTest();\r\n\r\n    // Create temporary atoms (but colored)\r\n    const packedArrays = {\r\n      posRad: this._posRad,\r\n      colors: this._colors,\r\n      atoms: this._opts.atoms\r\n    };\r\n    this.complex = this._opts.parent;\r\n    this.atoms = packedArrays.atoms;\r\n    this.meshResolution = this._opts.gridSpacing;\r\n    this.atomRadiusScale = this._opts.radScale;\r\n    this.colorMode = this._opts.colorMode;\r\n    this.probeRadius = this._opts.probeRadius;\r\n    this.useVertexColors = true;\r\n    this.excludeProbe = this._opts.excludeProbe;\r\n    this.visibilitySelector = this._opts.visibilitySelector;\r\n    this.geoOut = null;\r\n    this.hashLines = null;\r\n    this.hashEntries = null;\r\n    this.numHashEtriesAllocated = 0;\r\n    this.numHashEntryIndex = 0;\r\n    this.maxNumVertices = 0;\r\n    this.maxNumTriangles = 0;\r\n    const atomsColored = new Array(this.atoms.length);\r\n    this.convertToAtomsColored(packedArrays, atomsColored);\r\n\r\n    // find bbox for spheres scene\r\n    const vBoxMin = this.vBoxMin = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const vBoxMax = this.vBoxMax = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this.getBoundingBox(atomsColored, vBoxMin, vBoxMax);\r\n    const marCubeResoultion = this.marCubeResoultion = this.meshResolution * (2 + 2);\r\n\r\n    // build grid corners for Marching cube algorithm\r\n    const side = marCubeResoultion;\r\n    const side2 = side * side;\r\n    const side3 = side2 * side;\r\n    const corners = utils.allocateTyped(Float32Array, side3);\r\n    const rProbeRadius = this.probeRadius * this.atomRadiusScale;\r\n    this.calculateGridCorners(corners, side, vBoxMin, vBoxMax, atomsColored, rProbeRadius);\r\n    const numCells = marCubeResoultion - 1;\r\n    const cube = new geometries_IsoSurfaceMarchCube();\r\n    ok = cube.create(numCells);\r\n    if (ok < 0) {\r\n      return ok;\r\n    }\r\n    // copy corners to cells\r\n    const vCellStep = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    vCellStep.x = (vBoxMax.x - vBoxMin.x) / numCells;\r\n    vCellStep.y = (vBoxMax.y - vBoxMin.y) / numCells;\r\n    vCellStep.z = (vBoxMax.z - vBoxMin.z) / numCells;\r\n    let numIntersectedCellsEstim = this.getNumIntersectedCells(side, numCells, corners, cube);\r\n    let maxNumVertices = Math.floor(numIntersectedCellsEstim * expandFactor);\r\n    let maxNumTriangles = Math.floor(numIntersectedCellsEstim * expandFactor * 2);\r\n    this.geoOut = new geometries_IsoSurfaceGeo(maxNumVertices, maxNumTriangles, this.useVertexColors);\r\n    ok = this.createVertexHash(maxNumVertices, maxNumTriangles);\r\n    if (ok < 0) {\r\n      return ok;\r\n    }\r\n\r\n    // build voxel world (used to check triangle-to-atom tie and to calculate normals and colors)\r\n    let probeRadForNormalsColors = rProbeRadius;\r\n    if (this.excludeProbe) {\r\n      probeRadForNormalsColors = 0.01;\r\n    }\r\n    this.voxelWorld = new geometries_IsosurfaceBuildNormals(atomsColored.length, atomsColored, vBoxMin, vBoxMax, probeRadForNormalsColors);\r\n    this.voxelWorld.createVoxels();\r\n    ok = this.buildGeoFromCorners(marCubeResoultion, vBoxMin, vBoxMax, corners, vCellStep, cube);\r\n    if (this.excludeProbe) {\r\n      // using 3d mesh (geoOut) as a surface points\r\n      // move probe sphere and try to minimuze corners values\r\n      this.modifyExcludedFromGeo(side, rProbeRadius, vBoxMin, vBoxMax, this.geoOut, corners);\r\n\r\n      // delete old builded geo\r\n      this.geoOut._vertices = null;\r\n      this.geoOut._colors = null;\r\n      this.geoOut._indices = null;\r\n      this.geoOut._normals = null;\r\n      this.geoOut._numVertices = 0;\r\n      this.geoOut._numTriangles = 0;\r\n      this.geoOut = null;\r\n\r\n      // estimage geo vertices budget again\r\n      numIntersectedCellsEstim = this.getNumIntersectedCells(side, numCells, corners, cube);\r\n      maxNumVertices = Math.floor(numIntersectedCellsEstim * expandFactor);\r\n      maxNumTriangles = Math.floor(numIntersectedCellsEstim * expandFactor * 2);\r\n\r\n      // creates empty new geometry\r\n      this.geoOut = new geometries_IsoSurfaceGeo(maxNumVertices, maxNumTriangles, this.useVertexColors);\r\n      ok = this.createVertexHash(maxNumVertices, maxNumTriangles);\r\n      if (ok < 0) {\r\n        return ok;\r\n      }\r\n      // build vertices and triangles from corners values\r\n      ok = this.buildGeoFromCorners(side, vBoxMin, vBoxMax, corners, vCellStep, cube);\r\n    }\r\n\r\n    // build vertex normals\r\n    this.voxelWorld.buildNormals(this.geoOut._vertices.length, this.geoOut._vertices, this.geoOut._normals);\r\n    // More value : more smooth color mixing\r\n    // value about 0.7: very rough colors borders\r\n    let radiusColorSmoothness = 6.5;\r\n    if (this.excludeProbe) {\r\n      radiusColorSmoothness -= 1.5;\r\n    }\r\n    if (this.useVertexColors) {\r\n      this.voxelWorld.buildColors(this.geoOut._vertices.length, this.geoOut._vertices, this.geoOut._colors, radiusColorSmoothness);\r\n    }\r\n    this.voxelWorld.destroyVoxels();\r\n    this.voxelWorld = null;\r\n\r\n    // remove objects\r\n    cube.destroy();\r\n    return ok;\r\n  }\r\n}\r\n\r\n// All code below must be erased from every device and each developer's memory\r\n\r\n/* harmony default export */ const geometries_SSIsosurfaceGeometry = (SSIsosurfaceGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/LabelsGeometry.js\r\n\r\n\r\nfunction createLabel(fieldTxt, className) {\r\n  const text = document.createElement('div');\r\n  text.className = className;\r\n  if (typeof fieldTxt === 'string') {\r\n    const spanText = document.createElement('span');\r\n    spanText.style.fontSize = '150%';\r\n    const strings = fieldTxt.split('\\n');\r\n    for (let i = 0, n = strings.length; i < n; ++i) {\r\n      const spanNodeP = document.createElement('span');\r\n      const spanNodeText = document.createTextNode(strings[i]);\r\n      spanNodeP.appendChild(spanNodeText);\r\n      spanText.appendChild(spanNodeP);\r\n      if (i < n - 1) {\r\n        spanText.appendChild(document.createElement('br'));\r\n      }\r\n    }\r\n    text.appendChild(spanText);\r\n  } else {\r\n    text.appendChild(fieldTxt);\r\n  }\r\n  text.worldPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return text;\r\n}\r\nclass LabelsGeometry extends utils_EventDispatcher {\r\n  constructor(instanceCount, opts) {\r\n    super();\r\n    this._opts = opts;\r\n    this.items = [];\r\n    this.needsUpdate = false;\r\n    let xTranslation = -50;\r\n    let yTranslation = -50;\r\n    switch (opts.horizontalAlign) {\r\n      case 'left':\r\n        xTranslation = 0;\r\n        break;\r\n      case 'right':\r\n        xTranslation = -100;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    switch (opts.verticalAlign) {\r\n      case 'top':\r\n        yTranslation = -100;\r\n        break;\r\n      case 'bottom':\r\n        yTranslation = 0;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const deltaPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(opts.dx || 0, opts.dy || 0, opts.dz || 0);\r\n    this.userData = {\r\n      translation: `translate(${xTranslation}%, ${yTranslation}%)`,\r\n      offset: deltaPos\r\n    };\r\n  }\r\n  setItem(itemIdx, itemPos, fieldTxt) {\r\n    const opts = this._opts;\r\n    const text = this.items[itemIdx] || createLabel(fieldTxt, 'label');\r\n    text.worldPos.copy(itemPos);\r\n    text.style.textAlign = opts.horizontalAlign;\r\n    text.style.verticalAlign = opts.verticalAlign;\r\n    this.items[itemIdx] = text;\r\n  }\r\n  setColor(itemIdx, fColor, bColor) {\r\n    const text = this.items[itemIdx];\r\n    text.opts = {\r\n      color: fColor,\r\n      background: bColor\r\n    };\r\n  }\r\n  startUpdate() {\r\n    return true;\r\n  }\r\n  finishUpdate() {\r\n    this.needsUpdate = true;\r\n    this.dispatchEvent({\r\n      type: 'update'\r\n    });\r\n  }\r\n  finalize() {\r\n    this.finishUpdate();\r\n  }\r\n\r\n  // unimplemented functions\r\n  raycast() {}\r\n  setOpacity() {}\r\n  getSubset() {\r\n    return [];\r\n  }\r\n}\r\n/* harmony default export */ const geometries_LabelsGeometry = (LabelsGeometry);\r\n;// CONCATENATED MODULE: ./src/gfx/geometries/geometries.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const geometries = ({\r\n  InstancedSpheresGeometry: geometries_InstancedSpheresGeometry,\r\n  SimpleSpheresGeometry: geometries_SimpleSpheresGeometry,\r\n  Simple2CCylindersGeometry: geometries_Simple2CCylindersGeometry,\r\n  Instanced2CCylindersGeometry: geometries_Instanced2CCylindersGeometry,\r\n  ExtrudedObjectsGeometry: geometries_ExtrudedObjectsGeometry,\r\n  ChunkedLinesGeometry: geometries_ChunkedLinesGeometry,\r\n  TwoColorLinesGeometry: geometries_TwoColorLinesGeometry,\r\n  CrossGeometry: geometries_CrossGeometry,\r\n  QuickSurfGeometry: geometries_QuickSurfGeometry,\r\n  ContactSurfaceGeometry: geometries_ContactSurfaceGeometry,\r\n  SSIsosurfaceGeometry: geometries_SSIsosurfaceGeometry,\r\n  LabelsGeometry: geometries_LabelsGeometry\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Uber.vert\r\nconst Uber_namespaceObject = \"float INSTANCED_SPRITE_OVERSCALE = 1.3;\\r\\n\\r\\nattribute vec3 normal;\\r\\n\\r\\n#ifdef NORMALS_TO_G_BUFFER\\r\\n  varying vec3 viewNormal;\\r\\n#endif\\r\\n#if !defined (SPHERE_SPRITE) && !defined (CYLINDER_SPRITE)\\r\\n  varying vec3 vNormal;\\r\\n#endif\\r\\n\\r\\n#ifdef THICK_LINE\\r\\n  attribute vec4 position; // W contains vert pos or neg offset\\r\\n#else\\r\\n  attribute vec3 position;\\r\\n#endif\\r\\n\\r\\nvarying vec3 vWorldPosition;\\r\\nvarying vec3 vViewPosition;\\r\\n\\r\\n#ifdef ATTR_ALPHA_COLOR\\r\\n  attribute float alphaColor;\\r\\n  varying float alphaCol;\\r\\n#endif\\r\\n\\r\\n#if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\r\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\r\\n\\t\\tvarying vec3 vDirectionalShadowNormal[ NUM_DIR_LIGHTS ];\\r\\n\\t#endif\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR\\r\\n  attribute vec3 color;\\r\\n  varying vec3 vColor;\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR2\\r\\n  attribute vec3 color2;\\r\\n  varying vec3 vColor2;\\r\\n  attribute vec2 uv;\\r\\n  #ifndef CYLINDER_SPRITE\\r\\n    varying vec2 vUv;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n#ifdef INSTANCED_POS\\r\\n  attribute vec4 offset;\\r\\n  #ifdef SPHERE_SPRITE\\r\\n    varying vec4 instOffset;\\r\\n  varying vec4 spritePosEye;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n#ifdef INSTANCED_MATRIX\\r\\n  attribute vec4 matVector1;\\r\\n  attribute vec4 matVector2;\\r\\n  attribute vec4 matVector3;\\r\\n  attribute vec4 invmatVector1;\\r\\n  attribute vec4 invmatVector2;\\r\\n  attribute vec4 invmatVector3;\\r\\n\\r\\n  #ifdef CYLINDER_SPRITE\\r\\n    varying vec4 matVec1;\\r\\n    varying vec4 matVec2;\\r\\n    varying vec4 matVec3;\\r\\n    varying vec4 invmatVec1;\\r\\n    varying vec4 invmatVec2;\\r\\n    varying vec4 invmatVec3;\\r\\n    varying vec4 spritePosEye;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\nuniform mat4 modelViewMatrix; // optional\\r\\nuniform mat4 projectionMatrix; // optional\\r\\nuniform mat3 normalMatrix; // optional\\r\\nuniform mat4 modelMatrix; // optional\\r\\n\\r\\n#ifdef DASHED_LINE\\r\\n  attribute float lineDistance;\\r\\n  varying float vLineDistance;\\r\\n#endif\\r\\n\\r\\n#ifdef THICK_LINE\\r\\n  attribute vec3 direction;\\r\\n  uniform mat4 projMatrixInv;\\r\\n  uniform vec2 viewport;\\r\\n  uniform float lineWidth;\\r\\n\\r\\n  vec4 transform(vec4 coord){\\r\\n    return projectionMatrix * modelViewMatrix * coord;\\r\\n  }\\r\\n\\r\\n  vec2 project(vec4 device){\\r\\n    vec3 device_normal = device.xyz/device.w;\\r\\n    vec2 clip_pos = (device_normal*0.5+0.5).xy;\\r\\n    return clip_pos * viewport;\\r\\n  }\\r\\n\\r\\n  vec4 unproject(vec2 screen, float z, float w){\\r\\n    vec2 clip_pos = screen/viewport;\\r\\n    vec2 device_normal = clip_pos*2.0-1.0;\\r\\n    return vec4(device_normal*w, z, w);\\r\\n  }\\r\\n#endif\\r\\n\\r\\n\\r\\n/////////////////////////////////////////// Main ///////////////////////////////////////////////\\r\\nvoid main() {\\r\\n\\r\\n#ifdef ATTR_ALPHA_COLOR\\r\\n  alphaCol = alphaColor;\\r\\n#endif\\r\\n\\r\\n#ifdef INSTANCED_MATRIX\\r\\n  vec3 objectNormal = vec3(\\r\\n    dot(normal, matVector1.xyz),\\r\\n    dot(normal, matVector2.xyz),\\r\\n    dot(normal, matVector3.xyz));\\r\\n#else\\r\\n  vec3 objectNormal = vec3( normal );\\r\\n#endif\\r\\n\\r\\nvec3 transformedNormal = normalMatrix * objectNormal;\\r\\n\\r\\n#if !defined (SPHERE_SPRITE) && !defined (CYLINDER_SPRITE)\\r\\n  vNormal = normalize(transformedNormal);\\r\\n#endif\\r\\n\\r\\n#ifdef NORMALS_TO_G_BUFFER\\r\\n  viewNormal = normalize(mat3(modelViewMatrix)*objectNormal);\\r\\n#endif\\r\\n\\r\\n  vec4 localPos = vec4(position.xyz, 1.0);\\r\\n  vec4 worldPos = modelMatrix * localPos;\\r\\n  vec4 mvPosition = modelViewMatrix * localPos;\\r\\n\\r\\n// make thick line offset\\r\\n#ifdef THICK_LINE\\r\\n   // get screen pos\\r\\n   vec4 dPos = transform(vec4(position.xyz, 1.0));\\r\\n   vec2 sPos = project(dPos);\\r\\n   // move pos forward\\r\\n   vec3 position2 = position.xyz + direction.xyz * 0.5;\\r\\n   // get screen offset pos\\r\\n   vec4 dPos2 = transform(vec4(position2.xyz, 1.0));\\r\\n   vec2 sPos2 = project(dPos2);\\r\\n   // screen line direction\\r\\n   vec2 sDir = normalize(sPos2 - sPos);\\r\\n   // vertex offset (orthogonal to line direction)\\r\\n   vec2 offset1 = vec2(-sDir.y, sDir.x);\\r\\n   // move screen vertex\\r\\n   vec2 newPos = sPos + offset1 * position.w * lineWidth;\\r\\n   // get moved pos in view space\\r\\n   vec4 dNewPos =  unproject(newPos, dPos.z, dPos.w);\\r\\n   mvPosition.xyz = (projMatrixInv * dNewPos).xyz;\\r\\n#endif // THICK_LINE\\r\\n\\r\\n#ifdef INSTANCED_POS\\r\\n  #ifdef SPHERE_SPRITE\\r\\n    instOffset = offset;\\r\\n\\r\\n    vec4 posEye = modelViewMatrix * vec4( offset.xyz, 1.0 );\\r\\n    float scale = length(modelViewMatrix[0]);\\r\\n    mvPosition = posEye + vec4( position.xyz * offset.w * scale * INSTANCED_SPRITE_OVERSCALE, 0.0 );\\r\\n    posEye.w = offset.w * scale;\\r\\n\\r\\n    spritePosEye = posEye;\\r\\n #else\\r\\n    localPos = vec4( offset.xyz + position.xyz * offset.w, 1.0 );\\r\\n    worldPos = modelMatrix * localPos;\\r\\n    mvPosition = modelViewMatrix * localPos;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n#ifdef INSTANCED_MATRIX\\r\\n  #ifdef CYLINDER_SPRITE\\r\\n    matVec1 = matVector1;\\r\\n    matVec2 = matVector2;\\r\\n    matVec3 = matVector3;\\r\\n    invmatVec1 = invmatVector1;\\r\\n    invmatVec2 = invmatVector2;\\r\\n    invmatVec3 = invmatVector3;\\r\\n\\r\\n    // calculate eye coords of cylinder endpoints\\r\\n    vec4 v = vec4(0, -0.5, 0, 1);\\r\\n    vec4 p1 = modelViewMatrix * vec4(dot(v, matVector1), dot(v, matVector2), dot(v, matVector3), 1.0);\\r\\n    v.y = 0.5;\\r\\n    vec4 p2 = modelViewMatrix * vec4(dot(v, matVector1), dot(v, matVector2), dot(v, matVector3), 1.0);\\r\\n\\r\\n    // sprite is placed at the center of cylinder\\r\\n    vec4 posEye;\\r\\n    posEye.xyz = mix(p1.xyz, p2.xyz, 0.5);\\r\\n    posEye.w = 1.0;\\r\\n    spritePosEye = posEye;\\r\\n\\r\\n    // cylinder radius in eye space\\r\\n    float rad = length(modelViewMatrix[0]) * length(vec3(matVector1.x, matVector2.x, matVector3.x));\\r\\n    vec2 spriteSize;\\r\\n    #ifdef ORTHOGRAPHIC_CAMERA\\r\\n      // In ortho projection we skip z coordinate\\r\\n      // basic sprite size at screen plane (covers only cylinder axis)\\r\\n      vec2 spriteSizeScreen = abs(p2.xy - p1.xy);\\r\\n\\r\\n      spriteSize = vec2(1.0, 1.0) * INSTANCED_SPRITE_OVERSCALE * (spriteSizeScreen + 2.0 * rad);\\r\\n    #else\\r\\n      // basic sprite size at screen plane (covers only cylinder axis)\\r\\n      vec2 spriteSizeScreen = abs(p2.xy / p2.z - p1.xy / p1.z);\\r\\n\\r\\n      // full sprite size in eye coords\\r\\n      float minZ = min(abs(p1.z), abs(p2.z));\\r\\n      spriteSize = vec2(1.0, 1.0) * INSTANCED_SPRITE_OVERSCALE * abs(posEye.z) * (spriteSizeScreen + 2.0 * rad / minZ);\\r\\n    #endif\\r\\n\\r\\n    mvPosition = posEye + vec4( position.xy * 0.5 * spriteSize, 0, 0 );\\r\\n  #else\\r\\n    localPos = vec4(dot(localPos, matVector1), dot(localPos, matVector2), dot(localPos, matVector3), 1.0);\\r\\n    worldPos = modelMatrix * localPos;\\r\\n    mvPosition = modelViewMatrix * localPos;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n  gl_Position = projectionMatrix * mvPosition;\\r\\n\\r\\n  vWorldPosition = worldPos.xyz;\\r\\n  vViewPosition = - mvPosition.xyz;\\r\\n\\r\\n#if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\t  vec4 worldPosition;\\r\\n\\t  // see THREE.WebGLProgram.unrollLoops\\r\\n\\t  #pragma unroll_loop_start\\r\\n\\t  for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n      vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * vec4(vWorldPosition, 1.0);\\r\\n      vDirectionalShadowNormal[ i ] = (directionalShadowMatrix[ i ] * (modelMatrix * vec4(objectNormal, 0.0))).xyz;\\r\\n\\t  }\\r\\n\\t  #pragma unroll_loop_end\\r\\n\\t#endif\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR\\r\\n  vColor = color.xyz;\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR2\\r\\n  vColor2 = color2;\\r\\n  #ifndef CYLINDER_SPRITE\\r\\n    vUv = uv;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n#ifdef DASHED_LINE\\r\\n  vLineDistance = lineDistance;\\r\\n#endif\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Uber.frag\r\nconst gfx_shaders_Uber_namespaceObject = \"#if defined (NORMALS_TO_G_BUFFER)\\r\\n  #define fragColor gl_FragData[0]\\r\\n#else\\r\\n  #define fragColor gl_FragColor\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_ALPHA_COLOR\\r\\n  varying float alphaCol;\\r\\n#endif\\r\\n\\r\\n#ifdef COLOR_FROM_POS\\r\\n  uniform mat4 world2colorMatrix;\\r\\n#endif\\r\\n\\r\\n#if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\r\\n    uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ]; //only for sprites\\r\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\r\\n\\t\\tvarying vec3 vDirectionalShadowNormal[ NUM_DIR_LIGHTS ];\\r\\n    vec4 vDirLightWorldCoord[ NUM_DIR_LIGHTS ];\\r\\n    vec3 vDirLightWorldNormal[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n    #ifdef SHADOWMAP_PCF_RAND\\r\\n      // We use 4 instead uniform variable or define because this value is used in for(... i < value; ...) with\\r\\n      // unroll_loop and unroll_loop has pattern:\\r\\n      // /#pragma unroll_loop[\\\\s]+?for \\\\( int i \\\\= (\\\\d+)\\\\; i < (\\\\d+)\\\\; i \\\\+\\\\+ \\\\) \\\\{([\\\\s\\\\S]+?)(?=\\\\})\\\\}/g\\r\\n      uniform vec2 samplesKernel[4]; // 4 is length of _samplesKernel which is defined in UberMaterial.js\\r\\n      uniform sampler2D noiseTex;\\r\\n      uniform vec2 noiseTexelSize;\\r\\n      uniform vec2 srcTexelSize;\\r\\n      uniform mat4 projectionMatrix;\\r\\n    #endif\\r\\n\\t#endif\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR\\r\\n  varying vec3 vColor;\\r\\n#endif\\r\\n\\r\\n#ifdef ATTR_COLOR2\\r\\n  varying vec3 vColor2;\\r\\n  #ifndef CYLINDER_SPRITE\\r\\n    varying vec2 vUv;\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\nuniform vec3 diffuse;\\r\\nuniform vec3 emissive;\\r\\nuniform vec3 specular;\\r\\nuniform float shininess;\\r\\nuniform vec3 fixedColor;\\r\\nuniform float opacity;\\r\\nuniform float zClipValue;\\r\\nuniform float clipPlaneValue;\\r\\n\\r\\n#ifdef NORMALS_TO_G_BUFFER\\r\\n  varying vec3 viewNormal;\\r\\n#endif\\r\\n\\r\\n#define RECIPROCAL_PI 0.31830988618\\r\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\r\\n\\r\\n#ifdef USE_FOG\\r\\n  uniform vec3 fogColor;\\r\\n  uniform float fogAlpha;\\r\\n  uniform float fogNear;\\r\\n  uniform float fogFar;\\r\\n#endif\\r\\n\\r\\nvarying vec3 vWorldPosition; // world position of the pixel (invalid when INSTANCED_SPRITE is defined)\\r\\nvarying vec3 vViewPosition;\\r\\n\\r\\n#if !defined (SPHERE_SPRITE) && !defined (CYLINDER_SPRITE)\\r\\n  varying vec3 vNormal;\\r\\n#endif\\r\\n\\r\\n/////////////////////////////////////////// ZSprites ////////////////////////////////////////////////\\r\\n#if defined (SPHERE_SPRITE) || defined (CYLINDER_SPRITE)\\r\\n  uniform float nearPlaneValue;\\r\\n#endif\\r\\n\\r\\n#ifdef SPHERE_SPRITE\\r\\n  varying vec4 spritePosEye;\\r\\n#endif\\r\\n\\r\\n#if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n  uniform float zOffset;\\r\\n\\r\\n  #if !defined(USE_LIGHTS) || !defined(SHADOWMAP) || !defined(SHADOWMAP_PCF_RAND) || !(NUM_DIR_LIGHTS > 0)\\r\\n    uniform mat4 projectionMatrix;\\r\\n  #endif\\r\\n\\r\\n  float calcDepthForSprites(vec4 pixelPosEye, float zOffset, mat4 projMatrix) {\\r\\n    vec4 pixelPosScreen = projMatrix * pixelPosEye;\\r\\n    return 0.5 * (pixelPosScreen.z / pixelPosScreen.w + 1.0) + zOffset;\\r\\n  }\\r\\n#endif\\r\\n\\r\\n#ifdef SPHERE_SPRITE\\r\\n  varying vec4 instOffset;\\r\\n  uniform mat4 modelMatrix;\\r\\n  uniform mat4 modelViewMatrix;\\r\\n  uniform mat4 invModelViewMatrix;\\r\\n  uniform mat3 normalMatrix;\\r\\n\\r\\n\\r\\n  bool intersect_ray_sphere(in vec3 origin, in vec3 ray, out vec3 point, out float frontFaced) {\\r\\n\\r\\n    // intersect XZ-projected ray with circle\\r\\n    float a = dot(ray, ray);\\r\\n    float b = dot(ray, origin);\\r\\n    float c = dot(origin, origin) - 1.0;\\r\\n    float det = b * b - a * c;\\r\\n    if (det < 0.0) return false;\\r\\n    float t1 = (-b - sqrt(det)) / a;\\r\\n    float t2 = (-b + sqrt(det)) / a;\\r\\n\\r\\n    // calculate both intersection points\\r\\n    vec3 p1 = origin + ray * t1;\\r\\n    vec3 p2 = origin + ray * t2;\\r\\n\\r\\n    // choose nearest point inside frustum\\r\\n    #ifdef ORTHOGRAPHIC_CAMERA\\r\\n      // orthografic camera is used for dirLight sources. So in it for all spheres the point with smaller 't' is visible\\r\\n      // t1 is always smaller than t2 (from calculations)\\r\\n      point = p1;\\r\\n      frontFaced = 1.0;\\r\\n      return true;\\r\\n    #else\\r\\n      // for perspective camera first intersection can be in front of near plane. If not intersection is p1 else - p2\\r\\n      // t* = 0.0 corresponds to point of intersection near plane by the ray from camera to curPixel\\r\\n      if (t1 >= 0.0) {\\r\\n        point = p1;\\r\\n        frontFaced = 1.0;\\r\\n        return true;\\r\\n      }\\r\\n      if (t2 >= 0.0) {\\r\\n        point = p2;\\r\\n        frontFaced = -1.0;\\r\\n        return true;\\r\\n      }\\r\\n    #endif\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  bool get_sphere_point(in vec3 pixelPosEye, out vec3 point, out float frontFaced) {\\r\\n    vec3 origin, ray;\\r\\n\\r\\n    #ifdef ORTHOGRAPHIC_CAMERA\\r\\n      // transform vector from sprite center to curPixel into sphere local coords\\r\\n      origin = pixelPosEye.xyz - spritePosEye.xyz;\\r\\n      origin = (invModelViewMatrix * vec4(origin, 0.0)).xyz / instOffset.w;\\r\\n\\r\\n      // transform camera orientation vector into sphere local coords\\r\\n      ray = (invModelViewMatrix * vec4(0.0, 0.0, -1.0, 0.0)).xyz;\\r\\n    #else\\r\\n      // find point of intersection near plane by the ray from camera to curPixel\\r\\n      vec4 v = vec4(-(nearPlaneValue / pixelPosEye.z) * pixelPosEye, 1.0);\\r\\n\\r\\n      // transform intersection point into sphere local coords\\r\\n      v = invModelViewMatrix * v;\\r\\n      origin = (v.xyz - instOffset.xyz) / instOffset.w;\\r\\n\\r\\n      // transform vector from camera pos to curPixel into sphere local coords\\r\\n      ray = (invModelViewMatrix * vec4(pixelPosEye, 0.0)).xyz;\\r\\n    #endif\\r\\n    ray = normalize(ray);\\r\\n\\r\\n    return intersect_ray_sphere(origin, ray, point, frontFaced);\\r\\n  }\\r\\n#endif\\r\\n\\r\\n#ifdef CYLINDER_SPRITE\\r\\n  varying vec4 matVec1;\\r\\n  varying vec4 matVec2;\\r\\n  varying vec4 matVec3;\\r\\n  varying vec4 invmatVec1;\\r\\n  varying vec4 invmatVec2;\\r\\n  varying vec4 invmatVec3;\\r\\n\\r\\n  uniform mat4 modelMatrix;\\r\\n  uniform mat4 modelViewMatrix;\\r\\n  uniform mat4 invModelViewMatrix;\\r\\n  uniform mat3 normalMatrix;\\r\\n\\r\\n  varying vec4 spritePosEye;\\r\\n\\r\\n  bool intersect_ray_cylinder(in vec3 origin, in vec3 ray, out vec3 point, out float frontFaced) {\\r\\n\\r\\n    // intersect XZ-projected ray with circle\\r\\n    float a = dot(ray.xz, ray.xz);\\r\\n    float b = dot(ray.xz, origin.xz);\\r\\n    float c = dot(origin.xz, origin.xz) - 1.0;\\r\\n    float det = b * b - a * c;\\r\\n    if (det < 0.0) return false;\\r\\n    float t1 = (-b - sqrt(det)) / a;\\r\\n    float t2 = (-b + sqrt(det)) / a;\\r\\n\\r\\n    // calculate both intersection points\\r\\n    vec3 p1 = origin + ray * t1;\\r\\n    vec3 p2 = origin + ray * t2;\\r\\n\\r\\n    float halfHeight = 0.5;\\r\\n\\r\\n    // choose nearest point\\r\\n    #ifdef ORTHOGRAPHIC_CAMERA\\r\\n      // orthografic camera is used for dirLight sources. So in it for all cylinders the point with smaller 't' is visible\\r\\n      // if it is not outside of cylinnder (t1 is always smaller than t2).\\r\\n      if (p1.y >= -halfHeight && p1.y <= halfHeight) {\\r\\n        point = p1;\\r\\n        frontFaced = 1.0;\\r\\n        return true;\\r\\n      }\\r\\n      if (p2.y >= -halfHeight && p2.y <= halfHeight) {\\r\\n        point = p2;\\r\\n        frontFaced = -1.0;\\r\\n        return true;\\r\\n      }\\r\\n    #else\\r\\n      // for perspective camera first intersection can be in front of near plane. If not intersection is p1 else - p2\\r\\n      // t* = 0.0 corresponds to point of intersection near plane by the ray from camera to curPixel\\r\\n      if (t1 >= 0.0 && p1.y >= -halfHeight && p1.y <= halfHeight) {\\r\\n        point = p1;\\r\\n        frontFaced = 1.0;\\r\\n        return true;\\r\\n      }\\r\\n      if (t2 >= 0.0 && p2.y >= -halfHeight && p2.y <= halfHeight) {\\r\\n        point = p2;\\r\\n        frontFaced = -1.0;\\r\\n        return true;\\r\\n      }\\r\\n    #endif\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  bool get_cylinder_point(in vec3 pixelPosEye, out vec3 point, out float frontFaced) {\\r\\n    vec3 origin, ray;\\r\\n    vec4 v;\\r\\n\\r\\n    #ifdef ORTHOGRAPHIC_CAMERA\\r\\n      // transform vector from sprite center to curPixel into cylinder local coords\\r\\n      v = invModelViewMatrix * vec4(pixelPosEye.xyz - spritePosEye.xyz, 0.0);\\r\\n      origin = vec3(dot(v, invmatVec1), dot(v, invmatVec2), dot(v, invmatVec3));\\r\\n\\r\\n      // transform camera orientation vector into cylinder local coords\\r\\n      v = invModelViewMatrix * vec4(0.0, 0.0, -1.0, 0.0);\\r\\n      ray = vec3(dot(v, invmatVec1), dot(v, invmatVec2), dot(v, invmatVec3));\\r\\n    #else\\r\\n      // find point of intersection near plane by the ray from camera to curPixel\\r\\n      v = vec4(-(nearPlaneValue / pixelPosEye.z) * pixelPosEye, 1.0);\\r\\n\\r\\n      // transform intersection point into cylinder local coords\\r\\n      v = invModelViewMatrix * v;\\r\\n      origin = vec3(dot(v, invmatVec1), dot(v, invmatVec2), dot(v, invmatVec3));\\r\\n\\r\\n      // transform vector from camera pos to curPixel into cylinder local coords\\r\\n      v = invModelViewMatrix * vec4(pixelPosEye, 0.0);\\r\\n      ray = vec3(dot(v, invmatVec1), dot(v, invmatVec2), dot(v, invmatVec3));\\r\\n    #endif\\r\\n    ray = normalize(ray);\\r\\n\\r\\n    return intersect_ray_cylinder(origin, ray, point, frontFaced);\\r\\n  }\\r\\n#endif\\r\\n\\r\\n///////////////////////////////////// Pack and unpack ///////////////////////////////////////////////\\r\\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\\r\\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\\r\\n\\r\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\r\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\r\\n\\r\\n\\r\\nconst float ShiftRight8 = 1. / 256.;\\r\\n\\r\\nvec4 packDepthToRGBA( const in float v ) {\\r\\n  vec4 r = vec4( fract( v * PackFactors ), v );\\r\\n  r.yzw -= r.xyz * ShiftRight8; // tidy overflow\\r\\n  return r * PackUpscale;\\r\\n}\\r\\n\\r\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\r\\n  return dot( v, UnpackFactors );\\r\\n}\\r\\n\\r\\n////////////////////////////////////////// All Lighting /////////////////////////////////////////////////\\r\\n#ifdef TOON_SHADING\\r\\n  #define LOW_TOON_BORDER 0.0\\r\\n  #define MEDIUM_TOON_BORDER 0.7\\r\\n  #define HIGH_TOON_BORDER 1.0\\r\\n\\r\\n  #define MEDIUM_TOON_RANGE 0.5\\r\\n  #define HIGH_TOON_RANGE 0.95\\r\\n#endif\\r\\n#if defined(USE_LIGHTS) && NUM_DIR_LIGHTS > 0\\r\\n  struct ReflectedLight {\\r\\n    vec3 directDiffuse;\\r\\n    vec3 directSpecular;\\r\\n    vec3 indirectDiffuse;\\r\\n  };\\r\\n\\r\\n  struct BlinnPhongMaterial {\\r\\n    vec3  diffuseColor;\\r\\n    vec3  specularColor;\\r\\n    float specularShininess;\\r\\n  };\\r\\n\\r\\n  struct GeometricContext {\\r\\n    vec3 normal;\\r\\n    vec3 viewDir;\\r\\n  };\\r\\n\\r\\n  struct DirectionalLight {\\r\\n    vec3 direction;\\r\\n    vec3 color;\\r\\n  };\\r\\n  uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n  struct DirectionalLightShadow {\\r\\n     vec2 shadowMapSize;\\r\\n     float shadowBias;\\r\\n     float shadowRadius;\\r\\n   };\\r\\n  uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n  uniform vec3 ambientLightColor;\\r\\n\\r\\n  /////////////////////////////////////////// Shadowmap ////////////////////////////////////////////////\\r\\n\\r\\n  #if defined(SHADOWMAP)\\r\\n  \\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\r\\n  \\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\r\\n  \\t}\\r\\n\\r\\n    float getShadow( sampler2D shadowMap, DirectionalLightShadow dirLight, vec4 shadowCoord, vec3 vViewPosition, vec3 vNormal ) {\\r\\n   \\t  float shadow = 0.0;\\r\\n\\r\\n      // When shadows for sprites will appear use here for them normals as it done for G-buffer\\r\\n      shadowCoord.xyz += dirLight.shadowBias * vNormal;\\r\\n      shadowCoord.xyz /= shadowCoord.w;\\r\\n\\r\\n      bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\r\\n      bool inFrustum = all( inFrustumVec );\\r\\n      bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\r\\n      bool frustumTest = all( frustumTestVec );\\r\\n\\r\\n      if ( frustumTest ) {\\r\\n        #ifdef SHADOWMAP_BASIC\\r\\n      \\t  shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\r\\n      \\t#endif\\r\\n\\r\\n      \\t#ifdef SHADOWMAP_PCF_SHARP\\r\\n      \\t  vec2 texelSize = vec2( 1.0 ) / dirLight.shadowMapSize;\\r\\n\\r\\n            float dx0 = - texelSize.x * dirLight.shadowRadius;\\r\\n            float dy0 = - texelSize.y * dirLight.shadowRadius;\\r\\n            float dx1 = + texelSize.x * dirLight.shadowRadius;\\r\\n            float dy1 = + texelSize.y * dirLight.shadowRadius;\\r\\n\\r\\n            shadow = (\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\r\\n            \\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\r\\n            ) * ( 1.0 / 9.0 );\\r\\n        #endif\\r\\n\\r\\n        #ifdef SHADOWMAP_PCF_RAND\\r\\n          vec2 texelSize = vec2( 1.0 ) / dirLight.shadowMapSize;\\r\\n\\r\\n          vec4 vUv = ((projectionMatrix * vec4(vViewPosition, 1.0)) + 1.0) / 2.0;\\r\\n          vec2 vUvNoise = vUv.xy / srcTexelSize * noiseTexelSize;\\r\\n\\r\\n          vec2 noiseVec = normalize(texture2D(noiseTex, vUvNoise).rg);\\r\\n          mat2 mNoise = mat2(noiseVec.x, noiseVec.y, -noiseVec.y, noiseVec.x);\\r\\n\\r\\n          vec2 offset;\\r\\n          #pragma unroll_loop_start\\r\\n          for ( int i = 0; i < 4; i ++ ) { // 4 is length of _samplesKernel which is defined in UberMaterial.js\\r\\n            offset = mNoise * ( normalize( samplesKernel[ i ]) * texelSize * dirLight.shadowRadius );\\r\\n            shadow +=  texture2DCompare( shadowMap, shadowCoord.xy + offset, shadowCoord.z );\\r\\n          }\\r\\n          #pragma unroll_loop_end\\r\\n          shadow /= float( 4 ); // 4 is length of _samplesKernel which is defined in UberMaterial.js\\r\\n        #endif\\r\\n      }\\r\\n      return shadow;//(shadow != 1.0) ? 0.5 : 1.0;//vec4(shadow, shadow, shadow, 1.0);\\r\\n   }\\r\\n  #endif\\r\\n\\r\\n  /////////////////////////////////////////// Lighting /////////////////////////////////////////////////\\r\\n\\r\\n  vec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\r\\n    return RECIPROCAL_PI * diffuseColor;\\r\\n  } // validated\\r\\n\\r\\n  vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\r\\n    // Original approximation by Christophe Schlick '94\\r\\n    //;float fresnel = pow( 1.0 - dotLH, 5.0 );\\r\\n    // Optimized variant (presented by Epic at SIGGRAPH '13)\\r\\n    float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\r\\n    return ( 1.0 - specularColor ) * fresnel + specularColor;\\r\\n  } // validated\\r\\n\\r\\n  float G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\\r\\n    // geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\\r\\n    return 0.25;\\r\\n  }\\r\\n\\r\\n  float D_BlinnPhong( const in float shininess, const in float dotNH ) {\\r\\n    return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\r\\n  }\\r\\n\\r\\n  vec3 BRDF_Specular_BlinnPhong( const in DirectionalLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\r\\n    vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\r\\n    float dotNH = saturate(dot( geometry.normal, halfDir ));\\r\\n    float dotLH = saturate(dot( incidentLight.direction, halfDir ));\\r\\n\\r\\n    vec3 F = F_Schlick( specularColor, dotLH );\\r\\n    float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\\r\\n    float D = D_BlinnPhong( shininess, dotNH );\\r\\n\\r\\n    return F * ( G * D );\\r\\n  } // validated\\r\\n\\r\\n  void RE_Direct_BlinnPhong( const in DirectionalLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight, float penumbra ) {\\r\\n\\r\\n    float dotNL = saturate( dot( geometry.normal, directLight.direction ));\\r\\n    #ifdef TOON_SHADING\\r\\n      if(dotNL < MEDIUM_TOON_RANGE){\\r\\n        dotNL = LOW_TOON_BORDER;\\r\\n      }\\r\\n      else if(dotNL < HIGH_TOON_RANGE){\\r\\n        dotNL = MEDIUM_TOON_BORDER;\\r\\n      }\\r\\n      else{\\r\\n        dotNL = HIGH_TOON_BORDER;\\r\\n      }\\r\\n    #endif\\r\\n\\r\\n    vec3 irradiance = dotNL * directLight.color;\\r\\n    reflectedLight.directDiffuse += penumbra * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n    reflectedLight.directSpecular += penumbra * irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess );\\r\\n  }\\r\\n\\r\\n  void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n  }\\r\\n\\r\\n  vec3 calcLighting(const in GeometricContext geometry, const in BlinnPhongMaterial material, vec3 vViewPosition) {\\r\\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ));\\r\\n    vec3 irradiance = ambientLightColor;\\r\\n\\r\\n    float shadowMask = 1.0;\\r\\n    // see THREE.WebGLProgram.unrollLoops\\r\\n  \\t#pragma unroll_loop_start\\r\\n  \\t  for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n  \\t    #ifdef SHADOWMAP\\r\\n  \\t      shadowMask = getShadow( directionalShadowMap[ i ], directionalLightShadows[ i ], vDirLightWorldCoord[ i ], vViewPosition, vDirLightWorldNormal[ i ] );\\r\\n        #endif\\r\\n\\r\\n  \\t\\t  if ( shadowMask > 0.0 ) RE_Direct_BlinnPhong( directionalLights[ i ], geometry, material, reflectedLight, shadowMask );\\r\\n  \\t\\t}\\r\\n  \\t\\t#pragma unroll_loop_end\\r\\n\\r\\n    RE_IndirectDiffuse_BlinnPhong(irradiance, material, reflectedLight);\\r\\n\\r\\n    return saturate(reflectedLight.indirectDiffuse + reflectedLight.directDiffuse + reflectedLight.directSpecular);\\r\\n  }\\r\\n#endif\\r\\n\\r\\n/////////////////////////////////////////// Dashed Line ///////////////////////////////////////////////\\r\\n#ifdef DASHED_LINE\\r\\n  uniform float dashedLineSize;\\r\\n  uniform float dashedLinePeriod;\\r\\n  varying float vLineDistance;\\r\\n#endif\\r\\n\\r\\n/////////////////////////////////////////// Main ///////////////////////////////////////////////\\r\\nvoid main() {\\r\\n\\r\\n#ifdef CLIP_PLANE\\r\\n  if (vViewPosition.z < clipPlaneValue) discard;\\r\\n#endif\\r\\n\\r\\n#ifdef ZCLIP\\r\\n  if (vViewPosition.z < zClipValue) discard;\\r\\n#endif\\r\\n\\r\\n#if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n  #if NUM_DIR_LIGHTS > 0\\r\\n    // see THREE.WebGLProgram.unrollLoops\\r\\n    #pragma unroll_loop_start\\r\\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n      vDirLightWorldCoord[ i ] = vDirectionalShadowCoord[ i ];\\r\\n      vDirLightWorldNormal[ i ] = vDirectionalShadowNormal[ i ];\\r\\n    }\\r\\n    #pragma unroll_loop_end\\r\\n  #endif\\r\\n#endif\\r\\n\\r\\n  vec4 pixelPosWorld = vec4(vWorldPosition, 1.0);\\r\\n  vec4 pixelPosEye;\\r\\n\\r\\n#ifdef SPHERE_SPRITE\\r\\n\\r\\n  vec3 viewNormalSprites;\\r\\n  float frontFaced = 1.0;\\r\\n  vec3 normal;\\r\\n\\r\\n/* quick-and-dirty method\\r\\n  normal.xy = ' + INSTANCED_SPRITE_OVERSCALE + ' * (2.0 * vUv - 1.0);\\r\\n  float r2 = dot(normal.xy, normal.xy);\\r\\n  if (r2 > 1.0) discard;\\r\\n  float normalZ = sqrt(1.0 - r2);\\r\\n  normal.z = normalZ;\\r\\n  normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\r\\n  pixelPosEye = vec4(spritePosEye.xyz, 1.0);\\r\\n  pixelPosEye.z += spritePosEye.w * normalZ;\\r\\n*/\\r\\n\\r\\n  // ray-trace sphere surface\\r\\n  {\\r\\n    vec3 p;\\r\\n    if (!get_sphere_point(-vViewPosition, p, frontFaced)) discard;\\r\\n    vec4 v = vec4(instOffset.xyz + p * instOffset.w, 1.0);\\r\\n    pixelPosWorld = modelMatrix * v;\\r\\n    pixelPosEye = modelViewMatrix * v;\\r\\n    normal = normalize(normalMatrix * p);\\r\\n    #ifdef NORMALS_TO_G_BUFFER\\r\\n      viewNormalSprites = normalize(mat3(modelViewMatrix)*p);\\r\\n    #endif\\r\\n\\r\\n    #if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n      #if NUM_DIR_LIGHTS > 0\\r\\n        // see THREE.WebGLProgram.unrollLoops\\r\\n        #pragma unroll_loop_start\\r\\n          for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n            vDirLightWorldCoord[ i ] = directionalShadowMatrix[ i ] * pixelPosWorld;\\r\\n            vDirLightWorldNormal[ i ] = (directionalShadowMatrix[ i ] * (modelMatrix * vec4(p, 0.0))).xyz;\\r\\n          }\\r\\n        #pragma unroll_loop_end\\r\\n      #endif\\r\\n    #endif\\r\\n  }\\r\\n#endif\\r\\n\\r\\n#ifdef CYLINDER_SPRITE\\r\\n  vec3 normal;\\r\\n  vec3 viewNormalSprites;\\r\\n  float frontFaced = 1.0;\\r\\n  float cylinderY = 0.0;\\r\\n\\r\\n  // ray-trace cylinder surface\\r\\n  {\\r\\n    vec3 p;\\r\\n    if (!get_cylinder_point(-vViewPosition, p, frontFaced)) discard;\\r\\n\\r\\n    cylinderY = 0.5 * (p.y + 1.0);\\r\\n\\r\\n    vec4 v = vec4(p, 1.0);\\r\\n    v = vec4(dot(v, matVec1), dot(v, matVec2), dot(v, matVec3), 1.0);\\r\\n    pixelPosWorld = modelMatrix * v;\\r\\n    pixelPosEye = modelViewMatrix * v;\\r\\n\\r\\n    vec3 localNormal = normalize(vec3(p.x, 0.0, p.z));\\r\\n    normal = vec3(\\r\\n      dot(localNormal, matVec1.xyz),\\r\\n      dot(localNormal, matVec2.xyz),\\r\\n      dot(localNormal, matVec3.xyz));\\r\\n    #ifdef NORMALS_TO_G_BUFFER\\r\\n      viewNormalSprites = normalize(mat3(modelViewMatrix)*normal);\\r\\n    #endif\\r\\n\\r\\n    #if defined(USE_LIGHTS) && defined(SHADOWMAP)\\r\\n      #if NUM_DIR_LIGHTS > 0\\r\\n        // see THREE.WebGLProgram.unrollLoops\\r\\n        #pragma unroll_loop_start\\r\\n          for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n            vDirLightWorldCoord[ i ] = directionalShadowMatrix[ i ] * pixelPosWorld;\\r\\n            vDirLightWorldNormal[ i ] = (directionalShadowMatrix[ i ] * (modelMatrix * vec4(normal, 0.0))).xyz;\\r\\n          }\\r\\n        #pragma unroll_loop_end\\r\\n      #endif\\r\\n    #endif\\r\\n\\r\\n    normal = normalize(normalMatrix * normal);\\r\\n  }\\r\\n#endif\\r\\n\\r\\n  #ifdef ATTR_COLOR\\r\\n    vec3 vertexColor = vColor;\\r\\n  #else\\r\\n    vec3 vertexColor = vec3(1.0, 1.0, 1.0);\\r\\n  #endif\\r\\n\\r\\n  #ifdef ATTR_COLOR2\\r\\n    #ifdef CYLINDER_SPRITE\\r\\n      float colorCoef = cylinderY; // cylinder parameter is calculated from ray-tracing\\r\\n    #else\\r\\n      float colorCoef = vUv.y; // cylinder parameter is interpolated as tex coord\\r\\n    #endif\\r\\n      // choose either color or color2\\r\\n    vertexColor = mix(vColor2, vColor, step(0.5, colorCoef));\\r\\n  #endif\\r\\n\\r\\n  // negative red component is a special condition\\r\\n  if (vertexColor.x < 0.0) discard;\\r\\n\\r\\n  #ifdef DASHED_LINE\\r\\n    if ( mod( vLineDistance, dashedLinePeriod ) > dashedLineSize ) discard;\\r\\n  #endif\\r\\n\\r\\n  // transparency prepass writes only z, so we don't need to calc the color\\r\\n  #ifdef PREPASS_TRANSP\\r\\n    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\\r\\n    #if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n      gl_FragDepthEXT = calcDepthForSprites(pixelPosEye, zOffset, projectionMatrix);\\r\\n    #endif\\r\\n    return;\\r\\n  #endif\\r\\n\\r\\n    float totalOpacity = opacity;\\r\\n\\r\\n  #ifdef ATTR_ALPHA_COLOR\\r\\n    totalOpacity *= alphaCol;\\r\\n  #endif\\r\\n\\r\\n  // discard fully transparent pixels\\r\\n  if (totalOpacity == 0.0) discard;\\r\\n\\r\\n  #ifdef FAKE_OPACITY\\r\\n    // discard pixels in checker pattern\\r\\n    vec2 dm_coord = floor(gl_FragCoord.xy);\\r\\n    dm_coord = fract(dm_coord * 0.5);\\r\\n    if (totalOpacity < 1.0 && (dm_coord.x < 0.5 ^^ dm_coord.y < 0.5)) discard;\\r\\n    vec4 diffuseColor = vec4(diffuse, 1.0);\\r\\n  #else\\r\\n    vec4 diffuseColor = vec4(diffuse, totalOpacity);\\r\\n  #endif\\r\\n\\r\\n  float flipNormal;\\r\\n  #if !defined (SPHERE_SPRITE) && !defined (CYLINDER_SPRITE)\\r\\n    flipNormal = 1.0;\\r\\n    #ifdef DOUBLE_SIDED\\r\\n      flipNormal = float( gl_FrontFacing );\\r\\n    #endif\\r\\n    vec3 normal = normalize( vNormal ) * flipNormal;\\r\\n  #endif\\r\\n\\r\\n    diffuseColor.rgb *= vertexColor;\\r\\n\\r\\n  #if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n    gl_FragDepthEXT = calcDepthForSprites(pixelPosEye, zOffset, projectionMatrix);\\r\\n  #endif\\r\\n\\r\\n  #ifdef NORMALS_TO_G_BUFFER\\r\\n    #if defined (SPHERE_SPRITE) || defined (CYLINDER_SPRITE)\\r\\n      vec3 viewNormaInColor = viewNormalSprites;\\r\\n    #else\\r\\n      vec3 viewNormaInColor = viewNormal;\\r\\n      float frontFaced = float( gl_FrontFacing );\\r\\n    #endif\\r\\n    // [-1, 1] -> [0, 1]\\r\\n    viewNormaInColor = 0.5 * viewNormaInColor + 0.5;\\r\\n    gl_FragData[1] = vec4(viewNormaInColor, frontFaced);\\r\\n  #endif\\r\\n\\r\\n  #if defined(USE_LIGHTS) && NUM_DIR_LIGHTS > 0\\r\\n    vec3 viewDir;\\r\\n    #if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n      viewDir = -pixelPosEye.xyz;\\r\\n    #else\\r\\n      viewDir = vViewPosition;\\r\\n    #endif\\r\\n    GeometricContext geometry = GeometricContext(normal, normalize( viewDir ));\\r\\n    BlinnPhongMaterial material = BlinnPhongMaterial(diffuseColor.rgb, specular, shininess);\\r\\n    vec3 outgoingLight = calcLighting(geometry, material, viewDir);\\r\\n  #else\\r\\n    vec3 outgoingLight = diffuseColor.rgb;\\r\\n  #endif\\r\\n\\r\\n  #ifdef COLOR_FROM_DEPTH\\r\\n    float depth = 0.0;\\r\\n    #if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n      gl_FragDepthEXT = calcDepthForSprites(pixelPosEye, zOffset, projectionMatrix);\\r\\n      depth = gl_FragDepthEXT;\\r\\n    #else\\r\\n      depth = gl_FragCoord.z;\\r\\n    #endif\\r\\n    fragColor = packDepthToRGBA(depth);\\r\\n    return;\\r\\n  #endif\\r\\n\\r\\n  #ifdef COLOR_FROM_POS\\r\\n    fragColor = world2colorMatrix * pixelPosWorld;\\r\\n  #else\\r\\n    #ifdef OVERRIDE_COLOR\\r\\n      fragColor = vec4(fixedColor, diffuseColor.a);\\r\\n    #else\\r\\n      fragColor = vec4(outgoingLight, diffuseColor.a);//vec4(vNormal, 1.0);\\r\\n    #endif\\r\\n\\r\\n    #ifdef USE_FOG\\r\\n      float viewDistance;\\r\\n      #if defined(SPHERE_SPRITE) || defined(CYLINDER_SPRITE)\\r\\n        viewDistance = abs(pixelPosEye.z);\\r\\n      #else\\r\\n        viewDistance = vViewPosition.z;\\r\\n      #endif\\r\\n      float fogFactor = smoothstep( fogNear, fogFar, viewDistance) * fogAlpha;\\r\\n      #ifdef FOG_TRANSPARENT\\r\\n        fragColor.a = fragColor.a * (1.0 - fogFactor);\\r\\n      #else\\r\\n        fragColor.rgb = mix( fragColor.rgb, fogColor, fogFactor );\\r\\n      #endif\\r\\n    #endif\\r\\n\\r\\n  #endif\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/capabilities.js\r\n/* harmony default export */ const capabilities = ({\r\n  precision: 'mediump',\r\n  /**\r\n   *\r\n   * @param {THREE.WebGLRenderer} renderer\r\n   */\r\n  init(renderer) {\r\n    this.precision = renderer.capabilities.getMaxPrecision('highp');\r\n  }\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/noiseTexture.js\r\n\r\nconst noiseWidth = 4;\r\nconst noiseHeight = 4;\r\nconst _noiseData = new Uint8Array([24, 52, 0, 255, 254, 145, 0, 255, 122, 0, 0, 255, 7, 170, 0, 255, 34, 214, 0, 255, 173, 8, 0, 255, 86, 249, 0, 255, 160, 4, 0, 255, 226, 46, 0, 255, 224, 211, 0, 255, 3, 157, 0, 255, 174, 247, 0, 255, 12, 182, 0, 255, 220, 216, 0, 255, 1, 109, 0, 255, 253, 154, 0, 255]);\r\nconst _noiseWrapS = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RepeatWrapping;\r\nconst _noiseWrapT = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RepeatWrapping;\r\nconst _noiseMinFilter = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NearestFilter;\r\nconst _noiseMagFilter = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NearestFilter;\r\nconst _noiseMapping = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UVMapping;\r\nconst noiseTexture = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.DataTexture(_noiseData, noiseWidth, noiseHeight, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UnsignedByteType, _noiseMapping, _noiseWrapS, _noiseWrapT, _noiseMagFilter, _noiseMinFilter, 1);\r\nnoiseTexture.needsUpdate = true;\r\n/* harmony default export */ const gfx_noiseTexture = ({\r\n  noiseWidth,\r\n  noiseHeight,\r\n  noiseTexture\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/UberMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Length of _samplesKernel is used in Uber.frag\r\n// If you want to change length of _samplesKernel, please, remember change it in Uber.frag too.\r\n// You can easy find places for replace using word:_samplesKernel\r\nconst _samplesKernel = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(-0.541978, 0.840393), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(0.125533, -0.992089), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(0.374329, 0.927296), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(-0.105475, 0.994422)];\r\nconst defaultUniforms = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.merge([external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsLib.fog, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsLib.lights, {\r\n  // are updated automatically by three.js (see THREE.ShaderLib.common)\r\n  diffuse: {\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xeeeeee)\r\n  },\r\n  opacity: {\r\n    value: 1.0\r\n  },\r\n  specular: {\r\n    type: 'c',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0x111111)\r\n  },\r\n  shininess: {\r\n    type: 'f',\r\n    value: 30\r\n  },\r\n  fixedColor: {\r\n    type: 'c',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xffffff)\r\n  },\r\n  zOffset: {\r\n    type: 'f',\r\n    value: 0.0\r\n  },\r\n  zClipValue: {\r\n    type: 'f',\r\n    value: 0.0\r\n  },\r\n  clipPlaneValue: {\r\n    type: 'f',\r\n    value: 0.0\r\n  },\r\n  nearPlaneValue: {\r\n    type: 'f',\r\n    value: -0.5\r\n  },\r\n  invModelViewMatrix: {\r\n    type: '4fv',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n  },\r\n  world2colorMatrix: {\r\n    type: '4fv',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n  },\r\n  dashedLineSize: {\r\n    type: 'f',\r\n    value: 0.1\r\n  },\r\n  dashedLinePeriod: {\r\n    type: 'f',\r\n    value: 0.2\r\n  },\r\n  projMatrixInv: {\r\n    type: '4fv',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n  },\r\n  viewport: {\r\n    type: 'v2',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2()\r\n  },\r\n  lineWidth: {\r\n    type: 'f',\r\n    value: 2.0\r\n  },\r\n  // default value must be the same as settings\r\n  fogAlpha: {\r\n    type: 'f',\r\n    value: 1.0\r\n  },\r\n  samplesKernel: {\r\n    type: 'v2v',\r\n    value: null\r\n  },\r\n  noiseTex: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  noiseTexelSize: {\r\n    type: 'v2',\r\n    value: null\r\n  },\r\n  srcTexelSize: {\r\n    type: 'v2',\r\n    value: null\r\n  }\r\n}]);\r\nconst uberOptionNames = ['shininess', 'opacity', 'zOffset', 'diffuse', 'specular', 'fixedColor', 'zClipCoef', 'zClipValue', 'clipPlaneValue', 'world2colorMatrix', 'dashedLineSize', 'dashedLinePeriod', 'projMatrixInv', 'viewport', 'lineWidth', 'fogAlpha', 'samplesKernel', 'noiseTex', 'noiseTexelSize', 'srcTexelSize'];\r\n\r\n// properties that convert to uniforms\r\nconst uberOptions = {\r\n  diffuse: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xffffff),\r\n  // used in phong lighting\r\n  specular: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0x111111),\r\n  // used in phong lighting\r\n  shininess: 30,\r\n  // used in phong lighting\r\n  opacity: 1,\r\n  // set mesh opacity\r\n  fixedColor: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xffffff),\r\n  // color to override (see OVERRIDE_COLOR)\r\n  zOffset: 0.0,\r\n  // used fo zsprites (see SPHERE_SPRITE CYLINDER_SPRITE)\r\n  zClipCoef: 2.0,\r\n  // use for Surfs clipping (mesh param, isn't used in shader)  FIXME move to representation param\r\n  zClipValue: 0.0,\r\n  //  value to clip Surfs in shader  (see ZCLIP)\r\n  clipPlaneValue: 0.0,\r\n  // value to clip scene globally (see CLIPPLANE)\r\n  world2colorMatrix: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4(),\r\n  dashedLineSize: 0.1,\r\n  dashedLinePeriod: 0.3,\r\n  projMatrixInv: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4(),\r\n  viewport: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(800, 600),\r\n  lineWidth: 2.0,\r\n  fogAlpha: 1.0,\r\n  samplesKernel: _samplesKernel,\r\n  noiseTex: gfx_noiseTexture.noiseTexture,\r\n  noiseTexelSize: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / gfx_noiseTexture.noiseWidth, 1.0 / gfx_noiseTexture.noiseHeight),\r\n  srcTexelSize: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / 800.0, 1.0 / 600.0),\r\n  copy(source) {\r\n    this.diffuse.copy(source.diffuse);\r\n    this.specular.copy(source.specular);\r\n    this.shininess = source.shininess;\r\n    this.opacity = source.opacity;\r\n    this.fixedColor.copy(source.fixedColor);\r\n    this.zOffset = source.zOffset;\r\n    this.zClipCoef = source.zClipCoef;\r\n    this.zClipValue = source.zClipValue;\r\n    this.clipPlaneValue = source.clipPlaneValue;\r\n    this.world2colorMatrix.copy(source.world2colorMatrix);\r\n    this.dashedLineSize = source.dashedLineSize;\r\n    this.dashedLinePeriod = source.dashedLinePeriod;\r\n    this.projMatrixInv = source.projMatrixInv;\r\n    this.viewport = source.viewport;\r\n    this.lineWidth = source.lineWidth; // used for thick lines only\r\n    this.toonShading = source.toonShading;\r\n    this.fogAlpha = source.fogAlpha;\r\n    this.samplesKernel = source.samplesKernel;\r\n    this.noiseTex = source.noiseTex;\r\n    this.noiseTexelSize = source.noiseTexelSize;\r\n    this.srcTexelSize = source.srcTexelSize;\r\n  }\r\n};\r\nclass UberMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor(params) {\r\n    super(params);\r\n\r\n    // add fog\r\n    this.fog = true;\r\n    // used for instanced geometry\r\n    this.instancedPos = false;\r\n    this.instancedMatrix = false;\r\n    // atoms and links color\r\n    this.attrColor = false;\r\n    // second link color for cylinders\r\n    this.attrColor2 = false;\r\n    //\r\n    this.attrAlphaColor = false;\r\n    // overrides color for all vertices (used in selection)\r\n    this.overrideColor = false;\r\n    // zsrpites\r\n    this.sphereSprite = false;\r\n    this.cylinderSprite = false;\r\n    // clip Surfs individually\r\n    this.zClip = false;\r\n    // clip scene with global clip plane\r\n    this.clipPlane = false;\r\n    // enable fake (chess-like) opacity\r\n    this.fakeOpacity = false;\r\n    // render only depth, don't take care about the pixel color (used for transparency depth prepass)\r\n    this.prepassTransparancy = false;\r\n    // used to render pixel positions\r\n    this.colorFromPos = false;\r\n    // used to render shadowmap\r\n    this.shadowmap = false;\r\n    // used to describe shadowmap type\r\n    this.shadowmapType = 'random';\r\n    // used to render pixel view deph\r\n    this.colorFromDepth = false;\r\n    // mark that rendering is for orthographic camera\r\n    this.orthoCam = false;\r\n    // used to render dashed line\r\n    this.dashedLine = false;\r\n    // mark as transparent\r\n    this.transparent = true;\r\n    // mark as thick lines\r\n    this.thickLine = false;\r\n    // makes fog begin transparency (required for transparent background)\r\n    this.fogTransparent = false;\r\n    // used to render surface normals to G buffer for ssao effect\r\n    this.normalsToGBuffer = false;\r\n    // used for toon material\r\n    this.toonShading = false;\r\n\r\n    // uber options of \"root\" materials are inherited from single uber-options object that resides in prototype\r\n    this.uberOptions = Object.create(UberMaterial.prototype.uberOptions);\r\n\r\n    // set default values\r\n    super.setValues({\r\n      uniforms: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.clone(defaultUniforms),\r\n      vertexShader: this.precisionString() + Uber_namespaceObject,\r\n      fragmentShader: this.precisionString() + gfx_shaders_Uber_namespaceObject,\r\n      lights: true,\r\n      fog: true,\r\n      side: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.DoubleSide\r\n    });\r\n    this.setValues(params);\r\n  }\r\n  precisionString() {\r\n    const {\r\n      precision\r\n    } = capabilities;\r\n    const str = `precision ${precision} float;\\n` + `precision ${precision} int;\\n\\n`;\r\n    return str;\r\n  }\r\n  copy(source) {\r\n    super.copy(source);\r\n    this.fragmentShader = source.fragmentShader;\r\n    this.vertexShader = source.vertexShader;\r\n    this.uniforms = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.clone(source.uniforms);\r\n    this.defines = {\r\n      ...source.defines\r\n    };\r\n    this.extensions = source.extensions;\r\n    this.fog = source.fog;\r\n    this.instancedPos = source.instancedPos;\r\n    this.instancedMatrix = source.instancedMatrix;\r\n    this.attrColor = source.attrColor;\r\n    this.attrColor2 = source.attrColor2;\r\n    this.attrAlphaColor = source.attrAlphaColor;\r\n    this.overrideColor = source.overrideColor;\r\n    this.sphereSprite = source.sphereSprite;\r\n    this.cylinderSprite = source.cylinderSprite;\r\n    this.zClip = source.zClip;\r\n    this.clipPlane = source.clipPlane;\r\n    this.fakeOpacity = source.fakeOpacity;\r\n    this.colorFromPos = source.colorFromPos;\r\n    this.shadowmap = source.shadowmap;\r\n    this.shadowmapType = source.shadowmapType;\r\n    this.colorFromDepth = source.colorFromDepth;\r\n    this.orthoCam = source.orthoCam;\r\n    this.prepassTransparancy = source.prepassTransparancy;\r\n    this.dashedLine = source.dashedLine;\r\n    this.thickLine = source.thickLine;\r\n    this.fogTransparent = source.fogTransparent;\r\n    this.normalsToGBuffer = source.normalsToGBuffer;\r\n    this.toonShading = source.toonShading;\r\n    this.uberOptions.copy(source.uberOptions);\r\n    return this;\r\n  }\r\n\r\n  // create copy of this material\r\n  // its options are prototyped after this material's options\r\n  createInstance() {\r\n    const inst = new UberMaterial();\r\n    inst.copy(this);\r\n    inst.uberOptions = Object.create(this.uberOptions);\r\n    return inst;\r\n  }\r\n  setValues(values) {\r\n    if (typeof values === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    // set direct values\r\n    super.setValues(values);\r\n    const defines = {};\r\n    const extensions = {};\r\n    if (this.fog) {\r\n      defines.USE_FOG = 1;\r\n    }\r\n    if (this.instancedPos) {\r\n      defines.INSTANCED_POS = 1;\r\n    }\r\n    if (this.instancedMatrix) {\r\n      defines.INSTANCED_MATRIX = 1;\r\n    }\r\n    if (this.attrColor) {\r\n      defines.ATTR_COLOR = 1;\r\n    }\r\n    if (this.attrColor2) {\r\n      defines.ATTR_COLOR2 = 1;\r\n    }\r\n    if (this.attrAlphaColor) {\r\n      defines.ATTR_ALPHA_COLOR = 1;\r\n    }\r\n    if (this.overrideColor) {\r\n      defines.OVERRIDE_COLOR = 1;\r\n    }\r\n    if (this.sphereSprite) {\r\n      defines.SPHERE_SPRITE = 1;\r\n      extensions.fragDepth = true;\r\n    }\r\n    if (this.cylinderSprite) {\r\n      defines.CYLINDER_SPRITE = 1;\r\n      extensions.fragDepth = true;\r\n    }\r\n    if (this.zClip) {\r\n      defines.ZCLIP = 1;\r\n    }\r\n    if (this.clipPlane) {\r\n      defines.CLIP_PLANE = 1;\r\n    }\r\n    if (this.fakeOpacity) {\r\n      defines.FAKE_OPACITY = 1;\r\n    }\r\n    if (this.lights) {\r\n      defines.USE_LIGHTS = 1;\r\n    }\r\n    if (this.colorFromPos) {\r\n      defines.COLOR_FROM_POS = 1;\r\n    }\r\n    if (this.shadowmap) {\r\n      defines.SHADOWMAP = 1;\r\n      if (this.shadowmapType === 'pcf') {\r\n        defines.SHADOWMAP_PCF_SHARP = 1;\r\n      } else if (this.shadowmapType === 'random') {\r\n        defines.SHADOWMAP_PCF_RAND = 1;\r\n      } else {\r\n        defines.SHADOWMAP_BASIC = 1;\r\n      }\r\n    }\r\n    if (this.colorFromDepth) {\r\n      defines.COLOR_FROM_DEPTH = 1;\r\n    }\r\n    if (this.orthoCam) {\r\n      defines.ORTHOGRAPHIC_CAMERA = 1;\r\n    }\r\n    if (this.prepassTransparancy) {\r\n      defines.PREPASS_TRANSP = 1;\r\n    }\r\n    if (this.dashedLine) {\r\n      defines.DASHED_LINE = 1;\r\n    }\r\n    if (this.thickLine) {\r\n      defines.THICK_LINE = 1;\r\n    }\r\n    if (this.fogTransparent) {\r\n      defines.FOG_TRANSPARENT = 1;\r\n    }\r\n    if (this.normalsToGBuffer) {\r\n      extensions.drawBuffers = true;\r\n      defines.NORMALS_TO_G_BUFFER = 1;\r\n    }\r\n    if (this.toonShading) {\r\n      defines.TOON_SHADING = 1;\r\n    }\r\n    // set dependent values\r\n    this.defines = defines;\r\n    this.extensions = extensions;\r\n  }\r\n  setUberOptions(values) {\r\n    if (typeof values === 'undefined') {\r\n      return;\r\n    }\r\n    for (const key in values) {\r\n      if (!values.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n      if (this.uberOptions[key] instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color) {\r\n        this.uberOptions[key] = values[key].clone();\r\n      } else {\r\n        this.uberOptions[key] = values[key];\r\n      }\r\n    }\r\n  }\r\n  clone(shallow) {\r\n    if (!shallow) {\r\n      return super.clone();\r\n    }\r\n    return this.createInstance();\r\n  }\r\n  updateUniforms() {\r\n    const self = this;\r\n    uberOptionNames.forEach(p => {\r\n      if (self.uniforms.hasOwnProperty(p)) {\r\n        if (self.uberOptions[p] instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color || self.uberOptions[p] instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4) {\r\n          self.uniforms[p].value = self.uberOptions[p].clone();\r\n        } else {\r\n          self.uniforms[p].value = self.uberOptions[p];\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\nUberMaterial.prototype.uberOptions = uberOptions;\r\n/* harmony default export */ const shaders_UberMaterial = (UberMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/UberObject.js\r\n\r\n/* harmony default export */ function UberObject(SuperClass) {\r\n  class NewObjectType extends SuperClass {\r\n    constructor() {\r\n      super(...arguments);\r\n      this.onBeforeRender = NewObjectType.prototype.onBeforeRender;\r\n    }\r\n    onBeforeRender(renderer, scene, camera, geometry, material, group) {\r\n      this._onBeforeRender(renderer, scene, camera, geometry, material, group);\r\n      this._update();\r\n    }\r\n    _onBeforeRender() {}\r\n    _update() {\r\n      const {\r\n        material\r\n      } = this;\r\n      if (!material) {\r\n        return;\r\n      }\r\n      if (material instanceof shaders_UberMaterial) {\r\n        material.updateUniforms();\r\n      }\r\n    }\r\n  }\r\n  return NewObjectType;\r\n}\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/ZSpriteMesh.js\r\n\r\n\r\nconst Mesh = UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh);\r\nclass ZSpriteMesh extends Mesh {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.castShadow = true;\r\n    this.receiveShadow = true;\r\n  }\r\n  _onBeforeRender(renderer, scene, camera, _geometry, _material, _group) {\r\n    Mesh.prototype._onBeforeRender.call(this, renderer, scene, camera);\r\n    const {\r\n      material\r\n    } = this;\r\n    if (!material) {\r\n      return;\r\n    }\r\n    if (material.uniforms.invModelViewMatrix) {\r\n      // NOTE: update of modelViewMatrix inside threejs is done after onBeforeRender call,\r\n      // so we have to do it manually in that place\r\n      this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);\r\n      // get inverse matrix\r\n      material.uniforms.invModelViewMatrix.value.copy(this.modelViewMatrix).invert();\r\n      material.uniforms.nearPlaneValue.value = camera.near;\r\n      material.uniformsNeedUpdate = true;\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const meshes_ZSpriteMesh = (ZSpriteMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/ZClippedMesh.js\r\n\r\n\r\nconst ZClippedMesh_Mesh = UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh);\r\nclass ZClippedMesh extends ZClippedMesh_Mesh {\r\n  constructor(geometry, material) {\r\n    super(geometry, material);\r\n    this.castShadow = true;\r\n    this.receiveShadow = true;\r\n  }\r\n  static _mvLength = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  static _center = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  static _modelView = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4())();\r\n  _onBeforeRender(renderer, scene, camera) {\r\n    ZClippedMesh_Mesh.prototype._onBeforeRender.call(this, renderer, scene, camera);\r\n    const geo = this.geometry;\r\n    const {\r\n      material\r\n    } = this;\r\n    if (!geo.zClip || !material.uberOptions) {\r\n      return;\r\n    }\r\n    const zClipCoef = 0.5;\r\n    const modelView = ZClippedMesh._modelView;\r\n    const mvLength = ZClippedMesh._mvLength;\r\n    const center = ZClippedMesh._center;\r\n    modelView.multiplyMatrices(this.matrixWorld, camera.matrixWorldInverse);\r\n    const s = mvLength.setFromMatrixColumn(modelView, 0).length();\r\n    center.copy(geo.boundingSphere.center);\r\n    this.localToWorld(center);\r\n    material.uberOptions.zClipValue = camera.position.z - center.z - s * (zClipCoef * geo.boundingSphere.radius);\r\n  }\r\n}\r\n/* harmony default export */ const meshes_ZClippedMesh = (ZClippedMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/TextMesh.js\r\n\r\n\r\n\r\n\r\nclass TextMesh extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group {\r\n  constructor(geometry, _material) {\r\n    super();\r\n    this.geometry = geometry;\r\n    const self = this;\r\n    self.initialized = false;\r\n    this.geometry.addEventListener('update', () => {\r\n      self.update();\r\n    });\r\n  }\r\n  init() {\r\n    const {\r\n      children\r\n    } = this;\r\n    for (let i = children.length - 1; i >= 0; --i) {\r\n      this.remove(children[i]);\r\n    }\r\n    const {\r\n      items,\r\n      userData\r\n    } = this.geometry;\r\n    for (let i = 0, n = items.length; i < n; ++i) {\r\n      const srcItem = items[i];\r\n      if (!srcItem) {\r\n        continue;\r\n      }\r\n      const item = utils.shallowCloneNode(srcItem);\r\n      const label = new gfx_CSS2DObject(item);\r\n      label.userData = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].clone(userData);\r\n      const el = label.getElement();\r\n      el.style.visibility = 'visible';\r\n      label.source = srcItem;\r\n      this.add(label);\r\n    }\r\n    this.initialized = true;\r\n  }\r\n  update() {\r\n    const geo = this.geometry;\r\n    if (!geo.needsUpdate) {\r\n      return;\r\n    }\r\n    const {\r\n      children\r\n    } = this;\r\n    if (!this.initialized) {\r\n      this.init();\r\n    }\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      const child = children[i];\r\n      const item = child.source;\r\n      child.position.copy(item.worldPos);\r\n      child.userData.color = item.opts.color;\r\n      child.userData.background = item.opts.background;\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const meshes_TextMesh = (TextMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/SimpleMesh.js\r\n\r\n\r\nconst SimpleMesh_Mesh = UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh);\r\nclass SimpleMesh extends SimpleMesh_Mesh {\r\n  constructor(geometry, material) {\r\n    super(geometry, material);\r\n    this.castShadow = true;\r\n    this.receiveShadow = true;\r\n  }\r\n}\r\n/* harmony default export */ const meshes_SimpleMesh = (SimpleMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/ThickLineMesh.js\r\n\r\n\r\nconst ThickLineMesh_Mesh = UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh);\r\nconst _viewport = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\nclass ThickLineMesh extends ThickLineMesh_Mesh {\r\n  _onBeforeRender(renderer, scene, camera, _geometry, _material, _group) {\r\n    const {\r\n      material\r\n    } = this;\r\n    if (!material.uberOptions) {\r\n      return;\r\n    }\r\n    material.uberOptions.projMatrixInv.copy(camera.projectionMatrix).invert();\r\n    renderer.getSize(_viewport);\r\n    material.uberOptions.viewport.set(_viewport.width, _viewport.height);\r\n  }\r\n}\r\n/* harmony default export */ const meshes_ThickLineMesh = (ThickLineMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/InstancedMesh.js\r\n\r\n\r\nconst InstancedMesh_Mesh = UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh);\r\nclass InstancedMesh extends InstancedMesh_Mesh {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.castShadow = true;\r\n    this.receiveShadow = true;\r\n  }\r\n}\r\n/* harmony default export */ const meshes_InstancedMesh = (InstancedMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/meshes.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const meshes = ({\r\n  ZClipped: meshes_ZClippedMesh,\r\n  ZSprite: meshes_ZSpriteMesh,\r\n  Text: meshes_TextMesh,\r\n  Line: UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Line),\r\n  LineSegments: UberObject(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments),\r\n  Mesh: meshes_SimpleMesh,\r\n  ThickLineMesh: meshes_ThickLineMesh,\r\n  Instanced: meshes_InstancedMesh\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/MeshCreator.js\r\n\r\n\r\n\r\nfunction setMatParams(params, uniforms) {\r\n  return function (material) {\r\n    material.setValues(params);\r\n    material.setUberOptions(uniforms);\r\n  };\r\n}\r\nfunction _createInstancedCylinders(useZSprites, openEnded) {\r\n  function Geometry(a, b) {\r\n    return new geometries.Instanced2CCylindersGeometry(a, b, useZSprites, openEnded);\r\n  }\r\n  return {\r\n    Geometry,\r\n    Object: useZSprites ? meshes.ZSprite : meshes.Instanced,\r\n    initMaterial: setMatParams({\r\n      instancedMatrix: true,\r\n      attrColor: true,\r\n      attrColor2: true,\r\n      attrAlphaColor: true,\r\n      cylinderSprite: useZSprites\r\n    })\r\n  };\r\n}\r\nfunction _createLineSegmentsGeoTriplet(geo, renderParams) {\r\n  const thickLines = geo.prototype instanceof geometries_ThickLinesGeometry;\r\n  const lineWidth = renderParams.lineWidth || 0;\r\n  return {\r\n    Geometry: geo,\r\n    Object: thickLines ? meshes.ThickLineMesh : meshes.LineSegments,\r\n    initMaterial: setMatParams({\r\n      lights: false,\r\n      attrColor: true,\r\n      attrAlphaColor: true,\r\n      thickLine: thickLines\r\n    }, {\r\n      lineWidth\r\n    })\r\n  };\r\n}\r\nfunction _createSimpleGeoTriplet(geoClass) {\r\n  return {\r\n    Geometry: geoClass,\r\n    Object: meshes.Mesh,\r\n    initMaterial: setMatParams({\r\n      attrColor: true,\r\n      attrAlphaColor: true\r\n    })\r\n  };\r\n}\r\nfunction _createIsoSurfaceGeoTriplet(geoClass, caps, settings, renderParams) {\r\n  const surfaceOpts = {\r\n    wireframe: !!renderParams.wireframe,\r\n    fakeOpacity: settings.now.isoSurfaceFakeOpacity,\r\n    zClip: renderParams.zClip\r\n  };\r\n  return {\r\n    Geometry: geoClass,\r\n    Object: meshes.ZClipped,\r\n    initMaterial: setMatParams({\r\n      attrColor: true,\r\n      attrAlphaColor: false,\r\n      wireframe: surfaceOpts.wireframe,\r\n      fakeOpacity: surfaceOpts.fakeOpacity,\r\n      zClip: surfaceOpts.zClip\r\n    })\r\n  };\r\n}\r\nclass MeshCreator {\r\n  static createSpheres(caps, settings) {\r\n    const useZSprites = settings.now.zSprites;\r\n    function Geometry(a, b) {\r\n      return new geometries.InstancedSpheresGeometry(a, b, useZSprites);\r\n    }\r\n    return {\r\n      Geometry,\r\n      Object: useZSprites ? meshes.ZSprite : meshes.Instanced,\r\n      initMaterial: setMatParams({\r\n        instancedPos: true,\r\n        attrColor: true,\r\n        attrAlphaColor: true,\r\n        sphereSprite: useZSprites\r\n      })\r\n    };\r\n  }\r\n  static create2CClosedCylinders(_caps, _settings) {\r\n    return _createInstancedCylinders(false, false);\r\n  }\r\n  static create2CCylinders(caps, settings) {\r\n    return _createInstancedCylinders(settings.now.zSprites, true);\r\n  }\r\n  static create2CLines(_caps, _settings, renderParams) {\r\n    return _createLineSegmentsGeoTriplet(geometries.TwoColorLinesGeometry, renderParams);\r\n  }\r\n  static createCrosses(_caps, _settings, renderParams) {\r\n    return _createLineSegmentsGeoTriplet(geometries.CrossGeometry, renderParams);\r\n  }\r\n  static createExtrudedChains(_caps, _settings) {\r\n    return _createSimpleGeoTriplet(geometries.ExtrudedObjectsGeometry);\r\n  }\r\n  static createChunkedLines(_caps, _settings, renderParams) {\r\n    return _createLineSegmentsGeoTriplet(geometries.ChunkedLinesGeometry, renderParams);\r\n  }\r\n  static createQuickSurface(caps, settings, renderParams) {\r\n    return _createIsoSurfaceGeoTriplet(geometries.QuickSurfGeometry, caps, settings, renderParams);\r\n  }\r\n  static createContactSurface(caps, settings, renderParams) {\r\n    return _createIsoSurfaceGeoTriplet(geometries.ContactSurfaceGeometry, caps, settings, renderParams);\r\n  }\r\n  static createSASSES(caps, settings, renderParams) {\r\n    return _createIsoSurfaceGeoTriplet(geometries.SSIsosurfaceGeometry, caps, settings, renderParams);\r\n  }\r\n  static createLabels(_caps, _settings) {\r\n    return {\r\n      Geometry: geometries.LabelsGeometry,\r\n      Object: meshes.Text,\r\n      initMaterial() {}\r\n    };\r\n  }\r\n}\r\n/* harmony default export */ const meshes_MeshCreator = (MeshCreator);\r\n;// CONCATENATED MODULE: ./src/gfx/meshes/TransformGroup.js\r\n\r\n\r\nclass TransformGroup extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D {\r\n  static _inverseMatrix = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4())();\r\n  static _ray = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Ray())();\r\n  constructor(geometry, geoParams, material, transforms) {\r\n    super();\r\n    this._geometry = geometry;\r\n    this._geoParams = geoParams;\r\n    const mat = material.createInstance();\r\n    geoParams.initMaterial(mat);\r\n    this._material = mat;\r\n    this._transforms = transforms.length > 0 ? transforms : [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()];\r\n    const meshes = this._createMeshes(geometry);\r\n    for (let i = 0, n = meshes.length; i < n; ++i) {\r\n      this.add(meshes[i]);\r\n    }\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    const ray = TransformGroup._ray;\r\n    const inverseMatrix = TransformGroup._inverseMatrix;\r\n    const {\r\n      children\r\n    } = this;\r\n    ray.copy(raycaster.ray);\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      const child = children[i];\r\n      if (!gfxutils.belongToSelectLayers(child)) {\r\n        continue;\r\n      }\r\n      child.updateMatrixWorld();\r\n      const mtx = child.matrixWorld;\r\n      inverseMatrix.copy(mtx).invert();\r\n      raycaster.ray.copy(ray).applyMatrix4(inverseMatrix);\r\n      const childIntersects = [];\r\n      this._geometry.raycast(raycaster, childIntersects);\r\n      for (let j = 0, ciCount = childIntersects.length; j < ciCount; ++j) {\r\n        const inters = childIntersects[j];\r\n        if (inters.point) {\r\n          inters.point.applyMatrix4(mtx);\r\n          inters.distance = ray.origin.distanceTo(inters.point);\r\n        }\r\n        inters.object = child;\r\n        intersects[intersects.length] = inters;\r\n      }\r\n    }\r\n    raycaster.ray.copy(ray);\r\n  }\r\n  getSubset(chunkIndices) {\r\n    const geos = this._geometry.getSubset(chunkIndices);\r\n    const subset = [];\r\n    let subIdx = 0;\r\n    for (let i = 0, n = geos.length; i < n; ++i) {\r\n      const meshes = this._createMeshes(geos[i]);\r\n      for (let j = 0, meshCnt = meshes.length; j < meshCnt; ++j) {\r\n        subset[subIdx++] = meshes[j];\r\n      }\r\n    }\r\n    return subset;\r\n  }\r\n  _createMeshes(geometry) {\r\n    const transforms = this._transforms;\r\n    const Mesh = this._geoParams.Object;\r\n    const material = this._material;\r\n    const meshes = [];\r\n    for (let i = 0, n = transforms.length; i < n; ++i) {\r\n      const mesh = new Mesh(geometry, material);\r\n      mesh.applyMatrix4(transforms[i]);\r\n      meshes[i] = mesh;\r\n    }\r\n    return meshes;\r\n  }\r\n}\r\n/* harmony default export */ const meshes_TransformGroup = (TransformGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/ChemGroup.js\r\n\r\n\r\nfunction wrapper(Name, args) {\r\n  const params = [Name].concat(args);\r\n  return Name.bind(...params);\r\n}\r\nclass ChemGroup extends gfx_RCGroup {\r\n  constructor(geoParams, selection, colorer, mode, transforms, polyComplexity, material) {\r\n    super();\r\n    if (this.constructor === ChemGroup) {\r\n      throw new Error('Can not instantiate abstract class!');\r\n    }\r\n    this._selection = selection;\r\n    this._mode = mode;\r\n    this._colorer = colorer;\r\n    this._chunksIdc = selection.chunks;\r\n    this._polyComplexity = polyComplexity;\r\n    this._geo = new (wrapper(geoParams.Geometry, this._makeGeoArgs()))();\r\n    this._mesh = new meshes_TransformGroup(this._geo, geoParams, material, transforms);\r\n    this.add(this._mesh);\r\n    this._build();\r\n  }\r\n  _makeGeoArgs() {\r\n    throw new Error('ChemGroup subclass must override _makeGeoArgs() method');\r\n  }\r\n\r\n  /**\r\n   * Builds subset geometry by ATOMS index list\r\n   *\r\n   * @param {Number} mask - Representation mask\r\n   * @param {Boolean} innerOnly - if true returns inner bonds only - without halves\r\n   * @returns {Array} Subset geometry\r\n   */\r\n  getSubset(mask, innerOnly) {\r\n    innerOnly = innerOnly !== undefined ? innerOnly : false;\r\n    const chunksList = this._calcChunksList(mask, innerOnly);\r\n    if (chunksList.length === 0) {\r\n      return [];\r\n    }\r\n    return this._mesh.getSubset(chunksList);\r\n  }\r\n  _changeSubsetOpacity(mask, value, innerOnly) {\r\n    const chunksList = this._calcChunksList(mask, innerOnly);\r\n    if (chunksList.length === 0) {\r\n      return;\r\n    }\r\n    this._geo.setOpacity(chunksList, value);\r\n  }\r\n  enableSubset(mask, innerOnly) {\r\n    innerOnly = innerOnly !== undefined ? innerOnly : true;\r\n    this._changeSubsetOpacity(mask, 1.0, innerOnly);\r\n  }\r\n  disableSubset(mask, innerOnly) {\r\n    innerOnly = innerOnly !== undefined ? innerOnly : true;\r\n    this._changeSubsetOpacity(mask, 0.0, innerOnly);\r\n  }\r\n}\r\n/* harmony default export */ const groups_ChemGroup = (ChemGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AtomsGroup.js\r\n\r\nclass AtomsGroup extends groups_ChemGroup {\r\n  raycast(raycaster, intersects) {\r\n    const {\r\n      atoms\r\n    } = this._selection;\r\n    const inters = [];\r\n    this._mesh.raycast(raycaster, inters);\r\n    const atomsIdc = this._chunksIdc;\r\n    // process inters array - arr object references\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('chunkIdx')) {\r\n        continue;\r\n      }\r\n      const atomIdx = atomsIdc[inters[i].chunkIdx];\r\n      if (atomIdx < atoms.length) {\r\n        inters[i].atom = atoms[atomIdx];\r\n        intersects.push(inters[i]);\r\n      }\r\n    }\r\n  }\r\n  _calcChunksList(mask) {\r\n    const chunksList = [];\r\n    const {\r\n      atoms\r\n    } = this._selection;\r\n    const atomsIdc = this._chunksIdc;\r\n    for (let i = 0, n = atomsIdc.length; i < n; ++i) {\r\n      const atom = atoms[atomsIdc[i]];\r\n      if ((atom.mask & mask) !== 0) {\r\n        chunksList.push(i);\r\n      }\r\n    }\r\n    return chunksList;\r\n  }\r\n}\r\n/* harmony default export */ const groups_AtomsGroup = (AtomsGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AtomsSphereGroup.js\r\n\r\nclass AtomsSphereGroup extends groups_AtomsGroup {\r\n  _makeGeoArgs() {\r\n    return [this._selection.chunks.length, this._polyComplexity];\r\n  }\r\n  _build() {\r\n    const atomsIdc = this._selection.chunks;\r\n    const {\r\n      atoms,\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    for (let i = 0, n = atomsIdc.length; i < n; ++i) {\r\n      const atom = atoms[atomsIdc[i]];\r\n      geo.setItem(i, atom.position, mode.calcAtomRadius(atom));\r\n      geo.setColor(i, colorer.getAtomColor(atom, parent));\r\n    }\r\n    geo.finalize();\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n    const atomsIdc = this._selection.chunks;\r\n    const {\r\n      atoms\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    const geo = this._geo;\r\n    for (let i = 0, n = atomsIdc.length; i < n; ++i) {\r\n      const atom = atoms[atomsIdc[i]];\r\n      geo.setItem(i, frameData.getAtomPos(atomsIdc[i]), mode.calcAtomRadius(atom));\r\n      if (updateColor) {\r\n        geo.setColor(i, frameData.getAtomColor(colorer, atom));\r\n      }\r\n    }\r\n    geo.finalize();\r\n  }\r\n}\r\n/* harmony default export */ const groups_AtomsSphereGroup = (AtomsSphereGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AtomsSurfaceGroup.js\r\n\r\nclass AtomsSurfaceGroup extends groups_AtomsSphereGroup {\r\n  _makeGeoArgs() {\r\n    const selectedAtoms = [];\r\n    const {\r\n      atoms,\r\n      chunks\r\n    } = this._selection;\r\n    const n = chunks.length;\r\n    for (let i = 0; i < n; ++i) {\r\n      selectedAtoms[i] = atoms[chunks[i]];\r\n    }\r\n    const opts = this._mode.getSurfaceOpts();\r\n    opts.atoms = selectedAtoms;\r\n    return [n, opts];\r\n  }\r\n}\r\n/* harmony default export */ const groups_AtomsSurfaceGroup = (AtomsSurfaceGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AtomsSASSESGroupStub.js\r\n/* This is a stub class keep it until SAS/SES is refactored */\r\n\r\n\r\nclass AtomsSASSESGroupStub extends groups_AtomsSphereGroup {\r\n  _makeGeoArgs() {\r\n    const selectedAtoms = [];\r\n    const {\r\n      atoms,\r\n      chunks\r\n    } = this._selection;\r\n    const n = chunks.length;\r\n    for (let i = 0; i < n; ++i) {\r\n      selectedAtoms[i] = atoms[chunks[i]];\r\n    }\r\n    const opts = this._mode.getSurfaceOpts();\r\n    opts.atoms = selectedAtoms;\r\n    opts.selection = this._selection;\r\n    opts.colorMode = this._colorer;\r\n    return [n, opts];\r\n  }\r\n}\r\n/* harmony default export */ const groups_AtomsSASSESGroupStub = (AtomsSASSESGroupStub);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AtomsTextGroup.js\r\n\r\n\r\nfunction adjustColor(color) {\r\n  let r = color >> 16 & 255;\r\n  let g = color >> 8 & 255;\r\n  let b = color & 255;\r\n  if (0.2126 * r + 0.7152 * g + 0.0722 * b > 127) {\r\n    r = r * 3 / 10;\r\n    g = g * 3 / 10;\r\n    b = b * 3 / 10;\r\n  } else {\r\n    r = 255 - (255 - r) * 3 / 10;\r\n    g = 255 - (255 - g) * 3 / 10;\r\n    b = 255 - (255 - b) * 3 / 10;\r\n  }\r\n  return r << 16 | g << 8 | b;\r\n}\r\nfunction inverseColor(color) {\r\n  const r = color >> 16 & 255;\r\n  const g = color >> 8 & 255;\r\n  const b = color & 255;\r\n  return 255 - r << 16 | 255 - g << 8 | 255 - b;\r\n}\r\nfunction getAtomText(atom) {\r\n  if (atom.name.getNode() !== null) {\r\n    return atom.name.getNode();\r\n  }\r\n  return atom.getVisualName();\r\n}\r\nconst colorMappings = {\r\n  none(c) {\r\n    return c;\r\n  },\r\n  adjust: adjustColor,\r\n  inverse: inverseColor\r\n};\r\nfunction propagateColor(color, rule) {\r\n  let result;\r\n  if (colorMappings.hasOwnProperty(rule)) {\r\n    result = utils.hexColor(colorMappings[rule](color));\r\n  } else {\r\n    const val = parseInt(rule, 16);\r\n    if (!Number.isNaN(val) && rule.toLowerCase().startsWith('0x')) {\r\n      result = utils.hexColor(val);\r\n    } else {\r\n      result = '#000000';\r\n    }\r\n  }\r\n  return result;\r\n}\r\nconst templateMappings = {\r\n  serial(a) {\r\n    return a.serial;\r\n  },\r\n  name(a) {\r\n    return a.getVisualName();\r\n  },\r\n  elem(a) {\r\n    return a.element.name;\r\n  },\r\n  residue(a) {\r\n    return a.residue.getType().getName();\r\n  },\r\n  sequence(a) {\r\n    return a.residue.getSequence();\r\n  },\r\n  chain(a) {\r\n    return a.residue.getChain().getName();\r\n  },\r\n  hetatm(a) {\r\n    return a.isHet();\r\n  },\r\n  water(a) {\r\n    return a.residue.getType().getName() === 'HOH' || a.residue.getType().getName() === 'WAT';\r\n  }\r\n};\r\nconst parseTemplate = function (atom, str) {\r\n  return str.replace(/\\{\\{(\\s*\\w+\\s*)\\}\\}/g, m => {\r\n    let key = m.replace(/\\s+/g, '');\r\n    key = key.substring(2, key.length - 2).toLowerCase();\r\n    if (templateMappings.hasOwnProperty(key)) {\r\n      return templateMappings[key](atom);\r\n    }\r\n    return 'null';\r\n  });\r\n};\r\nclass AtomsTextGroup extends groups_AtomsGroup {\r\n  _makeGeoArgs() {\r\n    const opts = this._mode.getLabelOpts();\r\n    return [this._selection.chunks.length, opts];\r\n  }\r\n  _build() {\r\n    const opts = this._mode.getLabelOpts();\r\n    const atomsIdc = this._selection.chunks;\r\n    const {\r\n      atoms,\r\n      parent\r\n    } = this._selection;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    for (let i = 0, n = atomsIdc.length; i < n; ++i) {\r\n      const atom = atoms[atomsIdc[i]];\r\n      const text = opts.template ? parseTemplate(atom, opts.template) : getAtomText(atom);\r\n      if (!text) {\r\n        continue;\r\n      }\r\n      const color = colorer.getAtomColor(atom, parent);\r\n      const fgColor = parseInt(propagateColor(color, opts.fg).substring(1), 16);\r\n      const bgColor = opts.showBg ? parseInt(propagateColor(color, opts.bg).substring(1), 16) : 'transparent';\r\n      geo.setItem(i, atom.position, text);\r\n      geo.setColor(i, fgColor, bgColor);\r\n    }\r\n    geo.finalize();\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n    const opts = this._mode.getLabelOpts();\r\n    const atomsIdc = this._selection.chunks;\r\n    const {\r\n      atoms\r\n    } = this._selection;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    for (let i = 0, n = atomsIdc.length; i < n; ++i) {\r\n      const atom = atoms[atomsIdc[i]];\r\n      const text = opts.template ? parseTemplate(atom, opts.template) : getAtomText(atom);\r\n      if (!text) {\r\n        continue;\r\n      }\r\n      const color = frameData.getAtomColor(colorer, atom);\r\n      const fgColor = parseInt(propagateColor(color, opts.fg).substring(1), 16);\r\n      const bgColor = opts.showBg ? parseInt(propagateColor(color, opts.bg).substring(1), 16) : 'transparent';\r\n      geo.setItem(i, frameData.getAtomPos(atomsIdc[i]), text);\r\n      if (updateColor) {\r\n        geo.setColor(i, fgColor, bgColor);\r\n      }\r\n    }\r\n    geo.finalize();\r\n  }\r\n}\r\n/* harmony default export */ const groups_AtomsTextGroup = (AtomsTextGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AromaticGroup.js\r\n\r\n\r\nfunction _slerp(omega, v1, v2, t) {\r\n  const oSin = Math.sin(omega);\r\n  return v1.clone().multiplyScalar(Math.sin((1 - t) * omega) / oSin).addScaledVector(v2, Math.sin(t * omega) / oSin);\r\n}\r\nclass AromaticGroup extends groups_AtomsGroup {\r\n  _buildInner(radOffset, addChunk) {\r\n    const chunksToIdx = this._selection.chunks;\r\n    const prevVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const currVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const segmentsHeight = this._segmentsHeight;\r\n    const leprStep = 1.0 / segmentsHeight;\r\n    const colorer = this._colorer;\r\n    const {\r\n      cycles,\r\n      parent\r\n    } = this._selection;\r\n    let chunkIdx = 0;\r\n    let currAtomIdx = chunksToIdx[chunkIdx];\r\n    for (let cIdx = 0, cCount = cycles.length; cIdx < cCount; ++cIdx) {\r\n      const cycle = cycles[cIdx];\r\n      const cycAtoms = cycle.atoms;\r\n      const chunkPoints = [];\r\n      const tmpDir = [];\r\n      const {\r\n        center\r\n      } = cycle;\r\n      const cycleRad = cycle.radius - radOffset;\r\n      const n = cycAtoms.length;\r\n      let i = 0;\r\n      const prevPos = cycAtoms[n - 1].position;\r\n      let currPos = cycAtoms[i].position;\r\n      prevVector.subVectors(prevPos, center);\r\n      currVector.subVectors(currPos, center);\r\n      const upDir = currVector.clone().cross(prevVector).normalize();\r\n      for (; i < n; ++i) {\r\n        const omega = prevVector.angleTo(currVector);\r\n        tmpDir[i] = _slerp(omega, prevVector, currVector, 0.5).normalize();\r\n        currPos = cycAtoms[(i + 1) % n].position;\r\n        prevVector.copy(currVector);\r\n        currVector.subVectors(currPos, center);\r\n      }\r\n      for (i = 0; i < n; ++i) {\r\n        if (cycAtoms[i].index !== currAtomIdx) {\r\n          continue;\r\n        }\r\n        const start = tmpDir[i];\r\n        const end = tmpDir[(i + 1) % n];\r\n        const color = colorer.getAtomColor(cycAtoms[i], parent);\r\n        const currAngle = start.angleTo(end);\r\n        for (let j = 0; j <= segmentsHeight; ++j) {\r\n          chunkPoints[j] = _slerp(currAngle, start, end, j * leprStep).multiplyScalar(cycleRad).add(center);\r\n        }\r\n        addChunk(chunkIdx++, color, chunkPoints, center, upDir);\r\n        currAtomIdx = chunksToIdx[chunkIdx];\r\n      }\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const groups_AromaticGroup = (AromaticGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AromaticTorusGroup.js\r\n\r\n\r\n\r\nfunction _createShape(rad, parts) {\r\n  const pts = [];\r\n  for (let i = 0; i < parts; ++i) {\r\n    const a = -2 * i / parts * Math.PI;\r\n    pts.push(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(Math.cos(a) * rad, Math.sin(a) * rad, 0));\r\n  }\r\n  return pts;\r\n}\r\nconst {\r\n  calcChunkMatrix\r\n} = gfxutils;\r\nclass AromaticTorusGroup extends groups_AromaticGroup {\r\n  _build() {\r\n    const segmentsHeight = this._segmentsHeight;\r\n    const torusRad = this._mode.getAromRadius();\r\n    const radiusV = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(torusRad, torusRad);\r\n    const radOffset = this._mode.calcStickRadius() + 2 * torusRad;\r\n    const lookAtVector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const mtc = [];\r\n    const geo = this._geo;\r\n    this._buildInner(radOffset, (chunkIdx, color, points, center, upDir) => {\r\n      for (let j = 0; j <= segmentsHeight; ++j) {\r\n        const currPoint = points[j];\r\n        const currDir = currPoint.clone().sub(center).cross(upDir);\r\n        lookAtVector.addVectors(currPoint, currDir);\r\n        mtc[j] = calcChunkMatrix(currPoint, lookAtVector, upDir, radiusV);\r\n      }\r\n      geo.setItem(chunkIdx, mtc);\r\n      geo.setColor(chunkIdx, color);\r\n    });\r\n    geo.finalize();\r\n  }\r\n  _makeGeoArgs() {\r\n    this._segmentsHeight = this._polyComplexity;\r\n    return [_createShape(1.0, this._polyComplexity), this._segmentsHeight + 1, this._selection.chunks.length];\r\n  }\r\n}\r\n/* harmony default export */ const groups_AromaticTorusGroup = (AromaticTorusGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/AromaticLinesGroup.js\r\n\r\nclass AromaticLinesGroup extends groups_AromaticGroup {\r\n  _build() {\r\n    const geo = this._geo;\r\n    const radOffset = this._mode.getAromaticOffset();\r\n    this._buildInner(radOffset, (chunkIdx, color, points) => {\r\n      let prevPt = points[0]; // do not replace with start\r\n      for (let j = 1; j <= this._segmentsHeight; ++j) {\r\n        const currPoint = points[j];\r\n        geo.setSegment(chunkIdx, j - 1, prevPt, currPoint);\r\n        prevPt = currPoint;\r\n      }\r\n      geo.setColor(chunkIdx, color);\r\n    });\r\n    geo.finalize();\r\n  }\r\n  _makeGeoArgs() {\r\n    this._segmentsHeight = this._mode.getAromaticArcChunks();\r\n    return [this._selection.chunks.length, this._segmentsHeight, true];\r\n  }\r\n}\r\n/* harmony default export */ const groups_AromaticLinesGroup = (AromaticLinesGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/ResiduesGroup.js\r\n\r\nclass ResiduesGroup extends groups_ChemGroup {\r\n  raycast(raycaster, intersects) {\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    const inters = [];\r\n    this._mesh.raycast(raycaster, inters);\r\n    const chunksIdc = this._chunksIdc;\r\n    // process inters array - arr object references\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('chunkIdx')) {\r\n        continue;\r\n      }\r\n      const resIdx = chunksIdc[inters[i].chunkIdx];\r\n      if (resIdx < residues.length) {\r\n        inters[i].residue = residues[resIdx];\r\n        intersects.push(inters[i]);\r\n      }\r\n    }\r\n  }\r\n  _calcChunksList(mask) {\r\n    const chunksList = [];\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    const resIdc = this._chunksIdc;\r\n    for (let i = 0, n = resIdc.length; i < n; ++i) {\r\n      const res = residues[resIdc[i]];\r\n      if ((res._mask & mask) !== 0) {\r\n        chunksList.push(i);\r\n      }\r\n    }\r\n    return chunksList;\r\n  }\r\n}\r\n/* harmony default export */ const groups_ResiduesGroup = (ResiduesGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/NucleicItemGroup.js\r\n\r\nclass NucleicItemGroup extends groups_ResiduesGroup {\r\n  raycast(raycaster, intersects) {\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    const inters = [];\r\n    this._mesh.raycast(raycaster, inters);\r\n    const chunksIdc = this._chunksIdc;\r\n    // process inters array - arr object references\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('chunkIdx')) {\r\n        continue;\r\n      }\r\n      const resIdx = chunksIdc[Math.floor(inters[i].chunkIdx / 2)];\r\n      if (resIdx < residues.length) {\r\n        inters[i].residue = residues[resIdx];\r\n        intersects.push(inters[i]);\r\n      }\r\n    }\r\n  }\r\n  _build() {\r\n    const {\r\n      residues,\r\n      parent\r\n    } = this._selection;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const stickRad = this._mode.calcStickRadius();\r\n    let chunkIdx = 0;\r\n    const resIdc = this._selection.chunks;\r\n    for (let i = 0, n = resIdc.length; i < n; ++i) {\r\n      const res = residues[resIdc[i]];\r\n      const color = colorer.getResidueColor(res, parent);\r\n      this._processItem(chunkIdx++, res._cylinders[0], res._cylinders[1], stickRad, color);\r\n    }\r\n    geo.finalize();\r\n  }\r\n  _calcChunksList(mask) {\r\n    const chunksList = [];\r\n    let chunkIdx = 0;\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    const resIdc = this._chunksIdc;\r\n    for (let i = 0, n = resIdc.length; i < n; ++i) {\r\n      const res = residues[resIdc[i]];\r\n      if ((res._mask & mask) !== 0) {\r\n        chunksList[chunkIdx++] = 2 * i;\r\n        chunksList[chunkIdx++] = 2 * i + 1;\r\n      }\r\n    }\r\n    return chunksList;\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n    const residues = frameData.getResidues();\r\n    const {\r\n      parent\r\n    } = this._selection;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const stickRad = this._mode.calcStickRadius();\r\n    let chunkIdx = 0;\r\n    const resIdc = this._selection.chunks;\r\n    for (let i = 0, n = resIdc.length; i < n; ++i) {\r\n      const res = residues[resIdc[i]];\r\n      const color = colorer.getResidueColor(res, parent);\r\n      this._processItem(chunkIdx++, res._cylinders[0], res._cylinders[1], stickRad, color);\r\n    }\r\n    geo.finishUpdate();\r\n  }\r\n}\r\n/* harmony default export */ const groups_NucleicItemGroup = (NucleicItemGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/NucleicCylindersGroup.js\r\n\r\nclass NucleicCylindersGroup extends groups_NucleicItemGroup {\r\n  _makeGeoArgs() {\r\n    return [this._selection.chunks.length, this._polyComplexity];\r\n  }\r\n  _processItem(chunkIdx, cyl1, cyl2, stickRad, color) {\r\n    const geo = this._geo;\r\n    geo.setItem(chunkIdx, cyl1, cyl2, stickRad);\r\n    geo.setColor(chunkIdx, color, color);\r\n  }\r\n}\r\n/* harmony default export */ const groups_NucleicCylindersGroup = (NucleicCylindersGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/NucleicSpheresGroup.js\r\n\r\nclass NucleicSpheresGroup extends groups_NucleicItemGroup {\r\n  _makeGeoArgs() {\r\n    return [this._selection.chunks.length * 2, this._polyComplexity];\r\n  }\r\n  _processItem(chunkIdx, cyl1, cyl2, stickRad, color) {\r\n    const geo = this._geo;\r\n    let idx = chunkIdx * 2;\r\n    geo.setItem(idx, cyl1, stickRad);\r\n    geo.setColor(idx, color);\r\n    idx++;\r\n    geo.setItem(idx, cyl2, stickRad);\r\n    geo.setColor(idx, color);\r\n  }\r\n}\r\n/* harmony default export */ const groups_NucleicSpheresGroup = (NucleicSpheresGroup);\r\n// EXTERNAL MODULE: ./vendor/js/Smooth.js\r\nvar Smooth = __nested_webpack_require_130507__(690);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/CartoonHelper.js\r\n\r\n\r\n\r\n\r\nconst {\r\n  ResidueType: CartoonHelper_ResidueType\r\n} = chem;\r\nconst calcMatrix = gfxutils.calcChunkMatrix;\r\nfunction _buildStructureInterpolator(points, tension) {\r\n  const path = (0,Smooth.Smooth)(points, {\r\n    method: Smooth.Smooth.METHOD_CUBIC,\r\n    clip: Smooth.Smooth.CLIP_CLAMP,\r\n    cubicTension: tension,\r\n    scaleTo: 1\r\n  });\r\n  return function (t, argTrans) {\r\n    let transformT = argTrans;\r\n    if (transformT === null) {\r\n      // map our range to the [second .. last but one]\r\n      transformT = function (tt) {\r\n        return (tt * (points.length - 1 - 2) + 1) / (points.length - 1);\r\n      };\r\n    }\r\n    const newt = transformT(t);\r\n    const ans = path(newt);\r\n    return new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(ans[0], ans[1], ans[2]);\r\n  };\r\n}\r\nfunction _addPoints(centerPoints, topPoints, idx, residue) {\r\n  if (!residue._isValid) {\r\n    centerPoints[idx] = centerPoints[idx - 1];\r\n    topPoints[idx] = topPoints[idx - 1];\r\n    return;\r\n  }\r\n  const cp = residue._controlPoint;\r\n  centerPoints[idx] = [cp.x, cp.y, cp.z];\r\n  const tp = cp.clone().add(residue._wingVector);\r\n  topPoints[idx] = [tp.x, tp.y, tp.z];\r\n}\r\nfunction _addPointsForLoneResidue(centerPoints, topPoints, idx, residue) {\r\n  const nucleic = (residue._type.flags & CartoonHelper_ResidueType.Flags.NUCLEIC) !== 0;\r\n  const nameFrom = nucleic ? 'C5\\'' : 'N';\r\n  const nameTo = nucleic ? 'C3\\'' : 'C';\r\n  let posFrom;\r\n  let posTo;\r\n  residue.forEachAtom(atom => {\r\n    const name = atom.getVisualName();\r\n    if (!posFrom && name === nameFrom) {\r\n      posFrom = atom.position;\r\n    } else if (!posTo && name === nameTo) {\r\n      posTo = atom.position;\r\n    }\r\n  });\r\n\r\n  // provide a fallback for unknown residues\r\n  if (!(posFrom && posTo)) {\r\n    posFrom = residue._firstAtom.position;\r\n    posTo = residue._lastAtom.position;\r\n  }\r\n  if (posFrom && posTo) {\r\n    const shift = posTo.clone().sub(posFrom);\r\n    const wing = residue._wingVector;\r\n    const cp = residue._controlPoint;\r\n    const tp = cp.clone().add(wing);\r\n    const cpPrev = cp.clone().sub(shift);\r\n    const tpPrev = cpPrev.clone().add(wing);\r\n    centerPoints[idx] = [cpPrev.x, cpPrev.y, cpPrev.z];\r\n    topPoints[idx] = [tpPrev.x, tpPrev.y, tpPrev.z];\r\n    ++idx;\r\n    centerPoints[idx] = [cpPrev.x, cpPrev.y, cpPrev.z];\r\n    topPoints[idx] = [tpPrev.x, tpPrev.y, tpPrev.z];\r\n    ++idx;\r\n    centerPoints[idx] = [cp.x, cp.y, cp.z];\r\n    topPoints[idx] = [tp.x, tp.y, tp.z];\r\n    ++idx;\r\n    const cpNext = cp.clone().add(shift);\r\n    const tpNext = cpNext.clone().add(wing);\r\n    centerPoints[idx] = [cpNext.x, cpNext.y, cpNext.z];\r\n    topPoints[idx] = [tpNext.x, tpNext.y, tpNext.z];\r\n    ++idx;\r\n    centerPoints[idx] = [cpNext.x, cpNext.y, cpNext.z];\r\n    topPoints[idx] = [tpNext.x, tpNext.y, tpNext.z];\r\n  }\r\n}\r\nfunction _calcPoints(residues, firstIdx, lastIdx, boundaries) {\r\n  const left = boundaries.start;\r\n  const right = boundaries.end;\r\n  function _prevIdx(idx) {\r\n    return idx > left && residues[idx - 1]._isValid ? idx - 1 : idx;\r\n  }\r\n  function _nextIdx(idx) {\r\n    return idx < right && residues[idx + 1]._isValid ? idx + 1 : idx;\r\n  }\r\n  const topPoints = [];\r\n  const centerPoints = [];\r\n  let arrIdx = 0;\r\n  function _extrapolate2(currIdx, otherIdx) {\r\n    const cp = residues[currIdx]._controlPoint.clone().lerp(residues[otherIdx]._controlPoint, -0.25);\r\n    const tp = cp.clone().add(residues[currIdx]._wingVector);\r\n    centerPoints[arrIdx] = [cp.x, cp.y, cp.z];\r\n    topPoints[arrIdx++] = [tp.x, tp.y, tp.z];\r\n    centerPoints[arrIdx] = [cp.x, cp.y, cp.z];\r\n    topPoints[arrIdx++] = [tp.x, tp.y, tp.z];\r\n  }\r\n\r\n  // a single disconnected residue\r\n  const prevIdx = _prevIdx(firstIdx);\r\n  const nextIdx = _nextIdx(lastIdx);\r\n  if (prevIdx === nextIdx) {\r\n    _addPointsForLoneResidue(centerPoints, topPoints, arrIdx, residues[firstIdx]);\r\n    return {\r\n      centerPoints,\r\n      topPoints\r\n    };\r\n  }\r\n\r\n  // Two points (prev-prev and next-next) are added to support edge conditions for cubic splines, they are ignored\r\n  // Another two (prev and next) were added to support the outside of the sub chain\r\n\r\n  // prev and prev-prev\r\n  if (firstIdx === prevIdx) {\r\n    // do the extrapolation\r\n    _extrapolate2(firstIdx, _nextIdx(firstIdx));\r\n  } else {\r\n    _addPoints(centerPoints, topPoints, arrIdx++, residues[_prevIdx(prevIdx)]);\r\n    _addPoints(centerPoints, topPoints, arrIdx++, residues[prevIdx]);\r\n  }\r\n\r\n  // main loop\r\n  for (let idx = firstIdx; idx <= lastIdx; ++idx) {\r\n    _addPoints(centerPoints, topPoints, arrIdx++, residues[idx]);\r\n  }\r\n\r\n  // next and next-next\r\n  if (nextIdx === _nextIdx(nextIdx)) {\r\n    // do the extrapolation\r\n    _extrapolate2(lastIdx, _prevIdx(lastIdx));\r\n  } else {\r\n    _addPoints(centerPoints, topPoints, arrIdx++, residues[nextIdx]);\r\n    _addPoints(centerPoints, topPoints, arrIdx, residues[_nextIdx(nextIdx)]);\r\n  }\r\n  return {\r\n    centerPoints,\r\n    topPoints\r\n  };\r\n}\r\nclass CartoonHelper {\r\n  constructor(residues, startIdx, endIdx, segmentsCount, tension, boundaries) {\r\n    const pointsArrays = _calcPoints(residues, startIdx, endIdx, boundaries);\r\n    this._topInterp = _buildStructureInterpolator(pointsArrays.topPoints, tension);\r\n    this._centerInterp = _buildStructureInterpolator(pointsArrays.centerPoints, tension);\r\n    this._shift = 0.5 / (endIdx - startIdx + 2);\r\n    this._valueStep = (1.0 - 2 * this._shift) / (2 * (endIdx - startIdx + 1) * (segmentsCount - 1));\r\n    this._segmentsCount = segmentsCount;\r\n  }\r\n  prepareMatrices(idx, firstRad, secondRad) {\r\n    const mtcCount = this._segmentsCount;\r\n    const outMtc = new Array(mtcCount);\r\n    const currRad = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(0, 0);\r\n    const topInterp = this._topInterp;\r\n    const cenInterp = this._centerInterp;\r\n    let currentValue = this._shift + this._valueStep * (mtcCount - 1) * idx;\r\n    for (let mtxIdx = 0; mtxIdx < mtcCount; ++mtxIdx) {\r\n      const lerpVal = Math.min(1.0, mtxIdx / (mtcCount - 1));\r\n      currRad.lerpVectors(firstRad, secondRad, lerpVal);\r\n      const currTop = topInterp(currentValue, null);\r\n      const currCenter = cenInterp(currentValue, null);\r\n      currentValue += this._valueStep;\r\n      const nextCenter = cenInterp(currentValue, null);\r\n      outMtc[mtxIdx] = calcMatrix(currCenter.clone(), nextCenter.clone(), currTop.clone().sub(currCenter), currRad);\r\n    }\r\n    return outMtc;\r\n  }\r\n}\r\n/* harmony default export */ const groups_CartoonHelper = (CartoonHelper);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/ResiduesSubseqGroup.js\r\n\r\n\r\n\r\nfunction ResiduesSubseqGroup_createShape(rad, parts) {\r\n  const pts = [];\r\n  for (let i = 0; i < parts; ++i) {\r\n    // starts from pi/2 because it's important that points are lied on the angles of arrows (visual issues if not)\r\n    const a = Math.PI / 2.0 - 2 * Math.PI * i / parts;\r\n    pts.push(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(Math.cos(a) * rad, Math.sin(a) * rad, 0));\r\n  }\r\n  return pts;\r\n}\r\nfunction _loopThrough(subDiv, residues, segmentsHeight, tension, mode, callback) {\r\n  for (let subDivI = 0, subDivN = subDiv.length; subDivI < subDivN; ++subDivI) {\r\n    const subs = subDiv[subDivI].arr;\r\n    const {\r\n      boundaries\r\n    } = subDiv[subDivI];\r\n    for (let i = 0, n = subs.length; i < n; ++i) {\r\n      const idc = [subs[i].start, subs[i].end];\r\n      const matrixHelper = new groups_CartoonHelper(residues, idc[0], idc[1], segmentsHeight, tension, boundaries);\r\n      let prevLast = null;\r\n      const startIdx = subs[i].start * 2;\r\n      const endIdx = subs[i].end * 2 + 1;\r\n      let prevSecondRad = mode.getResidueRadius(residues[0], 0);\r\n      for (let idx = startIdx; idx <= endIdx; ++idx) {\r\n        const resIdx = idx / 2 | 0;\r\n        const currRes = residues[resIdx];\r\n        const firstRad = mode.getResidueRadius(currRes, idx % 2);\r\n        const secondRad = mode.getResidueRadius(currRes, 1 + idx % 2);\r\n        const mtc = matrixHelper.prepareMatrices(idx - idc[0] * 2, firstRad, secondRad);\r\n        mtc.unshift(prevLast === null ? mtc[0] : prevLast);\r\n\r\n        // Slope - radius is changed along this residue part\r\n        const hasSlope = firstRad.x !== secondRad.x || firstRad.y !== secondRad.y;\r\n        // Cut - end radius of previous part not equal to start radius of this part. First section of this part lies in the orthogonal plane\r\n        const hasCut = firstRad.x !== prevSecondRad.x || firstRad.y !== prevSecondRad.y;\r\n        callback(currRes, mtc, hasSlope, hasCut);\r\n        prevLast = mtc[segmentsHeight];\r\n        prevSecondRad = secondRad;\r\n      }\r\n    }\r\n  }\r\n}\r\nclass ResiduesSubseqGroup extends groups_ResiduesGroup {\r\n  _makeGeoArgs() {\r\n    const cmpMultiplier = this._mode.getHeightSegmentsRatio();\r\n    this._segmentsHeight = this._polyComplexity * cmpMultiplier | 0;\r\n    return [ResiduesSubseqGroup_createShape(1.0, this._polyComplexity), this._segmentsHeight + 1, this._selection.chunks.length * 2];\r\n  }\r\n  _build() {\r\n    const {\r\n      residues,\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const tension = mode.getTension();\r\n    const geo = this._geo;\r\n    let chunkIdx = 0;\r\n    const chunkIdc = [];\r\n    _loopThrough(this._selection.subdivs, residues, this._segmentsHeight, tension, mode, function (currRes, mtc) {\r\n      let hasSlope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n      let hasCut = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n      const color = colorer.getResidueColor(currRes, parent);\r\n      chunkIdc[chunkIdx] = currRes._index;\r\n      geo.setItem(chunkIdx, mtc, hasSlope, hasCut);\r\n      geo.setColor(chunkIdx++, color);\r\n    });\r\n    this._chunksIdc = chunkIdc;\r\n    geo.finalize();\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n    const {\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const tension = mode.getTension();\r\n    const geo = this._geo;\r\n    const frameRes = frameData.getResidues();\r\n    let chunkIdx = 0;\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    _loopThrough(this._selection.subdivs, frameRes, this._segmentsHeight, tension, mode, (currRes, mtc) => {\r\n      geo.setItem(chunkIdx, mtc);\r\n      if (updateColor) {\r\n        geo.setColor(chunkIdx, colorer.getResidueColor(currRes, parent));\r\n      }\r\n      chunkIdx++;\r\n    });\r\n    geo.finalize();\r\n  }\r\n}\r\n/* harmony default export */ const groups_ResiduesSubseqGroup = (ResiduesSubseqGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/ResiduesTraceGroup.js\r\n\r\nclass ResiduesTraceGroup extends groups_ChemGroup {\r\n  _makeGeoArgs() {\r\n    const subDiv = this._selection.subdivs;\r\n    let chunksCount = 0;\r\n    for (let subDivI = 0, subDivN = subDiv.length; subDivI < subDivN; ++subDivI) {\r\n      const subs = subDiv[subDivI].arr;\r\n      for (let i = 0, n = subs.length; i < n; ++i) {\r\n        chunksCount += subs[i].end - subs[i].start;\r\n      }\r\n    }\r\n    return [chunksCount, this._polyComplexity];\r\n  }\r\n  _build() {\r\n    const {\r\n      residues,\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    let chunkIdx = 0;\r\n    const chunkIdc = [];\r\n    const subDiv = this._selection.subdivs;\r\n    const stickRad = mode.calcStickRadius();\r\n    for (let subDivI = 0, subDivN = subDiv.length; subDivI < subDivN; ++subDivI) {\r\n      const subs = subDiv[subDivI].arr;\r\n      for (let i = 0, n = subs.length; i < n; ++i) {\r\n        const startIdx = subs[i].start;\r\n        const endIdx = subs[i].end;\r\n        let prevRes = residues[startIdx];\r\n        for (let idx = startIdx + 1; idx <= endIdx; ++idx) {\r\n          const currRes = residues[idx];\r\n          chunkIdc[chunkIdx] = {\r\n            first: prevRes._index,\r\n            second: currRes._index\r\n          };\r\n          geo.setItem(chunkIdx, prevRes._controlPoint, currRes._controlPoint, stickRad);\r\n          geo.setColor(chunkIdx, colorer.getResidueColor(prevRes, parent), colorer.getResidueColor(currRes, parent));\r\n          chunkIdx++;\r\n          prevRes = currRes;\r\n        }\r\n      }\r\n    }\r\n    this._chunksIdc = chunkIdc;\r\n    geo.finalize();\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n\r\n    const residues = frameData.getResidues();\r\n    const {\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    let chunkIdx = 0;\r\n    const subDiv = this._selection.subdivs;\r\n    const stickRad = mode.calcStickRadius();\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    for (let subDivI = 0, subDivN = subDiv.length; subDivI < subDivN; ++subDivI) {\r\n      const subs = subDiv[subDivI].arr;\r\n      for (let i = 0, n = subs.length; i < n; ++i) {\r\n        const startIdx = subs[i].start;\r\n        const endIdx = subs[i].end;\r\n        let prevRes = residues[startIdx];\r\n        for (let idx = startIdx + 1; idx <= endIdx; ++idx) {\r\n          const currRes = residues[idx];\r\n          geo.setItem(chunkIdx, prevRes._controlPoint, currRes._controlPoint, stickRad);\r\n          if (updateColor) {\r\n            geo.setColor(chunkIdx, colorer.getResidueColor(prevRes, parent), colorer.getResidueColor(currRes, parent));\r\n          }\r\n          chunkIdx++;\r\n          prevRes = currRes;\r\n        }\r\n      }\r\n    }\r\n    geo.finalize();\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    const inters = [];\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    this._mesh.raycast(raycaster, inters);\r\n    const chunksToIdx = this._chunksIdc;\r\n    // process inters array - arr object references\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('chunkIdx')) {\r\n        continue;\r\n      }\r\n      const {\r\n        chunkIdx\r\n      } = inters[i];\r\n      const chunk = chunksToIdx[Math.floor(chunkIdx / 2)];\r\n      const resIdx = chunkIdx % 2 === 0 ? chunk.first : chunk.second;\r\n      if (resIdx < residues.length) {\r\n        inters[i].residue = residues[resIdx];\r\n        intersects.push(inters[i]);\r\n      }\r\n    }\r\n  }\r\n  _calcChunksList(mask) {\r\n    const chunksList = [];\r\n    const chunksToIdx = this._chunksIdc;\r\n    const {\r\n      residues\r\n    } = this._selection;\r\n    for (let i = 0, n = chunksToIdx.length; i < n; ++i) {\r\n      const chunk = chunksToIdx[i];\r\n      if (residues[chunk.first]._mask & mask) {\r\n        chunksList.push(i * 2);\r\n      }\r\n      if (residues[chunk.second]._mask & mask) {\r\n        chunksList.push(i * 2 + 1);\r\n      }\r\n    }\r\n    return chunksList;\r\n  }\r\n}\r\n/* harmony default export */ const groups_ResiduesTraceGroup = (ResiduesTraceGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/BondsGroup.js\r\n\r\n\r\nfunction getCylinderCount(bondOrder) {\r\n  return bondOrder < 2 ? 1 : bondOrder;\r\n}\r\nclass BondsGroup extends groups_ChemGroup {\r\n  _makeGeoArgs() {\r\n    const drawMultiple = this._mode.drawMultiorderBonds();\r\n    const showAromatic = this._mode.showAromaticLoops();\r\n    const bondsIdc = this._selection.chunks;\r\n    const {\r\n      bonds\r\n    } = this._selection;\r\n    let bondsCount = 0;\r\n    for (let i = 0, n = bondsIdc.length; i < n; ++i) {\r\n      bondsCount += this.getBondOrder(bonds[bondsIdc[i]], drawMultiple, showAromatic);\r\n    }\r\n    return [bondsCount, this._polyComplexity];\r\n  }\r\n  getBondOrder(bond, drawMultiple, showAromatic) {\r\n    let bondOrder = 1;\r\n    if (drawMultiple && (!showAromatic || bond._type !== chem_Bond.BondType.AROMATIC)) {\r\n      bondOrder = getCylinderCount(bond._order);\r\n    }\r\n    return bondOrder;\r\n  }\r\n  raycast(raycaster, intersects) {\r\n    const {\r\n      bonds\r\n    } = this._selection;\r\n    const inters = [];\r\n    this._mesh.raycast(raycaster, inters);\r\n    const bondsIdc = this._chunksIdc;\r\n    // process inters array - arr object references\r\n    for (let i = 0, n = inters.length; i < n; ++i) {\r\n      if (!inters[i].hasOwnProperty('chunkIdx')) {\r\n        continue;\r\n      }\r\n      const {\r\n        chunkIdx\r\n      } = inters[i];\r\n      const bondIdx = bondsIdc[Math.floor(chunkIdx / 2)];\r\n      if (bondIdx < bonds.length) {\r\n        const bond = bonds[bondIdx];\r\n        inters[i].atom = chunkIdx % 2 === 0 ? bond._left : bond._right;\r\n        intersects.push(inters[i]);\r\n      }\r\n    }\r\n  }\r\n  _calcChunksList(mask, innerOnly) {\r\n    const chunksList = [];\r\n    const {\r\n      bonds\r\n    } = this._selection;\r\n    const chunksToIdx = this._chunksIdc;\r\n    for (let i = 0, n = chunksToIdx.length; i < n; ++i) {\r\n      const bond = bonds[chunksToIdx[i]];\r\n      if (bond._left.mask & mask && (!innerOnly || bond._right.mask & mask)) {\r\n        chunksList.push(2 * i);\r\n      }\r\n      if (bond._right.mask & mask && (!innerOnly || bond._left.mask & mask)) {\r\n        chunksList.push(2 * i + 1);\r\n      }\r\n    }\r\n    return chunksList;\r\n  }\r\n}\r\n/* harmony default export */ const groups_BondsGroup = (BondsGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/BondsCylinderGroup.js\r\n\r\n\r\nclass BondsCylinderGroup extends groups_BondsGroup {\r\n  _build() {\r\n    const bondsIdc = this._selection.chunks;\r\n    const {\r\n      bonds,\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const drawMultiple = mode.drawMultiorderBonds();\r\n    const showAromatic = mode.showAromaticLoops();\r\n    const stickRad = mode.calcStickRadius();\r\n    const emptyOffset = mode.calcSpaceFraction();\r\n    let normDir;\r\n    const leftPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const rightPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let currBondIdx = 0;\r\n    const chunksToIdx = [];\r\n    for (let i = 0, n = bondsIdc.length; i < n; ++i) {\r\n      const bond = bonds[bondsIdc[i]];\r\n      const atom1 = bond._left;\r\n      const atom2 = bond._right;\r\n      const a1Pos = atom1.position;\r\n      const a2Pos = atom2.position;\r\n      normDir = bond.calcNormalDir();\r\n      const order = this.getBondOrder(bond, drawMultiple, showAromatic);\r\n      const minRad = Math.min(mode.calcAtomRadius(atom1), mode.calcAtomRadius(atom2));\r\n      const dist = 2 * minRad / order;\r\n      const currStickRad = drawMultiple ? Math.min(stickRad, dist * 0.5 * (1.0 - emptyOffset)) : stickRad;\r\n      for (let j = 0; j < order; ++j) {\r\n        const scale = dist * (order % 2 === 0 ? ((j / 2 | 0) + 0.5) * (1 - 2 * (j % 2)) : ((j + 1) / 2 | 0) * (-1 + 2 * (j % 2)));\r\n        chunksToIdx[currBondIdx] = bond._index;\r\n        leftPos.copy(a1Pos);\r\n        leftPos.addScaledVector(normDir, scale);\r\n        rightPos.copy(a2Pos);\r\n        rightPos.addScaledVector(normDir, scale);\r\n        geo.setItem(currBondIdx, leftPos, rightPos, currStickRad);\r\n        geo.setColor(currBondIdx++, colorer.getAtomColor(atom1, parent), colorer.getAtomColor(atom2, parent));\r\n      }\r\n    }\r\n    geo.finalize();\r\n    this._chunksIdc = chunksToIdx;\r\n  }\r\n  updateToFrame(frameData) {\r\n    const bondsIdc = this._selection.chunks;\r\n    const {\r\n      bonds\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const drawMultiple = mode.drawMultiorderBonds();\r\n    const showAromatic = mode.showAromaticLoops();\r\n    const stickRad = mode.calcStickRadius();\r\n    const emptyOffset = mode.calcSpaceFraction();\r\n    let normDir;\r\n    const leftPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const rightPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let currBondIdx = 0;\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    for (let i = 0, n = bondsIdc.length; i < n; ++i) {\r\n      const bond = bonds[bondsIdc[i]];\r\n      const atom1 = bond._left;\r\n      const atom2 = bond._right;\r\n      const a1Pos = frameData.getAtomPos(atom1.index).clone();\r\n      const a2Pos = frameData.getAtomPos(atom2.index);\r\n      normDir = bond.calcNormalDir();\r\n      const order = this.getBondOrder(bond, drawMultiple, showAromatic);\r\n      const minRad = Math.min(mode.calcAtomRadius(atom1), mode.calcAtomRadius(atom2));\r\n      const dist = 2 * minRad / order;\r\n      const currStickRad = drawMultiple ? Math.min(stickRad, dist * 0.5 * (1.0 - emptyOffset)) : stickRad;\r\n      for (let j = 0; j < order; ++j) {\r\n        const scale = dist * (order % 2 === 0 ? ((j / 2 | 0) + 0.5) * (1 - 2 * (j % 2)) : ((j + 1) / 2 | 0) * (-1 + 2 * (j % 2)));\r\n        leftPos.copy(a1Pos);\r\n        leftPos.addScaledVector(normDir, scale);\r\n        rightPos.copy(a2Pos);\r\n        rightPos.addScaledVector(normDir, scale);\r\n        geo.setItem(currBondIdx, leftPos, rightPos, currStickRad);\r\n        if (updateColor) {\r\n          geo.setColor(currBondIdx, frameData.getAtomColor(colorer, atom1), frameData.getAtomColor(colorer, atom2));\r\n        }\r\n        currBondIdx++;\r\n      }\r\n    }\r\n    geo.finalize();\r\n  }\r\n}\r\n/* harmony default export */ const groups_BondsCylinderGroup = (BondsCylinderGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/BondsLinesGroup.js\r\n\r\n\r\nconst STEP_SIZE = 0.15;\r\nclass BondsLinesGroup extends groups_BondsGroup {\r\n  _build() {\r\n    const bondsIdc = this._selection.chunks;\r\n    const {\r\n      bonds,\r\n      parent\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const drawMultiple = mode.drawMultiorderBonds();\r\n    const showAromatic = mode.showAromaticLoops();\r\n    const bondDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const leftPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const rightPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let currBondIdx = 0;\r\n    const chunksToIdx = [];\r\n    for (let i = 0, n = bondsIdc.length; i < n; ++i) {\r\n      const bond = bonds[bondsIdc[i]];\r\n      const atom1 = bond._left;\r\n      const atom2 = bond._right;\r\n      const a1Pos = atom1.position;\r\n      const a2Pos = atom2.position;\r\n      const a1Hangs = atom1.bonds.length === 1;\r\n      const a2Hangs = atom2.bonds.length === 1;\r\n      bondDir.subVectors(a2Pos, a1Pos);\r\n      const len = bondDir.length();\r\n      const normDir = bond.calcNormalDir();\r\n      const order = this.getBondOrder(bond, drawMultiple, showAromatic);\r\n      for (let j = 0; j < order; ++j) {\r\n        leftPos.copy(a1Pos);\r\n        rightPos.copy(a2Pos);\r\n        let scale = order % 2 === 0 ? ((j / 2 | 0) + 0.5) * (1 - 2 * (j % 2)) : ((j + 1) / 2 | 0) * (-1 + 2 * (j % 2));\r\n        chunksToIdx[currBondIdx] = bond._index;\r\n        if (order === 2 && !a1Hangs && !a2Hangs) {\r\n          scale -= 0.5;\r\n          scale *= -1;\r\n        }\r\n        if (!a1Hangs && !a2Hangs && order > 1 && scale !== 0) {\r\n          leftPos.lerpVectors(a1Pos, a2Pos, STEP_SIZE / len);\r\n          rightPos.lerpVectors(a1Pos, a2Pos, 1.0 - STEP_SIZE / len);\r\n        }\r\n        scale *= STEP_SIZE;\r\n        leftPos.addScaledVector(normDir, scale);\r\n        rightPos.addScaledVector(normDir, scale);\r\n        geo.setItem(currBondIdx, leftPos, rightPos);\r\n        geo.setColor(currBondIdx++, colorer.getAtomColor(atom1, parent), colorer.getAtomColor(atom2, parent));\r\n      }\r\n    }\r\n    geo.finalize();\r\n    this._chunksIdc = chunksToIdx;\r\n  }\r\n  updateToFrame(frameData) {\r\n    // This method looks like a copy paste. However, it\r\n    // was decided to postpone animation refactoring until GFX is fixed.\r\n    const bondsIdc = this._selection.chunks;\r\n    const {\r\n      bonds\r\n    } = this._selection;\r\n    const mode = this._mode;\r\n    const colorer = this._colorer;\r\n    const geo = this._geo;\r\n    const drawMultiple = mode.drawMultiorderBonds();\r\n    const showAromatic = mode.showAromaticLoops();\r\n    const bondDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const leftPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const rightPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let currBondIdx = 0;\r\n    const updateColor = frameData.needsColorUpdate(colorer);\r\n    for (let i = 0, n = bondsIdc.length; i < n; ++i) {\r\n      const bond = bonds[bondsIdc[i]];\r\n      const atom1 = bond._left;\r\n      const atom2 = bond._right;\r\n      const a1Pos = frameData.getAtomPos(atom1.index).clone();\r\n      const a2Pos = frameData.getAtomPos(atom2.index);\r\n      const a1Hangs = atom1.bonds.length === 1;\r\n      const a2Hangs = atom2.bonds.length === 1;\r\n      bondDir.subVectors(a2Pos, a1Pos);\r\n      const len = bondDir.length();\r\n      const normDir = bond.calcNormalDir();\r\n      const order = this.getBondOrder(bond, drawMultiple, showAromatic);\r\n      for (let j = 0; j < order; ++j) {\r\n        leftPos.copy(a1Pos);\r\n        rightPos.copy(a2Pos);\r\n        let scale = order % 2 === 0 ? ((j / 2 | 0) + 0.5) * (1 - 2 * (j % 2)) : ((j + 1) / 2 | 0) * (-1 + 2 * (j % 2));\r\n        if (order === 2 && !a1Hangs && !a2Hangs) {\r\n          scale -= 0.5;\r\n          scale *= -1;\r\n        }\r\n        if (!a1Hangs && !a2Hangs && order > 1 && scale !== 0) {\r\n          leftPos.lerpVectors(a1Pos, a2Pos, STEP_SIZE / len);\r\n          rightPos.lerpVectors(a1Pos, a2Pos, 1.0 - STEP_SIZE / len);\r\n        }\r\n        scale *= STEP_SIZE;\r\n        leftPos.addScaledVector(normDir, scale);\r\n        rightPos.addScaledVector(normDir, scale);\r\n        geo.setItem(currBondIdx, leftPos, rightPos);\r\n        if (updateColor) {\r\n          geo.setColor(currBondIdx, frameData.getAtomColor(colorer, atom1), frameData.getAtomColor(colorer, atom2));\r\n        }\r\n        currBondIdx++;\r\n      }\r\n    }\r\n    geo.finalize();\r\n  }\r\n}\r\n/* harmony default export */ const groups_BondsLinesGroup = (BondsLinesGroup);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/groups.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const groups = ({\r\n  AtomsSphereGroup: groups_AtomsSphereGroup,\r\n  AtomsSurfaceGroup: groups_AtomsSurfaceGroup,\r\n  AtomsSASSESGroupStub: groups_AtomsSASSESGroupStub,\r\n  AtomsTextGroup: groups_AtomsTextGroup,\r\n  AromaticTorusGroup: groups_AromaticTorusGroup,\r\n  AromaticLinesGroup: groups_AromaticLinesGroup,\r\n  NucleicCylindersGroup: groups_NucleicCylindersGroup,\r\n  NucleicSpheresGroup: groups_NucleicSpheresGroup,\r\n  ResiduesSubseqGroup: groups_ResiduesSubseqGroup,\r\n  ResiduesTraceGroup: groups_ResiduesTraceGroup,\r\n  BondsCylinderGroup: groups_BondsCylinderGroup,\r\n  BondsLinesGroup: groups_BondsLinesGroup\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/AtomsProcessor.js\r\n\r\nclass AtomsProcessor extends gfx_RCGroup {\r\n  constructor(AtomsGroup, geoParams, complex, colorer, mode, polyComplexity, mask, material) {\r\n    super();\r\n    const self = this;\r\n    this._complex = complex;\r\n    this._mode = mode;\r\n    const atoms = complex.getAtoms();\r\n    const transforms = complex.getTransforms();\r\n    complex.forEachComponent(component => {\r\n      const atomsIdc = [];\r\n      let atomCount = 0;\r\n      component.forEachAtom(atom => {\r\n        if (!self._checkAtom(atom, mask)) {\r\n          return;\r\n        }\r\n        atomsIdc[atomCount++] = atom.index;\r\n      });\r\n      if (atomCount === 0) {\r\n        return;\r\n      }\r\n      const atomsGroup = new AtomsGroup(geoParams, {\r\n        atoms,\r\n        chunks: atomsIdc,\r\n        parent: complex\r\n      }, colorer, mode, transforms, polyComplexity, material);\r\n      atomsGroup._component = component;\r\n      self.add(atomsGroup);\r\n    });\r\n  }\r\n  _checkAtom(atom, mask) {\r\n    return atom.mask & mask;\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    let meshIdx = 0;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        const chSubset = children[i].getSubset(mask, innerOnly);\r\n        for (let j = 0, m = chSubset.length; j < m; ++j) {\r\n          const subsetEl = chSubset[j];\r\n          subsetEl._component = children[i]._component;\r\n          totalSubset[meshIdx++] = subsetEl;\r\n        }\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const processors_AtomsProcessor = (AtomsProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/OrphanAtomsProcessor.js\r\n\r\nclass OrphanAtomsProcessor extends processors_AtomsProcessor {\r\n  _checkAtom(atom, mask) {\r\n    if (!(atom.mask & mask)) {\r\n      return false;\r\n    }\r\n    const {\r\n      bonds\r\n    } = atom;\r\n    for (let i = 0, n = bonds.length; i < n; ++i) {\r\n      if (bonds[i]._left.mask & mask && bonds[i]._right.mask & mask) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n/* harmony default export */ const processors_OrphanAtomsProcessor = (OrphanAtomsProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/ResiduesProcessor.js\r\n\r\nclass ResiduesProcessor extends gfx_RCGroup {\r\n  constructor(ResidueGroup, geoParams, complex, colorer, mode, polyComplexity, mask, material) {\r\n    super();\r\n    const self = this;\r\n    this._complex = complex;\r\n    const residues = complex.getResidues();\r\n    const transforms = complex.getTransforms();\r\n    complex.forEachComponent(component => {\r\n      let chunksCount = 0;\r\n      const resIdc = [];\r\n      component.forEachResidue(residue => {\r\n        if (self._checkResidue(residue, mask)) {\r\n          resIdc[chunksCount++] = residue._index;\r\n        }\r\n      });\r\n      if (chunksCount === 0) {\r\n        return;\r\n      }\r\n      const residuesGroup = new ResidueGroup(geoParams, {\r\n        residues,\r\n        chunks: resIdc,\r\n        parent: complex\r\n      }, colorer, mode, transforms, polyComplexity, material);\r\n      residuesGroup._component = component;\r\n      self.add(residuesGroup);\r\n    });\r\n  }\r\n  checkResidue(residue, mask) {\r\n    return residue._mask & mask;\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    let meshIdx = 0;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        const chSubset = children[i].getSubset(mask, innerOnly);\r\n        for (let j = 0, m = chSubset.length; j < m; ++j) {\r\n          const subsetEl = chSubset[j];\r\n          subsetEl._component = children[i]._component;\r\n          totalSubset[meshIdx++] = subsetEl;\r\n        }\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const processors_ResiduesProcessor = (ResiduesProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/NucleicProcessor.js\r\n\r\nclass NucleicProcessor extends processors_ResiduesProcessor {\r\n  _checkResidue(residue, mask) {\r\n    return mask & residue._mask && residue._cylinders !== null;\r\n  }\r\n}\r\n/* harmony default export */ const processors_NucleicProcessor = (NucleicProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/SubseqsProcessor.js\r\n\r\nclass SubseqsProcessor extends gfx_RCGroup {\r\n  constructor(ResidueGroup, geoParams, complex, colorer, mode, polyComplexity, mask, material) {\r\n    super();\r\n    const self = this;\r\n    this._complex = complex;\r\n    const residues = complex.getResidues();\r\n    const transforms = complex.getTransforms();\r\n    complex.forEachComponent(component => {\r\n      const subDivs = component.getMaskedSubdivSequences(mask);\r\n      let chunksCount = 0;\r\n      const resIdc = [];\r\n      for (let subDivI = 0, subDivN = subDivs.length; subDivI < subDivN; ++subDivI) {\r\n        const subs = subDivs[subDivI].arr;\r\n        for (let i = 0, n = subs.length; i < n; ++i) {\r\n          for (let j = subs[i].start, jEnd = subs[i].end; j <= jEnd; ++j) {\r\n            resIdc[chunksCount++] = residues[j]._index;\r\n          }\r\n        }\r\n      }\r\n      if (chunksCount === 0) {\r\n        return;\r\n      }\r\n      const residuesGroup = new ResidueGroup(geoParams, {\r\n        residues,\r\n        chunks: resIdc,\r\n        subdivs: subDivs,\r\n        parent: complex\r\n      }, colorer, mode, transforms, polyComplexity, material);\r\n      residuesGroup._component = component;\r\n      self.add(residuesGroup);\r\n    });\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    let meshIdx = 0;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        const chSubset = children[i].getSubset(mask, innerOnly);\r\n        for (let j = 0, m = chSubset.length; j < m; ++j) {\r\n          const subsetEl = chSubset[j];\r\n          subsetEl._component = children[i]._component;\r\n          totalSubset[meshIdx++] = subsetEl;\r\n        }\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const processors_SubseqsProcessor = (SubseqsProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/BondsProcessor.js\r\n\r\nclass BondsProcessor extends gfx_RCGroup {\r\n  constructor(BondsGroup, geoParams, complex, colorer, mode, polyComplexity, mask, material) {\r\n    super();\r\n    const self = this;\r\n    this._complex = complex;\r\n    const bonds = complex.getBonds();\r\n    const transforms = complex.getTransforms();\r\n    complex.forEachComponent(component => {\r\n      const bondsIdc = [];\r\n      let bondsCount = 0;\r\n      component.forEachBond(bond => {\r\n        const atom1 = bond._left;\r\n        const atom2 = bond._right;\r\n        if (!(atom1.mask & mask) || !(atom2.mask & mask)) {\r\n          return;\r\n        }\r\n        bondsIdc[bondsCount++] = bond._index;\r\n      });\r\n      if (bondsCount === 0) {\r\n        return;\r\n      }\r\n      const bondsGroup = new BondsGroup(geoParams, {\r\n        bonds,\r\n        chunks: bondsIdc,\r\n        parent: complex\r\n      }, colorer, mode, transforms, polyComplexity, material);\r\n      bondsGroup._component = component;\r\n      self.add(bondsGroup);\r\n    });\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    let meshIdx = 0;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        const chSubset = children[i].getSubset(mask, innerOnly);\r\n        for (let j = 0, m = chSubset.length; j < m; ++j) {\r\n          const subsetEl = chSubset[j];\r\n          subsetEl._component = children[i]._component;\r\n          totalSubset[meshIdx++] = subsetEl;\r\n        }\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const processors_BondsProcessor = (BondsProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/AromaticProcessor.js\r\n\r\nclass AromaticProcessor extends gfx_RCGroup {\r\n  constructor(AromaticGroup, geoParams, complex, colorer, mode, polyComplexity, mask, material) {\r\n    super();\r\n    const self = this;\r\n    this._complex = complex;\r\n    const atoms = complex.getAtoms();\r\n    const transforms = complex.getTransforms();\r\n    if (!mode.showAromaticLoops()) {\r\n      return;\r\n    }\r\n    complex.forEachComponent(component => {\r\n      const atomsIdc = [];\r\n      let chunksCount = 0;\r\n      const cycles = [];\r\n      let cycleIdx = 0;\r\n      component.forEachCycle(cycle => {\r\n        const cycAtoms = cycle.atoms;\r\n        let perCycle = 0;\r\n        for (let i = 0, n = cycAtoms.length; i < n; ++i) {\r\n          if ((cycAtoms[i].mask & mask) !== 0) {\r\n            ++perCycle;\r\n            atomsIdc[chunksCount++] = cycAtoms[i].index;\r\n          }\r\n        }\r\n        if (perCycle > 0) {\r\n          cycles[cycleIdx++] = cycle;\r\n        }\r\n      });\r\n      const atomsGroup = new AromaticGroup(geoParams, {\r\n        cycles,\r\n        atoms,\r\n        chunks: atomsIdc,\r\n        parent: complex\r\n      }, colorer, mode, transforms, polyComplexity, material);\r\n      atomsGroup._component = component;\r\n      self.add(atomsGroup);\r\n    });\r\n  }\r\n  getSubset(mask, innerOnly) {\r\n    const totalSubset = [];\r\n    const {\r\n      children\r\n    } = this;\r\n    let meshIdx = 0;\r\n    for (let i = 0, n = children.length; i < n; ++i) {\r\n      if (children[i].getSubset) {\r\n        const chSubset = children[i].getSubset(mask, innerOnly);\r\n        for (let j = 0, m = chSubset.length; j < m; ++j) {\r\n          const subsetEl = chSubset[j];\r\n          subsetEl._component = children[i]._component;\r\n          totalSubset[meshIdx++] = subsetEl;\r\n        }\r\n      }\r\n    }\r\n    return totalSubset;\r\n  }\r\n}\r\n/* harmony default export */ const processors_AromaticProcessor = (AromaticProcessor);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/processors/processors.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const processors = ({\r\n  Atoms: processors_AtomsProcessor,\r\n  OrphanAtoms: processors_OrphanAtomsProcessor,\r\n  Residues: processors_ResiduesProcessor,\r\n  Nucleic: processors_NucleicProcessor,\r\n  Subseqs: processors_SubseqsProcessor,\r\n  Bonds: processors_BondsProcessor,\r\n  Aromatic: processors_AromaticProcessor\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/modes/groups/GroupsFactory.js\r\n\r\n\r\n\r\nfunction _bakeGroup(triplet, Processor, Group) {\r\n  return function (complex, colorer, mode, polyComplexity, mask, material) {\r\n    return new Processor(Group, triplet, complex, colorer, mode, polyComplexity, mask, material);\r\n  };\r\n}\r\nclass GroupsFactory {\r\n  static AtomsSpheres(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.createSpheres(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Atoms, groups.AtomsSphereGroup);\r\n  }\r\n  static OrphanedAtomsCrosses(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.createCrosses(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.OrphanAtoms, groups.AtomsSphereGroup);\r\n  }\r\n  static BondsCylinders(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.create2CCylinders(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Bonds, groups.BondsCylinderGroup);\r\n  }\r\n  static BondsLines(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.create2CLines(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.Bonds, groups.BondsLinesGroup);\r\n  }\r\n  static CartoonChains(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.createExtrudedChains(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Subseqs, groups.ResiduesSubseqGroup);\r\n  }\r\n  static TraceChains(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.create2CClosedCylinders(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Subseqs, groups.ResiduesTraceGroup);\r\n  }\r\n  static NucleicSpheres(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.createSpheres(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Nucleic, groups.NucleicSpheresGroup);\r\n  }\r\n  static NucleicCylinders(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.create2CCylinders(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Nucleic, groups.NucleicCylindersGroup);\r\n  }\r\n  static ALoopsTorus(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.createExtrudedChains(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Aromatic, groups.AromaticTorusGroup);\r\n  }\r\n  static ALoopsLines(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.createChunkedLines(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.Aromatic, groups.AromaticLinesGroup);\r\n  }\r\n  static QuickSurfGeo(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.createQuickSurface(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.Atoms, groups.AtomsSurfaceGroup);\r\n  }\r\n  static ContactSurfaceGeo(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.createContactSurface(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.Atoms, groups.AtomsSurfaceGroup);\r\n  }\r\n  static SASSESSurfaceGeo(caps, settings, renderParams) {\r\n    const gfxTriplet = meshes_MeshCreator.createSASSES(caps, settings, renderParams);\r\n    return _bakeGroup(gfxTriplet, processors.Atoms, groups.AtomsSASSESGroupStub);\r\n  }\r\n  static TextLabelsGeo(caps, settings) {\r\n    const gfxTriplet = meshes_MeshCreator.createLabels(caps, settings);\r\n    return _bakeGroup(gfxTriplet, processors.Atoms, groups.AtomsTextGroup);\r\n  }\r\n}\r\n/* harmony default export */ const groups_GroupsFactory = (GroupsFactory);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/Mode.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Create new mode.\r\n *\r\n * @param {object=} opts - Options to override defaults with.\r\n *\r\n *   These options are copied locally and not kept by reference, so the created instance will not reflect further\r\n *   changes to the `opts` object. However, changes in defaults **will** affect the mode after its creation.\r\n *\r\n * @exports Mode\r\n * @this Mode\r\n * @abstract\r\n * @constructor\r\n * @classdesc Basic class for all available modes used for building and displaying molecule geometry.\r\n */\r\nclass Mode {\r\n  constructor(opts) {\r\n    if (this.constructor === Mode) {\r\n      throw new Error('Can not instantiate abstract class!');\r\n    }\r\n    /**\r\n     * Mode options inherited (prototyped) from defaults.\r\n     * @type {object}\r\n     */\r\n    this.opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(utils.deriveDeep(this.settings.now.modes[this.id], true), opts);\r\n  }\r\n\r\n  /**\r\n   * Get mode identification, probably with options.\r\n   * @returns {string|Array} Mode identifier string ({@link Mode#id}) or two-element array containing both mode\r\n   *   identifier and options ({@link Mode#opts}).\r\n   * Options are returned if they were changed during or after the mode creation.\r\n   */\r\n  identify() {\r\n    const diff = utils.objectsDiff(this.opts, this.settings.now.modes[this.id]);\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n      return [this.id, diff];\r\n    }\r\n    return this.id;\r\n  }\r\n  buildGeometry(complex, colorer, mask, material) {\r\n    const polyComplexity = this.opts.polyComplexity ? this.opts.polyComplexity[this.settings.now.resolution] : 0;\r\n    const groupList = this.depGroups;\r\n    const groupCount = groupList.length;\r\n    const group = new gfxutils.RCGroup();\r\n    const self = this;\r\n    for (let i = 0; i < groupCount; ++i) {\r\n      let currGroup = groupList[i];\r\n      let renderParams = {};\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(currGroup)) {\r\n        renderParams = currGroup[1].call(this);\r\n        [currGroup] = currGroup;\r\n      }\r\n      const Group = groups_GroupsFactory[currGroup](null, this.settings, renderParams);\r\n      const newGroup = new Group(complex, colorer, self, polyComplexity, mask, material);\r\n      if (newGroup.children.length > 0) {\r\n        group.add(newGroup);\r\n      }\r\n    }\r\n    return group;\r\n  }\r\n}\r\nutils_makeContextDependent(Mode.prototype);\r\n\r\n/**\r\n* Mode identifier.\r\n* @type {string}\r\n*/\r\nMode.prototype.id = '__';\r\n\r\n/**\r\n * Mode geo groups.\r\n * @type {Array}\r\n */\r\nMode.prototype.depGroups = [];\r\n/* harmony default export */ const modes_Mode = (Mode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/LinesMode.js\r\n\r\nfunction getRenderParams() {\r\n  return {\r\n    lineWidth: this.opts.lineWidth\r\n  };\r\n}\r\nclass LinesMode extends modes_Mode {\r\n  static id = 'LN';\r\n  constructor(opts) {\r\n    super(opts);\r\n    this.depGroups = this.depGroups.slice(0); // clone depGroups to prevent prototype edits\r\n    const groups = this.depGroups;\r\n    for (let i = 0, n = groups.length; i < n; ++i) {\r\n      groups[i] = [groups[i], getRenderParams];\r\n    }\r\n  }\r\n  drawMultiorderBonds() {\r\n    return this.opts.multibond;\r\n  }\r\n  calcAtomRadius() {\r\n    return this.opts.atom;\r\n  }\r\n  getAromaticOffset() {\r\n    return this.opts.offsarom;\r\n  }\r\n  getAromaticArcChunks() {\r\n    return this.opts.chunkarom;\r\n  }\r\n  showAromaticLoops() {\r\n    return this.opts.showarom;\r\n  }\r\n}\r\nLinesMode.prototype.id = 'LN';\r\nLinesMode.prototype.name = 'Lines';\r\nLinesMode.prototype.shortName = 'Lines';\r\nLinesMode.prototype.depGroups = ['ALoopsLines', 'BondsLines', 'OrphanedAtomsCrosses'];\r\n/* harmony default export */ const modes_LinesMode = (LinesMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/LicoriceMode.js\r\n/* eslint-disable no-magic-numbers */\r\n\r\nclass LicoriceMode extends modes_Mode {\r\n  static id = 'LC';\r\n  calcAtomRadius(_atom) {\r\n    return this.opts.bond;\r\n  }\r\n  calcStickRadius() {\r\n    return this.opts.bond;\r\n  }\r\n  calcSpaceFraction() {\r\n    return this.opts.space;\r\n  }\r\n  getAromRadius() {\r\n    return this.opts.aromrad;\r\n  }\r\n  showAromaticLoops() {\r\n    return this.opts.showarom;\r\n  }\r\n  drawMultiorderBonds() {\r\n    return this.opts.multibond;\r\n  }\r\n}\r\nLicoriceMode.prototype.id = 'LC';\r\nLicoriceMode.prototype.name = 'Licorice';\r\nLicoriceMode.prototype.shortName = 'Licorice';\r\nLicoriceMode.prototype.depGroups = ['AtomsSpheres', 'BondsCylinders', 'ALoopsTorus'];\r\n/* harmony default export */ const modes_LicoriceMode = (LicoriceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/BallsAndSticksMode.js\r\n/* eslint-disable no-magic-numbers */\r\n\r\nclass BallsAndSticksMode extends modes_Mode {\r\n  static id = 'BS';\r\n  calcAtomRadius(atom) {\r\n    return atom.element.radius * this.opts.atom;\r\n  }\r\n  calcStickRadius() {\r\n    return this.opts.bond;\r\n  }\r\n  getAromRadius() {\r\n    return this.opts.aromrad;\r\n  }\r\n  showAromaticLoops() {\r\n    return this.opts.showarom;\r\n  }\r\n  calcSpaceFraction() {\r\n    return this.opts.space;\r\n  }\r\n  drawMultiorderBonds() {\r\n    return this.opts.multibond;\r\n  }\r\n}\r\nBallsAndSticksMode.prototype.id = 'BS';\r\nBallsAndSticksMode.prototype.name = 'Balls and Sticks';\r\nBallsAndSticksMode.prototype.shortName = 'Balls';\r\nBallsAndSticksMode.prototype.depGroups = ['AtomsSpheres', 'BondsCylinders', 'ALoopsTorus'];\r\n/* harmony default export */ const modes_BallsAndSticksMode = (BallsAndSticksMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/VanDerWaalsMode.js\r\n\r\nclass VanDerWaalsMode extends modes_Mode {\r\n  static id = 'VW';\r\n  calcAtomRadius(atom) {\r\n    return atom.element.radius;\r\n  }\r\n}\r\nVanDerWaalsMode.prototype.id = 'VW';\r\nVanDerWaalsMode.prototype.name = 'Van der Waals';\r\nVanDerWaalsMode.prototype.shortName = 'VDW';\r\nVanDerWaalsMode.prototype.depGroups = ['AtomsSpheres'];\r\n/* harmony default export */ const modes_VanDerWaalsMode = (VanDerWaalsMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/TraceMode.js\r\n\r\nclass TraceMode extends modes_Mode {\r\n  static id = 'TR';\r\n  calcStickRadius() {\r\n    return this.opts.radius;\r\n  }\r\n}\r\nTraceMode.prototype.id = 'TR';\r\nTraceMode.prototype.name = 'Trace';\r\nTraceMode.prototype.shortName = 'Trace';\r\nTraceMode.prototype.depGroups = ['TraceChains'];\r\n/* harmony default export */ const modes_TraceMode = (TraceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/TubeMode.js\r\n\r\n\r\nclass TubeMode extends modes_Mode {\r\n  static id = 'TU';\r\n  getResidueRadius(_residue) {\r\n    return this.TUBE_RADIUS;\r\n  }\r\n  getHeightSegmentsRatio() {\r\n    return this.opts.heightSegmentsRatio;\r\n  }\r\n  getTension() {\r\n    return this.opts.tension;\r\n  }\r\n  buildGeometry(complex, colorer, mask, material) {\r\n    const rad = this.opts.radius;\r\n    this.TUBE_RADIUS = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(rad, rad);\r\n    return modes_Mode.prototype.buildGeometry.call(this, complex, colorer, mask, material);\r\n  }\r\n}\r\nTubeMode.prototype.id = 'TU';\r\nTubeMode.prototype.name = 'Tube';\r\nTubeMode.prototype.shortName = 'Tube';\r\nTubeMode.prototype.depGroups = ['CartoonChains'];\r\n/* harmony default export */ const modes_TubeMode = (TubeMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/CartoonMode.js\r\n\r\n\r\nclass CartoonMode extends modes_Mode {\r\n  static id = 'CA';\r\n  constructor(opts) {\r\n    super(opts);\r\n    // cache for secondary structure options\r\n    this.secCache = {};\r\n  }\r\n  getResidueStartRadius(residue) {\r\n    const second = residue.getSecondary();\r\n    if (!second || !second.generic) {\r\n      return this.TUBE_RADIUS;\r\n    }\r\n    const secOpts = this.secCache[second.generic];\r\n    if (!secOpts) {\r\n      return this.TUBE_RADIUS;\r\n    }\r\n    if (second.term === residue) {\r\n      return secOpts.start;\r\n    }\r\n    return secOpts.center;\r\n  }\r\n  getResidueEndRadius(residue) {\r\n    const second = residue.getSecondary();\r\n    if (second === null || !second.generic) {\r\n      return this.TUBE_RADIUS;\r\n    }\r\n    const secOpts = this.secCache[second.generic];\r\n    if (!secOpts) {\r\n      return this.TUBE_RADIUS;\r\n    }\r\n    if (second.term === residue) {\r\n      return this.ARROW_END;\r\n    }\r\n    return secOpts.center;\r\n  }\r\n  getResidueRadius(residue, val) {\r\n    const startRad = this.getResidueStartRadius(residue);\r\n    if (val === 0) {\r\n      return startRad;\r\n    }\r\n    const endRad = this.getResidueEndRadius(residue);\r\n    if (val === 2) {\r\n      return endRad;\r\n    }\r\n    return startRad.clone().lerp(endRad, val / 2.0);\r\n  }\r\n  calcStickRadius(_res) {\r\n    return this.opts.radius;\r\n  }\r\n  getHeightSegmentsRatio() {\r\n    return this.opts.heightSegmentsRatio;\r\n  }\r\n  getTension() {\r\n    return this.opts.tension;\r\n  }\r\n  buildGeometry(complex, colorer, mask, material) {\r\n    const tubeRad = this.opts.radius;\r\n    const secHeight = this.opts.depth;\r\n    this.TUBE_RADIUS = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(tubeRad, tubeRad);\r\n    this.ARROW_END = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(secHeight, tubeRad);\r\n    const secCache = {};\r\n    const secData = this.opts.ss;\r\n    /* eslint-disable guard-for-in */\r\n    for (const prop in secData) {\r\n      secCache[prop] = {\r\n        center: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(secHeight, secData[prop].width),\r\n        start: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(secHeight, secData[prop].arrow)\r\n      };\r\n    }\r\n    this.secCache = secCache;\r\n    /* eslint-enable guard-for-in */\r\n\r\n    return modes_Mode.prototype.buildGeometry.call(this, complex, colorer, mask, material);\r\n  }\r\n}\r\nCartoonMode.prototype.id = 'CA';\r\nCartoonMode.prototype.name = 'Cartoon';\r\nCartoonMode.prototype.shortName = 'Cartoon';\r\nCartoonMode.prototype.depGroups = ['CartoonChains', 'NucleicSpheres', 'NucleicCylinders'];\r\n/* harmony default export */ const modes_CartoonMode = (CartoonMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/SurfaceMode.js\r\n\r\n\r\nconst {\r\n  selectors: SurfaceMode_selectors\r\n} = chem;\r\nfunction SurfaceMode_getRenderParams() {\r\n  return {\r\n    wireframe: this.opts.wireframe,\r\n    zClip: this.opts.zClip\r\n  };\r\n}\r\nclass SurfaceMode extends modes_Mode {\r\n  constructor(opts) {\r\n    super(opts);\r\n    this.depGroups = this.depGroups.slice(0); // clone depGroups to prevent prototype edits\r\n    const surfaces = this.surfaceNames;\r\n    const groups = this.depGroups;\r\n    for (let i = 0, n = surfaces.length; i < n; ++i) {\r\n      groups[groups.length] = [surfaces[i], SurfaceMode_getRenderParams];\r\n    }\r\n  }\r\n  calcAtomRadius(atom) {\r\n    return atom.element.radius;\r\n  }\r\n  getVisibilitySelector() {\r\n    let visibilitySelector = null;\r\n    if (this.opts.subset !== '') {\r\n      const res = SurfaceMode_selectors.parse(this.opts.subset);\r\n      if (!res.error) {\r\n        visibilitySelector = res.selector;\r\n      }\r\n    }\r\n    return visibilitySelector;\r\n  }\r\n}\r\nSurfaceMode.prototype.isSurface = true;\r\nSurfaceMode.prototype.surfaceNames = [];\r\n/* harmony default export */ const modes_SurfaceMode = (SurfaceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/QuickSurfaceMode.js\r\n\r\nclass QuickSurfaceMode extends modes_SurfaceMode {\r\n  static id = 'QS';\r\n  getSurfaceOpts() {\r\n    return {\r\n      useBeads: false,\r\n      isoValue: this.opts.isoValue,\r\n      gaussLim: this.opts.gaussLim[this.settings.now.resolution],\r\n      radScale: this.opts.scale,\r\n      gridSpacing: this.opts.gridSpacing[this.settings.now.resolution],\r\n      zClip: this.opts.zClip,\r\n      visibilitySelector: this.getVisibilitySelector()\r\n    };\r\n  }\r\n}\r\nQuickSurfaceMode.prototype.id = 'QS';\r\nQuickSurfaceMode.prototype.name = 'Quick Surface';\r\nQuickSurfaceMode.prototype.shortName = 'Quick Surf';\r\nQuickSurfaceMode.prototype.surfaceNames = ['QuickSurfGeo'];\r\n/* harmony default export */ const modes_QuickSurfaceMode = (QuickSurfaceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/IsoSurfaceMode.js\r\n\r\nclass IsoSurfaceMode extends modes_SurfaceMode {\r\n  constructor(excludeProbe, opts) {\r\n    super(opts);\r\n    this._excludeProbe = excludeProbe;\r\n  }\r\n  calcAtomRadius(atom) {\r\n    return atom.element.radius;\r\n  }\r\n  getSurfaceOpts() {\r\n    return {\r\n      gridSpacing: this.opts.polyComplexity[this.settings.now.resolution],\r\n      radScale: this._radScale,\r\n      zClip: this.opts.zClip,\r\n      visibilitySelector: this.getVisibilitySelector(),\r\n      probeRadius: this.opts.probeRadius,\r\n      excludeProbe: this._excludeProbe\r\n    };\r\n  }\r\n}\r\nIsoSurfaceMode.prototype.id = 'SU';\r\nIsoSurfaceMode.prototype.name = 'Surface';\r\nIsoSurfaceMode.prototype.shortName = 'Surface';\r\nIsoSurfaceMode.prototype.surfaceNames = ['SASSESSurfaceGeo'];\r\nIsoSurfaceMode.prototype._radScale = 1;\r\nIsoSurfaceMode.prototype._excludeProbe = false;\r\n/* harmony default export */ const modes_IsoSurfaceMode = (IsoSurfaceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/IsoSurfaceSASMode.js\r\n\r\nclass IsoSurfaceSASMode extends modes_IsoSurfaceMode {\r\n  static id = 'SA';\r\n  constructor(opts) {\r\n    super(false, opts);\r\n  }\r\n}\r\nIsoSurfaceSASMode.prototype.id = 'SA';\r\nIsoSurfaceSASMode.prototype.name = 'Solvent Accessible Surface';\r\nIsoSurfaceSASMode.prototype.shortName = 'SAS';\r\n/* harmony default export */ const modes_IsoSurfaceSASMode = (IsoSurfaceSASMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/IsoSurfaceSESMode.js\r\n\r\nclass IsoSurfaceSESMode extends modes_IsoSurfaceMode {\r\n  static id = 'SE';\r\n  constructor(opts) {\r\n    super(true, opts);\r\n  }\r\n}\r\nIsoSurfaceSESMode.prototype.id = 'SE';\r\nIsoSurfaceSESMode.prototype.name = 'Solvent Excluded Surface';\r\nIsoSurfaceSESMode.prototype.shortName = 'SES';\r\n/* harmony default export */ const modes_IsoSurfaceSESMode = (IsoSurfaceSESMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/ContactSurfaceMode.js\r\n\r\nclass ContactSurfaceMode extends modes_SurfaceMode {\r\n  static id = 'CS';\r\n  getSurfaceOpts() {\r\n    return {\r\n      probeRadius: this.opts.probeRadius,\r\n      radScale: this.opts.polyComplexity[this.settings.now.resolution],\r\n      scaleFactor: this.opts.polyComplexity[this.settings.now.resolution],\r\n      gridSpacing: 1.0 / this.opts.polyComplexity[this.settings.now.resolution],\r\n      isoValue: this.opts.isoValue,\r\n      probePositions: this.opts.probePositions,\r\n      zClip: this.opts.zClip,\r\n      visibilitySelector: this.getVisibilitySelector()\r\n    };\r\n  }\r\n}\r\nContactSurfaceMode.prototype.id = 'CS';\r\nContactSurfaceMode.prototype.name = 'Contact Surface';\r\nContactSurfaceMode.prototype.shortName = 'Contact Surf';\r\nContactSurfaceMode.prototype.isSurface = true;\r\nContactSurfaceMode.prototype.surfaceNames = ['ContactSurfaceGeo'];\r\n/* harmony default export */ const modes_ContactSurfaceMode = (ContactSurfaceMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes/TextMode.js\r\n\r\n\r\nclass TextMode extends modes_Mode {\r\n  static id = 'TX';\r\n  getTemplateOptions() {\r\n    return this.opts.template;\r\n  }\r\n  getLabelOpts() {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(this.opts, {\r\n      colors: true,\r\n      adjustColor: true,\r\n      transparent: true\r\n    });\r\n  }\r\n}\r\nTextMode.prototype.id = 'TX';\r\nTextMode.prototype.name = 'Text mode';\r\nTextMode.prototype.shortName = 'Text';\r\nTextMode.prototype.depGroups = ['TextLabelsGeo'];\r\n/* harmony default export */ const modes_TextMode = (TextMode);\r\n;// CONCATENATED MODULE: ./src/gfx/modes.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst modes = new utils_EntityList([modes_LinesMode, modes_LicoriceMode, modes_BallsAndSticksMode, modes_VanDerWaalsMode, modes_TraceMode, modes_TubeMode, modes_CartoonMode, modes_QuickSurfaceMode, modes_IsoSurfaceSASMode, modes_IsoSurfaceSESMode, modes_ContactSurfaceMode, modes_TextMode]);\r\n/* harmony default export */ const gfx_modes = (modes);\r\n;// CONCATENATED MODULE: ./src/gfx/palettes/Palette.js\r\n\r\nfunction clamp(x, a, b) {\r\n  return x <= b ? x < 0 ? 0 : x : b;\r\n}\r\nfunction lerpColor(c1, c2, alpha) {\r\n  const beta = 1 - alpha;\r\n  const r1 = c1 >> 16 & 0xff;\r\n  const g1 = c1 >> 8 & 0xff;\r\n  const b1 = c1 & 0xff;\r\n  const r2 = c2 >> 16 & 0xff;\r\n  const g2 = c2 >> 8 & 0xff;\r\n  const b2 = c2 & 0xff;\r\n  const r = beta * r1 + alpha * r2;\r\n  const g = beta * g1 + alpha * g2;\r\n  const b = beta * b1 + alpha * b2;\r\n  return r << 16 | g << 8 | b;\r\n}\r\nclass Palette {\r\n  constructor(name, id) {\r\n    this.name = name || 'Custom';\r\n    this.id = id || 'CP';\r\n  }\r\n  getElementColor(name) {\r\n    let asIs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n    const color = this.elementColors[name];\r\n    return color === undefined && !asIs ? this.defaultElementColor : color;\r\n  }\r\n  getResidueColor(name) {\r\n    let asIs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n    const color = this.residueColors[name];\r\n    return color === undefined && !asIs ? this.defaultResidueColor : color;\r\n  }\r\n  getChainColor(name) {\r\n    let chain = name.charCodeAt(0);\r\n    chain = ((chain < 0 ? 0 : chain >= 256 ? chain - 256 : chain) & 0x1F) % this.chainColors.length;\r\n    return this.chainColors[chain];\r\n  }\r\n  getSecondaryColor(type) {\r\n    let asIs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n    const color = this.secondaryColors[type];\r\n    return color === undefined && !asIs ? this.defaultSecondaryColor : color;\r\n  }\r\n  getSequentialColor(index) {\r\n    const {\r\n      colors\r\n    } = this;\r\n    const len = colors.length;\r\n    return index < 0 ? colors[index % len + len] : colors[index % len];\r\n  }\r\n  getGradientColor(value, gradientName) {\r\n    const gradient = this.gradients[gradientName];\r\n    if (!gradient) {\r\n      return this.defaultNamedColor;\r\n    }\r\n    const count = gradient.length;\r\n    const index = value * (count - 1);\r\n    let left = Math.floor(index);\r\n    const right = clamp(left + 1, 0, count - 1);\r\n    left = clamp(left, 0, count - 1);\r\n    return lerpColor(gradient[left], gradient[right], index - left);\r\n  }\r\n  getNamedColor(name) {\r\n    let asIs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n    const color = this.namedColors[name];\r\n    return color === undefined && !asIs ? this.defaultNamedColor : color;\r\n  }\r\n}\r\nexternal_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].assign(Palette.prototype, {\r\n  colors: [0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF, 0x808080],\r\n  minRangeColor: 0x000000,\r\n  midRangeColor: 0x7F7F7F,\r\n  maxRangeColor: 0xFFFFFF,\r\n  defaultElementColor: 0xFFFFFF,\r\n  elementColors: {},\r\n  defaultResidueColor: 0xFFFFFF,\r\n  residueColors: {},\r\n  chainColors: [0xFFFFFF],\r\n  defaultSecondaryColor: 0xFFFFFF,\r\n  secondaryColors: {},\r\n  defaultGradientColor: 0x000000,\r\n  defaultNamedColor: 0xFFFFFF,\r\n  namedColorsArray: [/* eslint-disable no-multi-spaces */\r\n  ['indianred', 0xcd5c5c], ['lightcoral', 0xf08080], ['salmon', 0xfa8072], ['darksalmon', 0xe9967a], ['lightsalmon', 0xffa07a], ['crimson', 0xdc143c], ['red', 0xff0000], ['firebrick', 0xb22222], ['darkred', 0x8b0000], ['pink', 0xffc0cb], ['lightpink', 0xffb6c1], ['hotpink', 0xff69b4], ['deeppink', 0xff1493], ['mediumvioletred', 0xc71585], ['palevioletred', 0xdb7093], ['coral', 0xff7f50], ['tomato', 0xff6347], ['orangered', 0xff4500], ['darkorange', 0xff8c00], ['orange', 0xffa500], ['gold', 0xffd700], ['yellow', 0xffff00], ['lightyellow', 0xffffe0], ['lemonchiffon', 0xfffacd], ['lightgoldenrodyellow', 0xfafad2], ['papayawhip', 0xffefd5], ['moccasin', 0xffe4b5], ['peachpuff', 0xffdab9], ['palegoldenrod', 0xeee8aa], ['khaki', 0xf0e68c], ['darkkhaki', 0xbdb76b], ['lavender', 0xe6e6fa], ['thistle', 0xd8bfd8], ['plum', 0xdda0dd], ['violet', 0xee82ee], ['orchid', 0xda70d6], ['fuchsia', 0xff00ff], ['magenta', 0xff00ff], ['mediumorchid', 0xba55d3], ['mediumpurple', 0x9370db], ['rebeccapurple', 0x663399], ['blueviolet', 0x8a2be2], ['darkviolet', 0x9400d3], ['darkorchid', 0x9932cc], ['darkmagenta', 0x8b008b], ['purple', 0x800080], ['indigo', 0x4b0082], ['slateblue', 0x6a5acd], ['mediumslateblue', 0x7b68ee], ['darkslateblue', 0x483d8b], ['greenyellow', 0xadff2f], ['chartreuse', 0x7fff00], ['lawngreen', 0x7cfc00], ['lime', 0x00ff00], ['limegreen', 0x32cd32], ['palegreen', 0x98fb98], ['lightgreen', 0x90ee90], ['mediumspringgreen', 0x00fa9a], ['springgreen', 0x00ff7f], ['mediumseagreen', 0x3cb371], ['seagreen', 0x2e8b57], ['forestgreen', 0x228b22], ['green', 0x008000], ['darkgreen', 0x006400], ['yellowgreen', 0x9acd32], ['olivedrab', 0x6b8e23], ['olive', 0x808000], ['darkolivegreen', 0x556b2f], ['mediumaquamarine', 0x66cdaa], ['darkseagreen', 0x8fbc8f], ['lightseagreen', 0x20b2aa], ['darkcyan', 0x008b8b], ['teal', 0x008080], ['aqua', 0x00ffff], ['cyan', 0x00ffff], ['lightcyan', 0xe0ffff], ['paleturquoise', 0xafeeee], ['aquamarine', 0x7fffd4], ['turquoise', 0x40e0d0], ['mediumturquoise', 0x48d1cc], ['darkturquoise', 0x00ced1], ['cadetblue', 0x5f9ea0], ['steelblue', 0x4682b4], ['lightsteelblue', 0xb0c4de], ['powderblue', 0xb0e0e6], ['lightblue', 0xadd8e6], ['skyblue', 0x87ceeb], ['lightskyblue', 0x87cefa], ['deepskyblue', 0x00bfff], ['dodgerblue', 0x1e90ff], ['cornflowerblue', 0x6495ed], ['royalblue', 0x4169e1], ['blue', 0x0000ff], ['mediumblue', 0x0000cd], ['darkblue', 0x00008b], ['navy', 0x000080], ['midnightblue', 0x191970], ['cornsilk', 0xfff8dc], ['blanchedalmond', 0xffebcd], ['bisque', 0xffe4c4], ['navajowhite', 0xffdead], ['wheat', 0xf5deb3], ['burlywood', 0xdeb887], ['tan', 0xd2b48c], ['rosybrown', 0xbc8f8f], ['sandybrown', 0xf4a460], ['goldenrod', 0xdaa520], ['darkgoldenrod', 0xb8860b], ['peru', 0xcd853f], ['chocolate', 0xd2691e], ['saddlebrown', 0x8b4513], ['sienna', 0xa0522d], ['brown', 0xa52a2a], ['maroon', 0x800000], ['white', 0xffffff], ['snow', 0xfffafa], ['honeydew', 0xf0fff0], ['mintcream', 0xf5fffa], ['azure', 0xf0ffff], ['aliceblue', 0xf0f8ff], ['ghostwhite', 0xf8f8ff], ['whitesmoke', 0xf5f5f5], ['seashell', 0xfff5ee], ['beige', 0xf5f5dc], ['oldlace', 0xfdf5e6], ['floralwhite', 0xfffaf0], ['ivory', 0xfffff0], ['antiquewhite', 0xfaebd7], ['linen', 0xfaf0e6], ['lavenderblush', 0xfff0f5], ['mistyrose', 0xffe4e1], ['gainsboro', 0xdcdcdc], ['lightgray', 0xd3d3d3], ['silver', 0xc0c0c0], ['darkgray', 0xa9a9a9], ['gray', 0x808080], ['dimgray', 0x696969], ['lightslategray', 0x778899], ['slategray', 0x708090], ['darkslategray', 0x2f4f4f], ['black', 0x000000]\r\n  /* eslint-enable no-multi-spaces */],\r\n  namedColors: {},\r\n  /* eslint-enable no-magic-numbers */\r\n\r\n  gradients: {\r\n    rainbow: [0x0000ff,\r\n    // blue\r\n    0x00ffff,\r\n    // cyan\r\n    0x00ff00,\r\n    // green\r\n    0xffff00,\r\n    // yellow\r\n    0xff0000 // red\r\n    ],\r\n    temp: [0x0000ff,\r\n    // blue\r\n    0x007fff,\r\n    // light-blue\r\n    0xffffff,\r\n    // white\r\n    0xff7f00,\r\n    // orange\r\n    0xff0000 // red\r\n    ],\r\n    hot: [0xffffff,\r\n    // white\r\n    0xff7f00,\r\n    // orange\r\n    0xff0000 // red\r\n    ],\r\n    cold: [0xffffff,\r\n    // white\r\n    0x007fff,\r\n    // light-blue\r\n    0x0000ff // blue\r\n    ],\r\n    'blue-red': [0x0000ff,\r\n    // blue\r\n    0xffffff,\r\n    // white\r\n    0xff0000 // red\r\n    ],\r\n    reds: [0xffffff,\r\n    // white\r\n    0xff0000 // red\r\n    ],\r\n    blues: [0xffffff,\r\n    // white\r\n    0x0000ff // blue\r\n    ]\r\n  }\r\n});\r\nconst {\r\n  namedColorsArray,\r\n  namedColors\r\n} = Palette.prototype;\r\nfor (let i = 0, {\r\n    length\r\n  } = namedColorsArray; i < length; ++i) {\r\n  const [name, value] = namedColorsArray[i];\r\n  namedColors[name] = value;\r\n}\r\n/* harmony default export */ const palettes_Palette = (Palette);\r\n;// CONCATENATED MODULE: ./src/gfx/palettes/cpkPalette.js\r\n\r\nconst palette = new palettes_Palette('CPK', 'CP');\r\n\r\n// DO NOT EDIT MANUALLY! Autogenerated from atom_types.csv by atom_types.py.\r\npalette.elementColors = {\r\n  /* eslint-disable no-magic-numbers */\r\n  H: 0xFFFFFF,\r\n  C: 0x202020,\r\n  N: 0x2060FF,\r\n  O: 0xEE2010,\r\n  F: 0x00FF00,\r\n  P: 0x8020FF,\r\n  S: 0xFFFF00,\r\n  CL: 0x00BB00,\r\n  FE: 0xD0D0D0,\r\n  CO: 0xD0D0D0,\r\n  NI: 0xD0D0D0,\r\n  CU: 0xD0D0D0,\r\n  BR: 0x008800,\r\n  I: 0x005500\r\n  /* eslint-enable no-magic-numbers */\r\n};\r\n/* harmony default export */ const cpkPalette = (palette);\r\n;// CONCATENATED MODULE: ./src/gfx/palettes/jmolPalette.js\r\n\r\n\r\nconst jmolPalette_palette = new palettes_Palette('Jmol', 'JM');\r\njmolPalette_palette.colors = [/* eslint-disable no-magic-numbers */\r\n0x0000FF,\r\n// blue\r\n0x0055FF,\r\n//\r\n0x00ABFF,\r\n//\r\n0x00FFFF,\r\n// cyan\r\n0x00FFAB,\r\n//\r\n0x00FF55,\r\n//\r\n0x00FF00,\r\n// green\r\n0x55FF00,\r\n//\r\n0xABFF00,\r\n//\r\n0xFFFF00,\r\n// yellow\r\n0xFFAB00,\r\n//\r\n0xFF5500,\r\n//\r\n0xFF0000,\r\n// red\r\n0xFF0055,\r\n//\r\n0xFF00AB,\r\n//\r\n0xFF00FF,\r\n// magenta\r\n0xAB00FF,\r\n//\r\n0x5500FF //\r\n/* eslint-enable no-magic-numbers */];\r\n\r\n// DO NOT EDIT MANUALLY! Autogenerated from atom_types.csv by atom_types.py.\r\njmolPalette_palette.elementColors = {\r\n  /* eslint-disable no-magic-numbers */\r\n  H: 0xFFFFFF,\r\n  D: 0xFFFFC0,\r\n  T: 0xFFFFA0,\r\n  HE: 0xD9FFFF,\r\n  LI: 0xCC80FF,\r\n  BE: 0xC2FF00,\r\n  B: 0xFFB5B5,\r\n  C: 0x909090,\r\n  N: 0x3050F8,\r\n  O: 0xFF0D0D,\r\n  F: 0x90E050,\r\n  NE: 0xB3E3F5,\r\n  NA: 0xAB5CF2,\r\n  MG: 0x8AFF00,\r\n  AL: 0xBFA6A6,\r\n  SI: 0xF0C8A0,\r\n  P: 0xFF8000,\r\n  S: 0xFFFF30,\r\n  CL: 0x1FF01F,\r\n  AR: 0x80D1E3,\r\n  K: 0x8F40D4,\r\n  CA: 0x3DFF00,\r\n  SC: 0xE6E6E6,\r\n  TI: 0xBFC2C7,\r\n  V: 0xA6A6AB,\r\n  CR: 0x8A99C7,\r\n  MN: 0x9C7AC7,\r\n  FE: 0xE06633,\r\n  CO: 0xF090A0,\r\n  NI: 0x50D050,\r\n  CU: 0xC88033,\r\n  ZN: 0x7D80B0,\r\n  GA: 0xC28F8F,\r\n  GE: 0x668F8F,\r\n  AS: 0xBD80E3,\r\n  SE: 0xFFA100,\r\n  BR: 0xA62929,\r\n  KR: 0x5CB8D1,\r\n  RB: 0x702EB0,\r\n  SR: 0x00FF00,\r\n  Y: 0x94FFFF,\r\n  ZR: 0x94E0E0,\r\n  NB: 0x73C2C9,\r\n  MO: 0x54B5B5,\r\n  TC: 0x3B9E9E,\r\n  RU: 0x248F8F,\r\n  RH: 0x0A7D8C,\r\n  PD: 0x006985,\r\n  AG: 0xC0C0C0,\r\n  CD: 0xFFD98F,\r\n  IN: 0xA67573,\r\n  SN: 0x668080,\r\n  SB: 0x9E63B5,\r\n  TE: 0xD47A00,\r\n  I: 0x940094,\r\n  XE: 0x429EB0,\r\n  CS: 0x57178F,\r\n  BA: 0x00C900,\r\n  LA: 0x70D4FF,\r\n  CE: 0xFFFFC7,\r\n  PR: 0xD9FFC7,\r\n  ND: 0xC7FFC7,\r\n  PM: 0xA3FFC7,\r\n  SM: 0x8FFFC7,\r\n  EU: 0x61FFC7,\r\n  GD: 0x45FFC7,\r\n  TB: 0x30FFC7,\r\n  DY: 0x1FFFC7,\r\n  HO: 0x00FF9C,\r\n  ER: 0x00E675,\r\n  TM: 0x00D452,\r\n  YB: 0x00BF38,\r\n  LU: 0x00AB24,\r\n  HF: 0x4DC2FF,\r\n  TA: 0x4DA6FF,\r\n  W: 0x2194D6,\r\n  RE: 0x267DAB,\r\n  OS: 0x266696,\r\n  IR: 0x175487,\r\n  PT: 0xD0D0E0,\r\n  AU: 0xFFD123,\r\n  HG: 0xB8B8D0,\r\n  TL: 0xA6544D,\r\n  PB: 0x575961,\r\n  BI: 0x9E4FB5,\r\n  PO: 0xAB5C00,\r\n  AT: 0x754F45,\r\n  RN: 0x428296,\r\n  FR: 0x420066,\r\n  RA: 0x007D00,\r\n  AC: 0x70ABFA,\r\n  TH: 0x00BAFF,\r\n  PA: 0x00A1FF,\r\n  U: 0x008FFF,\r\n  NP: 0x0080FF,\r\n  PU: 0x006BFF,\r\n  AM: 0x545CF2,\r\n  CM: 0x785CE3,\r\n  BK: 0x8A4FE3,\r\n  CF: 0xA136D4,\r\n  ES: 0xB31FD4,\r\n  FM: 0xB31FBA,\r\n  MD: 0xB30DA6,\r\n  NO: 0xBD0D87,\r\n  LR: 0xC70066,\r\n  RF: 0xCC0059,\r\n  DB: 0xD1004F,\r\n  SG: 0xD90045,\r\n  BH: 0xE00038,\r\n  HS: 0xE6002E,\r\n  MT: 0xEB0026\r\n  /* eslint-enable no-magic-numbers */\r\n};\r\njmolPalette_palette.defaultResidueColor = 0xBEA06E;\r\n\r\n// DO NOT EDIT MANUALLY! Autogenerated from residue_types.csv by residue_types.py.\r\njmolPalette_palette.residueColors = {\r\n  /* eslint-disable no-magic-numbers */\r\n  ALA: 0xC8C8C8,\r\n  ARG: 0x145AFF,\r\n  ASN: 0x00DCDC,\r\n  ASP: 0xE60A0A,\r\n  CYS: 0xE6E600,\r\n  GLN: 0x00DCDC,\r\n  GLU: 0xE60A0A,\r\n  GLY: 0xEBEBEB,\r\n  HIS: 0x8282D2,\r\n  ILE: 0x0F820F,\r\n  LEU: 0x0F820F,\r\n  LYS: 0x145AFF,\r\n  MET: 0xE6E600,\r\n  PHE: 0x3232AA,\r\n  PRO: 0xDC9682,\r\n  SER: 0xFA9600,\r\n  THR: 0xFA9600,\r\n  TRP: 0xB45AB4,\r\n  TYR: 0x3232AA,\r\n  VAL: 0x0F820F,\r\n  A: 0xA0A0FF,\r\n  C: 0xFF8C4B,\r\n  G: 0xFF7070,\r\n  I: 0x80FFFF,\r\n  T: 0xA0FFA0,\r\n  U: 0xFF8080,\r\n  DA: 0xA0A0FF,\r\n  DC: 0xFF8C4B,\r\n  DG: 0xFF7070,\r\n  DI: 0x80FFFF,\r\n  DT: 0xA0FFA0,\r\n  DU: 0xFF8080,\r\n  '+A': 0xA0A0FF,\r\n  '+C': 0xFF8C4B,\r\n  '+G': 0xFF7070,\r\n  '+I': 0x80FFFF,\r\n  '+T': 0xA0FFA0,\r\n  '+U': 0xFF8080\r\n  /* eslint-enable no-magic-numbers */\r\n};\r\njmolPalette_palette.chainColors = [\r\n// ' '->0 'A'->1, 'B'->2\r\n0xFFffffff,\r\n// ' ' & '0' white\r\n//\r\n0xFFC0D0FF,\r\n// skyblue\r\n0xFFB0FFB0,\r\n// pastel green\r\n0xFFFFC0C8,\r\n// pink\r\n0xFFFFFF80,\r\n// pastel yellow\r\n0xFFFFC0FF,\r\n// pastel magenta\r\n0xFFB0F0F0,\r\n// pastel cyan\r\n0xFFFFD070,\r\n// pastel gold\r\n0xFFF08080,\r\n// lightcoral\r\n\r\n0xFFF5DEB3,\r\n// wheat\r\n0xFF00BFFF,\r\n// deepskyblue\r\n0xFFCD5C5C,\r\n// indianred\r\n0xFF66CDAA,\r\n// mediumaquamarine\r\n0xFF9ACD32,\r\n// yellowgreen\r\n0xFFEE82EE,\r\n// violet\r\n0xFF00CED1,\r\n// darkturquoise\r\n0xFF00FF7F,\r\n// springgreen\r\n0xFF3CB371,\r\n// mediumseagreen\r\n\r\n0xFF00008B,\r\n// darkblue\r\n0xFFBDB76B,\r\n// darkkhaki\r\n0xFF006400,\r\n// darkgreen\r\n0xFF800000,\r\n// maroon\r\n0xFF808000,\r\n// olive\r\n0xFF800080,\r\n// purple\r\n0xFF008080,\r\n// teal\r\n0xFFB8860B,\r\n// darkgoldenrod\r\n0xFFB22222 // firebrick\r\n];\r\nconst jmolPalette_StructuralElementType = chem_StructuralElement.Type;\r\njmolPalette_palette.secondaryColors = {\r\n  [jmolPalette_StructuralElementType.HELIX_ALPHA]: 0xFF0080,\r\n  [jmolPalette_StructuralElementType.HELIX_PI]: 0x600080,\r\n  [jmolPalette_StructuralElementType.HELIX_310]: 0xA00080,\r\n  [jmolPalette_StructuralElementType.STRAND]: 0xFFC800,\r\n  [jmolPalette_StructuralElementType.TURN]: 0x6080FF,\r\n  dna: 0xAE00FE,\r\n  rna: 0xFD0162\r\n};\r\n/* harmony default export */ const jmolPalette = (jmolPalette_palette);\r\n;// CONCATENATED MODULE: ./src/gfx/palettes/vmdPalette.js\r\n\r\n\r\nconst vmdPalette_palette = new palettes_Palette('VMD', 'VM');\r\nvmdPalette_palette.colors = [/* eslint-disable no-magic-numbers */\r\n0x0000FF,\r\n// blue\r\n0xFF0000,\r\n// red\r\n0x606060,\r\n// gray\r\n0xFF8000,\r\n// orange\r\n0xFFFF00,\r\n// yellow\r\n0x808033,\r\n// tan\r\n0x999999,\r\n// silver\r\n0x00FF00,\r\n// green\r\n0xFFFFFF,\r\n// white\r\n0xFF9999,\r\n// pink\r\n0x40C0C0,\r\n// cyan\r\n0xA600A6,\r\n// purple\r\n0x80E666,\r\n// lime\r\n0xE666B3,\r\n// mauve\r\n0x804D00,\r\n// ochre\r\n0x8080C0 // ice blue\r\n/* eslint-enable no-magic-numbers */];\r\nvmdPalette_palette.defaultElementColor = 0x804D00;\r\n\r\n// DO NOT EDIT MANUALLY! Autogenerated from atom_types.csv by atom_types.py.\r\nvmdPalette_palette.elementColors = {\r\n  /* eslint-disable no-magic-numbers */\r\n  H: 0xFFFFFF,\r\n  C: 0x40BFBF,\r\n  N: 0x0000FF,\r\n  O: 0xFF0000,\r\n  P: 0x808033,\r\n  S: 0xFFFF00\r\n  /* eslint-enable no-magic-numbers */\r\n};\r\nvmdPalette_palette.defaultResidueColor = 0x40C0C0;\r\n\r\n// DO NOT EDIT MANUALLY! Autogenerated from residue_types.csv by residue_types.py.\r\nvmdPalette_palette.residueColors = {\r\n  /* eslint-disable no-magic-numbers */\r\n  ALA: 0x0000FF,\r\n  ARG: 0xFFFFFF,\r\n  ASN: 0x808033,\r\n  ASP: 0xFF0000,\r\n  CYS: 0xFFFF00,\r\n  GLN: 0xFF8000,\r\n  GLU: 0xFF9999,\r\n  GLY: 0xFFFFFF,\r\n  HIS: 0x40C0C0,\r\n  ILE: 0x00FF00,\r\n  LEU: 0xFF9999,\r\n  LYS: 0x40C0C0,\r\n  MET: 0xFFFF00,\r\n  PHE: 0xA600A6,\r\n  PRO: 0x804C00,\r\n  SER: 0xFFFF00,\r\n  THR: 0xE666B3,\r\n  TRP: 0x999999,\r\n  TYR: 0x00FF00,\r\n  VAL: 0x808033,\r\n  A: 0x0000FF,\r\n  C: 0xFF8000,\r\n  G: 0xFFFF00,\r\n  T: 0xA600A6,\r\n  U: 0x00FF00,\r\n  DA: 0x0000FF,\r\n  DC: 0xFF8000,\r\n  DG: 0xFFFF00,\r\n  DT: 0xA600A6,\r\n  DU: 0x00FF00,\r\n  '+A': 0x0000FF,\r\n  '+C': 0xFF8000,\r\n  '+G': 0xFFFF00,\r\n  '+T': 0xA600A6,\r\n  '+U': 0x00FF00,\r\n  WAT: 0x40C0C0,\r\n  H2O: 0x40C0C0,\r\n  HOH: 0x40C0C0\r\n  /* eslint-enable no-magic-numbers */\r\n};\r\nvmdPalette_palette.chainColors = [0xFFFFFF].concat(vmdPalette_palette.colors);\r\nconst vmdPalette_StructuralElementType = chem_StructuralElement.Type;\r\nvmdPalette_palette.secondaryColors = {\r\n  [vmdPalette_StructuralElementType.HELIX_ALPHA]: 0xA600A6,\r\n  [vmdPalette_StructuralElementType.HELIX_310]: 0x0000FF,\r\n  [vmdPalette_StructuralElementType.HELIX_PI]: 0xFF0000,\r\n  [vmdPalette_StructuralElementType.STRAND]: 0xFFFF00,\r\n  [vmdPalette_StructuralElementType.BRIDGE]: 0x808033,\r\n  [vmdPalette_StructuralElementType.TURN]: 0x40C0C0\r\n};\r\n/* harmony default export */ const vmdPalette = (vmdPalette_palette);\r\n;// CONCATENATED MODULE: ./src/gfx/palettes.js\r\n\r\n\r\n\r\n\r\nconst palettes = new utils_EntityList([cpkPalette, jmolPalette, vmdPalette]);\r\n/* harmony default export */ const gfx_palettes = (palettes);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/Colorer.js\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with.\r\n *\r\n *   These options are copied locally and not kept by reference, so the created instance will not reflect further\r\n *   changes to the `opts` object. However, changes in defaults **will** affect the colorer after its creation.\r\n *\r\n * @exports Colorer\r\n * @this Colorer\r\n * @abstract\r\n * @constructor\r\n * @classdesc Basic class for all available coloring algorithms used for building and displaying molecule geometry.\r\n */\r\nclass Colorer {\r\n  constructor(opts) {\r\n    if (this.constructor === Colorer) {\r\n      throw new Error('Can not instantiate abstract class!');\r\n    }\r\n    /**\r\n     * Colorer options inherited (prototyped) from defaults.\r\n     * @type {object}\r\n     */\r\n    this.opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(utils.deriveDeep(settings.now.colorers[this.id], true), opts);\r\n    /**\r\n     * Palette in use.\r\n     * @type {Palette}\r\n     */\r\n    this.palette = gfx_palettes.first;\r\n  }\r\n\r\n  /**\r\n   * Get Colorer identification, probably with options.\r\n   * @returns {string|Array} Colorer identifier string ({@link Colorer#id}) or two-element array containing both colorer\r\n   *   identifier and options ({@link Colorer#opts}).\r\n   * Options are returned if they were changed during or after colorer creation.\r\n   */\r\n  identify() {\r\n    const diff = utils.objectsDiff(this.opts, settings.now.colorers[this.id]);\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n      return [this.id, diff];\r\n    }\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Colorer identifier.\r\n * @type {string}\r\n */\r\n\r\nColorer.prototype.id = '__';\r\n/* harmony default export */ const colorers_Colorer = (Colorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/ElementColorer.js\r\n\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with. See {@link Colorer}.\r\n *\r\n * @see Element\r\n *\r\n * @exports ElementColorer\r\n * @augments Colorer\r\n * @constructor\r\n * @classdesc Coloring algorithm based on chemical element.\r\n */\r\nclass ElementColorer extends colorers_Colorer {\r\n  static id = 'EL';\r\n  getAtomColor(atom, _complex) {\r\n    const type = atom.element.name;\r\n    if (type === 'C' && this.opts.carbon >= 0) {\r\n      return this.opts.carbon;\r\n    }\r\n    return this.palette.getElementColor(type);\r\n  }\r\n  getResidueColor(_residue, _complex) {\r\n    return this.palette.defaultResidueColor;\r\n  }\r\n}\r\nElementColorer.prototype.id = 'EL';\r\nElementColorer.prototype.name = 'Element';\r\nElementColorer.prototype.shortName = 'Element';\r\n/* harmony default export */ const colorers_ElementColorer = (ElementColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/ResidueTypeColorer.js\r\n\r\n\r\n/**\r\n * Coloring algorithm based on residue type.\r\n *\r\n * @see ResidueType\r\n *\r\n * @exports ResidueTypeColorer\r\n * @constructor\r\n */\r\nclass ResidueTypeColorer extends colorers_Colorer {\r\n  static id = 'RT';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    return this.palette.getResidueColor(residue._type._name);\r\n  }\r\n}\r\nResidueTypeColorer.prototype.id = 'RT';\r\nResidueTypeColorer.prototype.name = 'Residue Type';\r\nResidueTypeColorer.prototype.shortName = 'Residue';\r\n/* harmony default export */ const colorers_ResidueTypeColorer = (ResidueTypeColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/SequenceColorer.js\r\n\r\nclass SequenceColorer extends colorers_Colorer {\r\n  static id = 'SQ';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    const chain = residue._chain;\r\n    if (chain.minSequence === Number.POSITIVE_INFINITY && chain.maxSequence === Number.NEGATIVE_INFINITY) {\r\n      return this.palette.defaultNamedColor;\r\n    }\r\n    const min = chain.minSequence;\r\n    const max = chain.maxSequence > min ? chain.maxSequence : min + 1;\r\n    return this.palette.getGradientColor((residue._sequence - min) / (max - min), this.opts.gradient);\r\n  }\r\n}\r\nSequenceColorer.prototype.id = 'SQ';\r\nSequenceColorer.prototype.name = 'Sequence';\r\nSequenceColorer.prototype.shortName = 'Sequence';\r\n/* harmony default export */ const colorers_SequenceColorer = (SequenceColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/ChainColorer.js\r\n\r\nclass ChainColorer extends colorers_Colorer {\r\n  static id = 'CH';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    return this.palette.getChainColor(residue.getChain()._name);\r\n  }\r\n}\r\nChainColorer.prototype.id = 'CH';\r\nChainColorer.prototype.name = 'Chain';\r\nChainColorer.prototype.shortName = 'Chain';\r\n/* harmony default export */ const colorers_ChainColorer = (ChainColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/SecondaryStructureColorer.js\r\n\r\n\r\nclass SecondaryStructureColorer extends colorers_Colorer {\r\n  static id = 'SS';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    if (residue._type.flags & chem_ResidueType.Flags.DNA) {\r\n      return this.palette.getSecondaryColor('dna');\r\n    }\r\n    if (residue._type.flags & chem_ResidueType.Flags.RNA) {\r\n      return this.palette.getSecondaryColor('rna');\r\n    }\r\n    const secondary = residue.getSecondary();\r\n    if (secondary) {\r\n      let color = this.palette.getSecondaryColor(secondary.type, true);\r\n      if (color === undefined) {\r\n        color = this.palette.getSecondaryColor(secondary.generic);\r\n      }\r\n      return color;\r\n    }\r\n    return this.palette.defaultSecondaryColor;\r\n  }\r\n}\r\nSecondaryStructureColorer.prototype.id = 'SS';\r\nSecondaryStructureColorer.prototype.name = 'Secondary Structure';\r\nSecondaryStructureColorer.prototype.shortName = 'Structure';\r\n/* harmony default export */ const colorers_SecondaryStructureColorer = (SecondaryStructureColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/UniformColorer.js\r\n\r\nclass UniformColorer extends colorers_Colorer {\r\n  static id = 'UN';\r\n  getAtomColor(_atom, _complex) {\r\n    return this.opts.color;\r\n  }\r\n  getResidueColor(_residue, _complex) {\r\n    return this.opts.color;\r\n  }\r\n}\r\nUniformColorer.prototype.id = 'UN';\r\nUniformColorer.prototype.name = 'Uniform';\r\nUniformColorer.prototype.shortName = 'Uniform';\r\n/* harmony default export */ const colorers_UniformColorer = (UniformColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/ConditionalColorer.js\r\n\r\n\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with. See {@link Colorer}.\r\n *\r\n * @exports ConditionalColorer\r\n * @augments Colorer\r\n * @constructor\r\n * @classdesc Bicolor coloring algorithm based on a selector string used as a condition.\r\n */\r\nclass ConditionalColorer extends colorers_Colorer {\r\n  static id = 'CO';\r\n  constructor(opts) {\r\n    super(opts);\r\n    const parsed = chem_selectors.parse(this.opts.subset);\r\n    this._subsetCached = parsed.error ? chem_selectors.none() : parsed.selector;\r\n  }\r\n  getAtomColor(atom, _complex) {\r\n    return this._subsetCached.includesAtom(atom) ? this.opts.color : this.opts.baseColor;\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    const subset = this._subsetCached;\r\n    const atoms = residue._atoms;\r\n    for (let i = 0, n = atoms.length; i < n; ++i) {\r\n      if (!subset.includesAtom(atoms[i])) {\r\n        return this.opts.baseColor;\r\n      }\r\n    }\r\n    return this.opts.color;\r\n  }\r\n}\r\nConditionalColorer.prototype.id = 'CO';\r\nConditionalColorer.prototype.name = 'Conditional';\r\nConditionalColorer.prototype.shortName = 'Conditional';\r\n/* harmony default export */ const colorers_ConditionalColorer = (ConditionalColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/ConformationColorer.js\r\n\r\nclass ConformationColorer extends colorers_Colorer {\r\n  static id = 'CF';\r\n  getAtomColor(atom, _complex) {\r\n    return this.palette.getChainColor(String.fromCharCode(atom.location));\r\n  }\r\n  getResidueColor(_residue, _complex) {\r\n    return this.palette.defaultResidueColor;\r\n  }\r\n}\r\nConformationColorer.prototype.id = 'CF';\r\nConformationColorer.prototype.name = 'Conformation';\r\nConformationColorer.prototype.shortName = 'Conformation';\r\n/* harmony default export */ const colorers_ConformationColorer = (ConformationColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/TemperatureColorer.js\r\n\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with. See {@link Colorer}.\r\n *\r\n * @see Temperature\r\n *\r\n * @exports TemperatureColorer\r\n * @augments Colorer\r\n * @constructor\r\n * @classdesc Coloring algorithm based on temperature of chemical element.\r\n */\r\nclass TemperatureColorer extends colorers_Colorer {\r\n  static id = 'TM';\r\n  getAtomColor(atom, _complex) {\r\n    const {\r\n      opts\r\n    } = this;\r\n    let factor = 1;\r\n    if (atom.temperature && opts) {\r\n      if (opts.min === opts.max) {\r\n        factor = atom.temperature > opts.max ? 1 : 0;\r\n      } else {\r\n        factor = (atom.temperature - opts.min) / (opts.max - opts.min);\r\n      }\r\n      return this.palette.getGradientColor(factor, opts.gradient);\r\n    }\r\n    return this.palette.defaultGradientColor;\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    const {\r\n      opts\r\n    } = this;\r\n    if (!opts) {\r\n      return this.palette.defaultGradientColor;\r\n    }\r\n    if (residue.temperature) {\r\n      let factor = 0;\r\n      if (opts.min === opts.max) {\r\n        factor = residue.temperature > opts.max ? 1 : 0;\r\n      } else {\r\n        factor = (residue.temperature - opts.min) / (opts.max - opts.min);\r\n      }\r\n      return this.palette.getGradientColor(factor, opts.gradient);\r\n    }\r\n    return this.palette.defaultGradientColor;\r\n  }\r\n}\r\nTemperatureColorer.prototype.id = 'TM'; // [T]e[M]perature\r\nTemperatureColorer.prototype.name = 'Temperature';\r\nTemperatureColorer.prototype.shortName = 'Temperature';\r\n/* harmony default export */ const colorers_TemperatureColorer = (TemperatureColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/OccupancyColorer.js\r\n\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with. See {@link Colorer}.\r\n *\r\n * @see Occupancy\r\n *\r\n * @exports OccupancyColorer\r\n * @augments Occupancy\r\n * @constructor\r\n * @classdesc Coloring algorithm based on occupancy of chemical element.\r\n */\r\nclass OccupancyColorer extends colorers_Colorer {\r\n  static id = 'OC';\r\n  _getColorByOccupancy(occupancy, opts) {\r\n    if (occupancy !== undefined) {\r\n      const factor = 1 - occupancy;\r\n      return this.palette.getGradientColor(factor, opts.gradient);\r\n    }\r\n    return this.palette.defaultGradientColor;\r\n  }\r\n  getAtomColor(atom, _complex) {\r\n    const {\r\n      opts\r\n    } = this;\r\n    return this._getColorByOccupancy(atom.occupancy, opts);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    const {\r\n      opts\r\n    } = this;\r\n    return this._getColorByOccupancy(residue.occupancy, opts);\r\n  }\r\n}\r\nOccupancyColorer.prototype.id = 'OC'; // [OC]cupancy\r\nOccupancyColorer.prototype.name = 'Occupancy';\r\nOccupancyColorer.prototype.shortName = 'Occupancy';\r\n/* harmony default export */ const colorers_OccupancyColorer = (OccupancyColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/HydrophobicityColorer.js\r\n\r\nclass HydrophobicityColorer extends colorers_Colorer {\r\n  static id = 'HY';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    let color = this.palette.defaultResidueColor;\r\n    if (residue._type.hydrophobicity !== undefined) {\r\n      // Kyte Doolitle hydro [-4.5,4.5]->[0.1]\r\n      const min = -4.5;\r\n      const max = 4.5;\r\n      color = this.palette.getGradientColor((residue._type.hydrophobicity - min) / (max - min), this.opts.gradient);\r\n    }\r\n    return color;\r\n  }\r\n}\r\nHydrophobicityColorer.prototype.id = 'HY';\r\nHydrophobicityColorer.prototype.name = 'Hydrophobicity';\r\nHydrophobicityColorer.prototype.shortName = 'Hydrophobicity';\r\n/* harmony default export */ const colorers_HydrophobicityColorer = (HydrophobicityColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/MoleculeColorer.js\r\n\r\nclass MoleculeColorer extends colorers_Colorer {\r\n  static id = 'MO';\r\n  getAtomColor(atom, complex) {\r\n    return this.getResidueColor(atom.residue, complex);\r\n  }\r\n  getResidueColor(residue, _complex) {\r\n    const molecule = residue._molecule;\r\n    const count = _complex.getMoleculeCount();\r\n    if (count > 1) {\r\n      return this.palette.getGradientColor((molecule.index - 1) / (count - 1), this.opts.gradient);\r\n    }\r\n    return this.palette.getGradientColor(0, this.opts.gradient);\r\n  }\r\n}\r\nMoleculeColorer.prototype.id = 'MO';\r\nMoleculeColorer.prototype.name = 'Molecule';\r\nMoleculeColorer.prototype.shortName = 'Molecule';\r\n/* harmony default export */ const colorers_MoleculeColorer = (MoleculeColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers/CarbonColorer.js\r\n\r\n\r\nfunction scaleColor(c, factor) {\r\n  const r1 = c >> 16 & 0xff;\r\n  const g1 = c >> 8 & 0xff;\r\n  const b1 = c & 0xff;\r\n  const r = factor * r1;\r\n  const g = factor * g1;\r\n  const b = factor * b1;\r\n  return r << 16 | g << 8 | b;\r\n}\r\n\r\n/**\r\n * Create new colorer.\r\n *\r\n * @param {object=} opts - Options to override defaults with. See {@link Colorer}.\r\n *\r\n * @exports CarbonColorer\r\n * @augments Colorer\r\n * @constructor\r\n * @classdesc Bicolor coloring algorithm based on selection carbon atoms.\r\n */\r\nclass CarbonColorer extends colorers_Colorer {\r\n  static id = 'CB';\r\n  getAtomColor(atom, _complex) {\r\n    const colorCarbon = this.opts.color;\r\n    const colorNotCarbon = scaleColor(colorCarbon, this.opts.factor);\r\n    return atom.flags & chem_Atom.Flags.CARBON ? colorCarbon : colorNotCarbon;\r\n  }\r\n  getResidueColor(_residue, _complex) {\r\n    return this.opts.color;\r\n  }\r\n}\r\nCarbonColorer.prototype.id = 'CB';\r\nCarbonColorer.prototype.name = 'Carbon';\r\nCarbonColorer.prototype.shortName = 'Carbon';\r\n/* harmony default export */ const colorers_CarbonColorer = (CarbonColorer);\r\n;// CONCATENATED MODULE: ./src/gfx/colorers.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst colorers = new utils_EntityList([colorers_ElementColorer, colorers_ResidueTypeColorer, colorers_SequenceColorer, colorers_ChainColorer, colorers_SecondaryStructureColorer, colorers_UniformColorer, colorers_ConditionalColorer, colorers_ConformationColorer, colorers_TemperatureColorer, colorers_OccupancyColorer, colorers_HydrophobicityColorer, colorers_MoleculeColorer, colorers_CarbonColorer]);\r\n/* harmony default export */ const gfx_colorers = (colorers);\r\n;// CONCATENATED MODULE: ./src/gfx/materials.js\r\n\r\n\r\nfunction neutralColor(intensity) {\r\n  return new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(intensity, intensity, intensity);\r\n}\r\nconst materialList = [{\r\n  id: 'DF',\r\n  name: 'Diffuse',\r\n  shortName: 'Diffuse',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.0),\r\n    shininess: 1,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'SF',\r\n  name: 'Soft Plastic',\r\n  shortName: 'Soft',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.1),\r\n    shininess: 30,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'PL',\r\n  name: 'Glossy Plastic',\r\n  shortName: 'Glossy',\r\n  uberOptions: {\r\n    diffuse: neutralColor(0.56),\r\n    specular: neutralColor(0.28),\r\n    shininess: 100,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'ME',\r\n  name: 'Metal',\r\n  shortName: 'Metal',\r\n  uberOptions: {\r\n    diffuse: neutralColor(0.56),\r\n    specular: neutralColor(0.55),\r\n    shininess: 30,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'TR',\r\n  name: 'Transparent',\r\n  shortName: 'Transparent',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.0),\r\n    shininess: 1,\r\n    opacity: 0.5\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: true,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'GL',\r\n  name: 'Glass',\r\n  shortName: 'Glass',\r\n  uberOptions: {\r\n    diffuse: neutralColor(0.50),\r\n    specular: neutralColor(0.65),\r\n    shininess: 100,\r\n    opacity: 0.5\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: true,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'BA',\r\n  name: 'Backdrop',\r\n  shortName: 'Backdrop',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.0),\r\n    shininess: 1,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: false,\r\n    fog: false,\r\n    depthWrite: false,\r\n    transparent: false,\r\n    toonShading: false\r\n  }\r\n}, {\r\n  id: 'TN',\r\n  name: 'Toon',\r\n  shortName: 'Toon',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.0),\r\n    shininess: 1,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: true,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false,\r\n    toonShading: true\r\n  }\r\n}, {\r\n  id: 'FL',\r\n  name: 'Flat',\r\n  shortName: 'Flat',\r\n  uberOptions: {\r\n    diffuse: neutralColor(1.0),\r\n    specular: neutralColor(0.0),\r\n    shininess: 0,\r\n    opacity: 1.0\r\n  },\r\n  values: {\r\n    lights: false,\r\n    fog: true,\r\n    depthWrite: true,\r\n    transparent: false\r\n  }\r\n}];\r\nconst materials = new utils_EntityList(materialList);\r\n/* harmony default export */ const gfx_materials = (materials);\r\n;// CONCATENATED MODULE: ./src/gfx/meshutils.js\r\n/**\r\n * Utils functions which is worked with meshes\r\n *\r\n * functions for doing something with all/specified meshes\r\n * functions for traversihg tree and create auxiliary meshes for transparency/shadowmaps...\r\n * functions for calculating data connected with meshes\r\n */\r\n\r\n\r\n\r\nfunction _gatherObjects(root, meshTypes) {\r\n  const meshes = [];\r\n  root.traverse(object => {\r\n    for (let i = 0; i < meshTypes.length; i++) {\r\n      if (object instanceof meshTypes[i]) {\r\n        meshes[meshes.length] = object;\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  return meshes;\r\n}\r\n\r\n// new mesh with the same geometry and specified material values and layer\r\nfunction createDerivativeMesh(mesh, values, layer) {\r\n  const material = mesh.material.createInstance();\r\n  material.setValues(values);\r\n  const newMesh = new mesh.constructor(mesh.geometry, material);\r\n  newMesh.material.needsUpdate = true;\r\n  newMesh.applyMatrix4(mesh.matrix);\r\n  newMesh.layers.set(layer);\r\n  return newMesh;\r\n}\r\nfunction traverseMeshes(root, meshTypes, func) {\r\n  const meshes = _gatherObjects(root, meshTypes);\r\n  for (let i = 0, n = meshes.length; i < n; ++i) {\r\n    const mesh = meshes[i];\r\n    if (!mesh.parent) {\r\n      continue;\r\n    }\r\n    func(mesh);\r\n  }\r\n}\r\nfunction applyTransformsToMeshes(root, mtc) {\r\n  const mtcCount = mtc.length;\r\n  if (mtcCount < 1) {\r\n    return;\r\n  }\r\n  const meshTypes = [external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Line];\r\n  traverseMeshes(root, meshTypes, mesh => {\r\n    mesh.applyMatrix4(mtc[0]);\r\n    for (let j = 1; j < mtcCount; ++j) {\r\n      const newMesh = new mesh.constructor(mesh.geometry, mesh.material);\r\n      mesh.parent.add(newMesh);\r\n      newMesh.applyMatrix4(mtc[j]);\r\n    }\r\n  });\r\n}\r\nconst processTransparentMaterial = function () {\r\n  const matValues = {\r\n    prepassTransparancy: true,\r\n    fakeOpacity: false,\r\n    transparent: false,\r\n    colorFromDepth: false,\r\n    lights: false,\r\n    shadowmap: false,\r\n    fog: false\r\n  };\r\n  return function (root, material) {\r\n    if (!(material instanceof shaders_UberMaterial)) {\r\n      return;\r\n    }\r\n    traverseMeshes(root, [external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments], mesh => {\r\n      mesh.material.setValues({\r\n        prepassTransparancy: false,\r\n        fakeOpacity: false\r\n      });\r\n      mesh.material.needsUpdate = true;\r\n      mesh.layers.set(gfxutils.LAYERS.TRANSPARENT);\r\n      const prepassTranspMesh = createDerivativeMesh(mesh, matValues, gfxutils.LAYERS.PREPASS_TRANSPARENT);\r\n      mesh.parent.add(prepassTranspMesh);\r\n    });\r\n  };\r\n}();\r\nconst processColFromPosMaterial = function () {\r\n  const matValues = {\r\n    colorFromPos: true,\r\n    transparent: false,\r\n    colorFromDepth: false,\r\n    lights: false,\r\n    shadowmap: false,\r\n    fog: false,\r\n    overrideColor: false,\r\n    fogTransparent: false,\r\n    attrColor: false,\r\n    attrColor2: false,\r\n    attrAlphaColor: false,\r\n    fakeOpacity: false\r\n  };\r\n  return function (root, material) {\r\n    if (!(material instanceof shaders_UberMaterial)) {\r\n      return;\r\n    }\r\n    traverseMeshes(root, [external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments], mesh => {\r\n      const colFromPosMesh = createDerivativeMesh(mesh, matValues, gfxutils.LAYERS.COLOR_FROM_POSITION);\r\n      mesh.parent.add(colFromPosMesh);\r\n    });\r\n  };\r\n}();\r\nconst createShadowmapMaterial = function () {\r\n  const matValues = {\r\n    colorFromDepth: true,\r\n    orthoCam: true,\r\n    lights: false,\r\n    shadowmap: false,\r\n    fog: false\r\n  };\r\n  return function (root, material) {\r\n    if (!(material instanceof shaders_UberMaterial)) {\r\n      return;\r\n    }\r\n    traverseMeshes(root, [external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments], mesh => {\r\n      if (!mesh.receiveShadow && mesh.material.shadowmap) {\r\n        // remove shadow from non-receivers\r\n        mesh.material.setValues({\r\n          shadowmap: false\r\n        });\r\n      }\r\n      if (!mesh.material.lights) {\r\n        // skip creating shadowmap meshes for materials without lighting\r\n        return;\r\n      }\r\n      if (!mesh.castShadow) {\r\n        // skip creating shadowmap meshes for non-casters\r\n        return;\r\n      }\r\n      if (!gfxutils.belongToSelectLayers(mesh)) {\r\n        // skip creating shadowmap meshes for selection layer\r\n        return;\r\n      }\r\n      const shadowmapMesh = createDerivativeMesh(mesh, matValues, gfxutils.LAYERS.SHADOWMAP);\r\n      shadowmapMesh.isShadowmapMesh = true;\r\n      mesh.parent.add(shadowmapMesh);\r\n    });\r\n  };\r\n}();\r\nfunction removeShadowmapMaterial(root, material) {\r\n  if (!(material instanceof shaders_UberMaterial)) {\r\n    return;\r\n  }\r\n  traverseMeshes(root, [external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments], mesh => {\r\n    if (mesh.isShadowmapMesh) {\r\n      mesh.parent.remove(mesh);\r\n    }\r\n  });\r\n}\r\nfunction forEachMeshInGroup(group, process) {\r\n  function processObj(object) {\r\n    if (object instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh) {\r\n      process(object);\r\n    }\r\n    for (let i = 0, l = object.children.length; i < l; i++) {\r\n      processObj(object.children[i]);\r\n    }\r\n  }\r\n  processObj(group);\r\n}\r\nfunction _countMeshTriangles(mesh) {\r\n  const geom = mesh.geometry;\r\n  if (geom instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferGeometry) {\r\n    const attribs = geom.attributes;\r\n    for (const property in attribs) {\r\n      if (attribs.hasOwnProperty(property) && attribs[property] instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.InstancedBufferAttribute) {\r\n        const currAttr = attribs[property];\r\n        const indexSize = geom.index ? geom.index.array.length / 3 : 0;\r\n        return indexSize * currAttr.array.length / currAttr.itemSize;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n  if (geom instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry) {\r\n    return geom.index ? geom.index.array.length / 3 : 0;\r\n  }\r\n  return geom.faces ? geom.faces.length : 0;\r\n}\r\nfunction countTriangles(group) {\r\n  let totalCount = 0;\r\n  forEachMeshInGroup(group, mesh => {\r\n    totalCount += _countMeshTriangles(mesh);\r\n  });\r\n  return totalCount;\r\n}\r\n/* harmony default export */ const meshutils = ({\r\n  applyTransformsToMeshes,\r\n  processTransparentMaterial,\r\n  processColFromPosMaterial,\r\n  createShadowmapMaterial,\r\n  removeShadowmapMaterial,\r\n  forEachMeshInGroup,\r\n  countTriangles\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/Representation.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  selectors: Representation_selectors\r\n} = chem;\r\nclass Representation {\r\n  constructor(index, mode, colorer, selector) {\r\n    const startMaterialValues = {\r\n      clipPlane: settings.now.draft.clipPlane,\r\n      fogTransparent: settings.now.bg.transparent,\r\n      shadowmap: settings.now.shadow.on,\r\n      shadowmapType: settings.now.shadow.type\r\n    };\r\n    this.index = index;\r\n    this.mode = mode;\r\n    this.colorer = colorer;\r\n    this.selector = selector;\r\n    this.selectorString = '';\r\n    this.count = 0;\r\n    this.material = new shaders_UberMaterial();\r\n    this.material.setValues(startMaterialValues);\r\n    this.material.setUberOptions({\r\n      fogAlpha: settings.now.fogAlpha\r\n    });\r\n    this.materialPreset = gfx_materials.first;\r\n    this.needsRebuild = true;\r\n    this.visible = true;\r\n\r\n    // apply mode params & preset\r\n    this.setMode(mode);\r\n  }\r\n  markAtoms(complex) {\r\n    this.count = complex.markAtoms(this.selector, 1 << this.index);\r\n    this.needsRebuild = true;\r\n    return this.count;\r\n  }\r\n  unmarkAtoms(complex) {\r\n    complex.clearAtomBits(1 << this.index);\r\n    this.count = 0;\r\n  }\r\n  setMode(mode) {\r\n    this.mode = mode;\r\n  }\r\n  setMaterialPreset(preset) {\r\n    this.materialPreset = preset;\r\n    this.material.setUberOptions(preset.uberOptions);\r\n    this.material.setValues(preset.values);\r\n  }\r\n  reset() {\r\n    this.geo = null;\r\n    this.selectionGeo = null;\r\n  }\r\n  buildGeometry(complex) {\r\n    this.reset();\r\n    this.needsRebuild = false;\r\n    if (settings.now.ao) {\r\n      this.material.setValues({\r\n        normalsToGBuffer: settings.now.ao\r\n      });\r\n    }\r\n    this.geo = this.mode.buildGeometry(complex, this.colorer, 1 << this.index, this.material);\r\n    if (this.material.uberOptions.opacity < 0.99 && settings.now.transparency === 'prepass') {\r\n      meshutils.processTransparentMaterial(this.geo, this.material);\r\n    }\r\n    this.geo.visible = this.visible;\r\n    gfxutils.processObjRenderOrder(this.geo, this.materialPreset.id);\r\n    meshutils.processColFromPosMaterial(this.geo, this.material);\r\n    if (settings.now.shadow.on) {\r\n      meshutils.createShadowmapMaterial(this.geo, this.material);\r\n    }\r\n    return this.geo;\r\n  }\r\n  buildSelectionGeometry(mask) {\r\n    let sg = null;\r\n    if (this.geo && 'getSubset' in this.geo) {\r\n      const meshes = this.geo.getSubset(mask);\r\n      if (meshes && meshes.length > 0) {\r\n        sg = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n        sg.matrixAutoUpdate = false;\r\n        sg.matrix = this.geo.matrix;\r\n        for (let j = 0; j < meshes.length; j++) {\r\n          const m = meshes[j];\r\n          sg.add(m);\r\n        }\r\n      }\r\n    }\r\n    if (sg) {\r\n      sg.visible = this.visible;\r\n    }\r\n    this.selectionGeo = sg;\r\n    return this.selectionGeo;\r\n  }\r\n\r\n  /**\r\n   * Create object that represents difference between current and another rep\r\n   * anotherRep could be undefined. In this case everything is reported.\r\n   */\r\n  compare(repSettings) {\r\n    const diff = {};\r\n    const selStr = String(this.selector);\r\n    if (!repSettings || selStr.valueOf() !== String(repSettings.selector).valueOf()) {\r\n      diff.selector = selStr;\r\n    }\r\n    const modeDiff = this.mode.identify();\r\n    if (!repSettings || Array.isArray(modeDiff) || modeDiff !== repSettings.mode) {\r\n      diff.mode = modeDiff;\r\n    }\r\n    const colorerDiff = this.colorer.identify();\r\n    if (!repSettings || Array.isArray(colorerDiff) || colorerDiff !== repSettings.colorer) {\r\n      diff.colorer = colorerDiff;\r\n    }\r\n    if (!repSettings || this.materialPreset.id !== repSettings.material) {\r\n      diff.material = this.materialPreset.id;\r\n    }\r\n    return diff;\r\n  }\r\n\r\n  /**\r\n   * Change representation. Write fields what was changed into new object, return it.\r\n   */\r\n  change(repSettings, complex, mode, color) {\r\n    const diff = {};\r\n\r\n    // modify selector\r\n    if (repSettings.selector) {\r\n      const newSelectorObject = Representation_selectors.parse(repSettings.selector).selector;\r\n      const newSelector = String(newSelectorObject);\r\n      if (this.selectorString !== newSelector) {\r\n        diff.selector = newSelector;\r\n        this.selectorString = newSelector;\r\n        this.selector = newSelectorObject;\r\n        this.markAtoms(complex);\r\n      }\r\n    }\r\n\r\n    // modify mode\r\n    if (repSettings.mode) {\r\n      const newMode = repSettings.mode;\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEqual(this.mode.identify(), newMode)) {\r\n        diff.mode = newMode;\r\n        this.setMode(mode);\r\n      }\r\n    }\r\n\r\n    // modify colorer\r\n    if (repSettings.colorer) {\r\n      const newColorer = repSettings.colorer;\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEqual(this.colorer.identify(), newColorer)) {\r\n        diff.colorer = newColorer;\r\n        this.colorer = color;\r\n      }\r\n    }\r\n\r\n    // modify material\r\n    if (repSettings.material) {\r\n      const newMaterial = repSettings.material;\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEqual(this.materialPreset.id, newMaterial)) {\r\n        diff.material = newMaterial;\r\n        this.setMaterialPreset(gfx_materials.get(repSettings.material));\r\n      }\r\n    }\r\n    return diff;\r\n  }\r\n  show(visible) {\r\n    this.visible = visible;\r\n    if (this.geo) {\r\n      this.geo.visible = visible;\r\n    }\r\n    if (this.selectionGeo) {\r\n      this.selectionGeo.visible = visible;\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const gfx_Representation = (Representation);\r\n;// CONCATENATED MODULE: ./src/ComplexVisualEdit.js\r\n\r\n\r\n\r\n\r\nfunction _traverseComponentGroups(root, component, callback) {\r\n  const {\r\n    children\r\n  } = root;\r\n  if (!children) {\r\n    return;\r\n  }\r\n  for (let i = 0, n = children.length; i < n; ++i) {\r\n    const child = children[i];\r\n    if (child._component === component) {\r\n      callback(child);\r\n    }\r\n    if (child instanceof gfxutils.RCGroup) {\r\n      _traverseComponentGroups(child, component, callback);\r\n    }\r\n  }\r\n}\r\nfunction ComplexEditor() {}\r\nclass ComplexComponentEditor extends ComplexEditor {\r\n  constructor(complexVisual) {\r\n    super();\r\n    this._complexVisual = complexVisual;\r\n    this._inProgress = false;\r\n  }\r\n  begin() {\r\n    const complex = this._complexVisual.getComplex();\r\n\r\n    // init component matrices\r\n    this._componentTransforms = [];\r\n    for (let i = 0; i < complex._components.length; ++i) {\r\n      const component = complex._components[i];\r\n      this._componentTransforms[component._index] = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D();\r\n    }\r\n    this._inProgress = true;\r\n    return true;\r\n  }\r\n  apply() {\r\n    if (!this._inProgress) {\r\n      return;\r\n    }\r\n    const complex = this._complexVisual.getComplex();\r\n    for (let i = 0; i < complex._components.length; ++i) {\r\n      this._bakeComponentTransform(complex._components[i]);\r\n    }\r\n    complex.onAtomPositionChanged();\r\n    this._resetComponentTransform();\r\n    this._complexVisual.finalizeEdit();\r\n  }\r\n  discard() {\r\n    if (!this._inProgress) {\r\n      return;\r\n    }\r\n    this._resetComponentTransform();\r\n    this._complexVisual.finalizeEdit();\r\n  }\r\n  getAltObj() {\r\n    const res = {\r\n      objects: [],\r\n      pivot: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0)\r\n    };\r\n    const visual = this._complexVisual;\r\n    const component = visual.getSelectedComponent();\r\n    if (component === null) {\r\n      return res;\r\n    }\r\n    const selection = this._complexVisual.getSelectionGeo();\r\n    const selectionMask = 1 << visual.getSelectionBit();\r\n    let i;\r\n    let j;\r\n    let reprNode;\r\n    let geo;\r\n\r\n    // find all geo nodes for this component\r\n    _traverseComponentGroups(visual, component, child => {\r\n      res.objects.push(child);\r\n    });\r\n\r\n    // find all selection nodes for this component\r\n    for (i = 0; i < selection.children.length; ++i) {\r\n      reprNode = selection.children[i];\r\n      for (j = 0; j < reprNode.children.length; ++j) {\r\n        geo = reprNode.children[j];\r\n        if (geo.hasOwnProperty('_component') && geo._component === component) {\r\n          res.objects.push(geo);\r\n        }\r\n      }\r\n    }\r\n\r\n    // add dummy object that stores component transformation\r\n    res.objects.push(this._componentTransforms[component._index]);\r\n    const bbmin = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const bbmax = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n    component.forEachResidue(residue => {\r\n      const atoms = residue._atoms;\r\n      for (j = 0; j < atoms.length; ++j) {\r\n        if (atoms[j].mask & selectionMask) {\r\n          bbmin.min(atoms[j].position);\r\n          bbmax.max(atoms[j].position);\r\n        }\r\n      }\r\n    });\r\n    res.pivot.lerpVectors(bbmin, bbmax, 0.5);\r\n    return res;\r\n  }\r\n  _bakeComponentTransform(component) {\r\n    const t = this._componentTransforms[component._index];\r\n    if (t && (!(t.position.x === 0 && t.position.y === 0 && t.position.z === 0) || !(t.quaternion.x === 0 && t.quaternion.y === 0 && t.quaternion.z === 0 && t.quaternion.w === 1))) {\r\n      t.updateMatrix();\r\n      component.forEachResidue(residue => {\r\n        const atoms = residue._atoms;\r\n        for (let j = 0; j < atoms.length; ++j) {\r\n          atoms[j].position.applyMatrix4(t.matrix);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  _resetComponentTransform() {\r\n    const visual = this._complexVisual;\r\n    const selection = this._complexVisual.getSelectionGeo();\r\n    let i;\r\n    let j;\r\n    let reprNode;\r\n    let geo;\r\n    for (i = 0; i < this._componentTransforms.length; ++i) {\r\n      geo = this._componentTransforms[i];\r\n      geo.position.set(0, 0, 0);\r\n      geo.quaternion.set(0, 0, 0, 1);\r\n    }\r\n\r\n    // reset all geo nodes\r\n    for (i = 0; i < visual.children.length; ++i) {\r\n      reprNode = visual.children[i];\r\n      for (j = 0; j < reprNode.children.length; ++j) {\r\n        geo = reprNode.children[j];\r\n        if (geo.hasOwnProperty('_component')) {\r\n          geo.position.set(0, 0, 0);\r\n          geo.quaternion.set(0, 0, 0, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset all selection nodes\r\n    for (i = 0; i < selection.children.length; ++i) {\r\n      reprNode = selection.children[i];\r\n      for (j = 0; j < reprNode.children.length; ++j) {\r\n        geo = reprNode.children[j];\r\n        if (geo.hasOwnProperty('_component')) {\r\n          geo.position.set(0, 0, 0);\r\n          geo.quaternion.set(0, 0, 0, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nclass ComplexFragmentEditor extends ComplexEditor {\r\n  constructor(complexVisual) {\r\n    super();\r\n    this._complexVisual = complexVisual;\r\n    this._inProgress = false;\r\n  }\r\n  begin() {\r\n    const visual = this._complexVisual;\r\n    const selection = this._complexVisual.getSelectionGeo();\r\n    const atoms = this._getSelectionBorderAtoms();\r\n    if (atoms.length < 1 || atoms.length > 2) {\r\n      logger.error('Can only edit fragments with one or two bound atoms.');\r\n      return false;\r\n    }\r\n    this._fragmentBoundAtoms = atoms;\r\n    const selectionMask = 1 << visual.getSelectionBit();\r\n\r\n    // hide selected fragment in main model\r\n    visual.disableSubset(selectionMask, true);\r\n\r\n    // hide selection geo in main model\r\n    for (let k = 0; k < selection.children.length; ++k) {\r\n      selection.children[k].visible = false;\r\n    }\r\n\r\n    // create visible fragment representation to rotate\r\n    const pivotPos = atoms[0].position.clone();\r\n    if (atoms.length === 2) {\r\n      pivotPos.lerp(atoms[1].position, 0.5);\r\n    }\r\n    this._fragmentGeo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n    visual.add(this._fragmentGeo);\r\n    this._fragmentGeo.position.copy(pivotPos);\r\n    this._fragmentSelectionGeo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n    selection.add(this._fragmentSelectionGeo);\r\n    this._fragmentSelectionGeo.position.copy(pivotPos);\r\n    const offset = pivotPos.clone();\r\n    offset.negate();\r\n    for (let i = 0; i < visual.children.length; ++i) {\r\n      const g = visual.children[i];\r\n      if (!('getSubset' in g)) {\r\n        continue;\r\n      }\r\n      const vg = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n      this._fragmentGeo.add(vg);\r\n      const sg = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n      this._fragmentSelectionGeo.add(sg);\r\n      const meshes = g.getSubset(selectionMask, true);\r\n      for (let j = 0; j < meshes.length; j++) {\r\n        const m = meshes[j];\r\n        vg.add(m);\r\n        m.position.copy(offset);\r\n      }\r\n      const smeshes = g.getSubset(selectionMask, true);\r\n      for (let h = 0; h < smeshes.length; h++) {\r\n        const sm = smeshes[h];\r\n        sg.add(sm);\r\n        sm.position.copy(offset);\r\n      }\r\n    }\r\n    gfxutils.applySelectionMaterial(this._fragmentSelectionGeo);\r\n    this._inProgress = true;\r\n    return true;\r\n  }\r\n  apply() {\r\n    if (!this._inProgress) {\r\n      return;\r\n    }\r\n    const visual = this._complexVisual;\r\n    const selectionBit = visual.getSelectionBit();\r\n    const p = this._fragmentGeo.position;\r\n    const m = this._fragmentGeo.matrix.clone();\r\n    m.multiply(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4().makeTranslation(-p.x, -p.y, -p.z));\r\n    this._bakeAtomTransform(m, 1 << selectionBit);\r\n\r\n    // show selected fragment in main model\r\n    visual.enableSubset(1 << selectionBit, true);\r\n    visual.getComplex().onAtomPositionChanged();\r\n    visual.finalizeEdit();\r\n  }\r\n  discard() {\r\n    if (!this._inProgress) {\r\n      return;\r\n    }\r\n    const visual = this._complexVisual;\r\n    const selection = this._complexVisual.getSelectionGeo();\r\n    this._fragmentGeo.parent.remove(this._fragmentGeo);\r\n\r\n    // show selected fragment in main model\r\n    visual.enableSubset(1 << visual.getSelectionBit(), true);\r\n\r\n    // show selection geo in main model (+ remove fragment selection geo)\r\n    for (let i = 0; i < selection.children.length; ++i) {\r\n      const node = selection.children[i];\r\n      if (node.visible) {\r\n        selection.remove(node);\r\n      } else {\r\n        node.visible = true;\r\n      }\r\n    }\r\n    visual.finalizeEdit();\r\n  }\r\n  isFreeRotationAllowed() {\r\n    return this._fragmentBoundAtoms.length < 2;\r\n  }\r\n  getAltObj() {\r\n    const res = {\r\n      objects: [],\r\n      pivot: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0)\r\n    };\r\n    res.objects.push(this._fragmentGeo, this._fragmentSelectionGeo);\r\n    const boundAtoms = this._fragmentBoundAtoms;\r\n    if (boundAtoms.length === 1) {\r\n      if (boundAtoms[0].bonds.length === 1) {\r\n        // single external bond allows rotation about bond axis\r\n        const bond = boundAtoms[0].bonds[0];\r\n        res.axis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3().subVectors(bond._right.position, bond._left.position);\r\n        res.axis.normalize();\r\n        res.axis.transformDirection(this._complexVisual.matrixWorld);\r\n      }\r\n    } else if (boundAtoms.length === 2) {\r\n      // two bound atoms allow rotation only about axis running through their centers\r\n      res.axis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3().subVectors(boundAtoms[1].position, boundAtoms[0].position);\r\n      res.axis.normalize();\r\n      res.axis.transformDirection(this._complexVisual.matrixWorld);\r\n    }\r\n    return res;\r\n  }\r\n  _getSelectionBorderAtoms() {\r\n    const complex = this._complexVisual.getComplex();\r\n    const selectionMask = 1 << this._complexVisual.getSelectionBit();\r\n    const atomHash = {};\r\n    complex.forEachBond(bond => {\r\n      if (bond._left.mask & selectionMask) {\r\n        if ((bond._right.mask & selectionMask) === 0) {\r\n          atomHash[bond._left.index] = 1;\r\n        }\r\n      } else if (bond._right.mask & selectionMask) {\r\n        atomHash[bond._right.index] = 1;\r\n      }\r\n    });\r\n    const atoms = [];\r\n    const keys = Object.keys(atomHash);\r\n    for (let i = 0, n = keys.length; i < n; ++i) {\r\n      const idx = keys[i];\r\n      atoms.push(complex._atoms[idx]);\r\n    }\r\n    return atoms;\r\n  }\r\n  _bakeAtomTransform(matrix, mask) {\r\n    this._complexVisual.getComplex().forEachAtom(atom => {\r\n      if (atom.mask & mask) {\r\n        atom.position.applyMatrix4(matrix);\r\n      }\r\n    });\r\n  }\r\n}\r\n/* harmony default export */ const ComplexVisualEdit = ({\r\n  ComponentEditor: ComplexComponentEditor,\r\n  FragmentEditor: ComplexFragmentEditor\r\n});\r\n;// CONCATENATED MODULE: ./src/ComplexVisual.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  selectors: ComplexVisual_selectors\r\n} = chem;\r\nfunction lookupAndCreate(entityList, specs) {\r\n  if (!Array.isArray(specs)) {\r\n    specs = [specs];\r\n  }\r\n  const [id, opts] = specs;\r\n  const Entity = entityList.get(id) || entityList.first;\r\n  return new Entity(opts);\r\n}\r\nclass ComplexVisual extends src_Visual {\r\n  constructor(name, dataSource) {\r\n    super(name, dataSource);\r\n    this._complex = dataSource;\r\n\r\n    /** @type {Representation[]} */\r\n    this._reprList = [];\r\n    /** @type {?Representation} */\r\n    this._repr = null;\r\n    this._reprListChanged = true;\r\n    this._selectionBit = 0;\r\n    this._reprUsedBits = 0;\r\n    this._selectionCount = 0;\r\n    this._selectionGeometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n  }\r\n  getBoundaries() {\r\n    return this._complex.getBoundaries();\r\n  }\r\n  release() {\r\n    if (this._selectionGeometry.parent) {\r\n      this._selectionGeometry.remove(this._selectionGeometry);\r\n    }\r\n    src_Visual.prototype.release.call(this);\r\n  }\r\n  getComplex() {\r\n    return this._complex;\r\n  }\r\n  getSelectionCount() {\r\n    return this._selectionCount;\r\n  }\r\n  getSelectionGeo() {\r\n    return this._selectionGeometry;\r\n  }\r\n  getSelectionBit() {\r\n    return this._selectionBit;\r\n  }\r\n  getEditor() {\r\n    return this._editor;\r\n  }\r\n  resetReps(reps) {\r\n    // Create all necessary representations\r\n    if (this._complex) {\r\n      this._complex.clearAtomBits(~0);\r\n    }\r\n    this._reprListChanged = true;\r\n    this._reprUsedBits = 0;\r\n    this._reprList.length = reps.length;\r\n    for (let i = 0, n = reps.length; i < n; ++i) {\r\n      const rep = reps[i];\r\n      let selector;\r\n      let selectorString;\r\n      if (typeof rep.selector === 'string') {\r\n        selectorString = rep.selector;\r\n        ({\r\n          selector\r\n        } = ComplexVisual_selectors.parse(selectorString));\r\n      } else if (typeof rep.selector === 'undefined') {\r\n        selectorString = settings.now.presets.default[0].selector;\r\n        ({\r\n          selector\r\n        } = ComplexVisual_selectors.parse(selectorString));\r\n      } else {\r\n        ({\r\n          selector\r\n        } = rep);\r\n        selectorString = selector.toString();\r\n      }\r\n      const mode = lookupAndCreate(gfx_modes, rep.mode);\r\n      const colorer = lookupAndCreate(gfx_colorers, rep.colorer);\r\n      const material = gfx_materials.get(rep.material) || gfx_materials.first;\r\n      this._reprList[i] = new gfx_Representation(i, mode, colorer, selector);\r\n      this._reprList[i].setMaterialPreset(material);\r\n      this._reprList[i].selectorString = selectorString;\r\n      if (this._complex) {\r\n        this._complex.markAtoms(selector, 1 << i);\r\n      }\r\n      this._reprUsedBits |= 1 << i;\r\n    }\r\n    this._repr = reps.length > 0 ? this._reprList[0] : null;\r\n    this._selectionBit = reps.length;\r\n    this._reprUsedBits |= 1 << this._selectionBit; // selection uses one bit\r\n    this._selectionCount = 0;\r\n    if (this._complex) {\r\n      this._complex.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get number of representations created so far.\r\n   * @returns {number} Number of reps.\r\n   */\r\n  repCount() {\r\n    return this._reprList.length;\r\n  }\r\n\r\n  /**\r\n   * Get or set the current representation index.\r\n   * @param {number=} index - Zero-based index, up to {@link Miew#repCount()}. Defaults to the current one.\r\n   * @returns {number} The current index.\r\n   */\r\n  repCurrent(index) {\r\n    if (index >= 0 && index < this._reprList.length) {\r\n      this._repr = this._reprList[index];\r\n    } else {\r\n      index = this._reprList.indexOf(this._repr);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Get or set representation by index.\r\n   * @param {number=} index - Zero-based index, up to {@link Miew#repCount()}. Defaults to the current one.\r\n   * @param {object=} rep - Optional representation description.\r\n   * @param {string=} rep.selector - Selector string.\r\n   * @param {string=} rep.mode - Mode id.\r\n   * @param {string=} rep.colorer - Colorer id.\r\n   * @param {string=} rep.material - Material id.\r\n   * @returns {Object} {desc, index, status} field desc contains rep description, index - index of correspondent rep,\r\n   * status - one of three strings: 'created', 'changed', ''. 'created' means new rep was created during this function,\r\n   * 'changed' - rep was changed during this function. '' - something else.\r\n   */\r\n  rep(index, rep) {\r\n    // if index is missing then it is the current\r\n    if (!rep && (index === undefined || index instanceof Object)) {\r\n      rep = index;\r\n      index = this.repCurrent();\r\n    }\r\n\r\n    // fail if out of bounds\r\n    if (index < 0 || index > this._reprList.length) {\r\n      logger.error(`Rep ${index} does not exist!`);\r\n      return null;\r\n    }\r\n\r\n    // a special case of adding just after the end\r\n    if (index === this._reprList.length) {\r\n      const res = this.repAdd(rep);\r\n      logger.warn(`Rep ${index} does not exist! New representation was created.`);\r\n      return {\r\n        desc: res.desc,\r\n        index,\r\n        status: 'created'\r\n      };\r\n    }\r\n\r\n    // gather description\r\n    const target = this._reprList[index];\r\n    const desc = {\r\n      selector: target.selectorString,\r\n      mode: target.mode.identify(),\r\n      colorer: target.colorer.identify(),\r\n      material: target.materialPreset.id\r\n    };\r\n\r\n    // modification is requested\r\n    if (rep) {\r\n      // modify\r\n      const diff = target.change(rep, this._complex, lookupAndCreate(gfx_modes, rep.mode), lookupAndCreate(gfx_colorers, rep.colorer));\r\n\r\n      // something was changed\r\n      if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n        target.needsRebuild = true;\r\n        for (const key in diff) {\r\n          if (diff.hasOwnProperty(key)) {\r\n            desc[key] = diff[key];\r\n            logger.debug(`rep[${index}].${key} changed to ${diff[key]}`);\r\n          }\r\n        }\r\n\r\n        // safety trick: lower resolution for surface modes\r\n        if (diff.mode && target.mode.isSurface && (settings.now.resolution === 'ultra' || settings.now.resolution === 'high')) {\r\n          logger.report('Surface resolution was changed to \"medium\" to avoid hang-ups.');\r\n          settings.set('resolution', 'medium');\r\n        }\r\n        return {\r\n          desc,\r\n          index,\r\n          status: 'changed'\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      desc,\r\n      index,\r\n      status: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get representation (not just description) by index.\r\n   * @param {number=} index - Zero-based index, up to {@link Miew#repCount()}. Defaults to the current one.\r\n   * @returns {?object} Representation.\r\n   */\r\n  repGet(index) {\r\n    // if index is missing then it is the current\r\n    if (index === undefined || index instanceof Object) {\r\n      index = this.repCurrent();\r\n    }\r\n\r\n    // fail if out of bounds\r\n    if (index < 0 || index >= this._reprList.length) {\r\n      return null;\r\n    }\r\n    return this._reprList[index];\r\n  }\r\n  _getFreeReprIdx() {\r\n    let bits = this._reprUsedBits;\r\n    for (let i = 0; i <= ComplexVisual.NUM_REPRESENTATION_BITS; ++i, bits >>= 1) {\r\n      if ((bits & 1) === 0) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Add new representation.\r\n   * @param {object=} rep - Representation description.\r\n   * @returns {Object} {desc, index} field desc contains added rep description, index - index of this rep.\r\n   */\r\n  repAdd(rep) {\r\n    if (this._reprList.length >= ComplexVisual.NUM_REPRESENTATION_BITS) {\r\n      return null;\r\n    }\r\n    const newSelectionBit = this._getFreeReprIdx();\r\n    if (newSelectionBit < 0) {\r\n      return null; // no more slots for representations\r\n    }\r\n    const originalSelection = this.buildSelectorFromMask(1 << this._selectionBit);\r\n\r\n    // Fill in default values\r\n    const def = settings.now.presets.default[0];\r\n    const desc = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge({\r\n      selector: def.selector,\r\n      mode: def.mode,\r\n      colorer: def.colorer,\r\n      material: def.material\r\n    }, rep);\r\n    const selector = typeof desc.selector === 'string' ? ComplexVisual_selectors.parse(desc.selector).selector : desc.selector;\r\n    const target = new gfx_Representation(this._selectionBit, lookupAndCreate(gfx_modes, desc.mode), lookupAndCreate(gfx_colorers, desc.colorer), selector);\r\n    target.selectorString = selector.toString();\r\n    target.setMaterialPreset(gfx_materials.get(desc.material));\r\n    target.markAtoms(this._complex);\r\n    this._reprList.push(target);\r\n\r\n    // change selection bit\r\n    this._selectionBit = newSelectionBit;\r\n    this._reprUsedBits |= 1 << this._selectionBit;\r\n\r\n    // restore selection using new selection bit\r\n    this._complex.markAtoms(originalSelection, 1 << this._selectionBit);\r\n    return {\r\n      desc,\r\n      index: this._reprList.length - 1\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Remove representation.\r\n   * @param {number=} index - Zero-based representation index.\r\n   */\r\n  repRemove(index) {\r\n    if (index === undefined) {\r\n      index = this.repCurrent();\r\n    }\r\n\r\n    // catch out of bounds case\r\n    let count = this._reprList.length;\r\n    if (index < 0 || index >= count || count <= 1) {\r\n      // do not allow to remove the single rep\r\n      return;\r\n    }\r\n    const target = this._reprList[index];\r\n    target.unmarkAtoms(this._complex);\r\n    this._reprUsedBits &= ~(1 << target.index);\r\n    this._reprList.splice(index, 1);\r\n\r\n    // update current rep\r\n    if (target === this._repr) {\r\n      --count;\r\n      index = index < count ? index : count - 1;\r\n      this._repr = this._reprList[index];\r\n    }\r\n    this._reprListChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Hide representation.\r\n   * @param {number} index - Zero-based representation index.\r\n   * @param {boolean=} hide - Specify false to make rep visible, true to hide (by default).\r\n   */\r\n  repHide(index, hide) {\r\n    if (hide === undefined) {\r\n      hide = true;\r\n    }\r\n\r\n    // fail if out of bounds\r\n    if (index < 0 || index >= this._reprList.length) {\r\n      return;\r\n    }\r\n    const target = this._reprList[index];\r\n    target.show(!hide);\r\n  }\r\n\r\n  /**\r\n   * Select atoms with selector\r\n   * @param {Selector} selector - selector\r\n   * @param {boolean=} append - true to append selection atoms to current selection, false to rewrite selection\r\n   */\r\n  select(selector, append) {\r\n    if (append) {\r\n      this._selectionCount += this._complex.markAtomsAdditionally(selector, 1 << this._selectionBit);\r\n    } else {\r\n      this._selectionCount = this._complex.markAtoms(selector, 1 << this._selectionBit);\r\n    }\r\n    this._complex.updateStructuresMask();\r\n    this.rebuildSelectionGeometry();\r\n  }\r\n  resetSelectionMask() {\r\n    if (this._selectionCount !== 0) {\r\n      this._selectionCount = 0;\r\n      if (this._complex) {\r\n        this._complex.clearAtomBits(1 << this._selectionBit);\r\n      }\r\n    }\r\n  }\r\n  updateSelectionMask(pickedObj) {\r\n    const self = this;\r\n    const {\r\n      atom\r\n    } = pickedObj;\r\n    let {\r\n      residue,\r\n      chain,\r\n      molecule\r\n    } = pickedObj;\r\n    const setMask = 1 << this._selectionBit;\r\n    const clearMask = ~setMask;\r\n    if (atom) {\r\n      residue = atom.residue;\r\n      chain = residue._chain;\r\n      molecule = residue._molecule;\r\n      if (atom.mask & setMask) {\r\n        atom.mask &= clearMask;\r\n        residue._mask &= clearMask;\r\n        chain._mask &= clearMask;\r\n        if (molecule) {\r\n          molecule.mask &= clearMask;\r\n        }\r\n        this._selectionCount--;\r\n      } else {\r\n        atom.mask |= setMask;\r\n        this._selectionCount++;\r\n\r\n        // select residue if all atoms in it are selected\r\n        residue.collectMask();\r\n        // select chain and molecule if all residues in it are selected\r\n        chain.collectMask();\r\n        if (molecule) {\r\n          molecule.collectMask();\r\n        }\r\n      }\r\n    } else if (residue) {\r\n      chain = residue._chain;\r\n      molecule = residue._molecule;\r\n      if (residue._mask & setMask) {\r\n        residue._mask &= clearMask;\r\n        chain._mask &= clearMask;\r\n        residue.forEachAtom(a => {\r\n          if (a.mask & setMask) {\r\n            a.mask &= clearMask;\r\n            self._selectionCount--;\r\n          }\r\n        });\r\n      } else {\r\n        residue._mask |= setMask;\r\n        residue.forEachAtom(a => {\r\n          if (!(a.mask & setMask)) {\r\n            a.mask |= setMask;\r\n            self._selectionCount++;\r\n          }\r\n        });\r\n\r\n        // select chain and molecule if all residues in it are selected\r\n        chain.collectMask();\r\n        if (molecule) {\r\n          molecule.collectMask();\r\n        }\r\n      }\r\n    } else if (chain || molecule) {\r\n      const obj = chain || molecule;\r\n      if (obj._mask & setMask) {\r\n        obj._mask &= clearMask;\r\n        obj.forEachResidue(r => {\r\n          if (r._mask & setMask) {\r\n            r._mask &= clearMask;\r\n            r.forEachAtom(a => {\r\n              if (a.mask & setMask) {\r\n                a.mask &= clearMask;\r\n                self._selectionCount--;\r\n              }\r\n            });\r\n            r._mask &= clearMask;\r\n          }\r\n        });\r\n      } else {\r\n        obj._mask |= setMask;\r\n        obj.forEachResidue(r => {\r\n          if (!(r._mask & setMask)) {\r\n            r._mask |= setMask;\r\n            r.forEachAtom(a => {\r\n              if (!(a.mask & setMask)) {\r\n                a.mask |= setMask;\r\n                self._selectionCount++;\r\n              }\r\n            });\r\n            const otherObj = chain ? r.getMolecule() : r.getChain();\r\n            if (otherObj) {\r\n              otherObj.collectMask();\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.resetSelectionMask();\r\n    }\r\n  }\r\n  expandSelection() {\r\n    const self = this;\r\n    const selectionMask = 1 << this._selectionBit;\r\n    const tmpMask = 1 << 31;\r\n\r\n    // mark atoms to add\r\n    this._complex.forEachBond(bond => {\r\n      if (bond._left.mask & selectionMask) {\r\n        if ((bond._right.mask & selectionMask) === 0) {\r\n          bond._right.mask |= tmpMask;\r\n        }\r\n      } else if (bond._right.mask & selectionMask) {\r\n        bond._left.mask |= tmpMask;\r\n      }\r\n    });\r\n\r\n    // select marked atoms\r\n    const deselectionMask = ~tmpMask;\r\n    this._complex.forEachAtom(atom => {\r\n      if (atom.mask & tmpMask) {\r\n        atom.mask = atom.mask & deselectionMask | selectionMask;\r\n        ++self._selectionCount;\r\n      }\r\n    });\r\n    this._complex.updateStructuresMask();\r\n  }\r\n  shrinkSelection() {\r\n    const self = this;\r\n    const selectionMask = 1 << this._selectionBit;\r\n    const tmpMask = 1 << 31;\r\n\r\n    // mark atoms neighbouring to unselected ones\r\n    this._complex.forEachBond(bond => {\r\n      if (bond._left.mask & selectionMask) {\r\n        if ((bond._right.mask & selectionMask) === 0) {\r\n          bond._left.mask |= tmpMask;\r\n        }\r\n      } else if (bond._right.mask & selectionMask) {\r\n        bond._right.mask |= tmpMask;\r\n      }\r\n    });\r\n\r\n    // mark hanging atoms\r\n    this._complex.forEachAtom(atom => {\r\n      if (atom.mask & selectionMask && atom.bonds.length === 1) {\r\n        atom.mask |= tmpMask;\r\n      }\r\n    });\r\n\r\n    // deselect marked atoms\r\n    const deselectionMask = ~(selectionMask | tmpMask);\r\n    this._complex.forEachAtom(atom => {\r\n      if (atom.mask & tmpMask) {\r\n        atom.mask &= deselectionMask;\r\n        --self._selectionCount;\r\n      }\r\n    });\r\n    this._complex.updateStructuresMask();\r\n  }\r\n  getSelectedComponent() {\r\n    const selectionMask = 1 << this._selectionBit;\r\n    let component = null;\r\n    let multiple = false;\r\n\r\n    // find which component is selected (exclusively)\r\n    this._complex.forEachAtom(atom => {\r\n      if (atom.mask & selectionMask) {\r\n        if (component === null) {\r\n          component = atom.residue._component;\r\n        } else if (component !== atom.residue._component) {\r\n          multiple = true;\r\n        }\r\n      }\r\n    });\r\n    return multiple ? null : component;\r\n  }\r\n  getSelectionCenter(center, includesAtom, selRule) {\r\n    center.set(0.0, 0.0, 0.0);\r\n    let count = 0;\r\n    this._complex.forEachAtom(atom => {\r\n      if (includesAtom(atom, selRule)) {\r\n        center.add(atom.position);\r\n        count++;\r\n      }\r\n    });\r\n    if (count === 0) {\r\n      return false;\r\n    }\r\n    center.divideScalar(count);\r\n    center.applyMatrix4(this.matrix);\r\n    return true;\r\n  }\r\n  needsRebuild() {\r\n    if (this._reprListChanged) {\r\n      return true;\r\n    }\r\n    const reprList = this._reprList;\r\n    for (let i = 0, n = reprList.length; i < n; ++i) {\r\n      const repr = reprList[i];\r\n      if (repr.needsRebuild) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Rebuild molecule geometry asynchronously.\r\n   */\r\n  rebuild() {\r\n    const self = this;\r\n\r\n    // Destroy current geometry\r\n    gfxutils.clearTree(this);\r\n    return new Promise(resolve => {\r\n      // Nothing to do?\r\n      const complex = self._complex;\r\n      if (!complex) {\r\n        resolve();\r\n        return;\r\n      }\r\n      let errorOccured = false;\r\n      setTimeout(() => {\r\n        console.time('build');\r\n        const reprList = self._reprList;\r\n        const palette = gfx_palettes.get(settings.now.palette) || gfx_palettes.first;\r\n        let hasGeometry = false;\r\n        for (let i = 0, n = reprList.length; i < n; ++i) {\r\n          const repr = reprList[i];\r\n          repr.colorer.palette = palette;\r\n          if (repr.needsRebuild) {\r\n            repr.reset();\r\n            try {\r\n              repr.buildGeometry(complex);\r\n            } catch (e) {\r\n              if (e instanceof utils.OutOfMemoryError) {\r\n                repr.needsRebuild = false;\r\n                repr.reset();\r\n                logger.error(`Not enough memory to build geometry for representation ${repr.index + 1}`);\r\n                errorOccured = true;\r\n              } else {\r\n                throw e;\r\n              }\r\n            }\r\n            if (false) {}\r\n          }\r\n          hasGeometry = errorOccured || hasGeometry || gfxutils.groupHasGeometryToRender(repr.geo);\r\n          if (repr.geo) {\r\n            self.add(repr.geo);\r\n          }\r\n        }\r\n        self._reprListChanged = false;\r\n        console.timeEnd('build');\r\n        resolve();\r\n      }, 10);\r\n    });\r\n  }\r\n  setNeedsRebuild() {\r\n    // invalidate all representations\r\n    const reprList = this._reprList;\r\n    for (let i = 0, n = reprList.length; i < n; ++i) {\r\n      reprList[i].needsRebuild = true;\r\n    }\r\n  }\r\n  rebuildSelectionGeometry() {\r\n    const mask = 1 << this._selectionBit;\r\n    gfxutils.clearTree(this._selectionGeometry);\r\n    for (let i = 0, n = this._reprList.length; i < n; ++i) {\r\n      const repr = this._reprList[i];\r\n      const sg = repr.buildSelectionGeometry(mask);\r\n      if (!sg) {\r\n        continue;\r\n      }\r\n      this._selectionGeometry.add(sg);\r\n      for (let j = 0; j < sg.children.length; j++) {\r\n        const m = sg.children[j];\r\n\r\n        // copy component transform (that's not applied yet)\r\n        // TODO make this code obsolete, accessing editor is bad\r\n        if (this._editor && this._editor._componentTransforms) {\r\n          const t = this._editor._componentTransforms[m._component._index];\r\n          if (t) {\r\n            m.position.copy(t.position);\r\n            m.quaternion.copy(t.quaternion);\r\n          }\r\n        }\r\n      }\r\n      gfxutils.applySelectionMaterial(sg);\r\n    }\r\n  }\r\n  _buildSelectorFromSortedLists(atoms, residues, chains) {\r\n    const complex = this._complex;\r\n    function optimizeList(list) {\r\n      const result = [];\r\n      let k = 0;\r\n      let first = NaN;\r\n      let last = NaN;\r\n      for (let i = 0, n = list.length; i < n; ++i) {\r\n        const value = list[i];\r\n        if (value === last + 1) {\r\n          last = value;\r\n        } else {\r\n          if (!Number.isNaN(first)) {\r\n            result[k++] = new ComplexVisual_selectors.Range(first, last);\r\n          }\r\n          first = last = value;\r\n        }\r\n      }\r\n      if (!Number.isNaN(first)) {\r\n        result[k] = new ComplexVisual_selectors.Range(first, last);\r\n      }\r\n      return result;\r\n    }\r\n    let expression = null;\r\n    if (chains.length === complex._chains.length) {\r\n      expression = ComplexVisual_selectors.all();\r\n    } else {\r\n      let selector;\r\n      if (chains.length > 0) {\r\n        selector = ComplexVisual_selectors.chain(chains);\r\n        expression = expression ? ComplexVisual_selectors.or(expression, selector) : selector; // NOSONAR\r\n      }\r\n      if (Object.keys(residues).length > 0) {\r\n        for (const ch in residues) {\r\n          if (residues.hasOwnProperty(ch)) {\r\n            selector = ComplexVisual_selectors.and(ComplexVisual_selectors.chain(ch), ComplexVisual_selectors.residx(optimizeList(residues[ch])));\r\n            expression = expression ? ComplexVisual_selectors.or(expression, selector) : selector;\r\n          }\r\n        }\r\n      }\r\n      if (atoms.length > 0) {\r\n        selector = ComplexVisual_selectors.serial(optimizeList(atoms));\r\n        expression = expression ? ComplexVisual_selectors.or(expression, selector) : selector;\r\n      }\r\n      if (!expression) {\r\n        expression = ComplexVisual_selectors.none();\r\n      }\r\n    }\r\n    return expression;\r\n  }\r\n  buildSelectorFromMask(mask) {\r\n    const complex = this._complex;\r\n    const chains = [];\r\n    const residues = {};\r\n    const atoms = [];\r\n    complex.forEachChain(chain => {\r\n      if (chain._mask & mask) {\r\n        chains.push(chain._name);\r\n      }\r\n    });\r\n    complex.forEachResidue(residue => {\r\n      if (residue._mask & mask && !(residue._chain._mask & mask)) {\r\n        const c = residue._chain._name;\r\n        if (!(c in residues)) {\r\n          residues[c] = [residue._index];\r\n        } else {\r\n          residues[c].push(residue._index);\r\n        }\r\n      }\r\n    });\r\n    complex.forEachAtom(atom => {\r\n      if (atom.mask & mask && !(atom.residue._mask & mask)) {\r\n        atoms.push(atom.serial);\r\n      }\r\n    });\r\n    return this._buildSelectorFromSortedLists(atoms, residues, chains);\r\n  }\r\n  forSelectedResidues(process) {\r\n    const selectionMask = 1 << this._selectionBit;\r\n    this._complex.forEachResidue(residue => {\r\n      if (residue._mask & selectionMask) {\r\n        process(residue);\r\n      }\r\n    });\r\n  }\r\n  beginComponentEdit() {\r\n    if (this._editor) {\r\n      return null;\r\n    }\r\n    const editor = new ComplexVisualEdit.ComponentEditor(this);\r\n    if (!editor.begin()) {\r\n      return null;\r\n    }\r\n    this._editor = editor;\r\n    return editor;\r\n  }\r\n  beginFragmentEdit() {\r\n    if (this._editor) {\r\n      return null;\r\n    }\r\n    const editor = new ComplexVisualEdit.FragmentEditor(this);\r\n    if (!editor.begin()) {\r\n      return null;\r\n    }\r\n    this._editor = editor;\r\n    return editor;\r\n  }\r\n\r\n  // should only be called by editors\r\n  finalizeEdit() {\r\n    this._editor = null;\r\n  }\r\n  setMaterialValues(values) {\r\n    let needTraverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n    let process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\r\n    for (let i = 0, n = this._reprList.length; i < n; ++i) {\r\n      const rep = this._reprList[i];\r\n      rep.material.setValues(values);\r\n      if (needTraverse) {\r\n        rep.geo.traverse(object => {\r\n          if (object instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh) {\r\n            object.material.setValues(values);\r\n            if (process !== undefined) {\r\n              process(object);\r\n            }\r\n            object.material.needsUpdate = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  setUberOptions(values) {\r\n    for (let i = 0, n = this._reprList.length; i < n; ++i) {\r\n      const rep = this._reprList[i];\r\n      rep.material.setUberOptions(values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build selector that contains all atoms within given distance from group of atoms\r\n   * @param {Selector} selector - selector describing source group of atoms\r\n   * @param {number} radius - distance\r\n   * @returns {Selector} selector describing result group of atoms\r\n   */\r\n  within(selector, radius) {\r\n    const vw = this._complex.getVoxelWorld();\r\n    if (vw === null) {\r\n      return false;\r\n    }\r\n\r\n    // mark atoms of the group as selected\r\n    const selectionMask = 1 << this._selectionBit;\r\n    this._complex.markAtoms(selector, selectionMask);\r\n\r\n    // mark all atoms within distance as selected\r\n    if (vw) {\r\n      vw.forEachAtomWithinDistFromMasked(this._complex, selectionMask, Number(radius), atom => {\r\n        atom.mask |= selectionMask;\r\n      });\r\n    }\r\n\r\n    // update selection count\r\n    this._selectionCount = this._complex.countAtomsByMask(selectionMask);\r\n\r\n    // update secondary structure mask\r\n    this._complex.updateStructuresMask();\r\n    return this.buildSelectorFromMask(selectionMask);\r\n  }\r\n}\r\n// 32 bits = 30 bits for reps + 1 for selection + 1 for selection expansion\r\nComplexVisual.NUM_REPRESENTATION_BITS = 30;\r\n/* harmony default export */ const src_ComplexVisual = (ComplexVisual);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/VolumeFaces.vert\r\nconst VolumeFaces_namespaceObject = \"varying vec3 pos;\\r\\n\\r\\nvoid main() {\\r\\n  // we're assuming local position is in [-0.5, 0.5]\\r\\n  // we need to offset it to be represented in RGB\\r\\n  pos = position.xyz + 0.5;\\r\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\r\\n}\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/VolumeFaces.frag\r\nconst gfx_shaders_VolumeFaces_namespaceObject = \"varying vec3 pos;\\r\\n\\r\\nvoid main() {\\r\\n  gl_FragColor = vec4(pos, 0.5);\\r\\n}\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Volume.vert\r\nconst shaders_Volume_namespaceObject = \"varying vec4 screenSpacePos;\\r\\n\\r\\nvoid main() {\\r\\n  screenSpacePos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\r\\n  gl_Position = screenSpacePos;\\r\\n}\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Volume.frag\r\nconst src_gfx_shaders_Volume_namespaceObject = \"uniform mat4 projectionMatrix;\\r\\n\\r\\n// 3D volume texture\\r\\nuniform vec3 volumeDim;    // volume dimensions, pixels\\r\\nuniform sampler2D tileTex; // tiled texture containing all Z-slices of a 3D data\\r\\nuniform vec2 tileTexSize;  // size of tiled texture, pixels\\r\\nuniform vec2 tileStride;   // UV stride between slices in tile tex, pixels\\r\\n\\r\\nuniform vec3 boxAngles;//value of angles({x: alpha, y:beta, z:gamma}) types 1 - if angle is obtuse, 0 - if acute\\r\\nuniform vec3 delta; //Projection box delta's from non-orthogonal origin axes; {x: XY, y : XZ, z: YZ}\\r\\n\\r\\nuniform vec3 _isoLevel0;\\r\\nuniform float _flipV;\\r\\nuniform sampler2D _BFLeft;\\r\\nuniform sampler2D _BFRight;\\r\\nuniform sampler2D _FFLeft;\\r\\nuniform sampler2D _FFRight;\\r\\nuniform sampler2D _WFFLeft;\\r\\nuniform sampler2D _WFFRight;\\r\\n\\r\\nvarying vec4 screenSpacePos;\\r\\n\\r\\n#define NO_COLOR vec4(0., 0., 0., 0.)\\r\\n\\r\\nvec4 sample3DTexture(vec3 texCoord) {\\r\\n  // a pair of Z slices is determined by nearest slice border\\r\\n  float zSliceBorder = floor(texCoord.z * volumeDim.z + 0.5);\\r\\n  float zSliceNumber1 = max(zSliceBorder - 1.0, 0.0);\\r\\n  float zSliceNumber2 = min(zSliceBorder, volumeDim.z - 1.0);\\r\\n\\r\\n  float rowTiles = floor(tileTexSize.x / tileStride.x);\\r\\n\\r\\n  // calculate coords in tile texture for both slices\\r\\n  vec2 tileOffset = vec2(mod(zSliceNumber1, rowTiles), floor(zSliceNumber1 / rowTiles));\\r\\n  vec2 texCoordSlice1 = (texCoord.xy * volumeDim.xy + tileOffset * tileStride) / tileTexSize.xy;\\r\\n  tileOffset = vec2(mod(zSliceNumber2, rowTiles), floor(zSliceNumber2 / rowTiles));\\r\\n  vec2 texCoordSlice2 = (texCoord.xy * volumeDim.xy + tileOffset * tileStride) / tileTexSize.xy;\\r\\n\\r\\n  // bilinear filtering\\r\\n  vec4 colorSlice1 = texture2D(tileTex, texCoordSlice1);\\r\\n  vec4 colorSlice2 = texture2D(tileTex, texCoordSlice2);\\r\\n  float weightSlice2 = texCoord.z * volumeDim.z - (zSliceNumber1 + 0.5);\\r\\n  return mix(colorSlice1, colorSlice2, weightSlice2);\\r\\n}\\r\\n\\r\\nvec4 sample3DTextureInclined(vec3 boxCoord) { // delta:{ x: XY, y : XZ, z: YZ }\\r\\n  vec3 textCoord = boxCoord;\\r\\n  vec2 currDelta = mix(boxCoord.zz, vec2(1., 1.) - boxCoord.zz, boxAngles.yx) * delta.yz;\\r\\n\\r\\n  textCoord.y = (boxCoord.y  - currDelta.y) / (1. - delta.z);\\r\\n  if (textCoord.y < 0.0 || textCoord.y > 1.0)\\r\\n    return NO_COLOR;\\r\\n\\r\\n  currDelta.x += mix(textCoord.y, 1.0 - textCoord.y, boxAngles.z) * delta.x;\\r\\n\\r\\n  textCoord.x = (boxCoord.x - currDelta.x) / (1. - delta.x - delta.y);\\r\\n  if (textCoord.x < 0.0 || textCoord.x > 1.0)\\r\\n    return NO_COLOR;\\r\\n\\r\\n  return sample3DTexture(textCoord);\\r\\n}\\r\\n\\r\\nfloat CalcColor(vec3 iter, vec3 dir) {\\r\\n  float d = 1. / 128.;\\r\\n  vec3 dx = vec3(d, 0.0, 0.0);\\r\\n  vec3 dy = vec3(0.0, d, 0.0);\\r\\n  vec3 dz = vec3(0.0, 0.0, d);\\r\\n\\r\\n  // #Opt: coordInc.x:(iter + dx).x > 1. ? 0.: sample3DTextureInclined(iter + dx).x,\\r\\n  vec3 coordInc = mix(\\r\\n    vec3(\\r\\n      sample3DTextureInclined(iter + dx).x,\\r\\n      sample3DTextureInclined(iter + dy).x,\\r\\n      sample3DTextureInclined(iter + dz).x\\r\\n    ),\\r\\n    vec3(0. ,0. , 0.),\\r\\n    vec3(floor((iter + dx).x), floor((iter + dy).y), floor((iter + dz).z))\\r\\n  );\\r\\n\\r\\n  // #Opt: coordDec.x:(iter - dx).x < 0. ? 0.: sample3DTextureInclined(iter - dx).x,\\r\\n  vec3 coordDec = mix(\\r\\n    vec3(0. ,0. , 0.),\\r\\n    vec3(\\r\\n      sample3DTextureInclined(iter - dx).x,\\r\\n      sample3DTextureInclined(iter - dy).x,\\r\\n      sample3DTextureInclined(iter - dz).x\\r\\n    ),\\r\\n    vec3(ceil((iter - dx).x), ceil((iter - dy).y), ceil((iter - dz).z))\\r\\n  );\\r\\n\\r\\n  vec3 N = normalize(coordInc - coordDec);\\r\\n  float dif = max(0.0, dot(N, dir));\\r\\n  return dif;\\r\\n}\\r\\n\\r\\nvec3 AccuracyIso(vec3 left, vec3 right, float volLeft, float threshold) {\\r\\n  for (int i = 0; i < 5; i++) {\\r\\n    vec3 iterator = 0.5 * (left + right);\\r\\n    float vol = sample3DTextureInclined(iterator).r;\\r\\n    if ((volLeft - threshold) * (vol - threshold) < 0.)\\r\\n      right = iterator;\\r\\n    else\\r\\n      left = iterator;\\r\\n  }\\r\\n  return 0.5 * (left + right);\\r\\n}\\r\\n\\r\\nvec3 CorrectIso(vec3 left, vec3 right, float tr) {\\r\\n  for (int j = 0; j < 5; j++) {\\r\\n    vec3 iterator = 0.5 * (left + right);\\r\\n    float vol = sample3DTextureInclined(iterator).r;\\r\\n    if (vol < tr)\\r\\n      right = iterator;\\r\\n    else\\r\\n      left = iterator;\\r\\n  }\\r\\n  return 0.5 * (left + right);\\r\\n}\\r\\n\\r\\nvec4 GetIso1(vec3 start, vec3 back, float molDist, vec3 dir, float tr, int count) {\\r\\n  float vol, stepSize = (float(count) + 2.) / float(STEPS_COUNT);\\r\\n  vec3 step = stepSize * dir, iterator = start, left, right;\\r\\n  vec4 acc = NO_COLOR;\\r\\n\\r\\n  for (int i = 0; i < STEPS_COUNT; i++) {\\r\\n    iterator = iterator + step;\\r\\n    vol = sample3DTextureInclined(iterator).r;\\r\\n    if (length(iterator - back) <= stepSize || (vol > tr))\\r\\n      break;\\r\\n  }\\r\\n\\r\\n  if (vol > tr)\\r\\n    acc = vec4(CorrectIso(iterator, iterator - step, tr).xyz, 1.);\\r\\n\\r\\n  return acc;\\r\\n}\\r\\n\\r\\nfloat easeOut(float x0, float x1, float x) {\\r\\n  float t = clamp((x - x0) / (x1 - x0), 0.0, 1.0);\\r\\n  return 1.0 - (1.0 - t) * (1.0 - t);\\r\\n}\\r\\n\\r\\nfloat easeIn(float x0, float x1, float x) {\\r\\n  float t = clamp((x - x0) / (x1 - x0), 0.0, 1.0);\\r\\n  return t * t;\\r\\n}\\r\\n\\r\\nvec3 GetColSimple(float vol) {\\r\\n  float t = easeOut(_isoLevel0.x, _isoLevel0.y, vol);\\r\\n  float s = easeIn(_isoLevel0.y, _isoLevel0.z, vol);\\r\\n  return vec3(0.5, 0.6, 0.7) * (1.0 - t) + 2.0 * vec3(s, 0, 0);\\r\\n}\\r\\n\\r\\nvec4 VolRender(vec3 start, vec3 back, float molDist, vec3 dir) {\\r\\n  vec4 acc = NO_COLOR, iso;\\r\\n  vec3 iterator = start, sumColor = vec3(0., 0., 0.);\\r\\n  float stepSize, alpha, sumAlpha = 0.0, vol, curStepSize, molD;\\r\\n  vec3 step, col, colOld, right;\\r\\n  float tr0 = _isoLevel0.x;\\r\\n  float dif, r, kd, finish;\\r\\n  int count = 0, stopMol = 0;\\r\\n\\r\\n  for (int k = 0; k < 3; k++) {\\r\\n    stepSize = (float(k) + 2.) / float(STEPS_COUNT);\\r\\n    kd = 140. * tr0 * stepSize;\\r\\n    r = 1. - kd;\\r\\n    step = stepSize * dir;\\r\\n    iso = GetIso1(iterator, back, molDist, dir, tr0, k);\\r\\n    if (iso.a < 0.1 || length(iso.xyz - start) > molDist)\\r\\n      break;\\r\\n    iterator = iso.xyz;\\r\\n    dif = 1.;// CalcColor(iterator, dir);\\r\\n    colOld = GetColSimple(tr0);\\r\\n    curStepSize = stepSize;\\r\\n    for (int i = 0; i < STEPS_COUNT; i++) {\\r\\n      iterator = iterator + step;\\r\\n      molD = length(iterator - start);\\r\\n      vol = sample3DTextureInclined(iterator).r;\\r\\n      finish = distance(iterator, back) - stepSize;\\r\\n      if (finish < 0.0 || vol < tr0 || (sumAlpha > 0.97) || molD > molDist)\\r\\n        break;\\r\\n      alpha = (1. - r);\\r\\n      col = GetColSimple(vol);\\r\\n      vol = sample3DTextureInclined(iterator - 0.5 * step).r;\\r\\n      vec3 colMid = GetColSimple(vol);\\r\\n      sumColor += (1. - sumAlpha) * (colOld + 4.* colMid + col) * alpha / 6.;\\r\\n      sumAlpha += (1. - sumAlpha) * alpha;// *(1. - 1.0*dif*dif);\\r\\n      colOld = col;\\r\\n    } // for i\\r\\n\\r\\n    if (finish < 0.0 || sumAlpha > 0.97)\\r\\n      break;\\r\\n\\r\\n    if (molD > molDist) {\\r\\n      curStepSize = stepSize - (molD - molDist);\\r\\n      right = iterator - (molD - molDist) * dir;\\r\\n      vol = sample3DTextureInclined(right).r;\\r\\n    } else {\\r\\n      vec3 left = iterator - step;\\r\\n      right = CorrectIso(left, iterator, tr0);\\r\\n      curStepSize = distance(left, right);\\r\\n      vol = tr0;\\r\\n    }\\r\\n\\r\\n    alpha = (1. - r) * curStepSize / stepSize;\\r\\n    dif = 1.;// CalcColor(right, dir);\\r\\n    col = GetColSimple(vol);\\r\\n    vol = sample3DTextureInclined(iterator - 0.5 * curStepSize / stepSize * step).r;\\r\\n    vec3 colMid = GetColSimple(vol);\\r\\n    sumColor += (1. - sumAlpha) * (colOld + 4. * colMid + col) * alpha / 6.;\\r\\n    sumAlpha += (1. - sumAlpha) * alpha;// *(1. - 1.0*dif*dif);\\r\\n\\r\\n    if (molD > molDist)\\r\\n      break;\\r\\n  } // for k\\r\\n  acc.rgb = 1. * sumColor / sumAlpha;\\r\\n  acc.a = sumAlpha;\\r\\n  return acc;\\r\\n}\\r\\n\\r\\nvec4 VolRender1(vec3 start, vec3 back, float molDist, vec3 dir) {\\r\\n  float stepSize = 1.0 / float(STEPS_COUNT);\\r\\n  float len = length(back - start);\\r\\n  vec3 step = stepSize * dir;\\r\\n  vec3 iterator = start;\\r\\n  float acc = 0.0;\\r\\n\\r\\n  for (int i = 0; i < STEPS_COUNT; i++) {\\r\\n    if (float(i) * stepSize > len)\\r\\n      break;\\r\\n    iterator = iterator + step;\\r\\n    if (sample3DTextureInclined(iterator).r > _isoLevel0.x)\\r\\n      acc += 10. * sample3DTextureInclined(iterator).r / float(STEPS_COUNT);\\r\\n  }\\r\\n\\r\\n  return vec4(1.,1.,1., acc);\\r\\n}\\r\\n\\r\\nvec4 IsoRender(vec3 start, vec3 back, float molDist, vec3 dir) {\\r\\n  vec4 tst = GetIso1(start, back, 2., dir, _isoLevel0.x, 0);\\r\\n  vec4 col = NO_COLOR;\\r\\n\\r\\n  if (length(tst.xyz - start) < molDist && tst.a > 0.1) {\\r\\n    float dif =  CalcColor(tst.xyz, dir);\\r\\n    dif = 0.9 * dif * dif;\\r\\n    col = vec4(dif, dif, dif, 1);\\r\\n  }\\r\\n  return col;\\r\\n}\\r\\n\\r\\nvec4 VolRender2(vec3 start, vec3 back, float molDist, vec3 dir) {\\r\\n  return sample3DTexture(start);\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n  vec3 tc = screenSpacePos.xyz / screenSpacePos.w * 0.5 + 0.5;\\r\\n\\r\\n  if (_flipV > 0.0) {\\r\\n    tc.y = 1.0 - tc.y;\\r\\n  }\\r\\n\\r\\n  vec3 start;\\r\\n  vec3 back;\\r\\n  vec3 molBack;\\r\\n  if (projectionMatrix[0][2] < 0.0) {\\r\\n    start = texture2D(_FFLeft, tc.xy).xyz;\\r\\n    back = texture2D(_BFLeft, tc.xy).xyz;\\r\\n    molBack = texture2D(_WFFLeft, tc.xy).xyz;\\r\\n  } else {\\r\\n    start = texture2D(_FFRight, tc.xy).xyz;\\r\\n    back = texture2D(_BFRight, tc.xy).xyz;\\r\\n    molBack = texture2D(_WFFRight, tc.xy).xyz;\\r\\n  }\\r\\n\\r\\n  vec3 dir = normalize(back - start);\\r\\n\\r\\n  float molDist = 2.0;\\r\\n  if (length(molBack) > 0.001) {\\r\\n    molDist = distance(start, molBack);\\r\\n  }\\r\\n\\r\\n  #ifdef ISO_MODE\\r\\n    gl_FragColor = IsoRender(start, back, molDist, dir);\\r\\n  #else\\r\\n    gl_FragColor = VolRender(start, back, molDist, dir);\\r\\n  #endif\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/VolumeFarPlane.vert\r\nconst VolumeFarPlane_namespaceObject = \"varying vec4 volPos;\\r\\nuniform float aspectRatio;\\r\\nuniform float farZ;\\r\\nuniform float tanHalfFOV;\\r\\nuniform mat4  matWorld2Volume;\\r\\n\\r\\nvoid main() {\\r\\n  // rescale plane to fill in the whole far plane area seen from camera\\r\\n  vec3 pos = position.xyz;\\r\\n  pos.x = pos.x * tanHalfFOV * farZ * aspectRatio;\\r\\n  pos.y = pos.y * tanHalfFOV * farZ;\\r\\n  // common transformation\\r\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\r\\n  // calc pos in volume CS\\r\\n  volPos = matWorld2Volume * modelMatrix * vec4(pos, 1.0);\\r\\n  // we're assuming local position is in [-0.5, 0.5]\\r\\n  // we need to offset it to be represented in RGB\\r\\n  volPos = volPos + 0.5;\\r\\n  volPos.w = 0.5;\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/VolumeFarPlane.frag\r\nconst gfx_shaders_VolumeFarPlane_namespaceObject = \"varying vec4 volPos;\\r\\n\\r\\nvoid main() {\\r\\n  gl_FragColor = volPos;\\r\\n}\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/VolumeMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst volumeUniforms = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.merge([{\r\n  volumeDim: {\r\n    type: 'v3',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(512, 512, 512)\r\n  },\r\n  tileTex: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  tileTexSize: {\r\n    type: 'v2',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(512, 512)\r\n  },\r\n  tileStride: {\r\n    type: 'v2',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(512, 512)\r\n  },\r\n  boxAngles: {\r\n    type: 'v3',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 1, 1)\r\n  },\r\n  delta: {\r\n    type: 'v3',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0)\r\n  },\r\n  _isoLevel0: {\r\n    type: 'v2',\r\n    value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.5, 0.75, 1.0)\r\n  },\r\n  _flipV: {\r\n    type: 'f',\r\n    value: 0.0\r\n  },\r\n  _BFLeft: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  _BFRight: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  _FFLeft: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  _FFRight: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  _WFFLeft: {\r\n    type: 't',\r\n    value: null\r\n  },\r\n  _WFFRight: {\r\n    type: 't',\r\n    value: null\r\n  }\r\n}]);\r\nfunction overrideUniforms(params, defUniforms) {\r\n  const uniforms = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.clone(defUniforms);\r\n  for (const p in params) {\r\n    if (uniforms.hasOwnProperty(p)) {\r\n      uniforms[p].value = params[p];\r\n    }\r\n  }\r\n  return uniforms;\r\n}\r\nfunction facesPosMaterialParams(params, sideType) {\r\n  return {\r\n    uniforms: overrideUniforms(params, {}),\r\n    vertexShader: VolumeFaces_namespaceObject,\r\n    fragmentShader: gfx_shaders_VolumeFaces_namespaceObject,\r\n    transparent: false,\r\n    depthTest: false,\r\n    depthWrite: false,\r\n    side: sideType\r\n  };\r\n}\r\nclass BackFacePosMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ShaderMaterial {\r\n  constructor(params) {\r\n    const backFaceParams = facesPosMaterialParams(params, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BackSide);\r\n    super(backFaceParams);\r\n  }\r\n}\r\nclass ShaderParams {\r\n  constructor(params, uniforms, vertexShader, fragmentShader) {\r\n    this.uniforms = overrideUniforms(params, uniforms);\r\n    this.vertexShader = vertexShader;\r\n    this.fragmentShader = fragmentShader;\r\n    this.transparent = false;\r\n    this.depthTest = false;\r\n    this.depthWrite = false;\r\n    this.side = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.FrontSide;\r\n  }\r\n}\r\nclass BackFacePosMaterialFarPlane extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ShaderMaterial {\r\n  constructor(params) {\r\n    const matUniforms = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UniformsUtils.merge([{\r\n      aspectRatio: {\r\n        type: 'f',\r\n        value: 0.0\r\n      },\r\n      farZ: {\r\n        type: 'f',\r\n        value: 0.0\r\n      },\r\n      tanHalfFOV: {\r\n        type: 'f',\r\n        value: 0.0\r\n      },\r\n      matWorld2Volume: {\r\n        type: '4fv',\r\n        value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n      }\r\n    }]);\r\n    const shaderParams = new ShaderParams(params, matUniforms, VolumeFarPlane_namespaceObject, gfx_shaders_VolumeFarPlane_namespaceObject);\r\n    super(shaderParams);\r\n  }\r\n}\r\nclass FrontFacePosMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ShaderMaterial {\r\n  constructor(params) {\r\n    const frontFaceParams = facesPosMaterialParams(params, external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.FrontSide);\r\n    super(frontFaceParams);\r\n  }\r\n}\r\nclass VolumeMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ShaderMaterial {\r\n  constructor(params) {\r\n    const shaderParams = new ShaderParams(params, volumeUniforms, shaders_Volume_namespaceObject, src_gfx_shaders_Volume_namespaceObject);\r\n    shaderParams.transparent = true;\r\n    shaderParams.depthTest = true;\r\n    super(shaderParams);\r\n    this.updateDefines();\r\n  }\r\n  updateDefines() {\r\n    this.defines = {\r\n      ISO_MODE: settings.now.modes.VD.isoMode,\r\n      STEPS_COUNT: settings.now.modes.VD.polyComplexity[settings.now.resolution] * 100\r\n    };\r\n    this.needsUpdate = true;\r\n  }\r\n}\r\n/* harmony default export */ const shaders_VolumeMaterial = ({\r\n  BackFacePosMaterial,\r\n  BackFacePosMaterialFarPlane,\r\n  FrontFacePosMaterial,\r\n  VolumeMaterial\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/VolumeMesh.js\r\n\r\n\r\n\r\nclass VolumeMesh extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh {\r\n  volumeInfo = {}; // data for noise filter\r\n\r\n  constructor() {\r\n    const geo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    super(geo);\r\n    this.clipPlane = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Plane();\r\n    const size = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.5, 0.5, 0.5);\r\n    this.size = size;\r\n    this.cullFlag = [true, true, true, true, true, true, true, true, false, false, false, false, false, false];\r\n    this.faces = [{\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, -1)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 1)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, -1, 0)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 1, 0)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1, 0, 0)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1, 0, 0)\r\n    }, {\r\n      indices: [],\r\n      norm: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0)\r\n    }];\r\n    this.vertices = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-size.x, -size.y, -size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-size.x, size.y, -size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(size.x, -size.y, -size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(size.x, size.y, -size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-size.x, -size.y, size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-size.x, size.y, size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(size.x, -size.y, size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(size.x, size.y, size.z), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0),\r\n    // Placeholder for section\r\n    new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0)];\r\n    geo.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(new Float32Array(this.vertices.length * 3), 3));\r\n    this.name = 'VolumeMesh';\r\n  }\r\n  static _corners = (() => [\r\n  // x, y, z, edge1, edge2, edge3\r\n  [-1, -1, -1, 0, 4, 8], [1, -1, -1, 0, 5, 9], [1, 1, -1, 1, 5, 10], [-1, 1, -1, 1, 4, 11], [-1, -1, 1, 2, 6, 8], [1, -1, 1, 2, 7, 9], [1, 1, 1, 3, 7, 10], [-1, 1, 1, 3, 6, 11]])();\r\n  static _edges = (() => [\r\n  // corner1, corner2, center_x, center_y, center_z\r\n  [0, 1, 0, -1, -1], [2, 3, 0, 1, -1], [4, 5, 0, -1, 1], [6, 7, 0, 1, 1], [0, 3, -1, 0, -1], [1, 2, 1, 0, -1], [4, 7, -1, 0, 1], [5, 6, 1, 0, 1], [0, 4, -1, -1, 0], [1, 5, 1, -1, 0], [2, 6, -1, 1, 0], [3, 7, 1, 1, 0]])();\r\n  static _edgeIntersections = function () {\r\n    const edgeIntersections = [];\r\n    for (let j = 0; j < 12; ++j) {\r\n      edgeIntersections.push(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3());\r\n    }\r\n    return edgeIntersections;\r\n  }();\r\n  _updateVertices() {\r\n    // Algorithm:\r\n    // 1. Get plane parameters\r\n    // 2. Compute culling flags for all vertices\r\n    // 3. If intersection occurs => compute from 3 to 6 intersection points\r\n    const corners = VolumeMesh._corners;\r\n    const edges = VolumeMesh._edges;\r\n    const edgeIntersections = VolumeMesh._edgeIntersections;\r\n    let i;\r\n    const norm = this.clipPlane.normal;\r\n    const D = this.clipPlane.constant;\r\n    const vert = this.vertices;\r\n    const {\r\n      size\r\n    } = this;\r\n    const cornerMark = [0, 0, 0, 0, 0, 0, 0, 0];\r\n    const edgeMark = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n    const curEdge = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    let curEdgeInter = null;\r\n    function CheckX() {\r\n      if (norm.x === 0) return 0;\r\n      const x = -(norm.dot(curEdge) + D) / norm.x;\r\n      if (-size.x <= x && x <= size.x) {\r\n        curEdgeInter.set(x, curEdge.y, curEdge.z);\r\n        if (x === size.x) return 2;\r\n        if (x === -size.x) return -2;\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    function CheckY() {\r\n      if (norm.y === 0) return 0;\r\n      const y = -(norm.dot(curEdge) + D) / norm.y;\r\n      if (-size.y <= y && y <= size.y) {\r\n        curEdgeInter.set(curEdge.x, y, curEdge.z);\r\n        if (y === size.y) return 2;\r\n        if (y === -size.y) return -2;\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    function CheckZ() {\r\n      if (norm.z === 0) return 0;\r\n      const z = -(norm.dot(curEdge) + D) / norm.z;\r\n      if (-size.z <= z && z <= size.z) {\r\n        curEdgeInter.set(curEdge.x, curEdge.y, z);\r\n        if (z === size.z) return 2;\r\n        if (z === -size.z) return -2;\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // for each edge\r\n    for (let curEdgeIdx = 0; curEdgeIdx < 12; ++curEdgeIdx) {\r\n      const curEdgeSource = edges[curEdgeIdx];\r\n      curEdgeInter = edgeIntersections[curEdgeIdx];\r\n      curEdge.set(curEdgeSource[2], curEdgeSource[3], curEdgeSource[4]);\r\n      curEdge.multiply(size);\r\n\r\n      // calculate intersection point\r\n      let flag = 0;\r\n      if (curEdgeSource[2] === 0) flag = CheckX();\r\n      if (curEdgeSource[3] === 0) flag = CheckY();\r\n      if (curEdgeSource[4] === 0) flag = CheckZ();\r\n\r\n      // mark corresponding corner (if plane cuts through one)\r\n      if (flag === -2) {\r\n        cornerMark[curEdgeSource[0]] = 1;\r\n      } else if (flag === 2) {\r\n        cornerMark[curEdgeSource[1]] = 1;\r\n      } else if (flag === 0) {\r\n        // edge is not intersected by the plane (doesn't produce a vertex)\r\n        edgeMark[curEdgeIdx] = 0;\r\n      }\r\n    }\r\n    const face = {\r\n      indices: [],\r\n      norm: norm.clone().negate()\r\n    };\r\n    let nextVertex = 8;\r\n\r\n    // for each marked corner\r\n    for (i = 0; i < 8; ++i) {\r\n      if (cornerMark[i] === 1) {\r\n        // add corner as vertex to the face\r\n        vert[nextVertex].set(corners[i][0], corners[i][1], corners[i][2]).multiply(size);\r\n        face.indices.push(nextVertex++);\r\n        // skip adjacent edges\r\n        edgeMark[corners[i][3]] = 0;\r\n        edgeMark[corners[i][4]] = 0;\r\n        edgeMark[corners[i][5]] = 0;\r\n      }\r\n    }\r\n\r\n    // for each edge that has internal intersection\r\n    for (i = 0; i < 12; ++i) {\r\n      if (edgeMark[i] === 1) {\r\n        // add intersection point as vertex to the face\r\n        vert[nextVertex].copy(edgeIntersections[i]);\r\n        face.indices.push(nextVertex++);\r\n      }\r\n    }\r\n    this.faces[6] = face;\r\n    const diff = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const coplanarPoint = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this.clipPlane.coplanarPoint(coplanarPoint);\r\n    for (i = 0; i < vert.length; ++i) {\r\n      this.cullFlag[i] = false;\r\n      if (i < 8) {\r\n        // corners should be culled by clipping plane\r\n        diff.subVectors(vert[i], coplanarPoint);\r\n        this.cullFlag[i] = norm.dot(diff) >= 0.0;\r\n      } else if (i < 8 + face.indices.length) {\r\n        // cross section vertices don't get culled\r\n        this.cullFlag[i] = true;\r\n      }\r\n    }\r\n\r\n    // write data to vertex buffer\r\n    const positions = this.geometry.getAttribute('position');\r\n    let idx = 0;\r\n    for (i = 0; i < vert.length; ++i) {\r\n      positions.array[idx++] = vert[i].x;\r\n      positions.array[idx++] = vert[i].y;\r\n      positions.array[idx++] = vert[i].z;\r\n    }\r\n    positions.needsUpdate = true;\r\n  }\r\n  _collectVertices(face, filter) {\r\n    let i;\r\n    const vert = this.vertices;\r\n    face.indices = [];\r\n    for (i = 0; i < vert.length; ++i) {\r\n      if (this.cullFlag[i] && filter(vert[i])) {\r\n        face.indices.push(i);\r\n      }\r\n    }\r\n  }\r\n  _sortIndices(face, right) {\r\n    let i;\r\n    let j;\r\n    const vert = this.vertices;\r\n    const angle = [];\r\n    const dir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    for (i = 1; i < face.indices.length; ++i) {\r\n      dir.subVectors(vert[face.indices[i]], vert[face.indices[0]]);\r\n      dir.normalize();\r\n      dir.cross(right);\r\n      dir.negate();\r\n      angle[i] = face.norm.dot(dir);\r\n    }\r\n\r\n    // Exchange sort\r\n    for (i = 1; i < face.indices.length - 1; ++i) {\r\n      for (j = i + 1; j < face.indices.length; ++j) {\r\n        if (angle[j] < angle[i]) {\r\n          // swap\r\n          let t = angle[i];\r\n          angle[i] = angle[j];\r\n          angle[j] = t;\r\n          t = face.indices[i];\r\n          face.indices[i] = face.indices[j];\r\n          face.indices[j] = t;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _updateIndices() {\r\n    // Algorithm:\r\n    // 1. Get plane vertices (from 3 to 6 vertices)\r\n    // 2. Get \"right\" vector in plane\r\n    // 3. Sort vertices using Graham-like method\r\n    // 4. Create indices\r\n\r\n    let i;\r\n    let faceIdx;\r\n    let face;\r\n    const vert = this.vertices;\r\n    const {\r\n      size\r\n    } = this;\r\n    this._collectVertices(this.faces[0], vertex => vertex.z === -size.z);\r\n    this._collectVertices(this.faces[1], vertex => vertex.z === size.z);\r\n    this._collectVertices(this.faces[2], vertex => vertex.y === -size.y);\r\n    this._collectVertices(this.faces[3], vertex => vertex.y === size.y);\r\n    this._collectVertices(this.faces[4], vertex => vertex.x === -size.x);\r\n    this._collectVertices(this.faces[5], vertex => vertex.x === size.x);\r\n    const vCenter = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const vRight = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const vDir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    for (faceIdx = 0; faceIdx < this.faces.length; ++faceIdx) {\r\n      face = this.faces[faceIdx];\r\n      if (face.indices.length === 0) continue;\r\n      vCenter.set(0, 0, 0);\r\n      for (i = 0; i < face.indices.length; ++i) {\r\n        vCenter.add(vert[face.indices[i]]);\r\n      }\r\n      vCenter.multiplyScalar(1.0 / face.indices.length);\r\n      vRight.subVectors(vert[face.indices[0]], vCenter);\r\n      vRight.normalize();\r\n      const rightProj = [];\r\n      for (i = 0; i < face.indices.length; ++i) {\r\n        vDir.subVectors(vert[face.indices[i]], vCenter);\r\n        rightProj[i] = vDir.dot(vRight);\r\n      }\r\n      for (i = 1; i < face.indices.length; ++i) {\r\n        if (rightProj[i] < rightProj[0]) {\r\n          // swap\r\n          let t = rightProj[0];\r\n          rightProj[0] = rightProj[i];\r\n          rightProj[i] = t;\r\n          [t] = face.indices;\r\n          face.indices[0] = face.indices[i];\r\n          face.indices[i] = t;\r\n        }\r\n      }\r\n      this._sortIndices(face, vRight);\r\n    }\r\n    let numIndices = 0;\r\n    for (faceIdx = 0; faceIdx < this.faces.length; ++faceIdx) {\r\n      face = this.faces[faceIdx];\r\n      if (face.indices.length >= 3) {\r\n        numIndices += 3 * (face.indices.length - 2);\r\n      }\r\n    }\r\n    let offset = 0;\r\n    const indices = new Uint16Array(numIndices);\r\n    for (faceIdx = 0; faceIdx < this.faces.length; ++faceIdx) {\r\n      face = this.faces[faceIdx];\r\n      for (i = 0; i < face.indices.length - 2; ++i) {\r\n        indices[offset] = face.indices[0]; // eslint-disable-line prefer-destructuring\r\n        indices[offset + 1] = face.indices[i + 1];\r\n        indices[offset + 2] = face.indices[i + 2];\r\n        offset += 3;\r\n      }\r\n    }\r\n    this.geometry.setIndex(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(indices, 1));\r\n  }\r\n  setDataSource(dataSource) {\r\n    const vm = new shaders_VolumeMaterial.VolumeMaterial();\r\n    const dim = dataSource.getDimensions();\r\n    const stride = dataSource.getTiledTextureStride();\r\n    const texture = dataSource.buildTiledTexture();\r\n    const bbox = dataSource.getBox();\r\n    vm.uniforms.volumeDim.value.set(dim[0], dim[1], dim[2]);\r\n    vm.uniforms.tileTex.value = texture;\r\n    vm.uniforms.tileTexSize.value.set(texture.image.width, texture.image.height);\r\n    vm.uniforms.tileStride.value.set(stride[0], stride[1]);\r\n    Object.assign(this.volumeInfo, dataSource.getVolumeInfo());\r\n    const volInfo = this.volumeInfo;\r\n    vm.uniforms.delta.value.copy(volInfo.delta);\r\n    vm.uniforms.boxAngles.value.set(volInfo.obtuseAngle[0], volInfo.obtuseAngle[1], volInfo.obtuseAngle[2]);\r\n    this.material = vm;\r\n    bbox.getSize(this.scale);\r\n    bbox.getCenter(this.position);\r\n  }\r\n  _updateIsoLevel() {\r\n    const {\r\n      kSigma,\r\n      kSigmaMed,\r\n      kSigmaMax\r\n    } = settings.now.modes.VD;\r\n    const volInfo = this.volumeInfo;\r\n    const mean = volInfo.dmean - volInfo.dmin;\r\n    const span = volInfo.dmax - volInfo.dmin;\r\n    const level = k => (mean + k * volInfo.sd) / span;\r\n    this.material.uniforms._isoLevel0.value.set(level(kSigma), level(kSigmaMed), level(kSigmaMax));\r\n  }\r\n  static _nearClipPlaneOffset = 0.2;\r\n  static _pos = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  static _norm = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  static _norm4D = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4())();\r\n  static _matrixWorldToLocal = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4())();\r\n  static _clipPlane = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Plane())();\r\n  rebuild(camera) {\r\n    const nearClipPlaneOffset = VolumeMesh._nearClipPlaneOffset;\r\n    const pos = VolumeMesh._pos;\r\n    const norm = VolumeMesh._norm;\r\n    const norm4D = VolumeMesh._norm4D;\r\n    const matrixWorldToLocal = VolumeMesh._matrixWorldToLocal;\r\n    const clipPlane = VolumeMesh._clipPlane;\r\n    this._updateIsoLevel();\r\n\r\n    // get clip plane in local space\r\n    camera.getWorldDirection(norm);\r\n    camera.getWorldPosition(pos);\r\n    pos.addScaledVector(norm, camera.near + nearClipPlaneOffset);\r\n\r\n    // transform pos to local CS\r\n    matrixWorldToLocal.copy(this.matrixWorld).invert();\r\n    pos.applyMatrix4(matrixWorldToLocal);\r\n\r\n    // transform norm to local CS\r\n    norm4D.set(norm.x, norm.y, norm.z, 0.0); // NOTE: use homogeneous norm for proper transformation\r\n    norm4D.applyMatrix4(matrixWorldToLocal);\r\n    norm.copy(norm4D);\r\n    norm.normalize();\r\n    clipPlane.setFromNormalAndCoplanarPoint(norm, pos);\r\n    if (!this.clipPlane.equals(clipPlane)) {\r\n      this.clipPlane = clipPlane.clone();\r\n      this._updateVertices();\r\n      this._updateIndices();\r\n    }\r\n  }\r\n}\r\n/* harmony default export */ const gfx_VolumeMesh = (VolumeMesh);\r\n;// CONCATENATED MODULE: ./src/gfx/VolumeBounds.js\r\n\r\n\r\nfunction _flattenArray(input) {\r\n  const n = input.length;\r\n  const output = new Float32Array(n * 3);\r\n  for (let i = 0; i < n; ++i) {\r\n    const j = 3 * i;\r\n    const v = input[i];\r\n    output[j] = v.x;\r\n    output[j + 1] = v.y;\r\n    output[j + 2] = v.z;\r\n  }\r\n  return output;\r\n}\r\nclass VolumeBounds {\r\n  static _projectionTable = {\r\n    // corresponds between (origin axes and angles between them) and between saving vector coordinates\r\n    XY: ['x', 2],\r\n    XZ: ['y', 1],\r\n    YZ: ['z', 0]\r\n  };\r\n  constructor(bBox, volInfo) {\r\n    const {\r\n      delta\r\n    } = volInfo; // {x: XY, y : XZ, z: YZ}\r\n    const {\r\n      obtuseAngle\r\n    } = volInfo; // 1 - obtuse, 0 - acute\r\n\r\n    const bSize = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    bBox.getSize(bSize);\r\n    bSize.multiplyScalar(0.5);\r\n    const offsetVert = this._getBaseVertices(delta, obtuseAngle);\r\n    const geometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    const vertices = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      vertices.push(offsetVert[i].clone().multiply(bSize));\r\n      vertices.push(offsetVert[(i + 1) % 4].clone().multiply(bSize));\r\n    }\r\n    const translation = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(2 * bSize.x * (1 - delta.x - delta.y), 0, 0);\r\n    for (let i = 0; i < 8; i++) {\r\n      vertices.push(vertices[i].clone().add(translation));\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      vertices.push(vertices[i * 2].clone());\r\n      vertices.push(vertices[i * 2 + 8].clone());\r\n    }\r\n    const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    bBox.getCenter(center);\r\n    vertices.forEach(vertex => vertex.add(center)); // pivot shift\r\n\r\n    const flatVertices = _flattenArray(vertices);\r\n    geometry.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(flatVertices, 3));\r\n    this._lines = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments(geometry, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineBasicMaterial({\r\n      color: 0xFFFFFF\r\n    }));\r\n    this._lines.layers.set(gfxutils.LAYERS.VOLUME);\r\n  }\r\n\r\n  // Set one edge (4 points) of frame, from which with parallel transfer  the rest of the frame points can be obtained\r\n  _getBaseVertices(delta, obtuseAngle) {\r\n    const projTable = VolumeBounds._projectionTable;\r\n    const proj = (index, inv) => {\r\n      // tricky function to take account of projections: their position(related to box) and sign\r\n      const currDelta = delta[projTable[index][0]];\r\n      const angleValue = -0.5 * (inv - 1) + inv * obtuseAngle[projTable[index][1]]; // inv = 1: alpha; inv = -1: 1 - alpha\r\n      return angleValue * currDelta;\r\n    };\r\n    const offsetVert = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1 + 2 * (proj('XZ', 1) + proj('XY', 1)), -1 + 2 * proj('YZ', 1), -1), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1 + 2 * (proj('XZ', -1) + proj('XY', 1)), -1 + 2 * proj('YZ', -1), 1), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1 + 2 * (proj('XZ', -1) + proj('XY', -1)), 1 - 2 * proj('YZ', 1), 1), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-1 + 2 * (proj('XZ', 1) + proj('XY', -1)), 1 - 2 * proj('YZ', -1), -1)];\r\n    return offsetVert;\r\n  }\r\n  getMesh() {\r\n    return this._lines;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_VolumeBounds = (VolumeBounds);\r\n;// CONCATENATED MODULE: ./src/gfx/VolumeFarPlane.js\r\n\r\n\r\n\r\n\r\n\r\n// Thes geometric far plane is required for correct filling in the BFTexture in case, when far plane cuts the volume\r\n// cube. In cut place of cube there is no correct data in BFTexture and volume rendering integral is calculated\r\n// with errors.\r\n// Far plane cuts the cube in case of large volume scale (zoom), because farplane doesn't change\r\nclass VolumeFarPlane {\r\n  // create plane with unit corners coords (for future rescale in vshader according to camera properties)\r\n  constructor(volume, width, height) {\r\n    const planeGeo = this._initPlaneGeo(width, height);\r\n    const mat = new shaders_VolumeMaterial.BackFacePosMaterialFarPlane();\r\n    this._plane = new meshes.Mesh(planeGeo, mat);\r\n    this._plane.frustumCulled = false;\r\n    this._plane.doubleSided = true;\r\n    const matWorldToVolume = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    this._plane._onBeforeRender = function (_renderer, _scene, camera, _geometry, _material, _group) {\r\n      const {\r\n        material\r\n      } = this;\r\n      if (!volume || !material) {\r\n        return;\r\n      }\r\n\r\n      // count point in world at farplane place\r\n      const planeCamPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4(0, 0, -(camera.far - 0.1), 1);\r\n      planeCamPos.applyMatrix4(camera.matrixWorld);\r\n\r\n      // recalc matrices to make plane be placed as farplane in the World relative to camera\r\n      this.matrix.identity();\r\n      this.matrix.makeTranslation(planeCamPos.x, planeCamPos.y, planeCamPos.z);\r\n      this.matrixWorld.copy(this.matrix);\r\n      this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);\r\n      this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\r\n\r\n      // build worldToVolume matrix to transform plane into volumeCS (volumeCS coords are written to BackFaceTexture)\r\n      const volumeMatrix = volume.matrixWorld;\r\n      matWorldToVolume.copy(volumeMatrix).invert();\r\n\r\n      // update material props\r\n      material.uniforms.aspectRatio.value = camera.aspect;\r\n      material.uniforms.farZ.value = camera.far;\r\n      material.uniforms.tanHalfFOV.value = Math.tan(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.DEG2RAD * 0.5 * camera.fov);\r\n      material.uniforms.matWorld2Volume.value = matWorldToVolume;\r\n    };\r\n\r\n    // set it to special layer to draw only into BFTexture\r\n    this._plane.layers.set(gfxutils.LAYERS.VOLUME_BFPLANE);\r\n  }\r\n  _initPlaneGeo(width, height) {\r\n    const planeGeo = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    width = width || 1;\r\n    height = height || 1;\r\n    const vertices = new Float32Array([-0.5 * width, 0.5 * height, 0, 0.5 * width, 0.5 * height, 0, -0.5 * width, -0.5 * height, 0, 0.5 * width, -0.5 * height, 0]);\r\n    planeGeo.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(vertices, 3));\r\n    planeGeo.setIndex([0, 2, 1, 2, 3, 1]);\r\n    return planeGeo;\r\n  }\r\n  getMesh() {\r\n    return this._plane;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_VolumeFarPlane = (VolumeFarPlane);\r\n;// CONCATENATED MODULE: ./src/VolumeVisual.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass VolumeVisual extends src_Visual {\r\n  constructor(name, dataSource) {\r\n    super(name, dataSource);\r\n    this._mesh = new gfx_VolumeMesh();\r\n    this._mesh.setDataSource(dataSource);\r\n    this.add(this._mesh);\r\n    this._frame = new gfx_VolumeBounds(this.getBoundaries().boundingBox, this._mesh.volumeInfo);\r\n    this.add(this._frame.getMesh());\r\n    this.showFrame(settings.now.modes.VD.frame);\r\n    this._farPlane = new gfx_VolumeFarPlane(this._mesh, 2, 2);\r\n    this.add(this._farPlane.getMesh());\r\n  }\r\n  getBoundaries() {\r\n    const box = this._dataSource.getBox();\r\n    const sphere = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere();\r\n    box.getBoundingSphere(sphere);\r\n    return {\r\n      boundingBox: box,\r\n      boundingSphere: sphere\r\n    };\r\n  }\r\n  getMesh() {\r\n    return this._mesh;\r\n  }\r\n  showFrame(needShow) {\r\n    this._frame.getMesh().material.visible = needShow;\r\n  }\r\n}\r\n/* harmony default export */ const src_VolumeVisual = (VolumeVisual);\r\n;// CONCATENATED MODULE: ./src/io/loaders/LoaderList.js\r\n\r\n\r\n/**\r\n * A list of available loaders.\r\n * @extends EntityList\r\n */\r\nclass LoaderList extends utils_EntityList {\r\n  /**\r\n   * Create a list of loaders.\r\n   * The loaders are indexed by supported source types (`.types` property of a Loader\r\n   * subclass).\r\n   * The loaders can be retrieved later by matching against specs (see {@link LoaderList#find}).\r\n   *\r\n   * @param {!Array<function(new:Loader)>=} someLoaders A list of {@link Loader} subclasses to\r\n   *   automatically register at creation time.\r\n   * @see LoaderList#register\r\n   */\r\n  constructor() {\r\n    let someLoaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n    super(someLoaders, ['types']);\r\n  }\r\n\r\n  /**\r\n   * Find a suitable loader for a source type.\r\n   *\r\n   * @param {Object} specs Loader specifications.\r\n   * @param {string=} specs.type Supported source type.\r\n   * @param {*=} specs.source Source to load from.\r\n   */\r\n  find(specs) {\r\n    let list = [];\r\n    if (specs.type) {\r\n      list = this._dict.types[specs.type.toLowerCase()] || [];\r\n    } else if (specs.source) {\r\n      return this._list.filter(SomeLoader => SomeLoader.canProbablyLoad && SomeLoader.canProbablyLoad(specs.source));\r\n    }\r\n    return [...list];\r\n  }\r\n}\r\n/* harmony default export */ const loaders_LoaderList = (LoaderList);\r\n;// CONCATENATED MODULE: ./src/io/loaders/Loader.js\r\n\r\n\r\nclass Loader extends utils_EventDispatcher {\r\n  constructor(source, options) {\r\n    super();\r\n    this._source = source;\r\n    this._options = options || {};\r\n    this._abort = false;\r\n    this._agent = null;\r\n  }\r\n  load() {\r\n    return Promise.reject(new Error('Loading from this source is not implemented'));\r\n  }\r\n  abort() {\r\n    this._abort = true;\r\n    if (this._agent) {\r\n      this._agent.abort();\r\n    }\r\n  }\r\n  static extractName(_source) {\r\n    return undefined;\r\n  }\r\n}\r\nutils_makeContextDependent(Loader.prototype);\r\n;// CONCATENATED MODULE: ./src/io/loaders/FileLoader.js\r\n\r\nclass FileLoader extends Loader {\r\n  constructor(source, options) {\r\n    super(source, options);\r\n    options = this._options;\r\n    this._binary = options.binary === true;\r\n  }\r\n  load() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this._abort) {\r\n        throw new Error('Loading aborted');\r\n      }\r\n      const blob = this._source;\r\n      const reader = this._agent = new FileReader();\r\n      reader.addEventListener('load', () => {\r\n        resolve(reader.result);\r\n      });\r\n      reader.addEventListener('error', () => {\r\n        reject(reader.error);\r\n      });\r\n      reader.addEventListener('abort', () => {\r\n        reject(new Error('Loading aborted'));\r\n      });\r\n      reader.addEventListener('progress', event => {\r\n        this.dispatchEvent(event);\r\n      });\r\n      if (this._binary) {\r\n        reader.readAsArrayBuffer(blob);\r\n      } else {\r\n        reader.readAsText(blob);\r\n      }\r\n    });\r\n  }\r\n  static canProbablyLoad(source) {\r\n    return File && source instanceof File || Blob && source instanceof Blob;\r\n  }\r\n  static extractName(source) {\r\n    return source && source.name;\r\n  }\r\n}\r\nFileLoader.types = ['file', 'blob'];\r\n;// CONCATENATED MODULE: ./src/io/loaders/XHRLoader.js\r\n\r\n\r\n\r\n// we don't need to detect all kinds of URLs, just the evident ones\r\nconst urlStartRegexp = /^(https?|ftp):\\/\\//i;\r\nclass XHRLoader extends Loader {\r\n  constructor(source, options) {\r\n    super(source, options);\r\n    options = this._options;\r\n    this._binary = options.binary === true;\r\n  }\r\n  load() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this._abort) {\r\n        throw new Error('Loading aborted');\r\n      }\r\n      const url = this._source;\r\n      const request = this._agent = new XMLHttpRequest();\r\n      request.addEventListener('load', () => {\r\n        if (request.status === 200) {\r\n          resolve(request.response);\r\n        } else {\r\n          reject(new Error(`HTTP ${request.status} while fetching ${url}`));\r\n        }\r\n      });\r\n      request.addEventListener('error', () => {\r\n        reject(new Error('HTTP request failed'));\r\n      });\r\n      request.addEventListener('abort', () => {\r\n        reject(new Error('Loading aborted'));\r\n      });\r\n      request.addEventListener('progress', event => {\r\n        this.dispatchEvent(event);\r\n      });\r\n      request.open('GET', url);\r\n      if (this._binary) {\r\n        request.responseType = 'arraybuffer';\r\n      } else {\r\n        request.responseType = 'text';\r\n      }\r\n      request.send();\r\n    });\r\n  }\r\n  static canProbablyLoad(source) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(source) && urlStartRegexp.test(source);\r\n  }\r\n  static extractName(source) {\r\n    if (source) {\r\n      const last = (source.indexOf('?') + 1 || source.lastIndexOf('#') + 1 || source.length + 1) - 1;\r\n      return source.slice(source.lastIndexOf('/', last) + 1, last);\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\nXHRLoader.types = ['url'];\r\n;// CONCATENATED MODULE: ./src/io/loaders/ImmediateLoader.js\r\n\r\nclass ImmediateLoader extends Loader {\r\n  load() {\r\n    return new Promise(resolve => {\r\n      if (this._abort) {\r\n        throw new Error('Loading aborted');\r\n      }\r\n      resolve(this._source);\r\n    });\r\n  }\r\n  static canProbablyLoad(_source) {\r\n    return false;\r\n  }\r\n}\r\nImmediateLoader.types = ['immediate'];\r\n;// CONCATENATED MODULE: ./src/io/loaders.js\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const loaders = (new loaders_LoaderList([\r\n// note: order might be important\r\nFileLoader, XHRLoader, ImmediateLoader]));\r\n;// CONCATENATED MODULE: ./src/io/parsers/ParserList.js\r\n\r\n\r\n/**\r\n * A list of available parsers.\r\n * @extends EntityList\r\n */\r\nclass ParserList extends utils_EntityList {\r\n  /**\r\n   * Create a list of parsers.\r\n   * The parsers are indexed by supported data formats and file extensions (`.formats` and\r\n   * `.extensions` properties of a Parser subclass).\r\n   * The parsers can be retrieved later by matching against specs (see {@link ParsrerList#find}).\r\n   *\r\n   * @param {!Array<function(new:Parser)>=} someParsers A list of {@link Parser} subclasses to\r\n   *   automatically register at creation time.\r\n   * @see ParserList#register\r\n   */\r\n  constructor() {\r\n    let someParsers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n    super(someParsers, ['formats', 'extensions']);\r\n  }\r\n\r\n  /**\r\n   * Find a suitable parser for data.\r\n   *\r\n   * @param {Object} specs Parser specifications.\r\n   * @param {string=} specs.format Supported data format.\r\n   * @param {string=} specs.ext Supported filename extension.\r\n   * @param {*=} specs.data Data to parse.\r\n   */\r\n  find(specs) {\r\n    let list = [];\r\n    if (specs.format) {\r\n      list = this._dict.formats[specs.format.toLowerCase()] || [];\r\n    } else if (specs.ext) {\r\n      list = this._dict.extensions[specs.ext.toLowerCase()] || [];\r\n    }\r\n    // autodetect only if no format is forced\r\n    if (list.length === 0 && !specs.format && specs.data) {\r\n      return this._list.filter(SomeParser => SomeParser.canProbablyParse && SomeParser.canProbablyParse(specs.data));\r\n    }\r\n    return [...list];\r\n  }\r\n}\r\n/* harmony default export */ const parsers_ParserList = (ParserList);\r\n;// CONCATENATED MODULE: ./src/io/parsers/Parser.js\r\n\r\nclass Parser {\r\n  constructor(data, options) {\r\n    this._data = data;\r\n    this._options = options || {};\r\n    this._abort = false;\r\n  }\r\n  parseSync() {\r\n    throw new Error('Parsing this type of data is not implemented');\r\n  }\r\n  parse() {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        try {\r\n          if (this._abort) {\r\n            return reject(new Error('Parsing aborted'));\r\n          }\r\n          return resolve(this.parseSync());\r\n        } catch (error) {\r\n          return reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // only for volume Parsers\r\n  getModel() {\r\n    this.model._parseHeader(this._data);\r\n    return this.model;\r\n  }\r\n  abort() {\r\n    this._abort = true;\r\n  }\r\n}\r\nutils_makeContextDependent(Parser.prototype);\r\n;// CONCATENATED MODULE: ./src/io/parsers/pdb/Remark290.js\r\n\r\n\r\n/**\r\n * Parser helper for PDB tag \"REMARK 290\".\r\n *\r\n * @exports Remark290\r\n * @constructor\r\n */\r\nclass Remark290 {\r\n  constructor() {\r\n    /** @type {THREE.Matrix4[]} */\r\n    this.matrices = [];\r\n\r\n    /** @type {?THREE.Matrix4} */\r\n    this._matrix = null;\r\n    /** @type {number} */\r\n    this._matrixIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Parse a single line of a stream.\r\n   * @param {PDBStream} stream - stream to parse\r\n   */\r\n\r\n  parse(stream) {\r\n    /** @type {?THREE.Matrix4} */\r\n    let matrix = this._matrix;\r\n    if (stream.readString(12, 18) === '  SMTRY') {\r\n      const matrixRow = stream.readCharCode(19) - 49; // convert '1', '2', or '3' -> 0, 1, or 2\r\n      const matrixData = stream.readString(20, 80).trim().split(/\\s+/);\r\n      const matrixIndex = parseInt(matrixData[0], 10);\r\n      if (this._matrix === null || matrixIndex !== this._matrixIndex) {\r\n        // TODO: assert(matrixIndex === this.matrices.length + 1);\r\n        this._matrixIndex = matrixIndex;\r\n        this._matrix = matrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n        this.matrices[this.matrices.length] = matrix;\r\n      }\r\n      const {\r\n        elements\r\n      } = matrix;\r\n      elements[matrixRow] = parseFloat(matrixData[1]);\r\n      elements[matrixRow + 4] = parseFloat(matrixData[2]);\r\n      elements[matrixRow + 8] = parseFloat(matrixData[3]);\r\n      elements[matrixRow + 12] = parseFloat(matrixData[4]);\r\n    }\r\n  }\r\n}\r\nRemark290.prototype.id = 290;\r\n/* harmony default export */ const pdb_Remark290 = (Remark290);\r\n;// CONCATENATED MODULE: ./src/io/parsers/pdb/Remark350.js\r\n\r\n\r\nconst {\r\n  Assembly: Remark350_Assembly\r\n} = chem;\r\n\r\n/**\r\n * Parser helper for PDB tag \"REMARK 350\".\r\n *\r\n * @exports Remark350\r\n * @constructor\r\n */\r\nclass Remark350 {\r\n  constructor(complex) {\r\n    /** @type {Complex} */\r\n    this._complex = complex;\r\n    /** @type {Assembly[]} */\r\n    this.assemblies = [];\r\n\r\n    /** @type {?Assembly} */\r\n    this._assembly = null;\r\n    /** @type {?THREE.Matrix4} */\r\n    this._matrix = null;\r\n    /** @type {number} */\r\n    this._matrixIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Parse a single line of a stream.\r\n   * @param {PDBStream} stream - stream to parse\r\n   */\r\n\r\n  parse(stream) {\r\n    /** @type {?Assembly} */\r\n    let assembly = this._assembly;\r\n    /** @type {?THREE.Matrix4} */\r\n    let matrix = this._matrix;\r\n    if (assembly && stream.readString(12, 18) === '  BIOMT') {\r\n      const matrixRow = stream.readCharCode(19) - 49; // convert '1', '2', or '3' -> 0, 1, or 2\r\n      const matrixData = stream.readString(20, 80).trim().split(/\\s+/);\r\n      const matrixIndex = parseInt(matrixData[0], 10);\r\n      if (this._matrix === null || matrixIndex !== this._matrixIndex) {\r\n        // TODO: assert(matrixIndex === assembly.matrices.length + 1);\r\n        this._matrixIndex = matrixIndex;\r\n        this._matrix = matrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n        assembly.addMatrix(matrix);\r\n      }\r\n      const {\r\n        elements\r\n      } = matrix;\r\n      elements[matrixRow] = parseFloat(matrixData[1]);\r\n      elements[matrixRow + 4] = parseFloat(matrixData[2]);\r\n      elements[matrixRow + 8] = parseFloat(matrixData[3]);\r\n      elements[matrixRow + 12] = parseFloat(matrixData[4]);\r\n    } else if (assembly && stream.readString(35, 41) === 'CHAINS:') {\r\n      const entries = stream.readString(42, 80).split(',');\r\n      for (let i = 0, n = entries.length; i < n; ++i) {\r\n        const chain = entries[i].trim();\r\n        if (chain.length > 0) {\r\n          assembly.addChain(chain);\r\n        }\r\n      }\r\n    } else if (stream.readString(12, 23) === 'BIOMOLECULE:') {\r\n      // assert molIndex === this.assemblies.length + 1\r\n      this._matrix = null;\r\n      this._matrixIndex = -1;\r\n      this._assembly = assembly = new Remark350_Assembly(this._complex);\r\n      this.assemblies.push(assembly);\r\n    }\r\n  }\r\n}\r\nRemark350.prototype.id = 350;\r\n/* harmony default export */ const pdb_Remark350 = (Remark350);\r\n;// CONCATENATED MODULE: ./src/io/parsers/PDBStream.js\r\n/** Helper class for stream-like reading input files. */\r\nclass PDBStream {\r\n  /**\r\n   * Create a stream\r\n   * @param {String} data Input data\r\n   */\r\n  constructor(data) {\r\n    /** @type String */\r\n    this._data = data; // Input file\r\n    /** @type Number */\r\n    this._start = 0; // Starting position of line\r\n    /** @type Number */\r\n    this._nextCR = -1; // Position of next CR (0x0D)\r\n    /** @type Number */\r\n    this._nextLF = -1; // Position of next LF (0x0A)\r\n    /** @type Number */\r\n    this._next = -1; // End position of line\r\n    /** @type Number */\r\n    this._end = data.length; // End of data\r\n\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Reading next line.\r\n   * @returns {String} Next line in data (ending with LF or CR)\r\n   */\r\n  readLine() {\r\n    return this._data.slice(this._start, this._next);\r\n  }\r\n\r\n  /**\r\n   * Reading character from position.\r\n   * @param {Number} pos - Position in current line.\r\n   * @returns {String} Character from position\r\n   */\r\n  readChar(pos) {\r\n    pos = this._start + pos - 1;\r\n    return pos < this._next ? this._data[pos] : ' ';\r\n  }\r\n\r\n  /**\r\n   * Reading character code from position.\r\n   * @param {Number} pos - Position in current line.\r\n   * @returns {Number} Character code from position\r\n   */\r\n  readCharCode(pos) {\r\n    pos = this._start + pos - 1;\r\n    return pos < this._next ? this._data.charCodeAt(pos) : 32;\r\n  }\r\n\r\n  /**\r\n   * Reading string from begin to end points.\r\n   * For a reason unknown, numbering assumed not to start from 0, but from 1.\r\n   * @param {Number} begin - Begin point in current line.\r\n   * @param {Number} end - End point in current line.\r\n   * @returns {String} String from begin to end\r\n   */\r\n  readString(begin, end) {\r\n    const from = this._start + begin - 1;\r\n    const to = this._start + end;\r\n    return this._data.slice(from, to < this._next ? to : this._next);\r\n  }\r\n\r\n  /**\r\n   * Reading integer from begin to end points.\r\n   * @param {Number} begin - Begin point in current line.\r\n   * @param {Number} end - End point in current line.\r\n   * @returns {Number} Integer from begin to end\r\n   */\r\n  readInt(begin, end) {\r\n    return parseInt(this.readString(begin, end), 10);\r\n  }\r\n\r\n  /**\r\n   * Reading float from begin to end points.\r\n   * @param {Number} begin - Begin point in current line.\r\n   * @param {Number} end - End point in current line.\r\n   * @returns {Number} Float from begin to end\r\n   */\r\n  readFloat(begin, end) {\r\n    return parseFloat(this.readString(begin, end));\r\n  }\r\n\r\n  /**\r\n   * Checking for end of data.\r\n   * @returns {boolean} True if data is ended, false otherwise\r\n   */\r\n  end() {\r\n    return this._start >= this._end;\r\n  }\r\n\r\n  /**\r\n   * Procedure to re-arrange current pointers in data.\r\n   */\r\n  next() {\r\n    const start = this._next + 1;\r\n    this._start = start < this._end ? start : this._end;\r\n\r\n    // support CR, LF, CR+LF line endings\r\n    // do not support LF+CR, CR+CR+LF, and other strange combinations\r\n\r\n    if (this._start > this._nextCR) {\r\n      this._nextCR = (this._data.indexOf('\\r', this._start) + 1 || this._end + 1) - 1;\r\n    }\r\n    if (this._start > this._nextLF) {\r\n      this._nextLF = (this._data.indexOf('\\n', this._start) + 1 || this._end + 1) - 1;\r\n    }\r\n    this._next = this._nextCR + 1 < this._nextLF ? this._nextCR : this._nextLF;\r\n  }\r\n}\r\n/* harmony default export */ const parsers_PDBStream = (PDBStream);\r\n;// CONCATENATED MODULE: ./src/io/parsers/PDBParser.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: PDBParser_Complex,\r\n  Element: PDBParser_Element,\r\n  Helix: PDBParser_Helix,\r\n  Sheet: PDBParser_Sheet,\r\n  Strand: PDBParser_Strand,\r\n  Bond: PDBParser_Bond,\r\n  Molecule: PDBParser_Molecule\r\n} = chem;\r\nconst TAG_LENGTH = 6;\r\nfunction nameToElement(name) {\r\n  // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM\r\n  //\r\n  // http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html#note1\r\n  //\r\n  // Atom names start with element symbols right-justified in columns 13-14\r\n  // as permitted by the length of the name. For example, the symbol FE for\r\n  // iron appears in columns 13-14, whereas the symbol C for carbon appears\r\n  // in column 14 (see Misaligned Atom Names). If an atom name has four\r\n  // characters, however, it must start in column 13 even if the element\r\n  // symbol is a single character (for example, see Hydrogen Atoms).\r\n\r\n  const veryLong = name.trim().length === 4;\r\n  return name.slice(0, veryLong ? 1 : 2).trim();\r\n}\r\n\r\n// the most frequently used beginnings; although HEADER is mandatory, it is often missing in handmade files\r\nconst pdbStartRegexp = /^(HEADER\\s|COMPND\\s|REMARK\\s|ATOM {2}|HETATM|MODEL )/i;\r\nconst remarkParsers = {\r\n  // NOTE: please forget the idea to build the method name in runtime, it can be obfuscated.\r\n  290: pdb_Remark290,\r\n  350: pdb_Remark350\r\n};\r\nclass PDBParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._complex = null;\r\n    this._chain = null;\r\n    this._residue = null;\r\n    this._sheet = null;\r\n    this._serialAtomMap = null;\r\n    this._modelId = 1;\r\n    this._compaundFound = false;\r\n    this._biomoleculeFound = false;\r\n    this._allowedChainsIDs = null;\r\n    this._lastMolId = -1;\r\n    this._remarks = {};\r\n    this._remark = null;\r\n    this._molecules = [];\r\n    this._molecule = null;\r\n    this._compndCurrToken = '';\r\n    this._options.fileType = 'pdb';\r\n  }\r\n  static canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && pdbStartRegexp.test(data);\r\n  }\r\n  _finalize() {\r\n    this._fixBondsArray();\r\n    this._fixChains();\r\n\r\n    // keep crystallographic symmetry transformations\r\n    const remark290 = this._remarks[290];\r\n    this._complex.symmetry = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(remark290) ? [] : remark290.matrices;\r\n\r\n    // add loaded biological assemblies\r\n    const remark350 = this._remarks[350];\r\n    this._complex.units = this._complex.units.concat(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(remark350) ? [] : remark350.assemblies);\r\n\r\n    // add loaded macromolecules\r\n    this._finalizeMolecules();\r\n\r\n    // create secondary structure etc.\r\n    this._complex.finalize({\r\n      needAutoBonding: true,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n  }\r\n  _finalizeMolecules() {\r\n    // get chains from complex\r\n    const chainDict = {};\r\n    let i;\r\n    const chains = this._complex._chains;\r\n    for (i = 0; i < chains.length; ++i) {\r\n      const chainObj = chains[i];\r\n      const chainName = chainObj._name;\r\n      chainDict[chainName] = chainObj;\r\n    }\r\n\r\n    // aggregate residues from chains\r\n    for (i = 0; i < this._molecules.length; i++) {\r\n      const m = this._molecules[i];\r\n      let residues = [];\r\n      for (let j = 0; j < m._chains.length; j++) {\r\n        const name = m._chains[j];\r\n        const chain = chainDict[name];\r\n        residues = residues.concat(chain._residues.slice());\r\n      }\r\n      const molecule = new PDBParser_Molecule(this._complex, m._name, i + 1);\r\n      molecule.residues = residues;\r\n      this._complex._molecules[i] = molecule;\r\n    }\r\n  }\r\n  _fixChains() {\r\n    const idChainMap = {};\r\n    const complex = this._complex;\r\n\r\n    // prepare\r\n    for (let i = 0; i < complex._chains.length; i++) {\r\n      const chain = complex._chains[i];\r\n      idChainMap[chain._name.charCodeAt(0)] = chain;\r\n    }\r\n  }\r\n\r\n  // FIXME: This function is redundant, CONECT records always follow ATOM and HETATM. Build the map online.\r\n  _fixBondsArray() {\r\n    const serialAtomMap = this._serialAtomMap = {};\r\n    const complex = this._complex;\r\n    const atoms = complex._atoms;\r\n    for (let i = 0, ni = atoms.length; i < ni; ++i) {\r\n      const atom = atoms[i];\r\n      serialAtomMap[atom.serial] = atom;\r\n    }\r\n    const bonds = complex._bonds;\r\n    const {\r\n      logger\r\n    } = this;\r\n    for (let j = 0, nj = bonds.length; j < nj; ++j) {\r\n      const bond = bonds[j];\r\n      if (bond._right < bond._left) {\r\n        logger.debug('_fixBondsArray: Logic error.');\r\n      }\r\n      bond._left = serialAtomMap[bond._left] || null;\r\n      bond._right = serialAtomMap[bond._right] || null;\r\n    }\r\n  }\r\n  _parseATOM(stream) {\r\n    if (this._modelId !== 1) {\r\n      return;\r\n    }\r\n\r\n    /* eslint-disable no-magic-numbers */\r\n    const het = stream.readCharCode(1) === 0x48;\r\n\r\n    // field names according to wwPDB Format\r\n    // NOTE: Chimera allows (nonstandard) use of columns 6-11 for the integer atom serial number in ATOM records.\r\n    const serial = het ? stream.readInt(7, 11) : stream.readInt(6, 11);\r\n    let name = stream.readString(13, 16);\r\n    const altLoc = stream.readChar(17);\r\n    const resName = stream.readString(18, 20).trim();\r\n    const chainID = stream.readChar(22);\r\n    const resSeq = stream.readInt(23, 26);\r\n    const iCode = stream.readChar(27);\r\n    const x = stream.readFloat(31, 38);\r\n    const y = stream.readFloat(39, 46);\r\n    const z = stream.readFloat(47, 54);\r\n    const occupancy = stream.readFloat(55, 60);\r\n    const tempFactor = stream.readFloat(61, 66);\r\n    const element = stream.readString(77, 78).trim() || nameToElement(name);\r\n    const charge = stream.readInt(79, 80) || 0;\r\n    /* eslint-enable no-magic-numbers */\r\n    // skip waters (there may be lots of them)\r\n    if (this.settings.now.nowater) {\r\n      if (resName === 'HOH' || resName === 'WAT') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // PDB uses positional system for atom names. It helps derive element type from the name\r\n    // but names may include extra spaces. From this point on we don't need those spaces anymore.\r\n    name = name.trim();\r\n    const type = PDBParser_Element.getByName(element);\r\n    const role = PDBParser_Element.Role[name]; // FIXME: Maybe should use type as additional index (\" CA \" vs. \"CA  \")\r\n\r\n    // NOTE: Residues of a particular chain are not required to be listed next to each other.\r\n    // https://github.com/biasmv/pv/commit/7319b898b7473ba380c26699e3b028b2b1a7e1a1\r\n    let chain = this._chain;\r\n    if (!chain || chain.getName() !== chainID) {\r\n      this._chain = chain = this._complex.getChain(chainID) || this._complex.addChain(chainID);\r\n      this._residue = null;\r\n    }\r\n    let residue = this._residue;\r\n    if (!residue || residue.getSequence() !== resSeq || residue.getICode() !== iCode) {\r\n      this._residue = residue = chain.addResidue(resName, resSeq, iCode);\r\n    }\r\n    const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(x, y, z);\r\n    residue.addAtom(name, type, xyz, role, het, serial, altLoc, occupancy, tempFactor, charge);\r\n  }\r\n  _parseENDMDL() {\r\n    this._modelId += 1;\r\n  }\r\n  _parseCONECT(stream) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const serial0 = stream.readInt(7, 11);\r\n    const serial1 = stream.readInt(12, 16);\r\n    const serial2 = stream.readInt(17, 21);\r\n    const serial3 = stream.readInt(22, 26);\r\n    const serial4 = stream.readInt(27, 31);\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    const complex = this._complex;\r\n\r\n    // Keep bonds ordered by atom serial\r\n    if (serial1 && serial1 > serial0) {\r\n      complex.addBond(serial0, serial1, 0, PDBParser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n    if (serial2 && serial2 > serial0) {\r\n      complex.addBond(serial0, serial2, 0, PDBParser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n    if (serial3 && serial3 > serial0) {\r\n      complex.addBond(serial0, serial3, 0, PDBParser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n    if (serial4 && serial4 > serial0) {\r\n      complex.addBond(serial0, serial4, 0, PDBParser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n  }\r\n  _parseCOMPND(stream) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const str = stream.readString(11, 80);\r\n    const tokenIdx = str.indexOf(':');\r\n    this._compndCurrToken = tokenIdx > 0 ? str.substring(0, tokenIdx).trim() : this._compndCurrToken;\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    // start reading new molecule\r\n    if (this._compndCurrToken === 'MOL_ID') {\r\n      this._molecule = {\r\n        _index: '',\r\n        _chains: []\r\n      };\r\n      this._molecule._index = parseInt(str.substring(tokenIdx + 1, str.indexOf(';')), 10);\r\n      this._molecules.push(this._molecule);\r\n      // parse molecule name\r\n    } else if (this._compndCurrToken === 'MOLECULE' && this._molecule != null) {\r\n      this._molecule._name = str.substring(tokenIdx + 1, str.indexOf(';')).trim();\r\n      // parse molecule chains\r\n    } else if (this._compndCurrToken === 'CHAIN' && this._molecule != null) {\r\n      let chainStr = str.substring(tokenIdx + 1, 80).trim();\r\n      const lastChar = chainStr[chainStr.length - 1];\r\n      if (lastChar === ';' || lastChar === ',') {\r\n        chainStr = chainStr.slice(0, -1);\r\n      }\r\n      chainStr = chainStr.replace(/\\s+/g, '');\r\n      const chains = chainStr.split(',');\r\n      this._molecule._chains = this._molecule._chains.concat(chains);\r\n    }\r\n  }\r\n  _parseREMARK(stream) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const remarkNum = stream.readInt(8, 10);\r\n    /* eslint-enable no-magic-numbers */\r\n\r\n    // create remark parser if needed\r\n    let remark = this._remarks[remarkNum];\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(remark)) {\r\n      const RemarkParser = remarkParsers[remarkNum];\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isFunction(RemarkParser)) {\r\n        this._remarks[remarkNum] = remark = new RemarkParser(this._complex);\r\n      }\r\n    }\r\n\r\n    // delegate parsing\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(remark)) {\r\n      remark.parse(stream);\r\n    }\r\n  }\r\n  _parseHELIX(stream) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const fields = [20, 22, 32, 34];\r\n    /* eslint-enable no-magic-numbers */\r\n    this._parseSTRUCTURE(stream, fields, obj => {\r\n      this._complex.addHelix(obj);\r\n      this._complex.structures.push(obj);\r\n    });\r\n  }\r\n  _parseSHEET(stream) {\r\n    /* eslint-disable no-magic-numbers */\r\n    const fields = [22, 23, 33, 34];\r\n    /* eslint-enable no-magic-numbers */\r\n    this._parseSTRUCTURE(stream, fields, obj => {\r\n      this._complex.addSheet(obj);\r\n    });\r\n  }\r\n  _parseSTRUCTURE(stream, pars, adder) {\r\n    const startId = 0;\r\n    const startIndex = 1;\r\n    const endId = 2;\r\n    const endIndex = 3;\r\n\r\n    // identify fields: debugging and stuff\r\n    /* eslint-disable no-magic-numbers */\r\n    const codeOfS = 0x53;\r\n    const serialNumber = stream.readInt(8, 10);\r\n    const structureName = stream.readString(12, 14).trim(); // FIXME: LString(3) forbids trim()\r\n    const comment = stream.readString(41, 70).trim();\r\n    const helLength = stream.readInt(72, 76);\r\n    const helixClass = stream.readInt(39, 40);\r\n    const shWidth = stream.readInt(15, 16);\r\n    const shCur = stream.readInt(42, 45);\r\n    const shPrev = stream.readInt(57, 60);\r\n    /* eslint-enable no-magic-numbers */\r\n    // file fields\r\n    const startChainID = stream.readString(pars[startId], pars[endId] + 1).charCodeAt(0);\r\n    const endChainID = stream.readString(pars[endId], pars[endId] + 1).charCodeAt(0);\r\n    const startSequenceNumber = stream.readInt(pars[startIndex], pars[startIndex] + 3);\r\n    let iCodeStr = stream.readString(pars[startIndex] + 4, pars[startIndex] + 4);\r\n    let startICode = 0;\r\n    if (iCodeStr.length > 0) {\r\n      startICode = iCodeStr.charCodeAt(0);\r\n    }\r\n    const endSequenceNumber = stream.readInt(pars[endIndex], pars[endIndex] + 3);\r\n    iCodeStr = stream.readString(pars[endIndex] + 4, pars[endIndex] + 4);\r\n    let endICode = 0;\r\n    if (iCodeStr.length > 0) {\r\n      endICode = iCodeStr.charCodeAt(0);\r\n    }\r\n    let obj;\r\n    let cs = this._sheet;\r\n    if (stream.readCharCode(1) === codeOfS) {\r\n      if (cs !== null && cs.getName() !== structureName) {\r\n        cs = null;\r\n        this._sheet = null;\r\n      }\r\n      if (cs === null) {\r\n        this._sheet = obj = new PDBParser_Sheet(structureName, shWidth);\r\n        adder(obj);\r\n      } else {\r\n        obj = cs;\r\n      }\r\n      const strand = new PDBParser_Strand(obj, this._complex.getUnifiedSerial(startChainID, startSequenceNumber, startICode), this._complex.getUnifiedSerial(endChainID, endSequenceNumber, endICode), helixClass, shCur, shPrev);\r\n      obj.addStrand(strand);\r\n      this._complex.structures.push(strand);\r\n    } else {\r\n      obj = new PDBParser_Helix(helixClass, this._complex.getUnifiedSerial(startChainID, startSequenceNumber, startICode), this._complex.getUnifiedSerial(endChainID, endSequenceNumber, endICode), serialNumber, structureName, comment, helLength);\r\n      adder(obj);\r\n    }\r\n  }\r\n  _parseHEADER(stream) {\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    metadata.classification = stream.readString(11, 50).trim();\r\n    metadata.date = stream.readString(51, 59).trim();\r\n    const id = stream.readString(63, 66).trim();\r\n    metadata.id = id;\r\n    if (id) {\r\n      this._complex.name = id;\r\n    }\r\n    metadata.format = 'pdb';\r\n  }\r\n  _parseTITLE(stream) {\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    metadata.title = metadata.title || [];\r\n    const line = stream.readInt(9, 10) || 1;\r\n    metadata.title[line - 1] = stream.readString(11, 80).trim();\r\n  }\r\n  static tagParsers = (() => ({\r\n    HEADER: PDBParser.prototype._parseHEADER,\r\n    'TITLE ': PDBParser.prototype._parseTITLE,\r\n    'ATOM  ': PDBParser.prototype._parseATOM,\r\n    HETATM: PDBParser.prototype._parseATOM,\r\n    ENDMDL: PDBParser.prototype._parseENDMDL,\r\n    CONECT: PDBParser.prototype._parseCONECT,\r\n    COMPND: PDBParser.prototype._parseCOMPND,\r\n    REMARK: PDBParser.prototype._parseREMARK,\r\n    // 'SOURCE': PDBParser.prototype._parseSOURCE,\r\n    'HELIX ': PDBParser.prototype._parseHELIX,\r\n    'SHEET ': PDBParser.prototype._parseSHEET,\r\n    // nonstandard extension to allow range 100,000 - 999,999\r\n    'ATOM 1': PDBParser.prototype._parseATOM,\r\n    'ATOM 2': PDBParser.prototype._parseATOM,\r\n    'ATOM 3': PDBParser.prototype._parseATOM,\r\n    'ATOM 4': PDBParser.prototype._parseATOM,\r\n    'ATOM 5': PDBParser.prototype._parseATOM,\r\n    'ATOM 6': PDBParser.prototype._parseATOM,\r\n    'ATOM 7': PDBParser.prototype._parseATOM,\r\n    'ATOM 8': PDBParser.prototype._parseATOM,\r\n    'ATOM 9': PDBParser.prototype._parseATOM\r\n  }))();\r\n  parseSync() {\r\n    const stream = new parsers_PDBStream(this._data);\r\n    const result = this._complex = new PDBParser_Complex();\r\n\r\n    // parse PDB line by line\r\n    while (!stream.end()) {\r\n      const tag = stream.readString(1, TAG_LENGTH);\r\n      const func = PDBParser.tagParsers[tag];\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isFunction(func)) {\r\n        func.call(this, stream);\r\n      }\r\n      stream.next();\r\n    }\r\n\r\n    // Resolve indices and serials to objects\r\n    this._finalize();\r\n\r\n    // cleanup\r\n    this._serialAtomMap = null;\r\n    this._sheet = null;\r\n    this._residue = null;\r\n    this._chain = null;\r\n    this._complex = null;\r\n    if (result.getAtomCount() === 0) {\r\n      throw new Error('The data does not contain valid atoms');\r\n    }\r\n    return result;\r\n  }\r\n}\r\nPDBParser.formats = ['pdb'];\r\nPDBParser.extensions = ['.pdb', '.ent'];\r\n/* harmony default export */ const parsers_PDBParser = (PDBParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/CMLParser.js\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: CMLParser_Complex,\r\n  Element: CMLParser_Element,\r\n  SGroup: CMLParser_SGroup,\r\n  Bond: CMLParser_Bond\r\n} = chem;\r\nconst cOrderCharCodes = {\r\n  A: 0,\r\n  S: 1,\r\n  D: 2,\r\n  T: 3\r\n};\r\nconst cmlStartRegexp = /\\s*<\\?xml\\b[^?>]*\\?>\\s*<(?:cml|molecule)\\b/i;\r\nclass CMLParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._complex = null;\r\n    this._residue = null;\r\n    this._serialAtomMap = null;\r\n    this._modelId = 1;\r\n    this._lastMolId = -1;\r\n    this._readOnlyOneMolecule = false;\r\n    this._options.fileType = 'cml';\r\n  }\r\n  static canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && cmlStartRegexp.test(data);\r\n  }\r\n  _rebuidBondIndexes(atoms, bonds) {\r\n    const count = atoms.length;\r\n    for (let i = 0; i < count; i++) {\r\n      const atomId = atoms[i].id;\r\n      const countBonds = bonds.length;\r\n      for (let j = 0; j < countBonds; j++) {\r\n        const idxs = bonds[j].atomRefs2.split(' ');\r\n        if (idxs[0] === atomId) {\r\n          bonds[j].start = i;\r\n        }\r\n        if (idxs[1] === atomId) {\r\n          bonds[j].end = i;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _createSGroup(molecule, moleculeArr) {\r\n    const newGroup = new CMLParser_SGroup(molecule.id, molecule.fieldData, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(parseFloat(molecule.x), parseFloat(molecule.y), 0), molecule.atomRefs, molecule);\r\n    if (molecule.placement === 'Relative') {\r\n      newGroup._center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0);\r\n    }\r\n    if (molecule.fieldName === 'MDLBG_FRAGMENT_CHARGE') {\r\n      newGroup._charge = parseInt(molecule.fieldData, 10) || 0;\r\n    }\r\n    if (molecule.fieldName === 'MDLBG_FRAGMENT_COEFFICIENT') {\r\n      newGroup._repeat = parseInt(molecule.fieldData, 10) || 1;\r\n    }\r\n    moleculeArr.push(newGroup);\r\n  }\r\n  _extractSGroup(molecule, moleculeArr) {\r\n    if (!Array.isArray(moleculeArr)) {\r\n      moleculeArr = [];\r\n    }\r\n    if (molecule) {\r\n      if (Array.isArray(molecule)) {\r\n        const count = molecule.length;\r\n        for (let i = 0; i < count; i++) {\r\n          if (molecule[i].molecule) {\r\n            moleculeArr = moleculeArr.concat(this._extractSGroup(molecule[i].molecule));\r\n          }\r\n          this._createSGroup(molecule[i], moleculeArr);\r\n        }\r\n      } else {\r\n        if (molecule.molecule) {\r\n          if (molecule.molecule) {\r\n            moleculeArr = moleculeArr.concat(this._extractSGroup(molecule.molecule));\r\n          }\r\n        }\r\n        this._createSGroup(molecule, moleculeArr);\r\n      }\r\n    }\r\n    return moleculeArr;\r\n  }\r\n  _extractSGroups(molecule, atoms) {\r\n    const moleculeArr = this._extractSGroup(molecule);\r\n    const count = atoms.length;\r\n    let i;\r\n    let j;\r\n    for (i = 0; i < count; i++) {\r\n      const atomId = atoms[i].id;\r\n      for (j = 0; j < moleculeArr.length; j++) {\r\n        const firstAtomRef = moleculeArr[j]._atoms.split(' ')[0];\r\n        if (firstAtomRef === atomId) {\r\n          if (!atoms[i].sgroupRef) {\r\n            atoms[i].sgroupRef = [];\r\n          }\r\n          atoms[i].sgroupRef.push(moleculeArr[j]);\r\n        }\r\n      }\r\n    }\r\n    // build sGroups centers\r\n    let atomMap = {}; // sgrpmap cache\r\n    let mapEntry = null;\r\n    const nLimon = 100000000;\r\n    const bLow = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(nLimon, nLimon, nLimon);\r\n    const bHight = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-nLimon, -nLimon, -nLimon);\r\n    function cycleFuncInner(e) {\r\n      mapEntry = atomMap[e];\r\n      if (mapEntry) {\r\n        moleculeArr[j]._atoms.push(mapEntry.a);\r\n      }\r\n    }\r\n    function cycleFunc(e) {\r\n      mapEntry = atomMap[e];\r\n      if (mapEntry) {\r\n        bLow.set(Math.min(bLow.x, mapEntry.x), Math.min(bLow.y, mapEntry.y), Math.min(bLow.z, mapEntry.z));\r\n        bHight.set(Math.max(bHight.x, mapEntry.x), Math.max(bHight.y, mapEntry.y), Math.max(bHight.z, mapEntry.z));\r\n        cycleFuncInner(e);\r\n      }\r\n    }\r\n    for (i = 0; i < atoms.length; i++) {\r\n      atomMap[atoms[i].id] = {};\r\n      atomMap[atoms[i].id].x = atoms[i].x2;\r\n      if (atoms[i].x3) {\r\n        atomMap[atoms[i].id].x = atoms[i].x3;\r\n      }\r\n      atomMap[atoms[i].id].x = parseFloat(atomMap[atoms[i].id].x);\r\n      atomMap[atoms[i].id].y = atoms[i].y2;\r\n      if (atoms[i].y3) {\r\n        atomMap[atoms[i].id].y = atoms[i].y3;\r\n      }\r\n      atomMap[atoms[i].id].y = parseFloat(atomMap[atoms[i].id].y);\r\n      atomMap[atoms[i].id].z = '0.0';\r\n      if (atoms[i].z3) {\r\n        atomMap[atoms[i].id].z = atoms[i].z3;\r\n      }\r\n      atomMap[atoms[i].id].z = parseFloat(atomMap[atoms[i].id].z);\r\n      atomMap[atoms[i].id].a = atoms[i];\r\n    }\r\n    let atomsRef;\r\n    for (j = 0; j < moleculeArr.length; j++) {\r\n      if (moleculeArr[j]._center !== null) {\r\n        bLow.set(nLimon, nLimon, nLimon);\r\n        bHight.set(-nLimon, -nLimon, -nLimon);\r\n        atomsRef = moleculeArr[j]._atoms.split(' ');\r\n        moleculeArr[j]._atoms = [];\r\n        atomsRef.forEach(cycleFunc);\r\n        moleculeArr[j]._center.addVectors(bLow, bHight);\r\n        moleculeArr[j]._center.multiplyScalar(0.5);\r\n      } else {\r\n        atomsRef = moleculeArr[j]._atoms.split(' ');\r\n        moleculeArr[j]._atoms = [];\r\n        atomsRef.forEach(cycleFuncInner);\r\n      }\r\n    }\r\n    atomMap = null;\r\n  }\r\n  _traverseData(dom) {\r\n    function isArray(o) {\r\n      return Object.prototype.toString.apply(o) === '[object Array]';\r\n    }\r\n    function parseNode(xmlNode, result) {\r\n      if (xmlNode.nodeName === '#text' && xmlNode.nodeValue.trim() === '') {\r\n        return;\r\n      }\r\n      const jsonNode = {};\r\n      jsonNode.xmlNode = xmlNode;\r\n      const existing = result[xmlNode.nodeName];\r\n      if (existing) {\r\n        if (!isArray(existing)) {\r\n          result[xmlNode.nodeName] = [existing, jsonNode];\r\n        } else {\r\n          result[xmlNode.nodeName].push(jsonNode);\r\n        }\r\n      } else {\r\n        result[xmlNode.nodeName] = jsonNode;\r\n      }\r\n      let length;\r\n      let i;\r\n      if (xmlNode.attributes) {\r\n        ({\r\n          length\r\n        } = xmlNode.attributes);\r\n        for (i = 0; i < length; i++) {\r\n          const attribute = xmlNode.attributes[i];\r\n          jsonNode[attribute.nodeName] = attribute.nodeValue;\r\n        }\r\n      }\r\n      ({\r\n        length\r\n      } = xmlNode.childNodes);\r\n      for (i = 0; i < length; i++) {\r\n        parseNode(xmlNode.childNodes[i], jsonNode);\r\n      }\r\n    }\r\n    const result = {};\r\n    if (dom.childNodes.length) {\r\n      parseNode(dom.childNodes[0], result);\r\n    }\r\n    return result;\r\n  }\r\n  _findSuitableMolecule(data, molSet) {\r\n    for (const key in data) {\r\n      if (key === 'xmlNode') {\r\n        continue;\r\n      } else if (key === 'molecule') {\r\n        if (data.molecule) {\r\n          if (data.molecule.atomArray && data.molecule.atomArray.atom) {\r\n            molSet.push(data);\r\n          }\r\n          if (Array.isArray(data.molecule)) {\r\n            for (let i = 0; i < data.molecule.length; i++) {\r\n              if (data.molecule[i].atomArray && data.molecule[i].atomArray.atom) {\r\n                molSet.push({\r\n                  molecule: data.molecule[i]\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (data[key] && data[key] !== null && typeof data[key] === 'object') {\r\n        this._findSuitableMolecule(data[key], molSet);\r\n      }\r\n    }\r\n  }\r\n  _selectComponents(text) {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(text, 'application/xml');\r\n    const traversedData = this._traverseData(doc);\r\n    let rawData;\r\n    const self = this;\r\n    function prepareComponentCompound(data) {\r\n      let atoms = [];\r\n      if (data.molecule && data.molecule.atomArray && data.molecule.atomArray.atom) {\r\n        if (!Array.isArray(data.molecule.atomArray.atom)) {\r\n          atoms.push(data.molecule.atomArray.atom);\r\n        } else {\r\n          atoms = data.molecule.atomArray.atom;\r\n        }\r\n      } else if (!data.molecule) {\r\n        const ret = {};\r\n        ret.atomLabels = null;\r\n        ret.labelsCount = 1;\r\n        return ret;\r\n      }\r\n      if (data.molecule.molecule) {\r\n        self._extractSGroups(data.molecule.molecule, atoms);\r\n      }\r\n      let atom;\r\n      let count = atoms.length;\r\n      for (let i = 0; i < count; i++) {\r\n        atom = atoms[i];\r\n        atom.edges = [];\r\n      }\r\n      let localBond = [];\r\n      if (data.molecule.bondArray && data.molecule.bondArray.bond) {\r\n        if (!Array.isArray(data.molecule.bondArray.bond)) {\r\n          localBond.push(data.molecule.bondArray.bond);\r\n        } else {\r\n          localBond = data.molecule.bondArray.bond;\r\n        }\r\n      }\r\n      let bond;\r\n      count = localBond.length;\r\n      self._rebuidBondIndexes(atoms, localBond);\r\n      function addCurrBond(index) {\r\n        bond = localBond[index];\r\n        atom = atoms[bond.start];\r\n        if (!atom) {\r\n          return false;\r\n        }\r\n        atom.edges.push(bond.end);\r\n        atom = atoms[bond.end];\r\n        if (!atom) {\r\n          return false;\r\n        }\r\n        atom.edges.push(bond.start);\r\n        return true;\r\n      }\r\n      for (let i = 0; i < count; i++) {\r\n        if (!addCurrBond(i)) {\r\n          // ignore invalid bond\r\n          continue;\r\n        }\r\n        const orderAttr = bond.xmlNode.getAttribute('order');\r\n        const tc = parseInt(orderAttr, 10);\r\n        // the default bond order is unknown\r\n        localBond[i].order = 0;\r\n        localBond[i].type = CMLParser_Bond.BondType.UNKNOWN;\r\n        if (tc > 1) {\r\n          localBond[i].order = tc;\r\n        } else {\r\n          // another option - bond order is a string\r\n          const order = cOrderCharCodes[orderAttr];\r\n          if (order !== undefined) {\r\n            localBond[i].order = order;\r\n            if (orderAttr === 'A') {\r\n              localBond[i].type = CMLParser_Bond.BondType.AROMATIC;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      count = atoms.length;\r\n      for (let i = 0; i < count; i++) {\r\n        atom = atoms[i];\r\n        atom.edges.sort();\r\n      }\r\n      const labels = self._breadWidthSearch(atoms, 0); // for now\r\n\r\n      const retStruct = {};\r\n      retStruct.atoms = atoms;\r\n      retStruct.bonds = localBond;\r\n      retStruct.labels = labels.atomLabels;\r\n      retStruct.count = Math.min(1, labels.labelsCount); // for now\r\n      retStruct.curr = -1;\r\n      retStruct.originalCML = doc;\r\n      return retStruct;\r\n    }\r\n    if (traversedData.cml) {\r\n      rawData = traversedData.cml;\r\n    } else {\r\n      rawData = traversedData;\r\n    }\r\n    const retData = [];\r\n    const filteredData = [];\r\n    this._findSuitableMolecule(rawData, filteredData);\r\n    if (this._readOnlyOneMolecule && filteredData.length > 1) {\r\n      filteredData.splice(1, filteredData.length - 1);\r\n    }\r\n    filteredData.forEach(d => {\r\n      const rd = prepareComponentCompound(d);\r\n      if (rd.atoms.length > 0) {\r\n        retData.push(rd);\r\n      }\r\n    });\r\n    return retData;\r\n  }\r\n  _packLabel(compId, molId) {\r\n    const shift = 16;\r\n    return (molId << shift) + compId;\r\n  }\r\n  _unpackLabel(l) {\r\n    const shift = 16;\r\n    const mask = (1 << shift) - 1;\r\n    return {\r\n      molId: l >>> shift,\r\n      compId: l & mask\r\n    };\r\n  }\r\n  _breadWidthSearch(atoms, molID) {\r\n    const atomLabels = new Array(atoms.length);\r\n    let id;\r\n    for (id = 0; id < atomLabels.length; id++) {\r\n      atomLabels[id] = this._packLabel(0, molID);\r\n    }\r\n    const breadthQueue = [];\r\n    let componentID = 0;\r\n    let labeledAtoms = atoms.length;\r\n    while (labeledAtoms > 0) {\r\n      componentID++;\r\n      let startID = -1;\r\n      for (id = 0; id < atomLabels.length; id++) {\r\n        if (this._unpackLabel(atomLabels[id]).compId === 0) {\r\n          startID = id;\r\n          break;\r\n        }\r\n      }\r\n      if (startID < 0) {\r\n        break;\r\n      }\r\n\r\n      // Bread first search\r\n      breadthQueue.push(atoms[startID]);\r\n      atomLabels[startID] = this._packLabel(componentID, molID);\r\n      labeledAtoms--;\r\n      while (breadthQueue.length > 0) {\r\n        const curr = breadthQueue.shift();\r\n        if (!curr) {\r\n          continue;\r\n        }\r\n        for (let i = 0; i < curr.edges.length; i++) {\r\n          if (atomLabels[curr.edges[i]] !== componentID) {\r\n            breadthQueue.push(atoms[curr.edges[i]]);\r\n            atomLabels[curr.edges[i]] = componentID;\r\n            labeledAtoms--;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const ret = {};\r\n    ret.atomLabels = atomLabels;\r\n    ret.labelsCount = componentID;\r\n    return ret;\r\n  }\r\n  _parseBond(eAtom, mainAtom, order, type) {\r\n    if (eAtom >= 0) {\r\n      const h = [Math.min(eAtom, mainAtom), Math.max(eAtom, mainAtom)];\r\n      this._complex.addBond(h[0], h[1], order, type, true);\r\n    }\r\n  }\r\n  _fixBondsArray() {\r\n    const serialAtomMap = this._serialAtomMap = {};\r\n    const complex = this._complex;\r\n    const atoms = complex._atoms;\r\n    for (let i = 0, ni = atoms.length; i < ni; ++i) {\r\n      const atom = atoms[i];\r\n      serialAtomMap[atom.serial] = atom;\r\n    }\r\n    const bonds = complex._bonds;\r\n    const {\r\n      logger\r\n    } = this;\r\n    for (let j = 0, nj = bonds.length; j < nj; ++j) {\r\n      const bond = bonds[j];\r\n      if (bond._right < bond._left) {\r\n        logger.debug('_fixBondsArray: Logic error.');\r\n      }\r\n      bond._left = serialAtomMap[bond._left] || null;\r\n      bond._right = serialAtomMap[bond._right] || null;\r\n    }\r\n  }\r\n  _parseSet(varData) {\r\n    const complex = this._complex = new CMLParser_Complex();\r\n    const data = varData;\r\n    const currentLabel = data.curr;\r\n    const {\r\n      atoms,\r\n      labels\r\n    } = data;\r\n    let atom = null;\r\n    let i;\r\n    let j;\r\n    const count = atoms.length;\r\n    function addFunc(a) {\r\n      a.xmlNodeRef = atom;\r\n      if (atom.x2) {\r\n        atom.x3 = atom.x2;\r\n        delete atom.x2;\r\n      }\r\n      if (atom.y2) {\r\n        atom.y3 = atom.y2;\r\n        delete atom.y2;\r\n      }\r\n      if (!atom.z3) {\r\n        atom.z3 = '0.0';\r\n      }\r\n      atom.complexAtom = a;\r\n    }\r\n    let chains = {};\r\n    // parse atoms in label order\r\n    const reorder = [];\r\n    for (i = 0; i < count; i++) {\r\n      reorder.push(i);\r\n    }\r\n    reorder.sort((a, b) => labels[a] - labels[b]);\r\n    for (i = 0; i < count; i++) {\r\n      const atomCharge = 0;\r\n      const lLabel = labels[reorder[i]];\r\n      if (this._unpackLabel(lLabel).molId === this._unpackLabel(currentLabel).molId) {\r\n        atom = atoms[reorder[i]];\r\n        const atomFullNameStruct = atom.elementType;\r\n        if (atom.sgroupRef) {\r\n          const countRef = atom.sgroupRef.length;\r\n          for (let k = 0; k < countRef; ++k) {\r\n            complex._sgroups.push(atom.sgroupRef[k]);\r\n          }\r\n        }\r\n        if (atom.x3 || atom.x2) {\r\n          const currAtomComp = this._unpackLabel(lLabel).compId;\r\n          // use ' ' by default instead of synthetic creation of chain names\r\n          const chainID = ' '; //= String.fromCharCode('A'.charCodeAt(0) + currAtomComp);\r\n          const resSeq = currAtomComp;\r\n          const iCode = ' ';\r\n          let strLabel = currAtomComp.toString();\r\n          if (strLabel.length === 1) {\r\n            strLabel = `0${strLabel}`;\r\n          }\r\n          const resName = `N${strLabel}`;\r\n          let chain = chains[chainID];\r\n          if (!chain || chain.getName() !== chainID) {\r\n            chains[chainID] = chain = this._complex.getChain(chainID) || this._complex.addChain(chainID);\r\n            this._residue = null;\r\n          }\r\n          let residue = this._residue;\r\n          if (!residue || residue.getSequence() !== resSeq || residue.getICode() !== iCode) {\r\n            this._residue = residue = chain.addResidue(resName, resSeq, iCode);\r\n          }\r\n\r\n          // _x, _y, _z, mname, mindex, atomNameFull, atomName, chainID, serial, isHet, atlLocInd, atomNameToTypeF\r\n          let xyz = null;\r\n          if (atom.x3) {\r\n            xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(parseFloat(atom.x3), parseFloat(atom.y3), parseFloat(atom.z3));\r\n          } else if (atom.x2) {\r\n            xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(parseFloat(atom.x2), parseFloat(atom.y2), 0);\r\n          }\r\n          let element = CMLParser_Element.ByName[atom.elementType.toUpperCase()];\r\n          if (!element) {\r\n            element = JSON.parse(JSON.stringify(CMLParser_Element.ByName[Object.keys(CMLParser_Element.ByName)[Object.keys(CMLParser_Element.ByName).length - 1]]));\r\n            element.number += 1;\r\n            element.name = atom.elementType.toUpperCase();\r\n            element.fullName = 'Unknown';\r\n            CMLParser_Element.ByName[atom.elementType.toUpperCase()] = element;\r\n          }\r\n          const atomSerial = parseInt(atom.id.replace(/[^0-9]/, ''), 10);\r\n          const added = residue.addAtom(atomFullNameStruct, element, xyz, CMLParser_Element.Role.SG, true, atomSerial, ' ', 1.0, 0.0, atomCharge);\r\n          if (atom.hydrogenCount) {\r\n            added.hydrogenCount = parseInt(atom.hydrogenCount, 10);\r\n          }\r\n          if (atom.mrvValence) {\r\n            added.valence = parseInt(atom.mrvValence, 10);\r\n          }\r\n          addFunc(added);\r\n        }\r\n      }\r\n    }\r\n    chains = null; // NOSONAR\r\n    for (i = 0; i < data.bonds.length; i++) {\r\n      const cb = data.bonds[i];\r\n      if (this._unpackLabel(labels[cb.start]).molId === this._unpackLabel(currentLabel).molId && this._unpackLabel(labels[cb.end]).molId === this._unpackLabel(currentLabel).molId) {\r\n        atom = atoms[cb.start];\r\n        if (!atom || !atoms[cb.end]) {\r\n          continue; // skip invalid\r\n        }\r\n        this._parseBond(parseInt(atom.id.replace(/[^0-9]/, ''), 10), parseInt(atoms[cb.end].id.replace(/[^0-9]/, ''), 10), cb.order, cb.type);\r\n      }\r\n    }\r\n    for (i = 0; i < this._complex.getSGroupCount(); i++) {\r\n      const sGrp = this._complex.getSGroups()[i];\r\n      for (j = 0; j < sGrp._atoms.length; j++) {\r\n        sGrp._atoms[j] = sGrp._atoms[j].complexAtom;\r\n      }\r\n    }\r\n    for (i = 0; i < count; i++) {\r\n      if (this._unpackLabel(labels[i]).molId === this._unpackLabel(currentLabel).molId) {\r\n        atom = atoms[i];\r\n        atom.complexAtom = null;\r\n        delete atom.complexAtom;\r\n      }\r\n    }\r\n    this._complex.originalCML = data.originalCML;\r\n    this._fixBondsArray();\r\n    complex.finalize({\r\n      needAutoBonding: false,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n    this._serialAtomMap = null;\r\n    this._complex = null;\r\n    return complex;\r\n  }\r\n  parseSync() {\r\n    const complexes = [];\r\n    const self = this;\r\n    const moleculaSet = this._selectComponents(this._data);\r\n    moleculaSet.forEach(molSet => {\r\n      molSet.curr = 2;\r\n      if (molSet.count === 0) {\r\n        molSet.count = 1;\r\n      }\r\n      for (let i = 0; i < molSet.count; i++) {\r\n        molSet.curr = i + 1;\r\n        complexes.push(self._parseSet(molSet, false));\r\n      }\r\n    });\r\n    let totalAtomsParsed = 0;\r\n    complexes.forEach(c => {\r\n      totalAtomsParsed += c.getAtomCount();\r\n    });\r\n    if (totalAtomsParsed <= 0) {\r\n      throw new Error('The data does not contain valid atoms');\r\n    }\r\n    if (complexes.length > 1) {\r\n      const joinedComplex = new CMLParser_Complex();\r\n      joinedComplex.joinComplexes(complexes);\r\n      joinedComplex.originalCML = complexes[0].originalCML;\r\n      return joinedComplex;\r\n    }\r\n    if (complexes.length === 1) {\r\n      return complexes[0];\r\n    }\r\n    return new CMLParser_Complex();\r\n  }\r\n}\r\nCMLParser.formats = ['cml'];\r\nCMLParser.extensions = ['.cml'];\r\n/* harmony default export */ const parsers_CMLParser = (CMLParser);\r\n// EXTERNAL MODULE: ./vendor/js/mmtf.js\r\nvar mmtf = __nested_webpack_require_130507__(660);\r\nvar mmtf_default = /*#__PURE__*/__nested_webpack_require_130507__.n(mmtf);\r\n;// CONCATENATED MODULE: ./src/io/parsers/MMTFParser.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: MMTFParser_Complex,\r\n  Chain: MMTFParser_Chain,\r\n  Atom: MMTFParser_Atom,\r\n  Element: MMTFParser_Element,\r\n  Helix: MMTFParser_Helix,\r\n  Sheet: MMTFParser_Sheet,\r\n  Strand: MMTFParser_Strand,\r\n  Bond: MMTFParser_Bond,\r\n  Assembly: MMTFParser_Assembly,\r\n  Molecule: MMTFParser_Molecule\r\n} = chem;\r\nclass ArrayComparator {\r\n  constructor(original) {\r\n    this._original = Array.from(original);\r\n    this._original.sort();\r\n    this._sum = 0;\r\n    for (let i = 0; i < this._original.length; ++i) {\r\n      this._sum += this._original[i];\r\n    }\r\n  }\r\n  compare(candidate) {\r\n    const len = candidate.length;\r\n    if (len !== this._original.length) {\r\n      return false;\r\n    }\r\n    let sum = 0;\r\n    let i;\r\n    for (i = 0; i < len; ++i) {\r\n      sum += candidate[i];\r\n    }\r\n    if (sum !== this._sum) {\r\n      return false;\r\n    }\r\n    const sorted = Array.from(candidate);\r\n    sorted.sort();\r\n    for (i = 0; i < len; ++i) {\r\n      if (sorted[i] !== this._original[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\nArrayComparator.prototype.constructor = ArrayComparator;\r\nconst MMTFParser_StructuralElementType = chem_StructuralElement.Type;\r\n\r\n// see https://github.com/rcsb/mmtf-javascript/blob/master/src/mmtf-traverse.js\r\nconst secStructToType = [MMTFParser_StructuralElementType.HELIX_PI,\r\n// 0\r\nMMTFParser_StructuralElementType.BEND,\r\n// 1\r\nMMTFParser_StructuralElementType.HELIX_ALPHA,\r\n// 2\r\nMMTFParser_StructuralElementType.STRAND,\r\n// 3\r\nMMTFParser_StructuralElementType.HELIX_310,\r\n// 4\r\nMMTFParser_StructuralElementType.BRIDGE,\r\n// 5\r\nMMTFParser_StructuralElementType.TURN,\r\n// 6\r\nMMTFParser_StructuralElementType.COIL // 7\r\n];\r\nfunction getFirstByte(buf) {\r\n  const bytes = new Uint8Array(buf, 0, 1);\r\n  return bytes[0];\r\n}\r\nclass MMTFParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._options.fileType = 'mmtf';\r\n  }\r\n  static canProbablyParse(data) {\r\n    // check if it's binary MessagePack format containing a map (dictionary)\r\n    // see https://github.com/msgpack/msgpack/blob/master/spec.md\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArrayBuffer(data) && (getFirstByte(data) | 1) === 0xDF;\r\n  }\r\n  _onModel(_modelData) {}\r\n  _onChain(chainData) {\r\n    if (chainData.modelIndex !== 0) {\r\n      return;\r\n    }\r\n    const chain = new MMTFParser_Chain(this._complex, chainData.chainName);\r\n    this._complex._chains[chainData.chainIndex] = chain;\r\n    chain._index = chainData.chainIndex;\r\n  }\r\n  _onGroup(groupData) {\r\n    if (groupData.modelIndex !== 0) {\r\n      return;\r\n    }\r\n    if (this.settings.now.nowater) {\r\n      // skip water\r\n      if (groupData.groupName === 'HOH' || groupData.groupName === 'WAT') {\r\n        return;\r\n      }\r\n    }\r\n    const chain = this._complex._chains[groupData.chainIndex];\r\n    const icode = !groupData.insCode.charCodeAt(0) ? '' : groupData.insCode;\r\n    const residue = chain.addResidue(groupData.groupName, groupData.groupId, icode);\r\n    residue._index = groupData.groupIndex;\r\n    this._updateSecStructure(this._complex, residue, groupData);\r\n  }\r\n  _onAtom(atomData) {\r\n    if (atomData.modelIndex !== 0) {\r\n      return;\r\n    }\r\n    const altLoc = !atomData.altLoc.charCodeAt(0) ? '' : atomData.altLoc;\r\n    const atom = new MMTFParser_Atom(atomData.groupIndex,\r\n    // we store residue index here to replace it later with actual reference\r\n    atomData.atomName, MMTFParser_Element.getByName(atomData.element.toUpperCase()), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(atomData.xCoord, atomData.yCoord, atomData.zCoord), MMTFParser_Element.Role[atomData.atomName], false,\r\n    // hetero atoms will be marked later\r\n    atomData.atomId, altLoc, atomData.occupancy, atomData.bFactor, atomData.formalCharge);\r\n    this._complex._atoms[atomData.atomIndex] = atom;\r\n    atom.index = atomData.atomIndex;\r\n    this._serialAtomMap[atomData.atomId] = atom;\r\n  }\r\n  _onBond(bondData) {\r\n    const right = Math.max(bondData.atomIndex1, bondData.atomIndex2);\r\n    if (right >= this._complex._atoms.length) {\r\n      return;\r\n    }\r\n    const left = Math.min(bondData.atomIndex1, bondData.atomIndex2);\r\n    this._complex.addBond(this._complex._atoms[left], this._complex._atoms[right], bondData.bondOrder, MMTFParser_Bond.BondType.UNKNOWN, true);\r\n  }\r\n  _updateSecStructure(complex, residue, groupData) {\r\n    const helixClasses = [3, -1, 1, -1, 5];\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(groupData) && groupData.secStruct === this._ssType) {\r\n      residue._secondary = this._ssStruct;\r\n      if (this._ssStruct) {\r\n        this._ssStruct.term = residue;\r\n      }\r\n      return;\r\n    }\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(groupData)) {\r\n      // start new secondary structure\r\n      const type = secStructToType[groupData.secStruct];\r\n      this._ssType = groupData.secStruct;\r\n      this._ssStart = residue;\r\n      let struct = null;\r\n      switch (this._ssType) {\r\n        case -1: // undefined\r\n        case 7:\r\n          // coil\r\n          break;\r\n        case 0: // pi helix\r\n        case 2: // alpha helix\r\n        case 4:\r\n          // 3-10 helix\r\n          struct = new MMTFParser_Helix(helixClasses[this._ssType], residue, residue, 0, '', '', 0);\r\n          complex._helices.push(struct);\r\n          break;\r\n        case 3:\r\n          {\r\n            // extended\r\n            const sheet = new MMTFParser_Sheet('', 0);\r\n            complex._sheets.push(sheet);\r\n            struct = new MMTFParser_Strand(sheet, residue, residue, 0, null, null);\r\n            break;\r\n          }\r\n        default:\r\n          if (type !== undefined) {\r\n            struct = new chem_StructuralElement(type, residue, residue);\r\n          }\r\n          break;\r\n      }\r\n      this._ssStruct = struct;\r\n      residue._secondary = struct;\r\n      if (struct) {\r\n        complex.structures.push(struct);\r\n      }\r\n    }\r\n  }\r\n  _updateMolecules(mmtfData) {\r\n    const entities = mmtfData.entityList;\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const chainsInModel0 = mmtfData.chainsPerModel[0];\r\n    for (let i = 0; i < entities.length; i++) {\r\n      const entity = entities[i];\r\n      const chains = entity.chainIndexList;\r\n      let residues = [];\r\n      for (let j = 0; j < chains.length; j++) {\r\n        const chainIndex = chains[j];\r\n        // skip chains in models other than the first one\r\n        if (chainIndex >= chainsInModel0) {\r\n          continue;\r\n        }\r\n        const chain = this._complex._chains[chainIndex];\r\n        residues = residues.concat(chain._residues.slice());\r\n      }\r\n      const molecule = new MMTFParser_Molecule(this._complex, entity.description, i + 1);\r\n      molecule.residues = residues;\r\n      this._complex._molecules[i] = molecule;\r\n    }\r\n  }\r\n\r\n  // populate complex with chains, residues and atoms\r\n  _traverse(mmtfData) {\r\n    const self = this;\r\n\r\n    // get metadata\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    metadata.id = mmtfData.structureId;\r\n    metadata.title = [];\r\n    metadata.title[0] = mmtfData.title;\r\n    metadata.date = mmtfData.releaseDate;\r\n    metadata.format = 'mmtf';\r\n\r\n    // create event callback functions\r\n    const eventCallbacks = {\r\n      onModel(modelData) {\r\n        self._onModel(modelData);\r\n      },\r\n      onChain(chainData) {\r\n        self._onChain(chainData);\r\n      },\r\n      onGroup(groupData) {\r\n        self._onGroup(groupData);\r\n      },\r\n      onAtom(atomData) {\r\n        self._onAtom(atomData);\r\n      },\r\n      onBond(bondData) {\r\n        self._onBond(bondData);\r\n      }\r\n    };\r\n\r\n    // temporary variables used during traversal to track secondary structures\r\n    this._ssType = -1;\r\n    this._ssStruct = null;\r\n    this._ssStart = null;\r\n\r\n    // traverse the structure and listen to the events\r\n    mmtf_default().traverse(mmtfData, eventCallbacks);\r\n    this._updateSecStructure(this._complex);\r\n    this._updateMolecules(mmtfData);\r\n  }\r\n\r\n  // During traversal atoms and residues don't come sequentially\r\n  // so a residue for certain atom can be unavailable. Thus we\r\n  // store residue index in atom.\r\n  // This function being called after traversal replaces the index\r\n  // with actual reference, and also populates atom lists in residues.\r\n  _linkAtomsToResidues() {\r\n    for (let i = 0; i < this._complex._atoms.length; ++i) {\r\n      const atom = this._complex._atoms[i];\r\n      const residue = this._complex._residues[atom.residue];\r\n      atom.residue = residue;\r\n      residue._atoms.push(atom);\r\n    }\r\n  }\r\n  _findSynonymousChains() {\r\n    const named = {};\r\n    for (let i = 0; i < this._complex._chains.length; ++i) {\r\n      const chain = this._complex._chains[i];\r\n      const name = chain.getName();\r\n      if (!named.hasOwnProperty(name)) {\r\n        named[name] = [];\r\n      }\r\n      named[name].push(chain._index);\r\n    }\r\n    return named;\r\n  }\r\n\r\n  // NOTE: This function relies on original chain indices, so it must be called before any magic happens to chains.\r\n  _parseAssemblyInfo(mmtfData) {\r\n    let i;\r\n    let j;\r\n    let k;\r\n    const assemblies = [];\r\n    const {\r\n      logger\r\n    } = this;\r\n    for (i = 0; i < mmtfData.bioAssemblyList.length; ++i) {\r\n      const baInfo = mmtfData.bioAssemblyList[i];\r\n      if (baInfo.transformList.length === 0) {\r\n        continue;\r\n      }\r\n      const chains = baInfo.transformList[0].chainIndexList;\r\n      const chainListCheck = new ArrayComparator(chains);\r\n\r\n      // build list of chain names\r\n      const chainNames = {};\r\n      for (j = 0; j < chains.length; ++j) {\r\n        chainNames[this._complex._chains[chains[j]].getName()] = 1;\r\n      }\r\n\r\n      // all chains with the same name should belong to assembly if one of them belongs\r\n      const allChains = [];\r\n      let name;\r\n      for (name in chainNames) {\r\n        if (chainNames.hasOwnProperty(name)) {\r\n          // just concat arrays -- there should be no duplicates\r\n          Array.prototype.push.apply(allChains, this._chainsByName[name]);\r\n        }\r\n      }\r\n      if (!chainListCheck.compare(allChains)) {\r\n        // assembly is missing some of the chains\r\n        logger.debug('MMTF: Assembly is missing some of the synonymous chains. Skipping...');\r\n      }\r\n      const a = new MMTFParser_Assembly(this._complex);\r\n\r\n      // add chains to assembly\r\n      for (name in chainNames) {\r\n        if (chainNames.hasOwnProperty(name)) {\r\n          a.addChain(name);\r\n        }\r\n      }\r\n\r\n      // add unique matrices to assembly\r\n      a.addMatrix(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4().fromArray(baInfo.transformList[0].matrix).transpose());\r\n      for (j = 1; j < baInfo.transformList.length; ++j) {\r\n        const transform = baInfo.transformList[j];\r\n        if (!chainListCheck.compare(transform.chainIndexList)) {\r\n          // list of chains for this transform doesn't match that for other transforms\r\n          // this is illegal in our structure\r\n          logger.debug('MMTF: Chain lists differ for different transforms in one assembly. Skipping...');\r\n          continue;\r\n        }\r\n        const m = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4().fromArray(transform.matrix).transpose();\r\n\r\n        // check if matrix is already in the list\r\n        for (k = 0; k < a.matrices.length; ++k) {\r\n          if (a.matrices[k].equals(m)) {\r\n            break;\r\n          }\r\n        }\r\n        if (k === a.matrices.length) {\r\n          a.addMatrix(m);\r\n        }\r\n      }\r\n      a.finalize();\r\n      assemblies.push(a);\r\n    }\r\n    return assemblies;\r\n  }\r\n\r\n  // NOTE: This function relies on original chain indices, so it must be called before any magic happens to chains.\r\n  _markHeteroAtoms(mmtfData) {\r\n    const chainsInModel0 = mmtfData.chainsPerModel[0];\r\n    for (let i = 0; i < mmtfData.entityList.length; ++i) {\r\n      const entity = mmtfData.entityList[i];\r\n      if (entity.type !== 'polymer') {\r\n        for (let j = 0; j < entity.chainIndexList.length; ++j) {\r\n          const chainIndex = entity.chainIndexList[j];\r\n          // skip chains in models other than the first one\r\n          if (chainIndex >= chainsInModel0) {\r\n            continue;\r\n          }\r\n          const chain = this._complex._chains[chainIndex];\r\n          for (let k = 0; k < chain._residues.length; ++k) {\r\n            const res = chain._residues[k];\r\n            for (let m = 0; m < res._atoms.length; ++m) {\r\n              res._atoms[m].het = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // joins chains with the same name into single chain\r\n  _joinSynonymousChains() {\r\n    let i;\r\n    let j;\r\n    const primaryChainsArray = [];\r\n    const primaryChainsHash = {};\r\n\r\n    // join chains\r\n    for (i = 0; i < this._complex._chains.length; ++i) {\r\n      const chain = this._complex._chains[i];\r\n      const name = chain.getName();\r\n      if (!primaryChainsHash.hasOwnProperty(name)) {\r\n        // new name -- this is a primary chain\r\n        primaryChainsHash[name] = chain;\r\n        chain._index = primaryChainsArray.length; // update index as this array will later replace original chain list\r\n        primaryChainsArray.push(chain);\r\n        continue;\r\n      }\r\n\r\n      // this chain should be joined with the primary chain of the same name\r\n      const primary = primaryChainsHash[name];\r\n      for (j = 0; j < chain._residues.length; ++j) {\r\n        const residue = chain._residues[j];\r\n        primary._residues.push(residue);\r\n        residue._chain = primary;\r\n      }\r\n    }\r\n\r\n    // replace chains list with one containing only primary chains\r\n    // dropping references to all chains but primary\r\n    this._complex._chains = primaryChainsArray;\r\n  }\r\n  parseSync() {\r\n    const mmtfData = mmtf_default().decode(this._data);\r\n    this._complex = new MMTFParser_Complex();\r\n    this._serialAtomMap = {}; // filled during traversal\r\n\r\n    this._traverse(mmtfData);\r\n    this._linkAtomsToResidues();\r\n    this._markHeteroAtoms(mmtfData);\r\n    this._chainsByName = this._findSynonymousChains();\r\n    Array.prototype.push.apply(this._complex.units, this._parseAssemblyInfo(mmtfData));\r\n    this._joinSynonymousChains();\r\n    this._complex.finalize({\r\n      needAutoBonding: false,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n    return this._complex;\r\n  }\r\n}\r\nMMTFParser.formats = ['mmtf'];\r\nMMTFParser.extensions = ['.mmtf'];\r\nMMTFParser.binary = true;\r\n/* harmony default export */ const parsers_MMTFParser = (MMTFParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/ParsingError.js\r\nclass ParsingError extends Error {\r\n  constructor(message, line, column) {\r\n    super(`data:${line}:${column}: ${message}`);\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, ParsingError);\r\n    }\r\n    this.name = 'ParsingError';\r\n    this.parseLine = line;\r\n    this.parseColumn = column;\r\n  }\r\n}\r\n/* harmony default export */ const parsers_ParsingError = (ParsingError);\r\n;// CONCATENATED MODULE: ./src/io/parsers/readCIF.js\r\n\r\n\r\n\r\n// Implemented and being tested against: https://www.iucr.org/resources/cif/spec/version1.1/cifsyntax\r\n\r\nfunction _isWhitespace(ch) {\r\n  return ch === 32 || ch === 10 || ch === 13 || ch === 9;\r\n}\r\nfunction _inlineIndexOf(ch0, str, idx) {\r\n  const len = str.length;\r\n  let ch = -1;\r\n  while (idx < len) {\r\n    ch = str.charCodeAt(idx);\r\n    if (ch === ch0 || ch === 10) {\r\n      break;\r\n    }\r\n    ++idx;\r\n  }\r\n  return ch === ch0 ? idx : -1;\r\n}\r\nfunction readCIF(source) {\r\n  let i = 0;\r\n  let j = 0;\r\n  const n = source.length;\r\n  let code = NaN;\r\n  let newline = true;\r\n  let line = 1;\r\n  let column = 1;\r\n  let begin;\r\n  let state = 0; // 0 - start, 1 - block, 2 - item, 3 - loop, 4 - values, 5 - value\r\n  const result = {};\r\n  let block = {};\r\n  let keys = [];\r\n  let keysCount = 0;\r\n  let key = '';\r\n  let values = [];\r\n  let valuesCount = 0;\r\n  let value;\r\n  function _parseValue() {\r\n    let val;\r\n    if ((code === 46 || code === 63) && (i + 1 >= n || _isWhitespace(source.charCodeAt(i + 1)))) {\r\n      // '.' or '?' .....\r\n      // it's a missing value\r\n      ++column;\r\n      ++i;\r\n      return undefined;\r\n    }\r\n    if (newline && code === 59) {\r\n      // ';' ......................................................................\r\n      // parse multi-line string\r\n      j = i;\r\n      let lines = 0;\r\n      do {\r\n        j = _inlineIndexOf(10, source, j + 1); // '\\n'\r\n        if (j === -1) {\r\n          throw new parsers_ParsingError('Unterminated text block found', line, column);\r\n        }\r\n        ++lines;\r\n      } while (j + 1 < n && source.charCodeAt(j + 1) !== code || j + 1 >= n);\r\n      val = source.substring(i + 1, j).replace(/\\r/g, '');\r\n      i = j + 2;\r\n      line += lines;\r\n      column = 1;\r\n      newline = false;\r\n      return val;\r\n    }\r\n    if (code === 39 || code === 34) {\r\n      // ''' or '\"' ...........................................................\r\n      // parse quoted string\r\n      j = i;\r\n      do {\r\n        j = _inlineIndexOf(code, source, j + 1);\r\n        if (j === -1) {\r\n          throw new parsers_ParsingError('Unterminated quoted string found', line, column);\r\n        }\r\n      } while (j + 1 < n && !_isWhitespace(source.charCodeAt(j + 1)));\r\n      val = source.substring(i + 1, j);\r\n      column += j - i + 1;\r\n      i = j + 1;\r\n      return val;\r\n    } // ......................................................................................................\r\n    // parse until the first whitespace\r\n    j = i;\r\n    while (j < n && !_isWhitespace(source.charCodeAt(j))) {\r\n      ++j;\r\n    }\r\n    val = source.substring(i, j);\r\n    column += j - i;\r\n    i = j;\r\n    // try to convert to a number\r\n    const num = Number(val);\r\n    if (!Number.isNaN(num)) {\r\n      return num;\r\n    }\r\n    // or leave as an unquoted string\r\n    return val;\r\n  }\r\n  function _storeKey(tag) {\r\n    keys[keysCount++] = tag;\r\n  }\r\n  function _storeValue(val) {\r\n    const keyIndex = valuesCount % keysCount;\r\n    values[keyIndex].push(val);\r\n    ++valuesCount;\r\n    return val;\r\n  }\r\n  while (i <= n) {\r\n    code = source.charCodeAt(i); // 'NaN' in place of '<eof>'\r\n    if (code === 13) {// '\\r' .......................................................................................\r\n      // just ignore\r\n    } else if (code === 10) {\r\n      // '\\n' ................................................................................\r\n      // take note of new lines\r\n      newline = true;\r\n      ++line;\r\n      column = 1;\r\n    } else {\r\n      // process inline characters\r\n      if (code === 32 || code === 9) {// ' ' or '\\t' ................................................................\r\n        // just ignore\r\n      } else if (code === 35) {\r\n        // '#' ...............................................................................\r\n        // skip the comment until before the end of the line\r\n        i = _inlineIndexOf(10, source, i + 1); // '\\n'\r\n        if (i === -1) {\r\n          break;\r\n        } else {\r\n          continue; // don't forget to process the new line\r\n        }\r\n      } else if (state === 0) {\r\n        // start =============================================================================\r\n        if ((code === 68 || code === 100) && source.substr(i + 1, 4).toLowerCase() === 'ata_') {\r\n          // 'data_' ..........\r\n          j = i + 5;\r\n          begin = j;\r\n          while (j < n && !_isWhitespace(source.charCodeAt(j))) {\r\n            ++j;\r\n          }\r\n          column += j - i;\r\n          i = j;\r\n          if (begin < i) {\r\n            // add new data block\r\n            result[source.substring(begin, i)] = block = {};\r\n            state = 1; // block\r\n            continue; // don't forget to process the whitespace\r\n          } else {\r\n            throw new parsers_ParsingError('Data block name missing', line, column);\r\n          }\r\n        } else if (Number.isNaN(code)) {\r\n          // <eof> ....................................................................\r\n          break;\r\n        } else {\r\n          // ..................................................................................................\r\n          throw new parsers_ParsingError(`Unexpected character in state ${state}`, line, column);\r\n        }\r\n      } else if (state === 1) {\r\n        // block =============================================================================\r\n        if ((code === 68 || code === 100) && source.substr(i + 1, 4).toLowerCase() === 'ata_') {\r\n          // 'data_' ..........\r\n          state = 0; // start\r\n          continue; // parse again in a different state\r\n        } else if (code === 95) {\r\n          // '_' .............................................................................\r\n          j = i + 1;\r\n          begin = j;\r\n          while (j < n && !_isWhitespace(source.charCodeAt(j))) {\r\n            ++j;\r\n          }\r\n          column += j - i;\r\n          i = j;\r\n          if (begin < i) {\r\n            // start new item\r\n            key = source.substring(begin, i);\r\n            state = 2; // item\r\n            continue; // don't forget to process the whitespace\r\n          } else {\r\n            throw new parsers_ParsingError('Tag name missing', line, column);\r\n          }\r\n        } else if ((code === 76 || code === 108) && source.substr(i + 1, 4).toLowerCase() === 'oop_') {\r\n          // 'loop_' ...\r\n          i += 5;\r\n          column += 5;\r\n          if (i < n && !_isWhitespace(source.charCodeAt(i))) {\r\n            throw new parsers_ParsingError(`Unexpected character in state ${state}`, line, column);\r\n          } else {\r\n            // start new loop\r\n            keys = [];\r\n            keysCount = 0;\r\n            values = [];\r\n            valuesCount = 0;\r\n            state = 3; // loop\r\n            continue; // don't forget to process the whitespace\r\n          }\r\n        } else if (Number.isNaN(code)) {\r\n          // <eof> ....................................................................\r\n          break;\r\n        } else {\r\n          // ..................................................................................................\r\n          throw new parsers_ParsingError(`Unexpected character in state ${state}`, line, column);\r\n        }\r\n      } else if (state === 2) {\r\n        // item ==============================================================================\r\n        if (Number.isNaN(code)) {\r\n          break;\r\n        }\r\n        value = _parseValue();\r\n        external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(block, key, value);\r\n        state = 1; // block\r\n        continue;\r\n      } else if (state === 3) {\r\n        // loop ==============================================================================\r\n        if (code === 95) {\r\n          // '_' ....................................................................................\r\n          j = i + 1;\r\n          begin = j;\r\n          while (j < n && !_isWhitespace(source.charCodeAt(j))) {\r\n            ++j;\r\n          }\r\n          column += j - i;\r\n          i = j;\r\n          if (begin < i) {\r\n            // add new key\r\n            _storeKey(source.substring(begin, i));\r\n            continue; // don't forget to process the whitespace\r\n          } else {\r\n            throw new parsers_ParsingError('Tag name missing', line, column);\r\n          }\r\n        } else {\r\n          // ..................................................................................................\r\n          if (keysCount > 0) {\r\n            for (let keyIndex = 0; keyIndex < keysCount; ++keyIndex) {\r\n              value = [];\r\n              values[keyIndex] = value;\r\n              external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(block, keys[keyIndex], value);\r\n            }\r\n            state = 4;\r\n            continue; // parse again in a different state\r\n          }\r\n          throw new parsers_ParsingError('Data tags are missing inside a loop', line, column);\r\n        }\r\n      } else if (state === 4) {\r\n        // values ============================================================================\r\n        if ((code === 68 || code === 100) && source.substr(i + 1, 4).toLowerCase() === 'ata_') {\r\n          // 'data_' ..........\r\n          state = 0; // start\r\n        } else if (code === 95) {\r\n          // '_' .............................................................................\r\n          state = 1; // block\r\n        } else if ((code === 76 || code === 108) && source.substr(i + 1, 4).toLowerCase() === 'oop_') {\r\n          // 'loop_' ...\r\n          state = 1; // block\r\n        } else if (Number.isNaN(code)) {\r\n          // <eof> ....................................................................\r\n          state = 0;\r\n        } else {\r\n          // ..................................................................................................\r\n          _storeValue(_parseValue());\r\n        }\r\n        continue; // parse again in a different state\r\n      } else {\r\n        // ====================================================================================================\r\n        throw new parsers_ParsingError(`Unexpected internal state ${state}`, line, column);\r\n      }\r\n      newline = false;\r\n      ++column;\r\n    }\r\n    ++i;\r\n  }\r\n  if (state === 2) {\r\n    // item\r\n    throw new parsers_ParsingError(`Unexpected end of file in state ${state}`, line, column);\r\n  }\r\n  return result;\r\n}\r\n;// CONCATENATED MODULE: ./src/io/parsers/CIFParser.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: CIFParser_Complex,\r\n  Element: CIFParser_Element,\r\n  Helix: CIFParser_Helix,\r\n  Sheet: CIFParser_Sheet,\r\n  Strand: CIFParser_Strand,\r\n  Assembly: CIFParser_Assembly,\r\n  Molecule: CIFParser_Molecule\r\n} = chem;\r\nconst cRequiredAtomFields = ['auth_seq_id', 'Cartn_x', 'Cartn_y', 'Cartn_z', 'label_atom_id'];\r\nconst cSecondaryCoding = {\r\n  helx: 'helix',\r\n  turn: 'turn',\r\n  strn: 'strand'\r\n};\r\nfunction getTypeFromId(string) {\r\n  const typeId = /[A-Za-z]+/.exec(string);\r\n  if (!typeId) {\r\n    return null;\r\n  }\r\n  return cSecondaryCoding[typeId[0].toLowerCase()];\r\n}\r\n\r\n/**\r\n * Make valid object an array\r\n * @param arrayLikeObject\r\n * @return {array, object} array or object\r\n */\r\nfunction arrize(arrayLikeObject) {\r\n  if (arrayLikeObject === null || arrayLikeObject === undefined || external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(arrayLikeObject)) {\r\n    return arrayLikeObject;\r\n  }\r\n  return [arrayLikeObject];\r\n}\r\nfunction CIFParser_nameToElement(name) {\r\n  // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM\r\n  //\r\n  // http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html#note1\r\n  //\r\n  // Atom names start with element symbols right-justified in columns 13-14\r\n  // as permitted by the length of the name. For example, the symbol FE for\r\n  // iron appears in columns 13-14, whereas the symbol C for carbon appears\r\n  // in column 14 (see Misaligned Atom Names). If an atom name has four\r\n  // characters, however, it must start in column 13 even if the element\r\n  // symbol is a single character (for example, see Hydrogen Atoms).\r\n\r\n  const veryLong = name.trim().length === 4;\r\n  return name.slice(0, veryLong ? 1 : 2).trim();\r\n}\r\nclass AtomDataError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.name = 'AtomDataError';\r\n    this.message = message;\r\n  }\r\n}\r\nfunction _getOperations(operList) {\r\n  if (!operList) {\r\n    return null;\r\n  }\r\n  const idc = arrize(operList.id);\r\n  const {\r\n    matrix,\r\n    vector\r\n  } = operList;\r\n  if (!idc || !matrix || !vector) {\r\n    return null;\r\n  }\r\n  const ops = [];\r\n  for (let i = 0, n = idc.length; i < n; ++i) {\r\n    const mtx = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    const {\r\n      elements\r\n    } = mtx;\r\n    for (let row = 0; row < 3; ++row) {\r\n      const matrixData = matrix[row + 1];\r\n      elements[row] = arrize(matrixData[1])[i];\r\n      elements[row + 4] = arrize(matrixData[2])[i];\r\n      elements[row + 8] = arrize(matrixData[3])[i];\r\n      elements[row + 12] = arrize(vector[row + 1])[i];\r\n    }\r\n    ops[idc[i]] = mtx;\r\n  }\r\n  return ops;\r\n}\r\nfunction _extractOperations(assemblyGen, opsDict) {\r\n  assemblyGen = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(assemblyGen) ? assemblyGen : `${assemblyGen}`;\r\n  const l = assemblyGen.replace(/\\)\\s*\\(/g, '!').replace(/[()']/g, '');\r\n  const groupStr = l.split('!');\r\n  const gps = [];\r\n  for (let grIdx = 0, grCount = groupStr.length; grIdx < grCount; ++grIdx) {\r\n    const gr = groupStr[grIdx].split(',');\r\n    const gp = [];\r\n    let idx = 0;\r\n    for (let i = 0, n = gr.length; i < n; ++i) {\r\n      const s = gr[i];\r\n      if (s.includes('-')) {\r\n        const es = s.split('-');\r\n        let j = parseInt(es[0], 10);\r\n        const m = parseInt(es[1], 10);\r\n        for (; j <= m; ++j) {\r\n          gp[idx++] = opsDict[j];\r\n        }\r\n      } else {\r\n        gp[idx++] = opsDict[s];\r\n      }\r\n    }\r\n    gps.push(gp);\r\n  }\r\n\r\n  // traverse all groups from the end of array and make all mults\r\n  const matrices = [];\r\n  let cnt = 0;\r\n  function traverse(level, mtx) {\r\n    for (let ii = 0, nn = gps[level].length; ii < nn; ++ii) {\r\n      const newMtx = mtx ? mtx.clone() : new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n      newMtx.multiplyMatrices(gps[level][ii], newMtx);\r\n      if (level === 0) {\r\n        matrices[cnt++] = newMtx;\r\n      } else {\r\n        traverse(level - 1, newMtx);\r\n      }\r\n    }\r\n  }\r\n  traverse(gps.length - 1);\r\n  return matrices;\r\n}\r\nclass CIFParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this.asymDict = {};\r\n    this.molecules = [];\r\n    this._options.fileType = 'cif';\r\n  }\r\n  static canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && /^\\s*data_/i.test(data);\r\n  }\r\n  parseSync() {\r\n    this.logger.info('Parsing CIF file..');\r\n    const data = readCIF(this._data);\r\n    return this._toComplex(data);\r\n  }\r\n\r\n  /**\r\n   * Convert intermediate structure into our valid Complex object\r\n   * @param cifData intermediate CIF object\r\n   * @returns {Complex} complex\r\n   * @private\r\n   */\r\n  _toComplex(cifData) {\r\n    const complex = new CIFParser_Complex();\r\n    const complexData = cifData[Object.keys(cifData)[0]];\r\n    this._extractAtoms(complex, complexData);\r\n    this._extractSecondary(complex, complexData);\r\n    this._extractAssemblies(complex, complexData);\r\n    this._extractMolecules(complex, complexData);\r\n    this._extractMetadata(complex, complexData);\r\n    complex.finalize({\r\n      needAutoBonding: true,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing\r\n    });\r\n    return complex;\r\n  }\r\n\r\n  /**\r\n   * Extract metadata\r\n   * @param complex structure to fill\r\n   * @param complexData complex data from CIF file\r\n   * @private\r\n   */\r\n\r\n  _extractMetadata(complex, complexData) {\r\n    const {\r\n      metadata\r\n    } = complex;\r\n    metadata.id = complexData.entry.id;\r\n    metadata.classification = complexData.struct_keywords.pdbx_keywords;\r\n    const databaserev = complexData.database_PDB_rev;\r\n    metadata.date = databaserev && databaserev.date_original ? databaserev.date_original : '';\r\n    metadata.format = 'cif';\r\n    metadata.title = [];\r\n    metadata.title[0] = complexData.struct.title;\r\n  }\r\n\r\n  /**\r\n   * Extract molecules information from CIF structure (should be called strictly after _extractAtoms)\r\n   * @param complexData complex data from CIF file\r\n   * @private\r\n   */\r\n  _extractMolecules(complex, complexData) {\r\n    const molData = complexData.entity;\r\n    const names = arrize(molData.pdbx_description);\r\n    const count = names.length;\r\n    let i;\r\n\r\n    // molecules names from cif\r\n    for (i = 0; i < count; i++) {\r\n      if (this.molecules[i]) {\r\n        // molecule was created during atoms processing\r\n        this.molecules[i].name = names[i];\r\n      } else {\r\n        // molecule wasn't created, because there is no atom which is contained\r\n        this.molecules[i] = {\r\n          name: names[i],\r\n          residues: []\r\n        };\r\n      }\r\n    }\r\n\r\n    // reorganize molecules for complex and check chains\r\n    const molecules = complex.getMolecules();\r\n    for (i = 0; i < count; i++) {\r\n      const molecule = this.molecules[i];\r\n      molecules[i] = new CIFParser_Molecule(complex, molecule.name, i + 1);\r\n      molecules[i].residues = molecule.residues;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract atom information from CIF structure and fill complex\r\n   * @param {Complex} complex\r\n   * @param complexData complex data from CIF file\r\n   * @private\r\n   */\r\n  _extractAtoms(complex, complexData) {\r\n    const atomData = complexData.atom_site;\r\n    if (!atomData) {\r\n      throw new AtomDataError('CIF parsing error: atom_site is not specified!');\r\n    }\r\n    for (let f = 0, n = cRequiredAtomFields.length; f < n; ++f) {\r\n      if (!atomData[cRequiredAtomFields[f]]) {\r\n        throw new AtomDataError(`CIF parsing error: requires field ${cRequiredAtomFields[f]} not found!`);\r\n      }\r\n    }\r\n    const {\r\n      asymDict\r\n    } = this;\r\n    // required fields\r\n    const resIdc = arrize(atomData.auth_seq_id);\r\n    const x = arrize(atomData.Cartn_x);\r\n    const y = arrize(atomData.Cartn_y);\r\n    const z = arrize(atomData.Cartn_z);\r\n    const names = arrize(atomData.label_atom_id);\r\n    const count = names.length;\r\n    // optional fields\r\n    const group = arrize(atomData.group_PDB) || [];\r\n    const chainIdc = arrize(atomData.auth_asym_id) || [];\r\n    const chainLabelIdc = arrize(atomData.label_asym_id) || [];\r\n    const serials = arrize(atomData.id) || [];\r\n    const iCodes = arrize(atomData.pdbx_PDB_ins_code) || [];\r\n    const resNames = arrize(atomData.label_comp_id) || [];\r\n    const elements = arrize(atomData.type_symbol) || [];\r\n    const tempFactors = arrize(atomData.B_iso_or_equiv) || [];\r\n    const occupancies = arrize(atomData.occupancy) || [];\r\n    const charges = arrize(atomData.pdbx_formal_charge) || [];\r\n    const altLocs = arrize(atomData.label_alt_id) || [];\r\n    const models = arrize(atomData.pdbx_PDB_model_num) || [];\r\n    const molecules = arrize(atomData.label_entity_id) || [];\r\n    let chain = null;\r\n    let residue = null;\r\n    for (let i = 0; i < count; ++i) {\r\n      const model = models[i] || 1;\r\n      if (model !== 1) {\r\n        continue;\r\n      }\r\n      const chainID = String(chainIdc[i] || ' ');\r\n      if (!chain || chain.getName() !== chainID) {\r\n        chain = complex.getChain(chainID) || complex.addChain(chainID);\r\n      }\r\n      asymDict[String(chainLabelIdc[i] || ' ')] = chainID;\r\n      const resSeq = resIdc[i];\r\n      const iCode = String(iCodes[i] || ' ');\r\n      const resName = String(resNames[i] || '');\r\n      if (!residue || residue.getSequence() !== resSeq || residue.getICode() !== iCode) {\r\n        residue = chain.addResidue(resName, resSeq, iCode);\r\n\r\n        // store residue in appropriate molecule\r\n        const moleculeIdx = molecules[i] - 1;\r\n        let entity = this.molecules[moleculeIdx];\r\n        if (!entity) {\r\n          // create new molecule if it hasn't been created\r\n          this.molecules[moleculeIdx] = {\r\n            name: '',\r\n            residues: []\r\n          };\r\n          entity = this.molecules[moleculeIdx];\r\n        }\r\n        entity.residues.push(residue);\r\n      }\r\n      const name = names[i];\r\n      const element = elements[i] || CIFParser_nameToElement(name);\r\n      const type = CIFParser_Element.getByName(element);\r\n      const role = CIFParser_Element.Role[name.trim()];\r\n      const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(x[i], y[i], z[i]);\r\n      const het = group[i] === 'HETATM' || false;\r\n      const serial = serials[i] || i;\r\n      const tempFactor = tempFactors[i] || 0.0;\r\n      const occupancy = occupancies[i] || 0.0;\r\n      const altLoc = String(altLocs[i] || '');\r\n      const charge = charges[i] || 0;\r\n      residue.addAtom(name, type, xyz, role, het, serial, altLoc, occupancy, tempFactor, charge);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts secondary structure information from CIF intermediate data\r\n   * and adds it into complex\r\n   * @param {Complex} complex - complex to fill\r\n   * @param complexData - CIF complex data\r\n   * @private\r\n   */\r\n  _extractSecondary(complex, complexData) {\r\n    if (complexData.struct_conf) {\r\n      this._extractConfs(complex, complexData.struct_conf);\r\n    }\r\n    if (complexData.struct_sheet_range) {\r\n      this._extractSheets(complex, complexData.struct_sheet_range);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts sheets information from CIF intermediate data\r\n   * and adds it into complex\r\n   * @param {Complex} complex\r\n   * @param sheetData\r\n   * @private\r\n   */\r\n  _extractSheets(complex, sheetData) {\r\n    const {\r\n      asymDict\r\n    } = this;\r\n    if (!sheetData.sheet_id || !sheetData.id || !sheetData.beg_label_seq_id || !sheetData.end_label_seq_id || !sheetData.beg_label_asym_id) {\r\n      return;\r\n    }\r\n    // Strand(sheet, start, end, sense, cur, prev)\r\n    const sheets = complex._sheets;\r\n    function getSheet(name) {\r\n      const n = sheets.length;\r\n      for (let i = 0; i < n; ++i) {\r\n        if (sheets[i]._name === name) {\r\n          return sheets[i];\r\n        }\r\n      }\r\n      sheets[n] = new CIFParser_Sheet(name, 0);\r\n      return sheets[n];\r\n    }\r\n    const sheetNames = arrize(sheetData.sheet_id);\r\n    const strandNames = arrize(sheetData.id);\r\n    const starts = arrize(sheetData.beg_auth_seq_id);\r\n    const ends = arrize(sheetData.end_auth_seq_id);\r\n    const chains = arrize(sheetData.beg_label_asym_id);\r\n    const stICodes = arrize(sheetData.pdbx_beg_PDB_ins_code) || [];\r\n    const endICodes = arrize(sheetData.pdbx_end_PDB_ins_code) || [];\r\n    for (let i = 0, n = strandNames.length; i < n; ++i) {\r\n      const chain = complex.getChain(asymDict[chains[i]]);\r\n      const sheet = getSheet(sheetNames[i]);\r\n      const startIdx = starts[i];\r\n      const endIdx = ends[i];\r\n      const startICode = stICodes[i] || ' ';\r\n      const endICode = endICodes[i] || ' ';\r\n      const start = chain.findResidue(startIdx, startICode);\r\n      const end = chain.findResidue(endIdx, endICode);\r\n\r\n      // TODO think about last condition\r\n      if (!start || !end) {\r\n        continue;\r\n      }\r\n      const strand = new CIFParser_Strand(sheet, start[0], end[0], 0, null, null);\r\n      const residues = chain.getResidues();\r\n      for (let r = start[1]; r <= end[1]; ++r) {\r\n        residues[r]._secondary = strand;\r\n      }\r\n      sheet.addStrand(strand);\r\n      complex.structures.push(strand);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts helix/turn/strand(?) information from CIF intermediate data\r\n   * and adds it into complex\r\n   * @param {Complex} complex\r\n   * @param helicesData\r\n   * @private\r\n   */\r\n  _extractConfs(complex, helicesData) {\r\n    const {\r\n      asymDict\r\n    } = this;\r\n    if (!helicesData.conf_type_id || !helicesData.beg_label_seq_id || !helicesData.end_label_seq_id || !helicesData.beg_label_asym_id) {\r\n      return;\r\n    }\r\n    const types = arrize(helicesData.conf_type_id);\r\n    const starts = arrize(helicesData.beg_auth_seq_id);\r\n    const stICodes = arrize(helicesData.pdbx_beg_PDB_ins_code) || [];\r\n    const ends = arrize(helicesData.end_auth_seq_id);\r\n    const endICodes = arrize(helicesData.pdbx_end_PDB_ins_code) || [];\r\n    const comments = arrize(helicesData.details) || [];\r\n    const lengths = arrize(helicesData.pdbx_PDB_helix_length) || [];\r\n    const helixClasses = arrize(helicesData.pdbx_PDB_helix_class) || [];\r\n    const names = arrize(helicesData.id) || [];\r\n    const chains = arrize(helicesData.beg_label_asym_id);\r\n    for (let i = 0, n = types.length; i < n; ++i) {\r\n      const type = getTypeFromId(types[i]);\r\n      if (!type) {\r\n        continue;\r\n      }\r\n      const name = names[i] || types[i];\r\n      const chain = complex.getChain(asymDict[chains[i]]);\r\n      const startIdx = starts[i];\r\n      const endIdx = ends[i];\r\n      const startICode = stICodes[i] || ' ';\r\n      const endICode = endICodes[i] || ' ';\r\n      const start = chain.findResidue(startIdx, startICode);\r\n      const end = chain.findResidue(endIdx, endICode);\r\n\r\n      // TODO think about last condition\r\n      if (!start || !end) {\r\n        continue;\r\n      }\r\n      const comment = comments[i] || '';\r\n      const length = lengths[i] || 0;\r\n      const helixClass = helixClasses[i] || ' ';\r\n      let struct;\r\n      if (type === 'helix') {\r\n        const idx = complex._helices.length;\r\n        struct = new CIFParser_Helix(helixClass, start[0], end[0], idx, name, comment, length);\r\n        complex.addHelix(struct);\r\n        complex.structures.push(struct);\r\n      } else if (type === 'turn') {\r\n        struct = new chem_StructuralElement(chem_StructuralElement.Type.TURN, start[0], end[0]);\r\n        complex.structures.push(struct);\r\n      } else {\r\n        struct = null;\r\n      }\r\n      if (!struct) {\r\n        continue;\r\n      }\r\n      const residues = chain.getResidues();\r\n      for (let r = start[1]; r <= end[1]; ++r) {\r\n        residues[r]._secondary = struct;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract biological assemblies information from CIF structure and fill complex\r\n   * @param {Complex} complex\r\n   * @param complexData complex data from CIF file\r\n   * @private\r\n   */\r\n  _extractAssemblies(complex, complexData) {\r\n    const {\r\n      asymDict\r\n    } = this;\r\n    const asmGen = complexData.pdbx_struct_assembly_gen;\r\n    if (!asmGen) {\r\n      return;\r\n    }\r\n    const asmIdx = arrize(asmGen.assembly_id);\r\n    const asmOper = arrize(asmGen.oper_expression);\r\n    const asmList = arrize(asmGen.asym_id_list);\r\n    if (!asmIdx || !asmOper || !asmList) {\r\n      return;\r\n    }\r\n    const operList = _getOperations(complexData.pdbx_struct_oper_list);\r\n    if (!operList) {\r\n      return;\r\n    }\r\n    for (let i = 0, n = asmIdx.length; i < n; ++i) {\r\n      const asm = new CIFParser_Assembly(complex);\r\n      const assemblyOps = _extractOperations(asmOper[i], operList);\r\n      const entries = asmList[i].split(',');\r\n      for (let ii = 0, nn = entries.length; ii < nn; ++ii) {\r\n        const chain = entries[ii].trim();\r\n        if (chain.length > 0) {\r\n          asm.addChain(asymDict[chain]);\r\n        }\r\n      }\r\n      asm.matrices = assemblyOps;\r\n      complex.units.push(asm);\r\n    }\r\n  }\r\n}\r\nCIFParser.formats = ['cif', 'mmcif'];\r\nCIFParser.extensions = ['.cif', '.mmcif'];\r\n/* harmony default export */ const parsers_CIFParser = (CIFParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/VolumeModel.js\r\n\r\n\r\n\r\nconst valueType = {\r\n  singular: 0,\r\n  vector: 1,\r\n  array: 2,\r\n  buffer: 3\r\n};\r\nclass VolumeModel {\r\n  _xyz2crs = [];\r\n  _origin = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0))();\r\n  constructor() {\r\n    this._header = {};\r\n    this._boxSize = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._boxStart = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._header.delta = {};\r\n    this._header.extent = [];\r\n    this._header.nstart = [];\r\n    this._header.grid = [];\r\n    this._header.crs2xyz = [];\r\n    this._header.cellDims = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._header.angles = [];\r\n    this._header.origin = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0);\r\n    this._header.dmin = 0;\r\n    this._header.dmean = 0;\r\n    this._header.dmax = 0;\r\n  }\r\n  _typedCheck() {\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isTypedArray(this._buff)) {\r\n      this._buff = this._buff.buffer;\r\n    } else if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArrayBuffer(this._buff)) {\r\n      throw new TypeError('Expected ArrayBuffer or TypedArray');\r\n    }\r\n  }\r\n  _fillHeader(headerFormat, arrays) {\r\n    for (const key in headerFormat) {\r\n      if (headerFormat.hasOwnProperty(key)) {\r\n        switch (headerFormat[key][0]) {\r\n          case valueType.singular:\r\n            this._header[key] = arrays[headerFormat[key][1]][headerFormat[key][2]];\r\n            break;\r\n          case valueType.array:\r\n            this._parseArray(this._header[key], arrays[headerFormat[key][1]], headerFormat[key][2]);\r\n            break;\r\n          case valueType.vector:\r\n            this._parseVector(this._header[key], arrays[headerFormat[key][1]], headerFormat[key][2]);\r\n            break;\r\n          case valueType.buffer:\r\n            this._header[key] = new Uint8Array(arrays[headerFormat[key][1]], [headerFormat[key][2]] * 4, [headerFormat[key][3]] * 4);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _parseVector(vector, arr, pos) {\r\n    [vector.x, vector.y, vector.z] = [arr[pos], arr[pos + 1], arr[pos + 2]];\r\n  }\r\n  _parseArray(vector, arr, pos) {\r\n    vector[0] = arr[pos];\r\n    vector[1] = arr[pos + 1];\r\n    vector[2] = arr[pos + 2];\r\n  }\r\n  _parseHeader(_buffer) {}\r\n  _setAxisIndices() {}\r\n  _setOrigins() {}\r\n  _getAxis() {\r\n    const header = this._header;\r\n    const xScale = header.cellDims.x / header.grid[0];\r\n    const yScale = header.cellDims.y / header.grid[1];\r\n    const zScale = header.cellDims.z / header.grid[2];\r\n    const [alpha, beta, gamma] = header.angles;\r\n    const z1 = Math.cos(beta);\r\n    const z2 = (Math.cos(alpha) - Math.cos(beta) * Math.cos(gamma)) / Math.sin(gamma);\r\n    const z3 = Math.sqrt(1.0 - z1 * z1 - z2 * z2);\r\n    const xaxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(xScale, 0, 0);\r\n    const yaxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(Math.cos(gamma) * yScale, Math.sin(gamma) * yScale, 0);\r\n    const zaxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(z1 * zScale, z2 * zScale, z3 * zScale);\r\n    return [xaxis, yaxis, zaxis];\r\n  }\r\n  _getXYZdim() {\r\n    return [this._header.extent[this._xyz2crs[0]], this._header.extent[this._xyz2crs[1]], this._header.extent[this._xyz2crs[2]]];\r\n  }\r\n  _getVolumeInfo() {\r\n    const volInfo = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].pick(this._header, ['dmean', 'dmin', 'dmax', 'sd', 'delta']);\r\n    volInfo.obtuseAngle = this._header.angles.map(angle => Number(angle >= Math.PI / 2));\r\n    return volInfo;\r\n  }\r\n  _setBoxParams(xaxis, yaxis, zaxis) {\r\n    // if axes are not orthogonal, the origins might not match with box coordinates - need to make shift\r\n    let shiftX = 0;\r\n    let shiftY = 0;\r\n    const [alpha, beta, gamma] = this._header.angles;\r\n    if (gamma >= Math.PI / 2) {\r\n      shiftX += Math.abs(yaxis.x);\r\n    }\r\n    if (beta >= Math.PI / 2) {\r\n      shiftX += Math.abs(zaxis.x);\r\n    }\r\n    if (alpha >= Math.PI / 2) {\r\n      shiftY += Math.abs(zaxis.y);\r\n    }\r\n    this._boxStart = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(this._origin.x - shiftX, this._origin.y - shiftY, this._origin.z);\r\n    this._boxSize = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(Math.abs(xaxis.x) + Math.abs(yaxis.x) + Math.abs(zaxis.x), Math.abs(yaxis.y) + Math.abs(zaxis.y), Math.abs(zaxis.z));\r\n    const delta = (axe, proj) => Math.abs(axe[proj]) / this._boxSize[proj];\r\n    this._header.delta.x = delta(yaxis, 'x');\r\n    this._header.delta.y = delta(zaxis, 'x');\r\n    this._header.delta.z = delta(zaxis, 'y');\r\n  }\r\n  _getXYZbox() {\r\n    return new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3(this._boxStart.clone(), this._boxStart.clone().add(this._boxSize));\r\n  }\r\n  _toXYZData() {}\r\n  parse(data) {\r\n    this._parseHeader(data);\r\n    this._setOrigins();\r\n    return new chem_Volume(Float32Array, this._getXYZdim(), this._getXYZbox(), 1, this._toXYZData(), this._getVolumeInfo());\r\n  }\r\n}\r\n/* harmony default export */ const parsers_VolumeModel = (VolumeModel);\r\n;// CONCATENATED MODULE: ./src/io/parsers/CCP4Parser.js\r\n\r\n\r\nconst CCP4Header = {\r\n  extent: [valueType.array, 'u32', 0],\r\n  type: [valueType.singular, 'u32', 3],\r\n  nstart: [valueType.array, 'i32', 4],\r\n  grid: [valueType.array, 'u32', 7],\r\n  cellDims: [valueType.vector, 'f32', 10],\r\n  angles: [valueType.array, 'f32', 13],\r\n  crs2xyz: [valueType.array, 'i32', 16],\r\n  dmin: [valueType.singular, 'f32', 19],\r\n  dmax: [valueType.singular, 'f32', 20],\r\n  dmean: [valueType.singular, 'f32', 21],\r\n  ispg: [valueType.singular, 'u32', 22],\r\n  nsymbt: [valueType.singular, 'u32', 23],\r\n  lksflg: [valueType.singular, 'u32', 24],\r\n  customData: [valueType.buffer, 'buffer', 25, 9],\r\n  origin: [valueType.vector, 'f32', 34],\r\n  map: [valueType.buffer, 'buffer', 52, 1],\r\n  machine: [valueType.singular, 'u32', 53],\r\n  sd: [valueType.singular, 'f32', 54],\r\n  nlabel: [valueType.singular, 'f32', 55],\r\n  label: [valueType.buffer, 'buffer', 56, 200]\r\n};\r\nclass Ccp4Model extends parsers_VolumeModel {\r\n  // read header (http://www.ccp4.ac.uk/html/maplib.html)\r\n  _parseHeader(_buffer) {\r\n    this._buff = _buffer;\r\n    this._typedCheck();\r\n    const arrays = {};\r\n    arrays.u32 = new Uint32Array(this._buff, 0, 56);\r\n    arrays.i32 = new Int32Array(this._buff, 0, 56);\r\n    arrays.f32 = new Float32Array(this._buff, 0, 56);\r\n    arrays.buffer = this._buff;\r\n    const header = this._header;\r\n    this._fillHeader(CCP4Header, arrays);\r\n\r\n    // calculate non-orthogonal unit cell coordinates\r\n    header.angles.forEach((angle, i, a) => {\r\n      a[i] *= Math.PI / 180.0;\r\n    });\r\n  }\r\n  _setAxisIndices() {\r\n    const header = this._header;\r\n    if (header.cellDims.x === 0.0 && header.cellDims.y === 0.0 && header.cellDims.z === 0.0) {\r\n      header.cellDims.set(1.0, 1.0, 1.0);\r\n    }\r\n    // Apply header conversion\r\n    // Mapping between CCP4 column, row, section and VMD x, y, z.\r\n    const {\r\n      crs2xyz\r\n    } = this._header;\r\n    if (crs2xyz[0] === 0 && crs2xyz[1] === 0 && crs2xyz[2] === 0) {\r\n      crs2xyz[0] = 1;\r\n      crs2xyz[1] = 2;\r\n      crs2xyz[2] = 3;\r\n    }\r\n    const xyz2crs = this._xyz2crs;\r\n    xyz2crs[crs2xyz[0] - 1] = 0; // column\r\n    xyz2crs[crs2xyz[1] - 1] = 1; // row\r\n    xyz2crs[crs2xyz[2] - 1] = 2; // section\r\n  }\r\n  _setOrigins() {\r\n    const [xaxis, yaxis, zaxis] = this._getAxis();\r\n    this._setAxisIndices();\r\n    const header = this._header;\r\n    const xyz2crs = this._xyz2crs;\r\n    // Handle both MRC-2000 and older format maps\r\n    if (header.origin.x === 0.0 && header.origin.y === 0.0 && header.origin.z === 0.0) {\r\n      this._origin.addScaledVector(xaxis, header.nstart[xyz2crs[0]]);\r\n      this._origin.addScaledVector(yaxis, header.nstart[xyz2crs[1]]);\r\n      this._origin.addScaledVector(zaxis, header.nstart[xyz2crs[2]]);\r\n    } else {\r\n      this._origin = header.origin;\r\n      // Use ORIGIN records rather than old n[xyz]start records\r\n      //   http://www2.mrc-lmb.cam.ac.uk/image2000.html\r\n      // XXX the ORIGIN field is only used by the EM community, and\r\n      // has undefined meaning for non-orthogonal maps and/or non-cubic voxels, etc.\r\n    }\r\n    xaxis.multiplyScalar(header.extent[xyz2crs[0]] - 1);\r\n    yaxis.multiplyScalar(header.extent[xyz2crs[1]] - 1);\r\n    zaxis.multiplyScalar(header.extent[xyz2crs[2]] - 1);\r\n    if (header.type === 2) {\r\n      this._data = new Float32Array(this._buff, 1024 + header.nsymbt, header.extent[0] * header.extent[1] * header.extent[2]);\r\n    } else {\r\n      throw new Error(`CCP4: Unsupported format ${header.type}`);\r\n    }\r\n    this._setBoxParams(xaxis, yaxis, zaxis);\r\n  }\r\n  _toXYZData() {\r\n    const header = this._header;\r\n    const data = this._data;\r\n    const xyz2crs = this._xyz2crs;\r\n    const xyzData = new Float32Array(data.length);\r\n    const dim = this._getXYZdim();\r\n    const xSize = dim[0];\r\n    const ySize = dim[1];\r\n    let crsIdx = 0;\r\n    const coord = [];\r\n    let x;\r\n    let y;\r\n    let z;\r\n    for (coord[2] = 0; coord[2] < header.extent[2]; coord[2]++) {\r\n      // Site\r\n      for (coord[1] = 0; coord[1] < header.extent[1]; coord[1]++) {\r\n        // Row\r\n        for (coord[0] = 0; coord[0] < header.extent[0]; coord[0]++, crsIdx++) {\r\n          // Column\r\n          x = coord[xyz2crs[0]];\r\n          y = coord[xyz2crs[1]];\r\n          z = coord[xyz2crs[2]];\r\n          xyzData[x + xSize * (y + ySize * z)] = data[crsIdx];\r\n        }\r\n      }\r\n    }\r\n    return xyzData;\r\n  }\r\n}\r\nclass CCP4Parser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._options.fileType = 'ccp4';\r\n    this.model = new Ccp4Model();\r\n  }\r\n  static canProbablyParse(_data) {\r\n    return false; // Autodetection is not implemented yet\r\n  }\r\n  parseSync() {\r\n    return this.model.parse(this._data);\r\n  }\r\n}\r\nCCP4Parser.formats = ['ccp4'];\r\nCCP4Parser.extensions = ['.ccp4', '.map', '.mrc'];\r\nCCP4Parser.binary = true;\r\n/* harmony default export */ const parsers_CCP4Parser = (CCP4Parser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/XYZParser.js\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: XYZParser_Complex,\r\n  Element: XYZParser_Element,\r\n  Molecule: XYZParser_Molecule\r\n} = chem;\r\nclass XYZParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._complex = null;\r\n    this._atomsInf = null;\r\n    this._options.fileType = 'xyz';\r\n    this._fileName = options.name;\r\n  }\r\n  static canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && /^\\s*\\d+ *\\n[^\\n]*\\n\\s*\\w{1,3}\\s+-?\\d/.test(data);\r\n  }\r\n  _parseToAtomsInf(source) {\r\n    const endnAtoms = source.indexOf('\\n');\r\n    const nAtoms = parseInt(source.substring(0, endnAtoms), 10);\r\n    const endComment = source.indexOf('\\n', endnAtoms + 1);\r\n    let comment = source.slice(endnAtoms + 1, endComment).trim();\r\n    if (comment.length === 0) {\r\n      comment = this._fileName;\r\n    }\r\n    const startAtomsInf = endComment + source.substring(endComment).search(/\\S/);\r\n    this._atomsInf = source.substring(startAtomsInf).split(/[\\s,]*\\n[\\s,]*/);\r\n    if (!Number.isNaN(nAtoms) && this._atomsInf.length - 1 !== nAtoms) {\r\n      this._complex.error = {\r\n        message: 'wrong number of atoms'\r\n      };\r\n      return;\r\n    }\r\n    this._complex.metadata.format = 'xyz';\r\n    this._complex.name = comment;\r\n  }\r\n  _parseAtomsInf() {\r\n    const het = true;\r\n    const altLoc = ' ';\r\n    const occupancy = 1;\r\n    const tempFactor = 1;\r\n    const charge = 0;\r\n    const chain = this._complex.addChain('A');\r\n    const residue = chain.addResidue('UNK', 1, ' ');\r\n    for (let i = 0; i < this._atomsInf.length - 1; i++) {\r\n      const words = this._atomsInf[i].split(/[\\s,]+/);\r\n      if (words.length !== 4) {\r\n        this._complex.error = {\r\n          message: 'missed parameters'\r\n        };\r\n        break;\r\n      }\r\n      const serial = i + 1;\r\n      const name = words[0];\r\n      const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(parseFloat(words[1]), parseFloat(words[2]), parseFloat(words[3]));\r\n      const type = XYZParser_Element.getByName(name);\r\n      const role = undefined;\r\n      residue.addAtom(name, type, xyz, role, het, serial, altLoc, occupancy, tempFactor, charge);\r\n    }\r\n    const molecule = new XYZParser_Molecule(this._complex, this._complex.name, 1);\r\n    molecule.residues = residue;\r\n    this._complex._molecules[0] = molecule;\r\n  }\r\n  parseSync() {\r\n    const result = this._complex = new XYZParser_Complex();\r\n    this._parseToAtomsInf(this._data);\r\n    this._parseAtomsInf();\r\n    this._complex.finalize({\r\n      needAutoBonding: true,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n    this._complex = null;\r\n    this._atomsInf = null;\r\n    if (result.error) {\r\n      throw new Error(result.error.message);\r\n    }\r\n    return result;\r\n  }\r\n  static formats = ['xyz'];\r\n  static extensions = ['.xyz'];\r\n}\r\n/* harmony default export */ const parsers_XYZParser = (XYZParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/PubChemParser.js\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: PubChemParser_Complex,\r\n  Element: PubChemParser_Element\r\n} = chem;\r\nclass PubChemParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._options.fileType = 'pubchem+json';\r\n  }\r\n  static canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && data[0] === '{';\r\n  }\r\n  parseSync() {\r\n    this.logger.info('Parsing PubChem JSON file...');\r\n    return this._toComplex(JSON.parse(this._data));\r\n  }\r\n  _toComplex(jsonData) {\r\n    const complex = new PubChemParser_Complex();\r\n    const complexData = jsonData.PC_Compounds && jsonData.PC_Compounds[0];\r\n    if (complexData) {\r\n      this._extractAtoms(complex, complexData);\r\n      complex.finalize({\r\n        needAutoBonding: false,\r\n        detectAromaticLoops: this.settings.now.aromatic,\r\n        enableEditing: this.settings.now.editing\r\n      });\r\n    }\r\n    return complex;\r\n  }\r\n  _extractAtoms(complex, complexData) {\r\n    let aids = complexData.atoms && complexData.atoms.aid;\r\n    let elements = aids && complexData.atoms.element;\r\n    if (!elements || aids.length !== elements.length) {\r\n      throw new Error('Unable to parse atom elements');\r\n    }\r\n    elements = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].fromPairs(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].zip(aids, elements));\r\n    const atoms = {};\r\n    const coords = complexData.coords && complexData.coords[0];\r\n    const model = coords && coords.conformers && coords.conformers[0];\r\n    const xs = model && model.x;\r\n    const ys = model && model.y;\r\n    const zs = model && model.z || [];\r\n    aids = coords && coords.aid;\r\n    if (!aids || !xs || !ys) {\r\n      throw new Error('Coordinates are not found in the file');\r\n    }\r\n    const chain = complex.addChain(' ');\r\n    const residue = chain.addResidue('UNK', 1, ' ');\r\n    for (let i = 0, n = aids.length; i < n; ++i) {\r\n      const aid = aids[i];\r\n      const element = PubChemParser_Element.ByAtomicNumber[elements[aid]];\r\n      const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(xs[i], ys[i], zs[i] || 0.0);\r\n      atoms[aid] = residue.addAtom(element.name, element, xyz, undefined, true, aid, ' ', 1.0, 0.0, 0);\r\n    }\r\n    const aids1 = complexData.bonds && complexData.bonds.aid1;\r\n    const aids2 = complexData.bonds && complexData.bonds.aid2;\r\n    const orders = complexData.bonds && complexData.bonds.order || [];\r\n    if (!aids1 || !aids2 || aids1.length !== aids2.length) {\r\n      return;\r\n    }\r\n    for (let j = 0, m = aids1.length; j < m; ++j) {\r\n      complex.addBond(atoms[aids1[j]], atoms[aids2[j]], orders[j] || 1, 0, true);\r\n    }\r\n  }\r\n}\r\nPubChemParser.formats = ['pubchem', 'pubchem+json', 'pc'];\r\nPubChemParser.extensions = ['.json'];\r\n/* harmony default export */ const parsers_PubChemParser = (PubChemParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/SDFStream.js\r\n\r\nclass SDFStream {\r\n  constructor(data) {\r\n    this._strings = data.split(/\\r?\\n|\\r/);\r\n    this._currentStart = 0;\r\n    this._currentStringIndx = 0;\r\n  }\r\n  setStart(start) {\r\n    if (start >= this._strings.length) {\r\n      this._currentStart = this._strings.length - 1;\r\n      this._currentStringIndx = this._strings.length - 1;\r\n    } else {\r\n      this._currentStart = start;\r\n      this._currentStringIndx = start;\r\n    }\r\n  }\r\n  getNextString() {\r\n    return this._strings[++this._currentStringIndx];\r\n  }\r\n  getCurrentString() {\r\n    return this._strings[this._currentStringIndx];\r\n  }\r\n  getStringFromStart(numb) {\r\n    this._currentStringIndx = this._currentStart + numb;\r\n    return this._strings[this._currentStart + numb];\r\n  }\r\n  findNextDataItem() {\r\n    let curStr = this.getNextString();\r\n    let res = false;\r\n    while (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(curStr) && curStr.trim() !== '$$$$') {\r\n      if (curStr.match(/>\\s+<(.*)>/)) {\r\n        res = true;\r\n        break;\r\n      }\r\n      curStr = this.getNextString();\r\n    }\r\n    return res;\r\n  }\r\n  findNextCompoundStart() {\r\n    let curStr = this.getCurrentString();\r\n    while (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(curStr) && curStr.trim() !== '$$$$') {\r\n      curStr = this.getNextString();\r\n    }\r\n    this.setStart(++this._currentStringIndx);\r\n    return this.probablyHaveDataToParse();\r\n  }\r\n  probablyHaveDataToParse() {\r\n    return this._currentStringIndx < this._strings.length - 2;\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/parsers/SDFParser.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: SDFParser_Complex,\r\n  Element: SDFParser_Element,\r\n  Bond: SDFParser_Bond,\r\n  Molecule: SDFParser_Molecule\r\n} = chem;\r\nconst chargeMap = [0, 3, 2, 1, 0, -1, -2, -3];\r\nconst orderMap = [0, 1, 2, 3, 1, 1, 1, 2];\r\nconst typeMap = [SDFParser_Bond.BondType.UNKNOWN,\r\n// 0 - error\r\nSDFParser_Bond.BondType.COVALENT,\r\n// 1 - single\r\nSDFParser_Bond.BondType.COVALENT,\r\n// 2 - double\r\nSDFParser_Bond.BondType.COVALENT,\r\n// 3 - triple\r\nSDFParser_Bond.BondType.AROMATIC,\r\n// 4 - aromatic\r\nSDFParser_Bond.BondType.UNKNOWN,\r\n// 5 - single or double\r\nSDFParser_Bond.BondType.AROMATIC,\r\n// 6 - single or aromatic\r\nSDFParser_Bond.BondType.AROMATIC // 7 - double or aromatic\r\n// 8 - any\r\n// 9 - coordination\r\n// 10 - hydrogen\r\n];\r\nconst sdfAndMolRegexp = /.*(M\\s\\sEND).*|.*(^$$$$).*|.*>\\s+<(.+)>.*/;\r\nconst sdfRegExp = /.*($$$$).*|.*>\\s+<(.+)>.*/;\r\nconst fileFormat = {\r\n  SDF: 'sdf',\r\n  MOL: 'mol'\r\n};\r\nconst possibleNameTags = ['PUBCHEM_IUPAC_TRADITIONAL_NAME', /PUBCHEM_(.+)_NAME/, /(.+)name/, /(.+)NAME/];\r\nconst possibleIDTags = ['PUBCHEM_COMPOUND_CID', 'id', 'ID', /.*CID/, /.*ID/, /.*id/];\r\nconst possibleTitleTags = ['msg', 'MSG', 'message', 'title', 'description', 'desc'];\r\nconst tagsNames = ['name', 'id', 'title'];\r\nconst tags = {\r\n  name: possibleNameTags,\r\n  id: possibleIDTags,\r\n  title: possibleTitleTags\r\n};\r\nfunction buildChainID(index) {\r\n  if (!index) {\r\n    return 'A';\r\n  }\r\n  const codes = [];\r\n  while (index) {\r\n    codes.push(65 + index % 26);\r\n    index = Math.trunc(index / 26);\r\n  }\r\n  if (codes.length > 1) {\r\n    codes.reverse();\r\n    codes[0] -= 1;\r\n  }\r\n  return String.fromCharCode(...codes);\r\n}\r\nclass SDFParser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._format = 'sdf';\r\n    this._complex = null;\r\n    this._chain = null;\r\n    this._residue = null;\r\n    this._molecules = null;\r\n    this._metadata = {};\r\n    this._metadata.molecules = [];\r\n    this._currentMolProps = {};\r\n    this._compoundIndx = -1;\r\n    this._assemblies = [];\r\n    this._atomsParsed = 0;\r\n    this._atomsIndexes = [];\r\n  }\r\n  canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(data) && sdfAndMolRegexp.test(data);\r\n  }\r\n  _parseHeader(stream) {\r\n    const molecule = {};\r\n    molecule.name = stream.getStringFromStart(0);\r\n    const date = parseInt(stream.getStringFromStart(1).substr(10, 6).trim(), 10);\r\n    molecule.date = date.toString() || '';\r\n    molecule.title = stream.getStringFromStart(2);\r\n    this._metadata.molecules.push(molecule);\r\n  }\r\n  _parseAtoms(stream, atomsNum) {\r\n    let curStr;\r\n    let serial = this._atomsParsed;\r\n\r\n    // each molecule = chain\\residue\r\n    const chainID = buildChainID(this._compoundIndx);\r\n    const resName = 'UNK';\r\n    const resSeq = 1;\r\n    this._chain = this._complex.getChain(chainID) || this._complex.addChain(chainID);\r\n    this._residue = this._chain.addResidue(resName, resSeq, ' ');\r\n    for (let i = 0; i < atomsNum; i++) {\r\n      curStr = stream.getNextString();\r\n      serial++;\r\n      const x = parseFloat(curStr.substr(0, 10));\r\n      const y = parseFloat(curStr.substr(10, 10));\r\n      const z = parseFloat(curStr.substr(20, 10));\r\n      const charge = chargeMap[parseInt(curStr.substr(36, 3), 10)];\r\n      const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(x, y, z);\r\n      let name = curStr.substr(31, 3).trim().toUpperCase();\r\n      const type = SDFParser_Element.getByName(name);\r\n      if (!this._atomsIndexes[name]) {\r\n        this._atomsIndexes[name] = 0;\r\n      }\r\n      this._atomsIndexes[name] += 1;\r\n      name += this._atomsIndexes[name]; // every atom need to have unique name.\r\n\r\n      this._residue.addAtom(name, type, xyz, undefined, true, serial, ' ', 1.0, 0.0, charge);\r\n    }\r\n  }\r\n  _parseBonds(stream, bondsNum) {\r\n    let curStr;\r\n    for (let i = 0; i < bondsNum; i++) {\r\n      curStr = stream.getNextString();\r\n      let atom1 = parseInt(curStr.substr(0, 3), 10) + this._atomsParsed;\r\n      let atom2 = parseInt(curStr.substr(3, 3), 10) + this._atomsParsed;\r\n      const bondType = parseInt(curStr.substr(6, 3), 10);\r\n      if (atom1 > atom2) {\r\n        [atom1, atom2] = [atom2, atom1];\r\n      }\r\n      this._complex.addBond(atom1, atom2, orderMap[bondType] || 1, typeMap[bondType] || SDFParser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n  }\r\n  _parseMOL(stream) {\r\n    this._compoundIndx++;\r\n    this._parseHeader(stream);\r\n    const countsLine = stream.getStringFromStart(3);\r\n    const atomsNum = parseInt(countsLine.substr(0, 3), 10);\r\n    const bondsNum = parseInt(countsLine.substr(3, 3), 10);\r\n    this._parseAtoms(stream, atomsNum);\r\n    this._parseBonds(stream, bondsNum);\r\n    this._atomsParsed += atomsNum;\r\n    this._metadata.molecules[this._compoundIndx]._residues = [];\r\n    this._metadata.molecules[this._compoundIndx]._residues.push(this._residue);\r\n  }\r\n  _parseDataItem(stream) {\r\n    const tag = stream.getCurrentString();\r\n    let data = [];\r\n    let curStr = stream.getNextString();\r\n\r\n    // read data\r\n    while (curStr.trim() !== '') {\r\n      data.push(curStr);\r\n      curStr = stream.getNextString();\r\n    }\r\n    if (data.length === 1) {\r\n      [data] = data;\r\n    }\r\n    this._currentMolProps[tag.replace(/[<>]/g, '').trim()] = data;\r\n  }\r\n  _parseCompound(stream) {\r\n    this._parseMOL(stream);\r\n\r\n    // parse data items block\r\n    if (this._format === fileFormat.SDF) {\r\n      this._currentMolProps = {};\r\n      while (stream.findNextDataItem()) {\r\n        this._parseDataItem(stream);\r\n      }\r\n      if (Object.keys(this._currentMolProps).length !== 0) {\r\n        const molecule = this._metadata.molecules[this._compoundIndx];\r\n        molecule.props = this._currentMolProps;\r\n        this._tryToUpdateMoleculeData(molecule);\r\n      }\r\n    }\r\n  }\r\n  _fixBondsArray() {\r\n    const serialAtomMap = this._serialAtomMap;\r\n    const complex = this._complex;\r\n    const bonds = complex._bonds;\r\n    for (let j = 0; j < bonds.length; j++) {\r\n      const bond = bonds[j];\r\n      if (bond._right < bond._left) {\r\n        console.log('_fixBondsArray: Logic error.');\r\n      }\r\n      bond._left = serialAtomMap[bond._left] || null;\r\n      bond._right = serialAtomMap[bond._right] || null;\r\n    }\r\n  }\r\n  _buildAssemblies() {\r\n    const chains = this._complex._chains;\r\n    if (chains.length === 1) {\r\n      return this._assemblies;\r\n    }\r\n    for (let i = 0; i < chains.length; i++) {\r\n      const assembly = new chem_Assembly(this._complex);\r\n      const matrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n      assembly.addMatrix(matrix);\r\n      assembly.addChain(chains[i]._name);\r\n      this._assemblies.push(assembly);\r\n    }\r\n    return this._assemblies;\r\n  }\r\n  _buildMolecules() {\r\n    this._complex._molecules = [];\r\n    const {\r\n      molecules\r\n    } = this._metadata;\r\n    for (let i = 0; i < molecules.length; i++) {\r\n      const molecule = new SDFParser_Molecule(this._complex, molecules[i].name, i + 1);\r\n      molecule.residues = molecules[i]._residues;\r\n      this._complex._molecules[i] = molecule;\r\n    }\r\n    return this._complex._molecules;\r\n  }\r\n  _searchTag(tag, props) {\r\n    for (let i = 0; i < props.length; i++) {\r\n      if (tag instanceof RegExp && tag.test(props[i].tag) || tag === props[i].tag) {\r\n        return props[i].data;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  _tryToFind(tagsList, props) {\r\n    for (let j = 0; j < tagsList.length; j++) {\r\n      const res = this._searchTag(tagsList[j], props);\r\n      if (res) {\r\n        return res;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  _tryToUpdateMoleculeData(molecule) {\r\n    let res = false;\r\n    for (let i = 0; i < tagsNames.length; i++) {\r\n      const tagPossibleNames = tags[tagsNames[i]];\r\n      const data = this._tryToFind(tagPossibleNames, molecule.props);\r\n      if (data) {\r\n        molecule[tagsNames[i]] = data;\r\n        res = true;\r\n      }\r\n    }\r\n    molecule.name = molecule.name || molecule.id;\r\n    if (molecule.name.match(/^\\d+$/)) {\r\n      molecule.name = `CID: ${molecule.name}`;\r\n    }\r\n    return res;\r\n  }\r\n  _finalizeMetadata() {\r\n    const {\r\n      molecules\r\n    } = this._metadata;\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    const complex = this._complex;\r\n    if (molecules.length === 1) {\r\n      complex.name = molecules[0].name;\r\n      metadata.title = molecules[0].title;\r\n      metadata.date = molecules[0].date;\r\n      metadata.properties = molecules[0].props;\r\n    } else if (molecules.length > 1) {\r\n      metadata.molecules = [];\r\n      for (let i = 0; i < molecules.length; i++) {\r\n        metadata.molecules.push({\r\n          name: molecules[i].name,\r\n          date: molecules[i].date,\r\n          title: molecules[i].title,\r\n          properties: molecules[i].props\r\n        });\r\n      }\r\n    }\r\n  }\r\n  _finalize() {\r\n    const serialAtomMap = this._serialAtomMap = {};\r\n    const atoms = this._complex._atoms;\r\n    for (let i = 0; i < atoms.length; i++) {\r\n      const atom = atoms[i];\r\n      serialAtomMap[atom.serial] = atom;\r\n    }\r\n    this._complex._finalizeBonds();\r\n    this._fixBondsArray();\r\n    this._finalizeMetadata();\r\n    this._buildAssemblies();\r\n    this._complex.units = this._complex.units.concat(this._assemblies);\r\n    this._buildMolecules();\r\n    this._complex.finalize({\r\n      needAutoBonding: false,\r\n      detectAromaticLoops: false,\r\n      enableEditing: false,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n  }\r\n  defineFormat(data) {\r\n    let format;\r\n    if (sdfRegExp.test(data)) {\r\n      format = fileFormat.SDF;\r\n    } else {\r\n      format = fileFormat.MOL;\r\n    }\r\n    return format;\r\n  }\r\n  parseSync() {\r\n    const result = this._complex = new SDFParser_Complex();\r\n    const stream = new SDFStream(this._data);\r\n    this._format = this.defineFormat(this._data);\r\n    result.metadata.format = this._format;\r\n    do {\r\n      this._parseCompound(stream);\r\n    } while (stream.findNextCompoundStart());\r\n    this._finalize();\r\n    return result;\r\n  }\r\n}\r\nSDFParser.formats = ['mol', 'sdf'];\r\nSDFParser.extensions = ['.mol', '.sdf'];\r\n;// CONCATENATED MODULE: ./src/io/parsers/DSN6Parser.js\r\n\r\n\r\n\r\n\r\n// http://www.uoxray.uoregon.edu/tnt/manual/node104.html\r\nconst DSN6Header = {\r\n  nstart: [valueType.array, 'i16', 0],\r\n  extent: [valueType.array, 'i16', 3],\r\n  grid: [valueType.array, 'i16', 6],\r\n  cellDims: [valueType.vector, 'i16', 9],\r\n  angles: [valueType.array, 'i16', 12],\r\n  div: [valueType.singular, 'i16', 15],\r\n  adder: [valueType.singular, 'i16', 16],\r\n  scaleFactor: [valueType.singular, 'i16', 17]\r\n};\r\nclass DSN6Model extends parsers_VolumeModel {\r\n  _parseHeader(_buffer) {\r\n    this._buff = _buffer;\r\n    this._typedCheck();\r\n    const arrays = {};\r\n    arrays.i16 = new Int16Array(this._buff);\r\n\r\n    // check and reverse if big endian\r\n    if (arrays.i16[18] !== 100) {\r\n      for (let i = 0, n = arrays.i16.length; i < n; ++i) {\r\n        const val = arrays.i16[i];\r\n        arrays.i16[i] = (val & 0xff) << 8 | val >> 8 & 0xff;\r\n      }\r\n    }\r\n    if (arrays.i16[18] !== 100) {\r\n      throw new Error('DSN6: Incorrect format ');\r\n    }\r\n    const header = this._header;\r\n    this._fillHeader(DSN6Header, arrays);\r\n    header.cellDims.multiplyScalar(1.0 / header.scaleFactor);\r\n    header.angles.forEach((angle, i, a) => {\r\n      a[i] *= Math.PI / 180.0 / header.scaleFactor;\r\n    });\r\n    header.div /= 100;\r\n  }\r\n  _setAxisIndices() {\r\n    this._xyz2crs[0] = 0;\r\n    this._xyz2crs[1] = 1;\r\n    this._xyz2crs[2] = 2;\r\n  }\r\n  _setOrigins() {\r\n    const header = this._header;\r\n    const [xaxis, yaxis, zaxis] = this._getAxis();\r\n    this._setAxisIndices();\r\n    this._origin.addScaledVector(xaxis, header.nstart[0]);\r\n    this._origin.addScaledVector(yaxis, header.nstart[1]);\r\n    this._origin.addScaledVector(zaxis, header.nstart[2]);\r\n    xaxis.multiplyScalar(header.extent[0]);\r\n    yaxis.multiplyScalar(header.extent[1]);\r\n    zaxis.multiplyScalar(header.extent[2]);\r\n    this._setBoxParams(xaxis, yaxis, zaxis);\r\n  }\r\n  _pointCalculate(xyzData, byteBuffer, z, y, x, pos, i) {\r\n    const header = this._header;\r\n    if (x < header.extent[0] && y < header.extent[1] && z < header.extent[2]) {\r\n      const idx = x + header.extent[0] * (y + header.extent[1] * z);\r\n      xyzData[idx] = (byteBuffer[pos.counter] - header.adder) / header.div;\r\n      ++pos.counter;\r\n    } else {\r\n      pos.counter += 8 - i;\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  _blockCalculate(xyzData, byteBuffer, zBlock, yBlock, xBlock, pos) {\r\n    for (let k = 0; k < 8; ++k) {\r\n      const z = 8 * zBlock + k;\r\n      for (let j = 0; j < 8; ++j) {\r\n        const y = 8 * yBlock + j;\r\n        let inRange = true;\r\n        let i = 0;\r\n        while (inRange && i < 8) {\r\n          const x = 8 * xBlock + i;\r\n          inRange = this._pointCalculate(xyzData, byteBuffer, z, y, x, pos, i);\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _toXYZData() {\r\n    const header = this._header;\r\n    const byteBuffer = new Uint8Array(this._buff);\r\n    const xyzData = new Float32Array(header.extent[0] * header.extent[1] * header.extent[2]);\r\n    const blocks = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(header.extent[0] / 8, header.extent[1] / 8, header.extent[2] / 8);\r\n    const pos = {};\r\n    pos.counter = 512;\r\n    for (let zBlock = 0; zBlock < blocks.z; ++zBlock) {\r\n      for (let yBlock = 0; yBlock < blocks.y; ++yBlock) {\r\n        for (let xBlock = 0; xBlock < blocks.x; ++xBlock) {\r\n          this._blockCalculate(xyzData, byteBuffer, zBlock, yBlock, xBlock, pos);\r\n        }\r\n      }\r\n    }\r\n    this._calculateInfoParams(xyzData);\r\n    return xyzData;\r\n  }\r\n  _calculateInfoParams(xyzData) {\r\n    this._header.dmean /= xyzData.length;\r\n    let dispersion = 0;\r\n    let minDensity = xyzData[0];\r\n    let maxDensity = xyzData[0];\r\n    for (let j = 0; j < xyzData.length; j++) {\r\n      dispersion += (this._header.dmean - xyzData[j]) ** 2;\r\n      if (xyzData[j] < minDensity) {\r\n        minDensity = xyzData[j];\r\n      }\r\n      if (xyzData[j] > maxDensity) {\r\n        maxDensity = xyzData[j];\r\n      }\r\n    }\r\n    this._header.sd = Math.sqrt(dispersion / xyzData.length);\r\n    this._header.dmax = maxDensity;\r\n    this._header.dmin = minDensity;\r\n  }\r\n}\r\nclass DSN6Parser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._options.fileType = 'dsn6';\r\n    this.model = new DSN6Model();\r\n  }\r\n  static canParse(data, options) {\r\n    if (!data) {\r\n      return false;\r\n    }\r\n    return data instanceof ArrayBuffer && Parser.checkDataTypeOptions(options, 'dsn6');\r\n  }\r\n  static canProbablyParse(_data) {\r\n    return false;\r\n  }\r\n  parseSync() {\r\n    return this.model.parse(this._data);\r\n  }\r\n}\r\nDSN6Parser.formats = ['dsn6'];\r\nDSN6Parser.extensions = ['.dsn6', '.omap'];\r\nDSN6Parser.binary = true;\r\n/* harmony default export */ const parsers_DSN6Parser = (DSN6Parser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/GROReader.js\r\n\r\n\r\n/**\r\n * Little helper class for GRO Parser usage.\r\n * @extends PDBStream\r\n */\r\nclass GROReader extends parsers_PDBStream {\r\n  constructor(data) {\r\n    super(data);\r\n    /** @type Number */\r\n    this._next = -1; // End position of line\r\n    this.next();\r\n  }\r\n\r\n  /**\r\n   * Getting end of string.\r\n   * @returns {Number} Pointer to end of string\r\n   */\r\n  getNext() {\r\n    return this._next;\r\n  }\r\n}\r\n/* harmony default export */ const parsers_GROReader = (GROReader);\r\n;// CONCATENATED MODULE: ./src/io/parsers/GROParser.js\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  Complex: GROParser_Complex,\r\n  Element: GROParser_Element,\r\n  Molecule: GROParser_Molecule\r\n} = chem;\r\n\r\n/**\r\n * Gromos87 file format parser.\r\n * @extends Parser\r\n */\r\nclass GROParser extends Parser {\r\n  /**\r\n   * Create parser for .gro file format\r\n   *\r\n   * @param {String} data Input file\r\n   * @param {String} options Input options (optional field)\r\n   */\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    /** @type Date */\r\n    this._time = null; // Time in ps, optional field for animations\r\n    /** @type Number */\r\n    this._numAtoms = null; // Number of atoms in complex\r\n    /** @type Number */\r\n    this._residueNumber = null; // Number of exact residue\r\n    /** @type String */\r\n    this._residueName = ''; // Scientific name of exact residue\r\n    /** @type String */\r\n    this._atomName = ''; // Scientific name of exact atom\r\n    /** @type Number */\r\n    this._atomNumber = null; // Sorted number of exact atom\r\n    /** @type Array */\r\n    this._atomPosition = []; // Array which contains x, y, z position of exact atom\r\n    /** @type Array */\r\n    this._atomVelocity = []; // Array which contains x, y, z velocity of exact atom (optional)\r\n    /** @type Complex */\r\n    this._complex = null; // Complex structure for unified molecule representation\r\n    /** @type Vector3 */\r\n    this._molecules = []; // Molecules array\r\n    /** @type Molecule */\r\n    this._molecule = null; // Single molecule\r\n    /** @type String */\r\n    this._options.filetype = 'gro'; // Extension of data file.\r\n  }\r\n\r\n  /**\r\n   * General check for possibility of parsing.\r\n   * @param {String} data - Input file\r\n   * @returns {boolean} true if this file is in ascii, false otherwise\r\n   */\r\n  canProbablyParse(data) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(this._data) && /^\\s*[^\\n]*\\n\\s*\\d+ *\\n\\s*\\d+[^\\n\\d]{3}\\s*\\w+\\s*\\d+\\s*-?\\d/.test(data);\r\n  }\r\n\r\n  /**\r\n   * Parsing title of molecule complex.\r\n   * NOTE: that names are ESTIMATES, there is no strict rules in Gromos87 standard for first line in input file.\r\n   * @param {GROReader} line - Line containing title and time.\r\n   */\r\n  _parseTitle(line) {\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    metadata.id = line.readLine().trim();\r\n    metadata.name = metadata.id.slice(metadata.id.lastIndexOf('\\\\') + 1, metadata.id.lastIndexOf('.'));\r\n    metadata.format = 'gro';\r\n  }\r\n\r\n  /**\r\n   * Parsing line containing number of atoms information.\r\n   * @param {GROReader} line - Line containing number of atoms.\r\n   */\r\n  _parseNumberOfAtoms(line) {\r\n    this._numAtoms = line.readInt(0, line.getNext());\r\n    if (Number.isNaN(this._numAtoms)) {\r\n      throw new Error('Line 2 is not representing atom number. Consider checking input file');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parsing line containing information about residues, atoms etc. Also information about box vectors.\r\n   * Format of atoms MUST (by Gromos87 standard) be this: (note that numbering starts not from 0, but from 1!)\r\n   * ResidueNumber[1 - 5]  ResidueName[6 - 10] AtomName[11 - 15] AtomNumber[16 - 20] Position[21 - 45] Velocity[46 - 69]\r\n   * @param {GROReader} line - Line containing information about atom.\r\n   */\r\n  _parseAtom(line) {\r\n    this._residueNumber = line.readInt(1, 5);\r\n    this._residueName = line.readString(6, 10).trim();\r\n    this._atomName = line.readString(11, 15).trim();\r\n    this._atomNumber = line.readInt(16, 20);\r\n    const positionX = line.readFloat(21, 28) * 10;\r\n    const positionY = line.readFloat(29, 36) * 10;\r\n    const positionZ = line.readFloat(37, 45) * 10;\r\n    if (Number.isNaN(positionX) || Number.isNaN(positionY) || Number.isNaN(positionZ)) {\r\n      this._complex.error = {\r\n        message: `Atom position is invalid in \"${line.readLine()}\"`\r\n      };\r\n      return;\r\n    }\r\n    /* const velocityX = line.readFloat(46, 53);\r\n    const velocityY = line.readFloat(54, 61);\r\n    const velocityZ = line.readFloat(62, 69); */\r\n    /* Adding residue and atom to complex structure */\r\n    const type = GROParser_Element.getByName(this._atomName[0]); /* MAGIC 0. REASONS: This name is something like \"CA\", where\r\n                                                       C - is an element an A is something else. But what about Calcium? */\r\n    if (type.fullName === 'Unknown') {\r\n      this._complex.error = {\r\n        message: `${this._atomName[0]} hasn't been recognised as an atom name.`\r\n      };\r\n      return;\r\n    }\r\n    const role = GROParser_Element.Role[this._atomName];\r\n    /* Firstly, create a dummy chain */\r\n    let chain = this._chain;\r\n    if (!chain) {\r\n      this._chain = chain = this._complex.addChain('A');\r\n    }\r\n    /* Secondly, add residue to that chain */\r\n    let residue = this._residue;\r\n    if (!residue || residue.getSequence() !== this._residueNumber) {\r\n      this._residue = residue = chain.addResidue(this._residueName, this._residueNumber, ' ');\r\n    }\r\n    /* Lastly, add atom to that residue */\r\n    this._atomPosition = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(positionX, positionY, positionZ);\r\n    /* Adding default constants to correct atom addition process */\r\n    const het = true;\r\n    const altLoc = ' ';\r\n    const occupancy = 1;\r\n    const tempFactor = 1;\r\n    const charge = 0;\r\n    residue.addAtom(this._atomName, type, this._atomPosition, role, het, this._atomNumber, altLoc, occupancy, tempFactor, charge);\r\n  }\r\n\r\n  /**\r\n   * Some finalizing procedures. In '.gro' file format there is only 1 chain and 1 molecule.\r\n   */\r\n  _finalize() {\r\n    const molecule = new GROParser_Molecule(this._complex, this._complex.metadata.name, 1);\r\n    // aggregate residues from chain\r\n    molecule.residues = this._chain._residues;\r\n    molecule._chains = this._chain;\r\n    this._complex._molecules[0] = molecule;\r\n    this._molecules.push(molecule);\r\n    this._complex.finalize({\r\n      needAutoBonding: true,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main parsing procedure.\r\n   * @returns {Complex} Complex structure for visualizing.\r\n   */\r\n  parseSync() {\r\n    /* Create \"Complex\" variable */\r\n    const result = this._complex = new GROParser_Complex();\r\n    /* Parse input file line-by-line */\r\n    const reader = new parsers_GROReader(this._data);\r\n    let counter = 0; /* Simple counter regarding to format of .gro file */\r\n    /* First two lines - technical information, other lines - Atoms */\r\n    this._parseTitle(reader);\r\n    reader.next();\r\n    this._parseNumberOfAtoms(reader);\r\n    reader.next();\r\n    for (counter = 0; counter < this._numAtoms; ++counter) {\r\n      if (!reader.end()) {\r\n        this._parseAtom(reader);\r\n        reader.next();\r\n      } else break;\r\n    }\r\n    /* If number of atoms in second line is less then actual atoms in file */\r\n    if (counter < this._numAtoms) {\r\n      this._complex.error = {\r\n        message: 'File ended unexpectedly.'\r\n      };\r\n    }\r\n    /* Catch errors occurred in parsing process */\r\n    if (result.error) {\r\n      throw new Error(result.error.message);\r\n    }\r\n\r\n    /* Finalizing data */\r\n    this._finalize();\r\n\r\n    /* Cleaning up */\r\n    this._atomPosition = null;\r\n    this._complex = null;\r\n    this._molecules = null;\r\n    this._molecule = null;\r\n\r\n    /* Return resulting Complex variable */\r\n    return result;\r\n  }\r\n}\r\nGROParser.formats = ['gro'];\r\nGROParser.extensions = ['.gro'];\r\n/* harmony default export */ const parsers_GROParser = (GROParser);\r\n;// CONCATENATED MODULE: ./src/io/parsers/MOL2Parser.js\r\n\r\n\r\n\r\nconst {\r\n  Complex: MOL2Parser_Complex,\r\n  Element: MOL2Parser_Element,\r\n  Bond: MOL2Parser_Bond,\r\n  Molecule: MOL2Parser_Molecule\r\n} = chem;\r\nconst MOL2Parser_orderMap = {\r\n  un: 0,\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  ar: 1,\r\n  am: 1,\r\n  nc: 0,\r\n  du: 1\r\n};\r\nconst MOL2Parser_typeMap = {\r\n  un: MOL2Parser_Bond.BondType.UNKNOWN,\r\n  // unknown (cannot be determined from the parameter tables)\r\n  1: MOL2Parser_Bond.BondType.COVALENT,\r\n  // single\r\n  2: MOL2Parser_Bond.BondType.COVALENT,\r\n  // double\r\n  3: MOL2Parser_Bond.BondType.COVALENT,\r\n  // triple\r\n  ar: MOL2Parser_Bond.BondType.AROMATIC,\r\n  // aromatic\r\n  am: MOL2Parser_Bond.BondType.COVALENT,\r\n  // amide\r\n  nc: MOL2Parser_Bond.BondType.UNKNOWN,\r\n  // not connected\r\n  du: MOL2Parser_Bond.BondType.COVALENT // dummy\r\n};\r\nconst resNumberRegex = /\\d+$/;\r\nconst spacesRegex = /\\s+/;\r\nfunction splitToFields(str) {\r\n  return str.trim().split(spacesRegex);\r\n}\r\n/* There is no jsdoc documentation because of eslint corrections:\r\n * not all Parser methods are implemented\r\n */\r\n\r\nclass MOL2Parser extends Parser {\r\n  constructor(data, options) {\r\n    super(data, options);\r\n    this._complex = null;\r\n    this._chain = null;\r\n    this._residue = null;\r\n    this._compoundIndx = -1;\r\n    this._molecules = [];\r\n    this._molecule = null;\r\n    this._currPosIdx = 0;\r\n    this._currStartIdx = 0;\r\n    this._serialAtomMap = {};\r\n    this._options.fileType = 'mol2';\r\n  }\r\n  _parseRawStrings(data) {\r\n    return data.split(/\\r?\\n|\\r/);\r\n  }\r\n  _toStringFromStart(numb, MOL2Data) {\r\n    const newPosIdx = this._currStartIdx + numb;\r\n    this._currPosIdx = newPosIdx < MOL2Data.length ? newPosIdx : this._currStartIdx;\r\n  }\r\n  _toHeaderString(header, MOL2Data) {\r\n    this._toStringFromStart(0, MOL2Data);\r\n    while (this._currPosIdx < MOL2Data.length) {\r\n      if (MOL2Data[this._currPosIdx].match(`@<TRIPOS>${header}`)) {\r\n        return;\r\n      }\r\n      this._currPosIdx++;\r\n    }\r\n    this._toStringFromStart(0, MOL2Data);\r\n  }\r\n  _toStringFromHeader(header, numb, MOL2Data) {\r\n    this._toHeaderString(header, MOL2Data);\r\n    const newPosIdx = this._currPosIdx + numb;\r\n    if (MOL2Data[this._currPosIdx].match(`@<TRIPOS>${header}`) && newPosIdx < MOL2Data.length) {\r\n      this._currPosIdx = newPosIdx;\r\n    }\r\n  }\r\n  _setStart(startPos, MOL2Data) {\r\n    if (startPos >= MOL2Data.length) {\r\n      this._currStartIdx = this._currPosIdx = MOL2Data.length - 1;\r\n    } else {\r\n      this._currStartIdx = this._currPosIdx = startPos;\r\n    }\r\n  }\r\n  _probablyHaveDataToParse(MOL2Data) {\r\n    return this._currPosIdx < MOL2Data.length - 2;\r\n  }\r\n  _findNextCompoundStart(MOL2Data) {\r\n    while (this._currPosIdx < MOL2Data.length && MOL2Data[this._currPosIdx].trim() !== '@<TRIPOS>MOLECULE>') {\r\n      this._currPosIdx++;\r\n    }\r\n    this._setStart(++this._currPosIdx, MOL2Data);\r\n    return this._probablyHaveDataToParse(MOL2Data);\r\n  }\r\n  _parseMolecule(MOL2Data) {\r\n    this._toHeaderString('MOLECULE', MOL2Data);\r\n    const {\r\n      metadata\r\n    } = this._complex;\r\n    metadata.name = MOL2Data[++this._currPosIdx];\r\n    metadata.format = 'mol2';\r\n    this._molecule = {\r\n      _index: '',\r\n      _chains: []\r\n    };\r\n    this._molecule._index = this._compoundIndx + 1;\r\n    this._molecules.push(this._molecule);\r\n  }\r\n\r\n  /* Atom format description:\r\n   * atomId atomName x y z element [resSeq [resName [charge [statusBit]]]]\r\n   * statusBits is the internal SYBYL status bits associated with the atom.\r\n   * These should never be set by the user.\r\n   * Source: http://chemyang.ccnu.edu.cn/ccb/server/AIMMS/mol2.pdf\r\n   */\r\n  _parseAtoms(atomsNum, MOL2Data) {\r\n    this._toHeaderString('ATOM', MOL2Data);\r\n    for (let i = 0; i < atomsNum; i++) {\r\n      const parsedStr = splitToFields(MOL2Data[++this._currPosIdx]);\r\n      if (parsedStr.length < 6) {\r\n        throw new Error('MOL2 parsing error: Not enough information to create atom!');\r\n      }\r\n      const atomId = parseInt(parsedStr[0], 10);\r\n      const atomName = parsedStr[1];\r\n      const x = parseFloat(parsedStr[2]);\r\n      const y = parseFloat(parsedStr[3]);\r\n      const z = parseFloat(parsedStr[4]);\r\n      const element = parsedStr[5].split('.')[0].toUpperCase();\r\n      let charge = 0;\r\n      if (parsedStr.length >= 9) {\r\n        charge = parseFloat(parsedStr[8]) || 0.0;\r\n      }\r\n      let chain = this._chain;\r\n      if (!chain) {\r\n        // .mol2 may contain information about multiple molecules, but they can't be visualized\r\n        // at the same time now. There is no need to create different chain IDs then.\r\n        this._chain = chain = this._complex.getChain('A') || this._complex.addChain('A');\r\n        this._residue = null;\r\n      }\r\n      if (!this._setResidue(parsedStr)) {\r\n        continue;\r\n      }\r\n\r\n      // These fields are not listed in mol2 format. Set them default.\r\n      // Atoms and het atoms doesn't differ in .mol2,\r\n      // but het atoms have special residues. It can be used in next updates\r\n      const het = false;\r\n      const altLoc = ' ';\r\n      const occupancy = 1.0;\r\n      const tempFactor = 0.0;\r\n      const type = MOL2Parser_Element.getByName(element);\r\n      const role = MOL2Parser_Element.Role[atomName];\r\n      const xyz = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(x, y, z);\r\n      this._residue.addAtom(atomName, type, xyz, role, het, atomId, altLoc, occupancy, tempFactor, charge);\r\n    }\r\n  }\r\n  _setResidue(parsedStr) {\r\n    let resSeq = 1;\r\n    let resName = 'UNK'; // The same meaning has '<0>' in some mol2 files\r\n\r\n    if (parsedStr.length >= 7) {\r\n      resSeq = parseInt(parsedStr[6], 10);\r\n    }\r\n    if (parsedStr.length >= 8 && parsedStr[7] !== '<0>') {\r\n      resName = parsedStr[7].replace(resNumberRegex, '');\r\n    }\r\n    if (this.settings.now.nowater) {\r\n      if (resName === 'HOH' || resName === 'WAT') {\r\n        return false;\r\n      }\r\n    }\r\n    const residue = this._residue;\r\n    const chain = this._chain;\r\n    if (!residue || residue.getSequence() !== resSeq) {\r\n      this._residue = chain.addResidue(resName, resSeq, 'A');\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* Bond format description\r\n   * bondId originAtomId targetAtomId bondType [statusBits]\r\n   */\r\n  _parseBonds(bondsNum, MOL2Data) {\r\n    this._toHeaderString('BOND', MOL2Data);\r\n    for (let i = 0; i < bondsNum; i++) {\r\n      const parsedStr = splitToFields(MOL2Data[++this._currPosIdx]);\r\n      if (parsedStr.length < 3) {\r\n        throw new Error('MOL2 parsing error: Missing information about bonds!');\r\n      }\r\n      let originAtomId = parseInt(parsedStr[1], 10);\r\n      let targetAtomId = parseInt(parsedStr[2], 10);\r\n      const bondType = parsedStr[3];\r\n      if (originAtomId > targetAtomId) {\r\n        [originAtomId, targetAtomId] = [targetAtomId, originAtomId];\r\n      }\r\n      this._complex.addBond(originAtomId, targetAtomId, MOL2Parser_orderMap[bondType] || 0, MOL2Parser_typeMap[bondType] || MOL2Parser_Bond.BondType.UNKNOWN, true);\r\n    }\r\n  }\r\n  _fixSerialAtoms() {\r\n    const atoms = this._complex._atoms;\r\n    for (let i = 0; i < atoms.length; i++) {\r\n      const atom = atoms[i];\r\n      this._serialAtomMap[atom.serial] = atom;\r\n    }\r\n  }\r\n  _fixBondsArray() {\r\n    const serialAtomMap = this._serialAtomMap;\r\n    const complex = this._complex;\r\n    if (Object.keys(serialAtomMap).length === 0) {\r\n      throw new Error('MOL2 parsing error: Missing atom information!');\r\n    }\r\n    const bonds = complex._bonds;\r\n    for (let j = 0; j < bonds.length; j++) {\r\n      const bond = bonds[j];\r\n      bond._left = serialAtomMap[bond._left] || null;\r\n      bond._right = serialAtomMap[bond._right] || null;\r\n    }\r\n  }\r\n  _finalizeMolecules() {\r\n    // Get chain from complex\r\n    const chain = this._complex._chains[0];\r\n    this._complex._molecules = [];\r\n\r\n    // Aggregate residues from chains\r\n    // (to be precise from the chain 'A')\r\n    for (let i = 0; i < this._molecules.length; i++) {\r\n      const currMolecule = this._molecules[i];\r\n      const molResidues = chain._residues;\r\n      const molecule = new MOL2Parser_Molecule(this._complex, currMolecule._name, i + 1);\r\n      molecule.residues = molResidues;\r\n      this._complex._molecules[i] = molecule;\r\n    }\r\n  }\r\n  _finalize() {\r\n    this._complex._finalizeBonds();\r\n    this._fixSerialAtoms();\r\n    this._fixBondsArray();\r\n    this._finalizeMolecules();\r\n    this._complex.finalize({\r\n      needAutoBonding: false,\r\n      detectAromaticLoops: this.settings.now.aromatic,\r\n      enableEditing: this.settings.now.editing,\r\n      serialAtomMap: this._serialAtomMap\r\n    });\r\n  }\r\n  _parseCompound(MOL2Data) {\r\n    this._compoundIndx++;\r\n    this._parseMolecule(MOL2Data);\r\n\r\n    // Ignoring comments and everything before @<TRIPOS>MOLECULE block\r\n    this._toStringFromHeader('MOLECULE', 2, MOL2Data);\r\n    const parsedStr = MOL2Data[this._currPosIdx].trim().split(spacesRegex);\r\n    const atomsNum = parsedStr[0];\r\n    const bondsNum = parsedStr[1];\r\n    this._parseAtoms(atomsNum, MOL2Data);\r\n    this._parseBonds(bondsNum, MOL2Data);\r\n  }\r\n  parseSync() {\r\n    const result = this._complex = new MOL2Parser_Complex();\r\n    const MOL2Data = this._parseRawStrings(this._data);\r\n    do {\r\n      this._parseCompound(MOL2Data);\r\n    } while (this._findNextCompoundStart(MOL2Data));\r\n    this._finalize();\r\n    return result;\r\n  }\r\n}\r\nMOL2Parser.formats = ['mol2'];\r\nMOL2Parser.extensions = ['.mol2', '.ml2', '.sy2'];\r\n/* harmony default export */ const parsers_MOL2Parser = (MOL2Parser);\r\n;// CONCATENATED MODULE: ./src/io/parsers.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const parsers = (new parsers_ParserList([\r\n// note: order might be important\r\nparsers_PDBParser, parsers_CIFParser, parsers_MMTFParser, parsers_XYZParser, parsers_CMLParser, parsers_PubChemParser, SDFParser, parsers_CCP4Parser, parsers_DSN6Parser, parsers_GROParser, parsers_MOL2Parser]));\r\n;// CONCATENATED MODULE: ./src/io/exporters/ExporterList.js\r\n\r\n\r\n/**\r\n * A list of available exporters.\r\n * @extends EntityList\r\n */\r\nclass ExporterList extends utils_EntityList {\r\n  /**\r\n   * Create a list of exporters.\r\n   * The exporters are indexed by supported data formats (`.formats` and\r\n   * `.extensions` properties of a Exporter subclass).\r\n   * The Exporters can be retrieved later by matching against specs (see {@link ExporterList#find}).\r\n   *\r\n   * @param {!Array<function(new:Exporter)>=} someExporters A list of {@link Exporter} subclasses to\r\n   *   automatically register at creation time.\r\n   * @see ExporterList#register\r\n   */\r\n  constructor() {\r\n    let someExporters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n    super(someExporters, ['formats']);\r\n  }\r\n\r\n  /**\r\n   * Find a suitable exporter for data.\r\n   *\r\n   * @param {Object} specs Exporter specifications.\r\n   * @param {string=} specs.format Supported data format.\r\n   * @param {*=} specs.data Data to export.\r\n   */\r\n  find(specs) {\r\n    let list = [];\r\n    if (specs.format) {\r\n      list = this._dict.formats[specs.format.toLowerCase()] || [];\r\n    }\r\n    return [...list];\r\n  }\r\n}\r\n/* harmony default export */ const exporters_ExporterList = (ExporterList);\r\n;// CONCATENATED MODULE: ./src/io/exporters/Exporter.js\r\n\r\nclass Exporter {\r\n  constructor(source, options) {\r\n    this._source = source;\r\n    this._options = options || {};\r\n    this._abort = false;\r\n  }\r\n  exportSync() {\r\n    throw new Error('Exporting to this source is not implemented');\r\n  }\r\n  export() {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        try {\r\n          if (this._abort) {\r\n            return reject(new Error('Export aborted'));\r\n          }\r\n          return resolve(this.exportSync());\r\n        } catch (error) {\r\n          return reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  abort() {\r\n    this._abort = true;\r\n  }\r\n}\r\nutils_makeContextDependent(Exporter.prototype);\r\n;// CONCATENATED MODULE: ./src/io/exporters/PDBResult.js\r\n\r\n\r\nclass PDBResult {\r\n  constructor() {\r\n    this._resultArray = [];\r\n    this._currentStr = -1;\r\n    this._tag = null;\r\n    this._fixedNumeration = false;\r\n    this._numeration = false;\r\n    this._tagStrNum = 0;\r\n  }\r\n  getResult() {\r\n    this.writeString('\\n', 81, 81);\r\n    return this._resultArray.join('');\r\n  }\r\n  _currentStrLength() {\r\n    const curStr = this._resultArray[this._currentStr];\r\n    return curStr ? curStr.length : 0;\r\n  }\r\n\r\n  // numeration can be number or boolean\r\n  // if numeration is number then just put this number to 8-10 pos in string\r\n  // if numeration is boolean then increase number for all new strings\r\n  newTag(tag, numeration) {\r\n    if (!tag) {\r\n      this._tag = null;\r\n    } else {\r\n      this._tag = tag;\r\n    }\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(numeration)) {\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(numeration)) {\r\n        this._tagStrNum = numeration;\r\n        this._numeration = true;\r\n        this._fixedNumeration = true;\r\n      } else if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isBoolean(numeration)) {\r\n        this._tagStrNum = 0;\r\n        this._numeration = numeration;\r\n        this._fixedNumeration = false;\r\n      }\r\n    } else {\r\n      this._numeration = false;\r\n      this._fixedNumeration = false;\r\n      this._tagStrNum = 0;\r\n    }\r\n  }\r\n  newString(tag) {\r\n    this.writeString('\\n', 81, 81);\r\n    this._currentStr++;\r\n    this._resultArray.push('');\r\n    if (tag) {\r\n      this.writeString(tag, 1, 6);\r\n    } else if (this._tag) {\r\n      this.writeString(this._tag, 1, 6);\r\n    }\r\n    if (this._numeration) {\r\n      if (!this._fixedNumeration) {\r\n        this._tagStrNum++;\r\n      }\r\n      if (this._tagStrNum !== 1) {\r\n        this.writeString(this._tagStrNum.toString(), 10, 8);\r\n      }\r\n    }\r\n  }\r\n  writeEntireString(string, maxStrPos, concat) {\r\n    if (!maxStrPos) {\r\n      maxStrPos = 81;\r\n    }\r\n    for (let j = 0; j < string.length; j++) {\r\n      if (this._currentStrLength() === maxStrPos && j !== string.length - 1) {\r\n        this.newString();\r\n        if (concat) {\r\n          // pretty hardcoddy\r\n          this.writeString(concat.tag, concat.begin, concat.end);\r\n        }\r\n      }\r\n      if (string[j] === '\\n') {\r\n        this.newString();\r\n      } else {\r\n        this.writeString(string[j]);\r\n      }\r\n    }\r\n  }\r\n  writeString(string, begin, end) {\r\n    let curStr = this._resultArray[this._currentStr];\r\n    let str;\r\n    const curStrLength = curStr ? curStr.length : 0;\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(string)) {\r\n      return;\r\n    }\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(begin)) {\r\n      begin = curStrLength + 1;\r\n    }\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(end)) {\r\n      end = curStrLength + string.length;\r\n    }\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(string)) {\r\n      str = string.toString();\r\n    } else {\r\n      str = string;\r\n    }\r\n    const finish = begin < end ? end : begin;\r\n    const start = begin < end ? begin : end;\r\n    if (str.length > Math.abs(begin - end) + 1) {\r\n      str = str.substr(0, Math.abs(begin - end + 1));\r\n    }\r\n\r\n    // spaces before start of new data\r\n    if (start > curStrLength + 1) {\r\n      this._resultArray[this._currentStr] += ' '.repeat(start - curStrLength - 1);\r\n    } else if (start <= curStrLength) {\r\n      const cStr = this._resultArray[this._currentStr];\r\n      this._resultArray[this._currentStr] = cStr.slice(0, start - 1);\r\n    }\r\n\r\n    // if reverse order\r\n    // reverse order of end and begin means that user wants to align text right\r\n    if (end < begin) {\r\n      const len = begin - end + 1;\r\n      str = ' '.repeat(len - str.length) + str;\r\n    }\r\n\r\n    // some hardcode fix for space between string numeration and data\r\n    // (see pdb file format description)\r\n    if (start === 11 && this._numeration && this._tagStrNum !== 1) {\r\n      str = ` ${str}`;\r\n    }\r\n\r\n    // append new data to string\r\n    this._resultArray[this._currentStr] += str;\r\n    curStr = this._resultArray[this._currentStr];\r\n    if (finish > curStr.length) {\r\n      this._resultArray[this._currentStr] += ' '.repeat(finish - curStr.length);\r\n    }\r\n  }\r\n  writeBondsArray(bonds, atom) {\r\n    const bondsArrays = this._getSubArrays(bonds, 4);\r\n    for (let k = 0; k < bondsArrays.length; k++) {\r\n      this.newString();\r\n      this.writeString(atom.serial, 11, 7);\r\n      for (let j = 0; j < bondsArrays[k].length; j++) {\r\n        const serial = bondsArrays[k][j]._left.serial === atom.serial ? bondsArrays[k][j]._right.serial : bondsArrays[k][j]._left.serial;\r\n        this.writeString(serial, 16 + 5 * j, 12 + 5 * j);\r\n      }\r\n    }\r\n  }\r\n  _getSubArrays(arr, subArraySize) {\r\n    const subArrays = [];\r\n    for (let i = 0; i < arr.length; i += subArraySize) {\r\n      subArrays.push(arr.slice(i, i + subArraySize));\r\n    }\r\n    return subArrays;\r\n  }\r\n\r\n  // function for writing matrix in Remark290 and Remark350 tags\r\n  // (see pdb file description)\r\n  writeMatrix(matrix, matrixIndx, tag) {\r\n    for (let j = 0; j < 3; j++) {\r\n      this.newString();\r\n      this.writeString(tag, 14, 18);\r\n      this.writeString((j + 1).toString(), 19, 19);\r\n      this.writeString(matrixIndx.toString(), 23, 20);\r\n      for (let k = 0; k < 3; k++) {\r\n        const numb = parseFloat(matrix.elements[j * 4 + k]).toFixed(6);\r\n        this.writeString(numb.toString(), 33 + k * 10, 24 + k * 10);\r\n      }\r\n      const numb = parseFloat(matrix.elements[j * 4 + 3]).toFixed(5);\r\n      this.writeString(numb.toString(), 68, 55);\r\n    }\r\n  }\r\n  writeMatrices(matrices, string) {\r\n    if (!matrices) {\r\n      return;\r\n    }\r\n    const matrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    for (let j = 0; j < matrices.length; j++) {\r\n      matrix.copy(matrices[j]).transpose();\r\n      this.writeMatrix(matrix, j + 1, string);\r\n    }\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/PDBExporter.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PDBExporter extends Exporter {\r\n  constructor(source, options) {\r\n    super(source, options);\r\n    this._tags = ['HEADER', 'TITLE', 'COMPND', 'REMARK', 'HELIX', 'SHEET', 'ATOM and HETATM', 'CONECT'];\r\n    this._result = null;\r\n    this._tagExtractors = {\r\n      HEADER: this._extractHEADER,\r\n      TITLE: this._extractTITLE,\r\n      'ATOM and HETATM': this._extractATOM,\r\n      CONECT: this._extractCONECT,\r\n      COMPND: this._extractCOMPND,\r\n      REMARK: this._extractREMARK,\r\n      HELIX: this._extractHELIX,\r\n      SHEET: this._extractSHEET\r\n    };\r\n    this._stringForRemark350 = 'COORDINATES FOR A COMPLETE MULTIMER REPRESENTING THE KNOWN\\n' + 'BIOLOGICALLY SIGNIFICANT OLIGOMERIZATION STATE OF THE\\n' + 'MOLECULE CAN BE GENERATED BY APPLYING BIOMT TRANSFORMATIONS\\n' + 'GIVEN BELOW.  BOTH NON-CRYSTALLOGRAPHIC AND\\n' + 'CRYSTALLOGRAPHIC OPERATIONS ARE GIVEN.';\r\n    this._stringForRemark290 = 'CRYSTALLOGRAPHIC SYMMETRY TRANSFORMATIONS\\n' + 'THE FOLLOWING TRANSFORMATIONS OPERATE ON THE ATOM/HETATM\\n' + 'RECORDS IN THIS ENTRY TO PRODUCE CRYSTALLOGRAPHICALLY\\n' + 'RELATED MOLECULES.';\r\n  }\r\n  exportSync() {\r\n    const result = new PDBResult();\r\n    if (!this._source) {\r\n      return this._result;\r\n    }\r\n    for (let i = 0; i < this._tags.length; i++) {\r\n      const tag = this._tags[i];\r\n      const func = this._tagExtractors[tag];\r\n      if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isFunction(func)) {\r\n        func.call(this, result);\r\n      }\r\n    }\r\n    this._result = result.getResult();\r\n    return this._result;\r\n  }\r\n  _extractHEADER(result) {\r\n    if (!this._source.metadata) {\r\n      return;\r\n    }\r\n    const {\r\n      metadata\r\n    } = this._source;\r\n    result.newTag('HEADER');\r\n    result.newString();\r\n    if (metadata.classification) {\r\n      result.writeString(metadata.classification, 11, 50);\r\n    }\r\n    if (metadata.date) {\r\n      result.writeString(metadata.date, 51, 59);\r\n    }\r\n    if (metadata.id) {\r\n      result.writeString(metadata.id, 63, 66);\r\n    }\r\n  }\r\n  _extractTITLE(result) {\r\n    if (!this._source.metadata) {\r\n      return;\r\n    }\r\n    const {\r\n      metadata\r\n    } = this._source;\r\n    if (!metadata.title) {\r\n      return;\r\n    }\r\n    result.newTag('TITLE', true);\r\n    for (let i = 0; i < metadata.title.length; i++) {\r\n      result.newString();\r\n      result.writeString(metadata.title[i], 11, 80);\r\n    }\r\n  }\r\n  _extractCONECT(result) {\r\n    if (!this._source._atoms) {\r\n      return;\r\n    }\r\n    const atoms = this._source._atoms;\r\n    result.newTag('CONECT');\r\n    for (let i = 0; i < atoms.length; i++) {\r\n      const fixedBonds = atoms[i].bonds.filter(bond => bond._fixed);\r\n      if (fixedBonds.length !== 0) {\r\n        result.writeBondsArray(fixedBonds.reverse(), atoms[i]);\r\n      }\r\n    }\r\n  }\r\n  _extractSHEET(result) {\r\n    if (!this._source._sheets) {\r\n      return;\r\n    }\r\n    result.newTag('SHEET');\r\n    const sheets = this._source._sheets;\r\n    for (let i = 0; i < sheets.length; i++) {\r\n      if (sheets[i]._strands) {\r\n        const strands = sheets[i]._strands;\r\n        for (let j = 0; j < strands.length; j++) {\r\n          result.newString();\r\n          result.writeString(j + 1, 10, 8);\r\n          result.writeString(sheets[i]._name, 14, 12);\r\n          result.writeString(strands.length, 16, 15);\r\n          result.writeString(strands[j].init._type._name, 18, 20);\r\n          result.writeString(strands[j].init._chain._name, 22, 22);\r\n          result.writeString(strands[j].init._sequence, 26, 23);\r\n          result.writeString(strands[j].init._icode, 27, 27);\r\n          result.writeString(strands[j].term._type._name, 29, 31);\r\n          result.writeString(strands[j].init._chain._name, 33, 33);\r\n          result.writeString(strands[j].term._sequence, 37, 34);\r\n          result.writeString(strands[j].term._icode, 38, 38);\r\n          result.writeString(strands[j].sense, 40, 39);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _extractHELIX(result) {\r\n    if (!this._source._helices) {\r\n      return;\r\n    }\r\n    result.newTag('HELIX');\r\n    const helices = this._source._helices;\r\n    for (let i = 0; i < helices.length; i++) {\r\n      const helix = helices[i];\r\n      const helixClass = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].invert(typeByPDBHelixClass);\r\n      result.newString();\r\n      result.writeString(helix.serial, 10, 8);\r\n      result.writeString(helix.name, 14, 12);\r\n      result.writeString(helix.init._type._name, 16, 18);\r\n      result.writeString(helix.init._chain._name, 20, 20);\r\n      result.writeString(helix.init._sequence, 25, 22);\r\n      result.writeString(helix.init._icode, 26, 26);\r\n      result.writeString(helix.term._type._name, 28, 30);\r\n      result.writeString(helix.term._chain._name, 32, 32);\r\n      result.writeString(helix.term._sequence, 37, 34);\r\n      result.writeString(helix.term._icode, 38, 38);\r\n      result.writeString(helixClass[helix.type], 40, 39);\r\n      result.writeString(helix.comment, 41, 70);\r\n      result.writeString(helix.length, 76, 72);\r\n    }\r\n  }\r\n  _extractATOM(result) {\r\n    if (!this._source._atoms) {\r\n      return;\r\n    }\r\n    const atoms = this._source._atoms;\r\n    for (let i = 0; i < atoms.length; i++) {\r\n      const tag = atoms[i].het ? 'HETATM' : 'ATOM';\r\n      result.newString(tag);\r\n      const startIndx = atoms[i].element.name.length > 1 || atoms[i].name.length > 3 ? 13 : 14;\r\n      result.writeString(atoms[i].serial, 11, 7);\r\n      result.writeString(atoms[i].name, startIndx, 16);\r\n      result.writeString(String.fromCharCode(atoms[i].location), 17, 17);\r\n      result.writeString(atoms[i].residue._type._name, 20, 18);\r\n      result.writeString(atoms[i].residue._chain._name, 22, 22);\r\n      result.writeString(atoms[i].residue._sequence, 26, 23);\r\n      result.writeString(atoms[i].residue._icode, 27, 27);\r\n      result.writeString(atoms[i].position.x.toFixed(3), 38, 31);\r\n      result.writeString(atoms[i].position.y.toFixed(3), 46, 39);\r\n      result.writeString(atoms[i].position.z.toFixed(3), 54, 47);\r\n      result.writeString(atoms[i].occupancy.toFixed(2), 60, 55);\r\n      result.writeString(atoms[i].temperature.toFixed(2), 66, 61);\r\n      result.writeString(atoms[i].element.name, 78, 77);\r\n      if (atoms[i].charge) {\r\n        result.writeString(atoms[i].charge, 79, 80);\r\n      }\r\n    }\r\n  }\r\n  _extractCOMPND(result) {\r\n    if (!this._source._molecules) {\r\n      return;\r\n    }\r\n    const molecules = this._source._molecules;\r\n    result.newTag('COMPND', true);\r\n    for (let i = 0; i < molecules.length; i++) {\r\n      const chains = this._getMoleculeChains(molecules[i]);\r\n      result.newString();\r\n      result.writeString(`MOL_ID: ${molecules[i].index};`, 11, 80);\r\n      result.newString();\r\n      result.writeString(`MOLECULE: ${molecules[i].name};`, 11, 80);\r\n      result.newString();\r\n      result.writeString('CHAIN: ', 11, 18);\r\n      const chainsString = `${chains.join(', ')};`;\r\n      result.writeEntireString(chainsString, 81);\r\n    }\r\n  }\r\n  _extractREMARK(result) {\r\n    this._Remark290(result);\r\n    this._Remark350(result);\r\n  }\r\n  _Remark290(result) {\r\n    if (!this._source.symmetry) {\r\n      return;\r\n    }\r\n    if (this._source.symmetry.length !== 0) {\r\n      const matrices = this._source.symmetry;\r\n      result.newTag('REMARK', 290);\r\n      result.newString();\r\n      result.newString();\r\n      result.writeEntireString(this._stringForRemark290);\r\n      result.writeMatrices(matrices, 'SMTRY');\r\n      result.newString();\r\n      result.newString();\r\n      result.writeString('REMARK: NULL', 11, 80);\r\n    }\r\n  }\r\n  _Remark350(result) {\r\n    if (!this._source.units) {\r\n      return;\r\n    }\r\n    const {\r\n      units\r\n    } = this._source;\r\n    let biomolIndx = 0;\r\n    result.newTag('REMARK', 350);\r\n    result.newString();\r\n    result.newString();\r\n    result.writeEntireString(this._stringForRemark350);\r\n    const assemblies = units.filter(unit => unit instanceof chem_Assembly);\r\n    for (let i = 0; i < assemblies.length; i++) {\r\n      result.newString();\r\n      result.newString();\r\n      biomolIndx++;\r\n      result.writeString(`BIOMOLECULE: ${biomolIndx}`, 11, 80);\r\n      const chains = assemblies[i].chains.join(', ');\r\n      result.newString();\r\n      result.writeString('APPLY THE FOLLOWING TO CHAINS: ');\r\n      result.writeEntireString(chains, 69, {\r\n        tag: 'AND CHAINS: ',\r\n        begin: 31,\r\n        end: 42\r\n      });\r\n      const {\r\n        matrices\r\n      } = assemblies[i];\r\n      result.writeMatrices(matrices, 'BIOMT');\r\n    }\r\n  }\r\n  _getMoleculeChains(molecule) {\r\n    function getChainName(residue) {\r\n      return residue._chain._name;\r\n    }\r\n    const chainNames = molecule.residues.map(getChainName);\r\n    return chainNames.filter((item, pos) => chainNames.indexOf(item) === pos);\r\n  }\r\n}\r\nPDBExporter.formats = ['pdb'];\r\nPDBExporter.SourceClass = chem_Complex;\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBXModel.js\r\n\r\nconst FBX_POS_SIZE = 3;\r\nconst FBX_NORM_SIZE = 3;\r\nconst FBX_COL_SIZE = 4;\r\nfunction copyFbxPoint3(src, srcIdx, dst, dstIdx) {\r\n  dst[dstIdx] = src[srcIdx];\r\n  dst[dstIdx + 1] = src[srcIdx + 1];\r\n  dst[dstIdx + 2] = src[srcIdx + 2];\r\n}\r\nfunction copyFbxPoint4(src, srcIdx, dst, dstIdx, value) {\r\n  dst[dstIdx] = src[srcIdx];\r\n  dst[dstIdx + 1] = src[srcIdx + 1];\r\n  dst[dstIdx + 2] = src[srcIdx + 2];\r\n  dst[dstIdx + 3] = value;\r\n}\r\nconst vector4 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4();\r\nfunction copyTransformedPoint3(src, srcIdx, dst, dstIdx, opts) {\r\n  vector4.set(src[srcIdx], src[srcIdx + 1], src[srcIdx + 2], opts.w);\r\n  vector4.applyMatrix4(opts.matrix);\r\n  dst[dstIdx] = vector4.x;\r\n  dst[dstIdx + 1] = vector4.y;\r\n  dst[dstIdx + 2] = vector4.z;\r\n}\r\nfunction setSubArray(src, dst, count, copyFunctor, functorOpts) {\r\n  if ((dst.array.length - dst.start) / dst.stride < count || (src.array.length - src.start) / src.stride < count) {\r\n    return; // we've got no space\r\n  }\r\n  if (src.stride === dst.stride) {\r\n    // stride is the same\r\n    dst.array.set(src.array, dst.start);\r\n  } else {\r\n    let idx = dst.start;\r\n    let arridx = src.start;\r\n    for (let i = 0; i < count; ++i, idx += dst.stride, arridx += src.stride) {\r\n      copyFunctor(src.array, arridx, dst.array, idx, functorOpts);\r\n    }\r\n  }\r\n}\r\nclass FBXModel {\r\n  constructor() {\r\n    this.positions = null;\r\n    this.normals = null;\r\n    this.colors = null;\r\n    this.indices = null;\r\n    this.lastPos = 0;\r\n    this.lastNorm = 0;\r\n    this.lastCol = 0;\r\n    this.lastIdx = 0;\r\n  }\r\n  init(vertsCount, indsCount) {\r\n    this.positions = new Float32Array(vertsCount * FBX_POS_SIZE);\r\n    this.normals = new Float32Array(vertsCount * FBX_NORM_SIZE);\r\n    this.colors = new Float32Array(vertsCount * FBX_COL_SIZE);\r\n    this.indices = new Int32Array(indsCount);\r\n  }\r\n  setPositions(array, start, count, stride) {\r\n    const src = {\r\n      array,\r\n      start,\r\n      stride\r\n    };\r\n    const dst = {\r\n      array: this.positions,\r\n      start: this.lastPos,\r\n      stride: FBX_POS_SIZE\r\n    };\r\n    setSubArray(src, dst, count, copyFbxPoint3);\r\n    this.lastPos += count * FBX_POS_SIZE;\r\n  }\r\n  setTransformedPositions(array, start, count, stride, matrix) {\r\n    let idx = this.lastPos;\r\n    let arrIdx = start;\r\n    const opts = {\r\n      matrix,\r\n      w: 1\r\n    };\r\n    for (let i = 0; i < count; ++i, arrIdx += stride, idx += FBX_POS_SIZE) {\r\n      copyTransformedPoint3(array, arrIdx, this.positions, idx, opts);\r\n    }\r\n    this.lastPos += count * FBX_POS_SIZE;\r\n  }\r\n  setNormals(array, start, count, stride) {\r\n    const src = {\r\n      array,\r\n      start,\r\n      stride\r\n    };\r\n    const dst = {\r\n      array: this.normals,\r\n      start: this.lastNorm,\r\n      stride: FBX_NORM_SIZE\r\n    };\r\n    setSubArray(src, dst, count, copyFbxPoint3);\r\n    this.lastNorm += count * FBX_NORM_SIZE;\r\n  }\r\n  setTransformedNormals(array, start, count, stride, matrix) {\r\n    let idx = this.lastNorm;\r\n    let arrIdx = start;\r\n    const opts = {\r\n      matrix,\r\n      w: 0\r\n    };\r\n    for (let i = 0; i < count; ++i, arrIdx += stride, idx += FBX_NORM_SIZE) {\r\n      copyTransformedPoint3(array, arrIdx, this.normals, idx, opts);\r\n    }\r\n    this.lastNorm += count * FBX_NORM_SIZE;\r\n  }\r\n  setColors(array, start, count, stride) {\r\n    const src = {\r\n      array,\r\n      start,\r\n      stride\r\n    };\r\n    const dst = {\r\n      array: this.colors,\r\n      start: this.lastCol,\r\n      stride: FBX_COL_SIZE\r\n    };\r\n    setSubArray(src, dst, count, copyFbxPoint4, 1);\r\n    this.lastCol += count * FBX_COL_SIZE;\r\n  }\r\n  setIndices(array, start, count) {\r\n    this.indices.set(array, this.lastIdx);\r\n    this.lastIdx += count;\r\n  }\r\n  setShiftedIndices(array, count, shift) {\r\n    const shifted = array.map(x => x + shift);\r\n    this.setIndices(shifted, 0, count);\r\n  }\r\n  getVerticesNumber() {\r\n    return this.lastPos / FBX_POS_SIZE;\r\n  }\r\n  addInstance(matrix, geo) {\r\n    // add indices at first to take old number of vertices for shift\r\n    const currentCount = this.getVerticesNumber();\r\n    this.setShiftedIndices(geo.indices, geo.indices.length, currentCount);\r\n    // simply write vertices at empty space\r\n    const size = geo.itemSize;\r\n    this.setTransformedPositions(geo.positions, 0, geo.vertsCount, size.position, matrix);\r\n    this.setTransformedNormals(geo.normals, 0, geo.vertsCount, size.normal, matrix);\r\n    this.setColors(geo.colors, 0, geo.vertsCount, size.color);\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBXGeometry.js\r\n/** Base class for fbx geometry contains simply organized attributes: positions+normals+colors, indices. */\r\nclass FBXGeometry {\r\n  /**\r\n   * Create a base geo with necessary members.\r\n   */\r\n  constructor() {\r\n    this.positions = null;\r\n    this.normals = null;\r\n    this.colors = null;\r\n    this.indices = null;\r\n    this.vertsCount = 0;\r\n    this.itemSize = null;\r\n  }\r\n\r\n  /**\r\n   * Initialize base geo storing items info from attributes.\r\n   * @param {Object} geo - THREE.BufferGeometry.\r\n   */\r\n  init(geo, _info) {\r\n    const {\r\n      attributes\r\n    } = geo;\r\n    // save item size\r\n    this.itemSize = {\r\n      position: attributes.position.itemSize,\r\n      normal: attributes.normal.itemSize,\r\n      color: attributes.color.itemSize\r\n    };\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBX1CGeometry.js\r\n\r\n\r\n/**\r\n * Fbx geometry, that copies positions+normals, indexes and creates colors filled with defined value.\r\n * @extends FBXGeometry\r\n */\r\nclass FBX1CGeometry extends FBXGeometry {\r\n  /**\r\n   * Initialize geo storing positions, normals, indices and create colors.\r\n   * @param {Object} geo - THREE.BufferGeometry.\r\n   */\r\n  init(geo, _info) {\r\n    super.init(geo, _info);\r\n    const {\r\n      attributes: {\r\n        position,\r\n        normal\r\n      },\r\n      index\r\n    } = geo;\r\n    // copy vertices attributes\r\n    this.vertsCount = position.count;\r\n    this.positions = position.array;\r\n    this.normals = normal.array;\r\n    // create color array\r\n    this.colors = new Float32Array(this.vertsCount * this.itemSize.color);\r\n    // indices\r\n    this.indices = index.array;\r\n  }\r\n\r\n  /**\r\n   * Set defined color for all items in color attribute\r\n   * @param {Object} color - THREE.Color.\r\n   */\r\n  setColors(color) {\r\n    let offset = 0;\r\n    for (let i = 0, l = this.colors.length, cl = this.itemSize.color; i < l; i += cl) {\r\n      this.colors[offset++] = color.r;\r\n      this.colors[offset++] = color.g;\r\n      this.colors[offset++] = color.b;\r\n    }\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBX2CCylinder.js\r\n\r\n\r\n/**\r\n * Fbx geometry, that copies positions+normals, indexes from cylinder  geometry and creates colors filled with two\r\n * defined values.\r\n * @extends FBXGeometry\r\n */\r\nclass FBX2CCylinder extends FBXGeometry {\r\n  constructor() {\r\n    super();\r\n    this._cutRawStart = 0;\r\n    this._cutRawEnd = 0;\r\n    this._facesPerSlice = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize geo by creating new attributes, because we extend number of vertices to make cylinder two-colored.\r\n   * Indices remain the same. We process open- end close-ended cylinders and consider cylinders od 2 segments\r\n   * in height ONLY.\r\n   * NOTE: cylinder consists of 2 height segments and stores parts in the order: tube, topCap, bottomCap\r\n   * @param {Object} geo - THREE.BufferGeometry.\r\n   * @param {Object} info - information needed for geo extend\r\n   */\r\n  init(geo, info) {\r\n    super.init(geo, info);\r\n    const {\r\n      attributes: {\r\n        position\r\n      },\r\n      index\r\n    } = geo;\r\n    // extend vertices arrays\r\n    this.vertsCount = position.count + info.addPerCylinder;\r\n    this._facesPerSlice = info.addPerCylinder;\r\n    this.positions = new Float32Array(this.vertsCount * position.itemSize);\r\n    this.normals = new Float32Array(this.vertsCount * this.itemSize.normal);\r\n    this.colors = new Float32Array(this.vertsCount * this.itemSize.color);\r\n    this._extendVertices(geo, info);\r\n    // number of indices stays the same\r\n    this.indices = new Uint32Array(index.count);\r\n    this._extendIndices(geo, info);\r\n  }\r\n\r\n  /** Extend vertex attributes to have one more slice to make sharp middle startColor-endColor line. */\r\n  _extendVertices(geo, info) {\r\n    const {\r\n      position\r\n    } = geo.attributes;\r\n    const {\r\n      normal\r\n    } = geo.attributes;\r\n    const geoParams = geo.getGeoParams();\r\n    const cutRaw = 1; // we expect cylinders of 2 segments in height => so half segment = 1\r\n    this._cutRawStart = cutRaw * geoParams.radialSegments;\r\n    this._cutRawEnd = this._cutRawStart + info.addPerCylinder;\r\n    {\r\n      // write first half of cylinder\r\n      let temp = position.array.slice(0, this._cutRawEnd * position.itemSize);\r\n      this.positions.set(temp, 0);\r\n      temp = normal.array.slice(0, this._cutRawEnd * normal.itemSize);\r\n      this.normals.set(temp, 0);\r\n    }\r\n    {\r\n      // write second part of cylinder\r\n      let temp = position.array.slice(this._cutRawStart * position.itemSize, position.array.length);\r\n      this.positions.set(temp, this._cutRawEnd * position.itemSize);\r\n      temp = normal.array.slice(this._cutRawStart * normal.itemSize, normal.array.length);\r\n      this.normals.set(temp, this._cutRawEnd * normal.itemSize);\r\n    }\r\n  }\r\n\r\n  /** Shift values of second part (+caps) indices by newly added vertices count. Number of faces remains the same. */\r\n  _extendIndices(geo, info) {\r\n    const {\r\n      index\r\n    } = geo;\r\n    const indicesPerQuad = 6; // quad = 2 triangles => 6 indices\r\n    const startToShift = info.addPerCylinder * indicesPerQuad;\r\n    const shift = info.addPerCylinder;\r\n    let shifted = index.array.slice(startToShift, index.count);\r\n    shifted = shifted.map(x => x + shift); // shift only the endings\r\n    this.indices.set(index.array, 0);\r\n    this.indices.set(shifted, startToShift);\r\n  }\r\n\r\n  /**\r\n   * Set defined colors: (first part + bottom cap), (second part + top cap)\r\n   * @param {number} start - start color index\r\n   * @param {number} end - start color index\r\n   * @param {array} array - array of colors\r\n   * @param {array} color - color value components\r\n   */\r\n  _setColorRange(start, end, array, color) {\r\n    const colorSize = color.length;\r\n    for (let i = start; i < end; i += colorSize) {\r\n      array.set(color, i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set defined colors: (first part + bottom cap), (second part + top cap)\r\n   * @param {Object} color1 - THREE.Color.\r\n   * @param {Object} color2 - THREE.Color.\r\n   */\r\n  setColors(color1, color2) {\r\n    const colorSize = this.itemSize.color;\r\n    const part1End = this._cutRawEnd * colorSize;\r\n    const part2End = part1End * 2;\r\n    this._setColorRange(0, part1End, this.colors, color1.toArray());\r\n    this._setColorRange(part1End, part2End, this.colors, color2.toArray());\r\n    if (part2End < this.colors.length) {\r\n      // cylinder has caps, lets paint them\r\n      const capSize = (this._facesPerSlice + 1) * colorSize;\r\n      const cap1End = part2End + capSize;\r\n      this._setColorRange(part2End, cap1End, this.colors, color2.toArray());\r\n      const cap2End = cap1End + capSize; // should be equal to this.colors.length;\r\n      this._setColorRange(cap1End, cap2End, this.colors, color1.toArray());\r\n    }\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBXInfoExtractor.js\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass FBXInfoExtractor {\r\n  constructor() {\r\n    this._materials = [];\r\n    this._models = [];\r\n  }\r\n  process(data) {\r\n    this._extractModelsAndMaterials(data);\r\n    const models = this._flattenModels();\r\n    return {\r\n      name: data.name,\r\n      models,\r\n      materials: this._materials\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Extract fbx object information from ComplexVisual\r\n   * @param {object} data - complexVisual to get geometry info from\r\n   */\r\n  _extractModelsAndMaterials(data) {\r\n    const layersOfInterest = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Layers();\r\n    layersOfInterest.set(gfxutils.LAYERS.DEFAULT);\r\n    layersOfInterest.enable(gfxutils.LAYERS.TRANSPARENT);\r\n    data.traverse(object => {\r\n      if (object instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh && object.layers.test(layersOfInterest) && this.checkExportAbility(object)) {\r\n        if (object.geometry.type === 'InstancedBufferGeometry') {\r\n          this._collectInstancedGeoInfo(object);\r\n        } else {\r\n          this._collectGeoInfo(object);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reworking indices buffer, see https://banexdevblog.wordpress.com/2014/06/23/a-quick-tutorial-about-the-fbx-ascii-format/\r\n   * basically, every triangle in Miew has been represented hat way (e.g.) : 0,1,7, but we must (for FBX) rework that\r\n   * into: 0,1,-8.\r\n   * @param {array} indices - belongs to [0, maxVertIndex]\r\n   */\r\n  _reworkIndices(indices) {\r\n    const faceSize = 3;\r\n    for (let i = faceSize - 1; i < indices.length; i += faceSize) {\r\n      indices[i] *= -1;\r\n      indices[i]--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Combine geometry from several models having the same material into one Model and finally prepare indices\r\n    * @returns {array} models, combined by material id\r\n   */\r\n  _flattenModels() {\r\n    let overallVertsCount = 0;\r\n    function shift(x) {\r\n      return x + overallVertsCount;\r\n    }\r\n    const combined = [];\r\n    // flatten models geometry\r\n    for (let i = 0, n = this._models.length; i < n; i++) {\r\n      const models = this._models[i];\r\n      let indices = [];\r\n      let positions = [];\r\n      let normals = [];\r\n      let colors = [];\r\n      // reorganize every attributes as array of arrays\r\n      overallVertsCount = 0;\r\n      for (let j = 0; j < models.length; j++) {\r\n        const m = models[j];\r\n        indices.push(m.indices.map(shift));\r\n        overallVertsCount += m.getVerticesNumber();\r\n        positions.push(m.positions);\r\n        normals.push(m.normals);\r\n        colors.push(m.colors);\r\n      }\r\n      // join all subarrays into one\r\n      indices = utils.mergeTypedArraysUnsafe(indices);\r\n      this._reworkIndices(indices);\r\n      positions = utils.mergeTypedArraysUnsafe(positions);\r\n      normals = utils.mergeTypedArraysUnsafe(normals);\r\n      colors = utils.mergeTypedArraysUnsafe(colors);\r\n      combined.push({\r\n        indices,\r\n        positions,\r\n        normals,\r\n        colors,\r\n        verticesCount: overallVertsCount\r\n      });\r\n    }\r\n    return combined;\r\n  }\r\n\r\n  /**\r\n   * Check ability to export the kind of mesh.\r\n   * @param {object} mesh - given mesh to check\r\n   * @returns {boolean} result of check\r\n   */\r\n  checkExportAbility(mesh) {\r\n    // check mesh on not being empty\r\n    if (mesh.geometry.attributes.position.count === 0) {\r\n      return false;\r\n    }\r\n    // check type of mesh\r\n    // if (mesh.geometry.isInstancedBufferGeometry && settings.now.zSprites) {\r\n    if (mesh instanceof meshes_ZSpriteMesh) {\r\n      logger.warn('Currently we cannot export \\'sprites\\' modes, like BS, WV, LC. Please turn of settings \\'zSprites\\' and try again');\r\n      return false;\r\n    }\r\n    if (mesh instanceof meshes_ThickLineMesh) {\r\n      logger.warn('Currently we cannot export Lines mode');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Save geometry info from common mesh, like Surface or Cartoon\r\n   */\r\n  _collectGeoInfo(mesh) {\r\n    const {\r\n      geometry: {\r\n        attributes: {\r\n          position,\r\n          color,\r\n          normal\r\n        },\r\n        index\r\n      },\r\n      matrix\r\n    } = mesh;\r\n    const model = new FBXModel();\r\n    const vertCount = position.count;\r\n    model.init(vertCount, index.count);\r\n    if (matrix.isIdentity()) {\r\n      model.setPositions(position.array, 0, vertCount, position.itemSize);\r\n      model.setNormals(normal.array, 0, vertCount, normal.itemSize);\r\n    } else {\r\n      model.setTransformedPositions(position.array, 0, vertCount, position.itemSize, matrix);\r\n      model.setTransformedNormals(normal.array, 0, vertCount, normal.itemSize, matrix);\r\n    }\r\n    model.setColors(color.array, 0, vertCount, color.itemSize);\r\n    model.setIndices(index.array, 0, index.count);\r\n    const material = this._collectMaterialInfo(mesh);\r\n    this._addToPool(model, material);\r\n  }\r\n\r\n  /**\r\n   * Collect instanced spheres geometry and materials.\r\n   * @param {object} mesh - mesh with instanced spheres info\r\n   */\r\n  _collectSpheresInfo(mesh) {\r\n    const {\r\n      geometry: {\r\n        attributes: {\r\n          position,\r\n          color\r\n        },\r\n        index\r\n      },\r\n      matrix\r\n    } = mesh;\r\n    const model = new FBXModel();\r\n    const instCount = mesh.geometry.instanceCount;\r\n    const vertCount = position.count;\r\n    const indsCount = index.count;\r\n    model.init(instCount * vertCount, instCount * indsCount);\r\n    const geo = new FBX1CGeometry();\r\n    geo.init(mesh.geometry);\r\n    const instMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    const objMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    const sphereColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\n    for (let instanceIndex = 0; instanceIndex < instCount; ++instanceIndex) {\r\n      // update colors in geometry\r\n      const colorIdx = instanceIndex * color.itemSize;\r\n      sphereColor.fromArray(color.array, colorIdx);\r\n      geo.setColors(sphereColor);\r\n      // add instance to the model\r\n      this._getSphereInstanceMatrix(mesh.geometry, instanceIndex, instMatrix);\r\n      objMatrix.multiplyMatrices(matrix, instMatrix);\r\n      model.addInstance(objMatrix, geo);\r\n    }\r\n    const material = this._collectMaterialInfo(mesh);\r\n    this._addToPool(model, material);\r\n  }\r\n\r\n  /**\r\n   * Getting all instanced cylinders from given mesh.\r\n   * Divide cylinder (add additional vertexes) for prettiness therefore algorithm is a bit complicated\r\n   * @param {object} mesh - given mesh with instanced cylinders\r\n   */\r\n  _collectCylindersInfo(mesh) {\r\n    const {\r\n      geometry: {\r\n        attributes: {\r\n          position,\r\n          color,\r\n          color2\r\n        },\r\n        index\r\n      },\r\n      matrix\r\n    } = mesh;\r\n    const model = new FBXModel();\r\n    const instCount = mesh.geometry.instanceCount;\r\n    const oneCCylinder = new FBX1CGeometry();\r\n    oneCCylinder.init(mesh.geometry);\r\n    const splittingInfo = this._gatherCylindersColoringInfo(mesh.geometry);\r\n    let twoCCylinder = null;\r\n    if (splittingInfo.needToSplit > 0) {\r\n      twoCCylinder = new FBX2CCylinder();\r\n      twoCCylinder.init(mesh.geometry, splittingInfo);\r\n    }\r\n    const additionalVertsCount = splittingInfo.addPerCylinder * splittingInfo.needToSplit;\r\n    const vertCount = position.count;\r\n    const indsCount = index.count;\r\n    model.init(instCount * vertCount + additionalVertsCount, instCount * indsCount);\r\n    const instMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    const objMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    const colorStart = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\n    const colorEnd = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\n    let geo = {};\r\n    for (let instanceIndex = 0; instanceIndex < instCount; ++instanceIndex) {\r\n      // update colors in geometry\r\n      const colorIdx = instanceIndex * color.itemSize;\r\n      if (splittingInfo.is2Colored[instanceIndex]) {\r\n        // .color2 contains starting color, and .color contains starting color (see uber.frag ATTR_COLOR2)\r\n        colorStart.fromArray(color2.array, colorIdx);\r\n        colorEnd.fromArray(color.array, colorIdx);\r\n        if (twoCCylinder) {\r\n          twoCCylinder.setColors(colorStart, colorEnd);\r\n          geo = twoCCylinder;\r\n        }\r\n      } else {\r\n        // has one color per cylinder\r\n        colorStart.fromArray(color.array, colorIdx);\r\n        oneCCylinder.setColors(colorStart);\r\n        geo = oneCCylinder;\r\n      }\r\n      // add instance to the model\r\n      this._getCylinderInstanceMatrix(mesh.geometry, instanceIndex, instMatrix);\r\n      objMatrix.multiplyMatrices(matrix, instMatrix);\r\n      model.addInstance(objMatrix, geo);\r\n    }\r\n    const material = this._collectMaterialInfo(mesh);\r\n    this._addToPool(model, material);\r\n  }\r\n\r\n  /**\r\n   * Adding model to pool of models or extend existing ones\r\n   * @param {object} model - model to add\r\n   * @param {object} material - material to add\r\n   */\r\n  _addToPool(model, material) {\r\n    const materialIdx = this._checkExistingMaterial(material);\r\n    if (materialIdx < 0) {\r\n      // new model-material pair\r\n      this._models.push([model]);\r\n      this._materials.push(material);\r\n    } else {\r\n      // add model to existing model-material pair\r\n      const models = this._models[materialIdx];\r\n      models.push(model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checking if given material already was registered in materials pool (no need to create new one)\r\n   * @param {object} material - given material\r\n   * @returns {number} number of model-material pair\r\n   */\r\n  _checkExistingMaterial(material) {\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].findIndex(this._materials, m => external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEqual(m, material));\r\n  }\r\n  _gatherCylindersColoringInfo(geo) {\r\n    const instCount = geo.instanceCount;\r\n    const color1 = geo.attributes.color.array;\r\n    const color2 = geo.attributes.color2.array;\r\n    const stride = geo.attributes.color.itemSize;\r\n    const is2Colored = new Array(instCount);\r\n    // analyze color instance attributes\r\n    let needToSplit = 0;\r\n    let colIdx = 0;\r\n    for (let i = 0; i < instCount; i++, colIdx += stride) {\r\n      const differs = Math.abs(color1[colIdx] - color2[colIdx]) > 0.0000001 // compare ending colors\r\n      || Math.abs(color1[colIdx + 1] - color2[colIdx + 1]) > 0.0000001 || Math.abs(color1[colIdx + 2] - color2[colIdx + 2]) > 0.0000001;\r\n      is2Colored[i] = differs;\r\n      needToSplit += differs; // count number of 2-colored cylinders\r\n    }\r\n    // calc number of vertices to add into 2-colored\r\n    const geoParams = geo.getGeoParams();\r\n    const addPerCylinder = geoParams.radialSegments;\r\n    return {\r\n      is2Colored,\r\n      needToSplit,\r\n      addPerCylinder\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Collect instanced models and materials.\r\n   * @param {object} mesh - given mesh with instanced something (spheres or cylinders)\r\n   */\r\n  _collectInstancedGeoInfo(mesh) {\r\n    if (mesh.geometry instanceof geometries_InstancedSpheresGeometry) {\r\n      this._collectSpheresInfo(mesh);\r\n    } else if (mesh.geometry instanceof geometries_Instanced2CCylindersGeometry) {\r\n      this._collectCylindersInfo(mesh);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collect Material info from given mesh.\r\n   * @param {object} mesh - given mesh with material info\r\n   * @returns {object} material\r\n   */\r\n  _collectMaterialInfo(mesh) {\r\n    const {\r\n      uberOptions\r\n    } = mesh.material;\r\n    return {\r\n      diffuse: uberOptions.diffuse.toArray(),\r\n      opacity: uberOptions.opacity,\r\n      shininess: uberOptions.shininess,\r\n      specular: uberOptions.specular.toArray()\r\n    };\r\n  }\r\n  _getCylinderInstanceMatrix(geo, instIdx, matrix) {\r\n    const matVector1 = geo.attributes.matVector1.array;\r\n    const matVector2 = geo.attributes.matVector2.array;\r\n    const matVector3 = geo.attributes.matVector3.array;\r\n    const idxOffset = instIdx * 4; // used 4 because offset arrays are stored in quads\r\n    matrix.set(matVector1[idxOffset], matVector1[idxOffset + 1], matVector1[idxOffset + 2], matVector1[idxOffset + 3], matVector2[idxOffset], matVector2[idxOffset + 1], matVector2[idxOffset + 2], matVector2[idxOffset + 3], matVector3[idxOffset], matVector3[idxOffset + 1], matVector3[idxOffset + 2], matVector3[idxOffset + 3], 0, 0, 0, 1);\r\n  }\r\n  _getSphereInstanceMatrix(geo, instIdx, matrix) {\r\n    const {\r\n      offset\r\n    } = geo.attributes;\r\n    const idx = instIdx * offset.itemSize;\r\n    const x = offset.array[idx];\r\n    const y = offset.array[idx + 1];\r\n    const z = offset.array[idx + 2];\r\n    const scale = offset.array[idx + 3];\r\n    matrix.set(scale, 0, 0, x, 0, scale, 0, y, 0, 0, scale, z, 0, 0, 0, 1);\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/fbx/FBXResult.js\r\n// Forming default definitions block\r\nconst defaultDefinitions = `\r\nDefinitions:  {\r\n  Version: 100\r\n  Count: 3\r\n  ObjectType: \"Model\" {\r\n    Count: 1\r\n  }\r\n  ObjectType: \"Geometry\" {\r\n    Count: 1\r\n  }\r\n  ObjectType: \"Material\" {\r\n    Count: 1\r\n  }\r\n  ObjectType: \"Pose\" {\r\n    Count: 1\r\n  }\r\n  ObjectType: \"GlobalSettings\" {\r\n    Count: 1\r\n  }\r\n} `;\r\n\r\n// Default model properties\r\nconst defaultProperties = `Properties60: {\r\n      Property: \"QuaternionInterpolate\", \"bool\", \"\",0\r\n      Property: \"Visibility\", \"Visibility\", \"A\",1\r\n      Property: \"Lcl Translation\", \"Lcl Translation\", \"A\",0.000000000000000,0.000000000000000,-1789.238037109375000\r\n      Property: \"Lcl Rotation\", \"Lcl Rotation\", \"A\",0.000009334667643,-0.000000000000000,0.000000000000000\r\n      Property: \"Lcl Scaling\", \"Lcl Scaling\", \"A\",1.000000000000000,1.000000000000000,1.000000000000000\r\n      Property: \"RotationOffset\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"RotationPivot\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"ScalingOffset\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"ScalingPivot\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"TranslationActive\", \"bool\", \"\",0\r\n      Property: \"TranslationMin\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"TranslationMax\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"TranslationMinX\", \"bool\", \"\",0\r\n      Property: \"TranslationMinY\", \"bool\", \"\",0\r\n      Property: \"TranslationMinZ\", \"bool\", \"\",0\r\n      Property: \"TranslationMaxX\", \"bool\", \"\",0\r\n      Property: \"TranslationMaxY\", \"bool\", \"\",0\r\n      Property: \"TranslationMaxZ\", \"bool\", \"\",0\r\n      Property: \"RotationOrder\", \"enum\", \"\",0\r\n      Property: \"RotationSpaceForLimitOnly\", \"bool\", \"\",0\r\n      Property: \"AxisLen\", \"double\", \"\",10\r\n      Property: \"PreRotation\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"PostRotation\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"RotationActive\", \"bool\", \"\",0\r\n      Property: \"RotationMin\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"RotationMax\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"RotationMinX\", \"bool\", \"\",0\r\n      Property: \"RotationMinY\", \"bool\", \"\",0\r\n      Property: \"RotationMinZ\", \"bool\", \"\",0\r\n      Property: \"RotationMaxX\", \"bool\", \"\",0\r\n      Property: \"RotationMaxY\", \"bool\", \"\",0\r\n      Property: \"RotationMaxZ\", \"bool\", \"\",0\r\n      Property: \"RotationStiffnessX\", \"double\", \"\",0\r\n      Property: \"RotationStiffnessY\", \"double\", \"\",0\r\n      Property: \"RotationStiffnessZ\", \"double\", \"\",0\r\n      Property: \"MinDampRangeX\", \"double\", \"\",0\r\n      Property: \"MinDampRangeY\", \"double\", \"\",0\r\n      Property: \"MinDampRangeZ\", \"double\", \"\",0\r\n      Property: \"MaxDampRangeX\", \"double\", \"\",0\r\n      Property: \"MaxDampRangeY\", \"double\", \"\",0\r\n      Property: \"MaxDampRangeZ\", \"double\", \"\",0\r\n      Property: \"MinDampStrengthX\", \"double\", \"\",0\r\n      Property: \"MinDampStrengthY\", \"double\", \"\",0\r\n      Property: \"MinDampStrengthZ\", \"double\", \"\",0\r\n      Property: \"MaxDampStrengthX\", \"double\", \"\",0\r\n      Property: \"MaxDampStrengthY\", \"double\", \"\",0\r\n      Property: \"MaxDampStrengthZ\", \"double\", \"\",0\r\n      Property: \"PreferedAngleX\", \"double\", \"\",0\r\n      Property: \"PreferedAngleY\", \"double\", \"\",0\r\n      Property: \"PreferedAngleZ\", \"double\", \"\",0\r\n      Property: \"InheritType\", \"enum\", \"\",0\r\n      Property: \"ScalingActive\", \"bool\", \"\",0\r\n      Property: \"ScalingMin\", \"Vector3D\", \"\",1,1,1\r\n      Property: \"ScalingMax\", \"Vector3D\", \"\",1,1,1\r\n      Property: \"ScalingMinX\", \"bool\", \"\",0\r\n      Property: \"ScalingMinY\", \"bool\", \"\",0\r\n      Property: \"ScalingMinZ\", \"bool\", \"\",0\r\n      Property: \"ScalingMaxX\", \"bool\", \"\",0\r\n      Property: \"ScalingMaxY\", \"bool\", \"\",0\r\n      Property: \"ScalingMaxZ\", \"bool\", \"\",0\r\n      Property: \"GeometricTranslation\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"GeometricRotation\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"GeometricScaling\", \"Vector3D\", \"\",1,1,1\r\n      Property: \"LookAtProperty\", \"object\", \"\"\r\n      Property: \"UpVectorProperty\", \"object\", \"\"\r\n      Property: \"Show\", \"bool\", \"\",1\r\n      Property: \"NegativePercentShapeSupport\", \"bool\", \"\",1\r\n      Property: \"DefaultAttributeIndex\", \"int\", \"\",0\r\n      Property: \"Color\", \"Color\", \"A+\",0,0,0\r\n      Property: \"Size\", \"double\", \"\",100\r\n      Property: \"Look\", \"enum\", \"\",1\r\n    }`;\r\n\r\n// Default materials layer\r\nconst defaultMaterialLayer = `\r\n    LayerElementMaterial: 0 {\r\n      Version: 101\r\n      Name: \"\"\r\n      MappingInformationType: \"AllSame\"\r\n      ReferenceInformationType: \"Direct\"\r\n      Materials: 0\r\n    }`;\r\n\r\n// Default layers block\r\nconst defaultLayerBlock = `\r\n    Layer: 0 {\r\n      Version: 100\r\n      LayerElement:  {\r\n        Type: \"LayerElementNormal\"\r\n        TypedIndex: 0\r\n      }\r\n      LayerElement:  {\r\n        Type: \"LayerElementColor\"\r\n        TypedIndex: 0\r\n      }\r\n      LayerElement:  {\r\n        Type: \"LayerElementMaterial\"\r\n        TypedIndex: 0\r\n      }\r\n    }`;\r\n\r\n/**\r\n * globalSettings info in output file.\r\n */\r\nconst globalSettings = `GlobalSettings: {\r\n    Version: 1000\r\n    Properties60:  {\r\n      Property: \"UpAxis\", \"int\", \"\",1\r\n      Property: \"UpAxisSign\", \"int\", \"\",1\r\n      Property: \"FrontAxis\", \"int\", \"\",2\r\n      Property: \"FrontAxisSign\", \"int\", \"\",1\r\n      Property: \"CoordAxis\", \"int\", \"\",0\r\n      Property: \"CoordAxisSign\", \"int\", \"\",1\r\n      Property: \"UnitScaleFactor\", \"double\", \"\",1\r\n    }\r\n  }`;\r\nclass FBXResult {\r\n  constructor() {\r\n    this._resultArray = [];\r\n    this._info = null;\r\n  }\r\n  getResult(info) {\r\n    this._info = info;\r\n    this._resultArray.push(this._writeHeader());\r\n    this._resultArray.push(this._writeDefinitions());\r\n    this._resultArray.push(this._writeObjects(info.models, info.materials));\r\n    this._resultArray.push(this._writeRelations());\r\n    this._resultArray.push(this._writeConnections()); // connections between models and materials)\r\n    this._info = null;\r\n    return this._resultArray.join('');\r\n  }\r\n\r\n  /**\r\n   * Add FBXHeader info to output file.\r\n   * Some fields are really confusing, but it seems that all listed fields are very informative\r\n   */\r\n  _writeHeader() {\r\n    const FBXHeaderVersion = 1003; // 1003 is some number which appears to present in many 6.1 ASCII files\r\n    const FBXVersion = 6100; // Mandatory and only supported version\r\n    const date = new Date();\r\n    const timeStampVersion = 1000;\r\n    const creator = `Miew FBX Exporter v${this._info.version}`; // Supposed to be an engine\r\n\r\n    return `; FBX 6.1.0 project file\r\n; Created by ${creator} Copyright (c) 2015-2024 EPAM Systems, Inc.\r\n; For support please contact miew@epam.com\r\n; ----------------------------------------------------\r\n\r\nFBXHeaderExtension:  {\r\n  FBXHeaderVersion: ${FBXHeaderVersion}\r\n  FBXVersion: ${FBXVersion}\r\n  CreationTimeStamp:  {\r\n    Version: ${timeStampVersion}\r\n    Year: ${date.getFullYear()}\r\n    Month: ${date.getMonth() + 1}\r\n    Day: ${date.getDate()}\r\n    Hour: ${date.getHours()}\r\n    Minute: ${date.getMinutes()}\r\n    Second: ${date.getSeconds()}\r\n    Millisecond: ${date.getMilliseconds()}\r\n  }\r\n  Creator: \"${creator}\"\r\n  OtherFlags:  {\r\n    FlagPLE: 0\r\n  }\r\n}\r\nCreationTime: \"${date}\"\r\nCreator: \"${creator}\"\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Add Definitions info to output file.\r\n   * Not exactly sure if this section is template section (as it is in 7.4+) or it should every time be like this\r\n   */\r\n  _writeDefinitions() {\r\n    return `\r\n; Object definitions\r\n;------------------------------------------------------------------\r\n\r\n${defaultDefinitions}\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Adding gathered information about Models to resulting string.\r\n   * Reminder - there may be more then 1 model in scene, but we must place materials after ALL models.\r\n   * @returns {string} string containing all models (vertices, indices, colors, normals etc)\r\n   */\r\n  _models() {\r\n    const modelVersion = 232;\r\n    let allModels = '';\r\n    const {\r\n      models\r\n    } = this._info;\r\n    for (let i = 0; i < models.length; ++i) {\r\n      const model = models[i];\r\n      const vertCount = model.verticesCount;\r\n      allModels += `\r\n  Model: \"Model::${this._info.name}_${i}\", \"Mesh\" {\r\n    Version: ${modelVersion}\r\n    ${defaultProperties}\r\n    ${this._verticesIndices(model.positions, model.indices)}\r\n    ${this._normalLayer(model.normals)}\r\n    ${this._colorLayer(model.colors, vertCount)}\r\n    ${defaultMaterialLayer}\r\n    ${defaultLayerBlock}\r\n  }`;\r\n    }\r\n    return allModels;\r\n  }\r\n\r\n  /**\r\n   * Add Material info to result\r\n   */\r\n  _materials() {\r\n    const materialVersion = 102;\r\n    let allMaterials = '';\r\n    const {\r\n      materials\r\n    } = this._info;\r\n    for (let i = 0; i < materials.length; ++i) {\r\n      const material = materials[i];\r\n      allMaterials += `\r\n  Material: \"Material::${this._info.name}_${i}_default\", \"\" {\r\n    Version: ${materialVersion}\r\n    ShadingModel: \"lambert\"\r\n    MultiLayer: 0\r\n    ${this._materialProperties(material)}\r\n  }`;\r\n    }\r\n    return allMaterials;\r\n  }\r\n\r\n  /**\r\n   * Add Objects info to output file.\r\n   */\r\n  _writeObjects() {\r\n    return `\r\n; Object properties\r\n;------------------------------------------------------------------\r\n\r\nObjects:  {\r\n  ${this._models()}\r\n  ${this._materials()}\r\n  ${globalSettings}\r\n}\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Add Relations info to output file.\r\n   */\r\n  _writeRelations() {\r\n    let modelsList = '';\r\n    for (let i = 0; i < this._info.models.length; ++i) {\r\n      modelsList += `\r\n  Model: \"Model::${this._info.name}_${i}\", \"Mesh\" {\r\n  }`;\r\n    }\r\n    let materialList = '';\r\n    for (let i = 0; i < this._info.materials.length; ++i) {\r\n      materialList += `\r\n  Material: \"Material::${this._info.name}_${i}_default\", \"\" {\r\n  }`;\r\n    }\r\n    return `\r\n; Object relations\r\n;------------------------------------------------------------------\r\n\r\nRelations:  {\r\n  ${modelsList}\r\n  Model: \"Model::Producer Perspective\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Top\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Bottom\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Front\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Back\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Right\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Producer Left\", \"Camera\" {\r\n  }\r\n  Model: \"Model::Camera Switcher\", \"CameraSwitcher\" {\r\n  }\r\n  ${materialList}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Add Connections info to output file.\r\n   */\r\n  _writeConnections() {\r\n    let modelsList = '';\r\n    const {\r\n      name\r\n    } = this._info;\r\n    for (let i = 0; i < this._info.models.length; ++i) {\r\n      modelsList += `\r\n  Connect: \"OO\", \"Model::${name}_${i}\", \"Model::Scene\"`;\r\n    }\r\n    let materialList = '';\r\n    for (let i = 0; i < this._info.materials.length; ++i) {\r\n      materialList += `\r\n  Connect: \"OO\", \"Material::${name}_${i}_default\", \"Model::${name}_${i}\"`;\r\n    }\r\n    return `\r\n; Object connections\r\n;------------------------------------------------------------------\r\n\r\nConnections:  {\r\n  ${modelsList}\r\n  ${materialList}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Write float array to string with limited precision\r\n   * @param {Float32Array} array - array to be fixed\r\n   * @returns {String} String with fixed floats\r\n   */\r\n  _floatArrayToString(array) {\r\n    const str = [];\r\n    for (let i = 0; i < array.length; ++i) {\r\n      str[i] = array[i].toFixed(6);\r\n    }\r\n    return str.join(',');\r\n  }\r\n\r\n  /**\r\n   * Adding color layer to resulting file\r\n   * @param {Float32Array} colorArray attribute\r\n   * @param {number} vertCount - number of vertices in the model\r\n   * @returns {string} color layer info\r\n   */\r\n  _colorLayer(colorArray, vertCount) {\r\n    const layerElementColorNumber = 0;\r\n    const layerElementColorVersion = 101;\r\n    const layerElementColorName = '';\r\n    const colorsStr = this._floatArrayToString(colorArray);\r\n    // Mapping Information type and Reference Information type are mandatory for our Miew! Must not be changed\r\n    // As said [..Array(...)] - fastest and easiest way to produce [0, 1, .....] array\r\n    const colorIndices = [...Array(vertCount).keys()];\r\n    return `\r\n    LayerElementColor: ${layerElementColorNumber} {\r\n      Version: ${layerElementColorVersion}\r\n      Name: \"${layerElementColorName}\"\r\n      MappingInformationType: \"ByVertice\"\r\n      ReferenceInformationType: \"Direct\"\r\n      Colors: ${colorsStr}\r\n      ColorIndex: ${colorIndices}\r\n    }`;\r\n  }\r\n\r\n  /**\r\n   * Adding normal layer to resulting file\r\n   * @param {Float32Array} normalArray attribute\r\n   * @returns {string} normal layer info\r\n   */\r\n  _normalLayer(normalArray) {\r\n    const layerElementNormalNumber = 0;\r\n    const layerElementNormalVersion = 101;\r\n    const layerElementNormalName = '';\r\n    const normalsStr = this._floatArrayToString(normalArray);\r\n    // Mapping Information type and Reference Information type are mandatory for our Miew! Must not be changed\r\n    return `\r\n    LayerElementNormal: ${layerElementNormalNumber} {\r\n      Version: ${layerElementNormalVersion}\r\n      Name: \"${layerElementNormalName}\"\r\n      MappingInformationType: \"ByVertice\"\r\n      ReferenceInformationType: \"Direct\"\r\n      Normals: ${normalsStr}\r\n    }`;\r\n  }\r\n\r\n  /**\r\n   * Adding vertices and indices to resulting string\r\n   * @return {string} resulting string in FBX notation\r\n   */\r\n  _verticesIndices(positions, indices) {\r\n    const multiLayer = 0;\r\n    const multiTake = 1;\r\n    const shading = 'Y';\r\n    const culling = 'CullingOff';\r\n    const geometryVersion = 124;\r\n    const vertStr = this._floatArrayToString(positions);\r\n    /* About _correctArrayNotation: Float32Arrays will contains only Float32 numbers, which implies that it will be floating points with 17 numbers after point.\r\n    * We cannot (and it's logically incorrect) save all this information, so we convert this Float32Array into Array-like object with numbers with only 6 numbers after point\r\n    * Reminder - this is big memory loss (as we must save at one moment two arrays with similar information) */\r\n    return `MultiLayer: ${multiLayer}\r\n    MultiTake: ${multiTake}\r\n    Shading: ${shading}\r\n    Culling: \"${culling}\"\r\n    Vertices: ${vertStr}\r\n    PolygonVertexIndex: ${indices}\r\n    GeometryVersion: ${geometryVersion}`;\r\n  }\r\n\r\n  /**\r\n   * Forming material properties block.\r\n   * @param {Object} material - given material of model\r\n   * @returns {String} material properties string\r\n   */\r\n  _materialProperties(material) {\r\n    return `Properties60:  {\r\n      Property: \"ShadingModel\", \"KString\", \"\", \"Lambert\"\r\n      Property: \"MultiLayer\", \"bool\", \"\",0\r\n      Property: \"EmissiveColor\", \"ColorRGB\", \"\",0,0,0\r\n      Property: \"EmissiveFactor\", \"double\", \"\",0.0000\r\n      Property: \"AmbientColor\", \"ColorRGB\", \"\",1,1,1\r\n      Property: \"AmbientFactor\", \"double\", \"\",0.0000\r\n      Property: \"DiffuseColor\", \"ColorRGB\", \"\",${material.diffuse}\r\n      Property: \"DiffuseFactor\", \"double\", \"\",1.0000\r\n      Property: \"Bump\", \"Vector3D\", \"\",0,0,0\r\n      Property: \"TransparentColor\", \"ColorRGB\", \"\",1,1,1\r\n      Property: \"TransparencyFactor\", \"double\", \"\",0.0000\r\n      Property: \"SpecularColor\", \"ColorRGB\", \"\",${material.specular}\r\n      Property: \"SpecularFactor\", \"double\", \"\",1.0000\r\n      Property: \"ShininessExponent\", \"double\", \"\",${material.shininess}\r\n      Property: \"ReflectionColor\", \"ColorRGB\", \"\",0,0,0\r\n      Property: \"ReflectionFactor\", \"double\", \"\",1\r\n      Property: \"Ambient\", \"ColorRGB\", \"\",1,1,1\r\n      Property: \"Diffuse\", \"ColorRGB\", \"\",${material.diffuse}\r\n      Property: \"Specular\", \"ColorRGB\", \"\",${material.specular}\r\n      Property: \"Shininess\", \"double\", \"\",${material.shininess}\r\n      Property: \"Opacity\", \"double\", \"\",${material.opacity}\r\n      Property: \"Reflectivity\", \"double\", \"\",0\r\n    }`;\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/io/exporters/FBXExporter.js\r\n\r\n\r\n\r\n\r\nclass FBXExporter extends Exporter {\r\n  constructor(source, options) {\r\n    super(source, options);\r\n    // Data\r\n    this._data = source;\r\n    this._version = options.miewVersion || '0.0-UNSPECIFIED';\r\n    this._extractor = new FBXInfoExtractor();\r\n  }\r\n\r\n  /**\r\n   * Entry point to exporter.\r\n   */\r\n  exportSync() {\r\n    // Creating mandatory blocks\r\n    const result = new FBXResult();\r\n    if (!this._source) {\r\n      return this._result;\r\n    }\r\n    const info = this._extractor.process(this._data);\r\n    info.version = this._version;\r\n    this._result = result.getResult(info);\r\n    return this._result;\r\n  }\r\n}\r\nFBXExporter.formats = ['fbx'];\r\nFBXExporter.SourceClass = src_ComplexVisual;\r\n;// CONCATENATED MODULE: ./src/io/exporters.js\r\n\r\n\r\n\r\n/* harmony default export */ const exporters = (new exporters_ExporterList([PDBExporter, FBXExporter]));\r\n;// CONCATENATED MODULE: ./src/io/io.js\r\n\r\n\r\n\r\n/* harmony default export */ const io = ({\r\n  loaders: loaders,\r\n  parsers: parsers,\r\n  exporters: exporters\r\n});\r\n;// CONCATENATED MODULE: ./src/gfx/CSS2DRenderer.js\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\n\r\nconst tempColor = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color();\r\nclass CSS2DRenderer {\r\n  constructor() {\r\n    this._width = 0;\r\n    this._height = 0;\r\n    this._widthHalf = 0;\r\n    this._heightHalf = 0;\r\n    this._vector = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    this._viewMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    this._projectionMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    this._domElement = document.createElement('div');\r\n    this._domElement.style.overflow = 'hidden';\r\n    this._domElement.style.position = 'absolute';\r\n    this._domElement.style.top = '0';\r\n    this._domElement.style.zIndex = '0'; // start a new Stacking Context to enclose all z-ordered children\r\n    this._domElement.style.pointerEvents = 'none';\r\n  }\r\n  getElement() {\r\n    return this._domElement;\r\n  }\r\n  reset() {\r\n    const myNode = this.getElement();\r\n    while (myNode.firstChild) {\r\n      myNode.removeChild(myNode.firstChild);\r\n    }\r\n  }\r\n  setSize(width, height) {\r\n    this._width = width;\r\n    this._height = height;\r\n    this._widthHalf = this._width / 2;\r\n    this._heightHalf = this._height / 2;\r\n    this._domElement.style.width = `${width}px`;\r\n    this._domElement.style.height = `${height}px`;\r\n  }\r\n  _renderObject(object, camera, scene) {\r\n    function lerpColorAsHex(a, b, t) {\r\n      tempColor.setHex(a);\r\n      tempColor.lerp(b, t);\r\n      return `#${tempColor.getHexString()}`;\r\n    }\r\n    function colorAsHex(a) {\r\n      tempColor.setHex(a);\r\n      return `#${tempColor.getHexString()}`;\r\n    }\r\n    if (object instanceof gfx_CSS2DObject) {\r\n      this._vector.setFromMatrixPosition(object.matrixWorld);\r\n      if (object.userData !== undefined && object.userData.offset !== undefined) {\r\n        const localOffset = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(object.userData.offset.x, object.userData.offset.y, 0);\r\n        this._vector.add(localOffset.multiplyScalar(object.matrixWorld.getMaxScaleOnAxis()));\r\n      }\r\n      this._vector.applyMatrix4(this._viewMatrix);\r\n      const visibility = this._vector.z > -camera.near ? 'hidden' : 'visible';\r\n      const zIndex = 10000 * (camera.far - -this._vector.z) / (camera.far - camera.near);\r\n      const element = object.getElement();\r\n      if (typeof scene.fog === 'undefined') {\r\n        element.style.color = colorAsHex(object.userData.color);\r\n        if (object.userData.background !== 'transparent') {\r\n          element.style.background = colorAsHex(object.userData.background);\r\n        }\r\n      } else {\r\n        const fogFactor = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.smoothstep(-this._vector.z, scene.fog.near, scene.fog.far);\r\n        element.style.color = lerpColorAsHex(object.userData.color, scene.fog.color, fogFactor);\r\n        if (object.userData.background !== 'transparent') {\r\n          element.style.background = lerpColorAsHex(object.userData.background, scene.fog.color, fogFactor);\r\n        }\r\n      }\r\n      this._vector.applyMatrix4(this._projectionMatrix);\r\n      const style = `${object.userData !== {} ? object.userData.translation : 'translate(-50%, -50%) '}translate(${this._vector.x * this._widthHalf + this._widthHalf}px,${-this._vector.y * this._heightHalf + this._heightHalf}px)`;\r\n      element.style.visibility = visibility;\r\n      element.style.WebkitTransform = style;\r\n      element.style.MozTransform = style;\r\n      element.style.oTransform = style;\r\n      element.style.transform = style;\r\n      element.style.zIndex = Number(zIndex).toFixed(0);\r\n      if (element.parentNode !== this._domElement) {\r\n        this._domElement.appendChild(element);\r\n      }\r\n    }\r\n    for (let i = 0, l = object.children.length; i < l; i++) {\r\n      this._renderObject(object.children[i], camera, scene);\r\n    }\r\n  }\r\n  render(scene, camera) {\r\n    scene.updateMatrixWorld();\r\n    if (camera.parent === null) {\r\n      camera.updateMatrixWorld();\r\n    }\r\n    camera.matrixWorldInverse.copy(camera.matrixWorld).invert();\r\n    this._viewMatrix.copy(camera.matrixWorldInverse);\r\n    this._projectionMatrix.copy(camera.projectionMatrix);\r\n    this._renderObject(scene, camera, scene);\r\n  }\r\n}\r\n/* harmony default export */ const gfx_CSS2DRenderer = (CSS2DRenderer);\r\n;// CONCATENATED MODULE: ./src/utils/getTopWindow.js\r\nfunction getTopWindow() {\r\n  // intercept the exception if we have cross-origin iframe\r\n  try {\r\n    if (window.top.location.href !== undefined) {\r\n      return window.top;\r\n    }\r\n  } catch (e) {\r\n    // provide fallback\r\n  }\r\n  return window;\r\n}\r\n;// CONCATENATED MODULE: ./src/ui/ObjectControls.js\r\n\r\n\r\n\r\n\r\n\r\nconst VK_LEFT = 37;\r\nconst VK_UP = 38;\r\nconst VK_RIGHT = 39;\r\nconst VK_DOWN = 40;\r\nconst STATE = {\r\n  NONE: -1,\r\n  ROTATE: 0,\r\n  TRANSLATE: 1,\r\n  SCALE: 2,\r\n  TRANSLATE_PIVOT: 3\r\n};\r\n\r\n// pausing for this amount of time before releasing mouse button prevents inertial rotation (seconds)\r\nconst FULL_STOP_THRESHOLD = 0.1;\r\nconst quaternion = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Quaternion();\r\nconst matrix4 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n\r\n// pivot -- local offset of the rotation pivot point\r\nfunction ObjectHandler(objects, camera, pivot, options) {\r\n  this.objects = objects;\r\n  [this.object] = objects;\r\n  this.camera = camera;\r\n  this.pivot = pivot;\r\n  this.axis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 1);\r\n  this.options = options;\r\n  this.lastRotation = {\r\n    axis: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n    angle: 0.0\r\n  };\r\n}\r\nObjectHandler.prototype._rotate = function () {\r\n  const p = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const q = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Quaternion();\r\n  const s = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const m = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  return function (quat) {\r\n    const zeroPivot = this.pivot.x === 0.0 && this.pivot.y === 0.0 && this.pivot.z === 0.0;\r\n    m.copy(this.object.matrix);\r\n    if (zeroPivot) {\r\n      m.multiply(matrix4.makeRotationFromQuaternion(quat));\r\n    } else {\r\n      m.multiply(matrix4.makeTranslation(this.pivot.x, this.pivot.y, this.pivot.z));\r\n      m.multiply(matrix4.makeRotationFromQuaternion(quat));\r\n      m.multiply(matrix4.makeTranslation(-this.pivot.x, -this.pivot.y, -this.pivot.z));\r\n    }\r\n    m.decompose(p, q, s);\r\n\r\n    // update objects\r\n    if (!zeroPivot) {\r\n      for (let i = 0; i < this.objects.length; ++i) {\r\n        this.objects[i].position.copy(p);\r\n      }\r\n    }\r\n    for (let j = 0; j < this.objects.length; ++j) {\r\n      this.objects[j].quaternion.copy(q);\r\n      this.objects[j].updateMatrix();\r\n    }\r\n  };\r\n}();\r\nObjectHandler.prototype.setObjects = function (objects) {\r\n  this.objects = objects;\r\n  [this.object] = objects;\r\n};\r\nObjectHandler.prototype.rotate = function () {\r\n  const rot = {\r\n    axis: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n    angle: 0.0\r\n  };\r\n  return function (quat, mousePrevPos, mouseCurPos, aboutAxis) {\r\n    this.mouse2rotation(rot, mousePrevPos, mouseCurPos, aboutAxis);\r\n    quat.setFromAxisAngle(rot.axis, rot.angle);\r\n    if (rot.angle) {\r\n      this._rotate(quat);\r\n    }\r\n    this.lastRotation = rot;\r\n  };\r\n}();\r\nObjectHandler.prototype.translate = function () {\r\n  const dir = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const pivot = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (delta) {\r\n    // reverse-project viewport movement to view coords (compensate for screen aspect ratio)\r\n    dir.set(delta.x / this.camera.projectionMatrix.elements[0], delta.y / this.camera.projectionMatrix.elements[5], 0);\r\n    let dist = dir.length();\r\n    dir.normalize();\r\n\r\n    // transform movement direction to object local coords\r\n    dir.transformDirection(matrix4.copy(this.object.matrixWorld).invert());\r\n\r\n    // visible translate distance shouldn't depend on camera-to-object distance\r\n    pivot.copy(this.pivot);\r\n    this.object.localToWorld(pivot);\r\n    dist *= Math.abs(pivot.z - this.camera.position.z);\r\n\r\n    // visible translate distance shouldn't depend on object scale\r\n    dist /= this.object.matrixWorld.getMaxScaleOnAxis();\r\n\r\n    // all objects are translated similar to principal object\r\n    // (we assume they all have identical pivot and scale)\r\n    for (let i = 0; i < this.objects.length; ++i) {\r\n      this.objects[i].translateOnAxis(dir, dist);\r\n    }\r\n  };\r\n}();\r\nObjectHandler.prototype.update = function () {\r\n  const axis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (timeSinceLastUpdate, timeSinceMove) {\r\n    if (settings.now.autoRotation !== 0.0) {\r\n      // auto-rotation with constant speed\r\n\r\n      // if rotation axis is fixed or hasn't been defined yet\r\n      if (settings.now.autoRotationAxisFixed || this.lastRotation.axis.length() === 0.0) {\r\n        // use Y-axis (transformed to local object coords)\r\n        axis.set(0, 1, 0).transformDirection(matrix4.copy(this.object.matrixWorld).invert());\r\n      } else {\r\n        // use axis defined by last user rotation\r\n        axis.copy(this.lastRotation.axis);\r\n      }\r\n      this._rotate(quaternion.setFromAxisAngle(axis, settings.now.autoRotation * timeSinceLastUpdate));\r\n      return true;\r\n    }\r\n    if (this.options.intertia && this.lastRotation.angle) {\r\n      // inertial object rotation\r\n      const angle = this.lastRotation.angle * (1.0 - this.options.dynamicDampingFactor) ** (40.0 * timeSinceMove);\r\n      if (Math.abs(angle) <= this.options.intertiaThreshold) {\r\n        this.lastRotation.angle = 0.0;\r\n      } else {\r\n        this._rotate(quaternion.setFromAxisAngle(this.lastRotation.axis, angle));\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n}();\r\nObjectHandler.prototype.stop = function () {\r\n  this.lastRotation.angle = 0.0;\r\n};\r\n\r\n// calculate (axis, angle) pair from mouse/touch movement\r\nObjectHandler.prototype.mouse2rotation = function () {\r\n  const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const eye = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const eyeDirection = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const cameraUpDirection = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const cameraSidewaysDirection = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const moveDirection = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const mouseDelta = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  return function (rot, mousePrev, mouseCur, aboutAxis) {\r\n    if (aboutAxis) {\r\n      rot.axis.copy(this.axis);\r\n      rot.angle = this.options.axisRotateFactor * (mouseCur.y - mousePrev.y);\r\n\r\n      /* cool method that allows rotation around Z axis to be \"tied\" to mouse cursor\r\n          res.axis.copy(this.axis);\r\n          var pivot = this.pivot.clone();\r\n        this.object.localToWorld(pivot);\r\n        pivot.project(this.camera);\r\n          var v1 = new THREE.Vector3(mousePrev.x, mousePrev.y, this.camera.position.z);\r\n        v1.sub(pivot);\r\n        var v2 = new THREE.Vector3(mouseCur.x, mouseCur.y, this.camera.position.z);\r\n        v2.sub(pivot);\r\n          v1.sub(res.axis.clone().multiplyScalar(v1.dot(res.axis)));\r\n        v2.sub(res.axis.clone().multiplyScalar(v2.dot(res.axis)));\r\n          var abs = v1.length() * v2.length();\r\n        if (abs > 0) {\r\n          res.angle = res.axis.dot(v1.cross(v2)) / abs;\r\n        }\r\n      */\r\n    } else {\r\n      mouseDelta.subVectors(mouseCur, mousePrev);\r\n      const angle = mouseDelta.length();\r\n      if (angle === 0.0) {\r\n        return;\r\n      }\r\n      center.copy(this.pivot);\r\n      this.object.localToWorld(center);\r\n      eye.subVectors(this.camera.position, center);\r\n      eyeDirection.copy(eye).normalize();\r\n      cameraUpDirection.copy(this.camera.up).normalize();\r\n      cameraSidewaysDirection.crossVectors(cameraUpDirection, eyeDirection).normalize();\r\n      cameraUpDirection.setLength(mouseDelta.y);\r\n      cameraSidewaysDirection.setLength(mouseDelta.x);\r\n      moveDirection.copy(cameraUpDirection.add(cameraSidewaysDirection));\r\n      rot.axis.crossVectors(moveDirection, eye);\r\n      rot.angle = -angle * this.options.rotateFactor;\r\n    }\r\n    rot.axis.transformDirection(matrix4.copy(this.object.matrixWorld).invert());\r\n\r\n    // make sure angle is always positive (thus 'axis' defines both axis and direction of rotation)\r\n    if (rot.angle < 0.0) {\r\n      rot.axis.negate();\r\n      rot.angle = -rot.angle;\r\n    }\r\n  };\r\n}();\r\nfunction ObjectControls(object, objectPivot, camera, domElement, getAltObj) {\r\n  utils_EventDispatcher.call(this);\r\n  const self = this;\r\n  this.object = object;\r\n  this.objectPivot = objectPivot;\r\n  this.camera = camera;\r\n  this.domElement = typeof domElement !== 'undefined' ? domElement : document;\r\n  this.getAltObj = getAltObj;\r\n\r\n  // API\r\n\r\n  this.enabled = true;\r\n  this.hotkeysEnabled = true;\r\n  this.screen = {\r\n    left: 0,\r\n    top: 0,\r\n    width: 0,\r\n    height: 0\r\n  };\r\n  this.options = {\r\n    rotateFactor: Math.PI,\r\n    // full screen slide (along short side) would roughly mean 180 deg. rotation\r\n    axisRotateFactor: 4 * Math.PI,\r\n    // full screen slide (along short side) would roughly mean 720 deg. rotation\r\n    intertia: true,\r\n    dynamicDampingFactor: 0.1,\r\n    intertiaThreshold: 1e-3\r\n  };\r\n\r\n  // internals\r\n\r\n  this._state = STATE.NONE;\r\n  this._mousePrevPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  this._mouseCurPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  this._mainObj = new ObjectHandler([this.object], this.camera, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0), this.options);\r\n  this._altObj = new ObjectHandler([this.object], this.camera, new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0), this.options);\r\n  this._affectedObj = this._mainObj;\r\n  this._isAltObjFreeRotationAllowed = true;\r\n  this._isTranslationAllowed = true;\r\n  this._isKeysTranslatingObj = false;\r\n  this._pressedKeys = [];\r\n  this._clock = new Timer();\r\n  this._clock.start();\r\n  this._lastUpdateTime = this._clock.getElapsedTime();\r\n\r\n  // events\r\n  this._listeners = [{\r\n    obj: self.domElement,\r\n    type: 'mousedown',\r\n    handler(e) {\r\n      self.mousedown(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mouseup',\r\n    handler(e) {\r\n      self.mouseup(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mousemove',\r\n    handler(e) {\r\n      self.mousemove(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mousewheel',\r\n    handler(e) {\r\n      self.mousewheel(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'DOMMouseScroll',\r\n    handler(e) {\r\n      self.mousewheel(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mouseout',\r\n    handler(e) {\r\n      self.mouseup(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'touchstart',\r\n    handler(e) {\r\n      self.touchstartend(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'touchend',\r\n    handler(e) {\r\n      self.touchstartend(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'touchmove',\r\n    handler(e) {\r\n      self.touchmove(e);\r\n    }\r\n  }, {\r\n    obj: self.getKeyBindObject(),\r\n    type: 'keydown',\r\n    handler(e) {\r\n      self.keydownup(e);\r\n    }\r\n  }, {\r\n    obj: self.getKeyBindObject(),\r\n    type: 'keyup',\r\n    handler(e) {\r\n      self.keydownup(e);\r\n    }\r\n  }, {\r\n    obj: window,\r\n    type: 'resize',\r\n    handler() {\r\n      self.handleResize();\r\n    }\r\n  }, {\r\n    obj: window,\r\n    type: 'blur',\r\n    handler() {\r\n      self.resetKeys();\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'contextmenu',\r\n    handler(e) {\r\n      self.contextmenu(e);\r\n    }\r\n  }];\r\n  for (let i = 0; i < this._listeners.length; i++) {\r\n    const l = this._listeners[i];\r\n    l.obj.addEventListener(l.type, l.handler);\r\n  }\r\n  this.handleResize();\r\n  this.resetKeys();\r\n\r\n  // force an update at start\r\n  this.update();\r\n}\r\n\r\n// methods\r\n\r\nObjectControls.prototype = Object.create(utils_EventDispatcher.prototype);\r\nObjectControls.prototype.constructor = ObjectControls;\r\nObjectControls.prototype.resetKeys = function () {\r\n  this._pressedKeys[VK_LEFT] = false;\r\n  this._pressedKeys[VK_UP] = false;\r\n  this._pressedKeys[VK_RIGHT] = false;\r\n  this._pressedKeys[VK_DOWN] = false;\r\n};\r\nObjectControls.prototype.contextmenu = function (e) {\r\n  e.stopPropagation();\r\n  e.preventDefault();\r\n};\r\nObjectControls.prototype.handleResize = function () {\r\n  if (this.domElement === document) {\r\n    this.screen.left = 0;\r\n    this.screen.top = 0;\r\n    this.screen.width = window.innerWidth;\r\n    this.screen.height = window.innerHeight;\r\n  } else {\r\n    const box = this.domElement.getBoundingClientRect();\r\n    // adjustments come from similar code in the jquery offset() function\r\n    const d = this.domElement.ownerDocument.documentElement;\r\n    this.screen.left = box.left + window.pageXOffset - d.clientLeft;\r\n    this.screen.top = box.top + window.pageYOffset - d.clientTop;\r\n    this.screen.width = box.width;\r\n    this.screen.height = box.height;\r\n  }\r\n};\r\nObjectControls.prototype.enable = function (enable) {\r\n  this.enabled = enable;\r\n};\r\nObjectControls.prototype.enableHotkeys = function (enable) {\r\n  this.hotkeysEnabled = enable;\r\n};\r\nObjectControls.prototype.allowTranslation = function (allow) {\r\n  this._isTranslationAllowed = allow;\r\n};\r\nObjectControls.prototype.allowAltObjFreeRotation = function (allow) {\r\n  this._isAltObjFreeRotationAllowed = allow;\r\n};\r\nObjectControls.prototype.keysTranslateObj = function (on) {\r\n  this._isKeysTranslatingObj = on;\r\n};\r\nObjectControls.prototype.isEditingAltObj = function () {\r\n  return (this._state === STATE.ROTATE || this._state === STATE.TRANSLATE) && this._affectedObj === this._altObj;\r\n};\r\n\r\n// convert page coords of mouse/touch to uniform coords with smaller side being [-0.5, 0.5]\r\n// (uniform coords keep direct proportion with screen distance travelled by mouse regardless of screen aspect ratio)\r\nObjectControls.prototype.convertMouseToOnCircle = function (coords, pageX, pageY) {\r\n  const screenSize = Math.min(this.screen.width, this.screen.height);\r\n  if (screenSize === 0) {\r\n    coords.set(0, 0);\r\n    return;\r\n  }\r\n  coords.set((pageX - this.screen.width * 0.5 - this.screen.left) / screenSize, (0.5 * this.screen.height + this.screen.top - pageY) / screenSize);\r\n};\r\n\r\n// convert page coords of mouse/touch to viewport coords with both sides being [-1, 1]\r\n// (those are non-uniform coords affected by screen aspect ratio)\r\nObjectControls.prototype.convertMouseToViewport = function (coords, pageX, pageY) {\r\n  if (this.screen.width === 0 || this.screen.height === 0) {\r\n    coords.set(0, 0);\r\n    return;\r\n  }\r\n  coords.set(2.0 * (pageX - this.screen.width * 0.5 - this.screen.left) / this.screen.width, 2.0 * (0.5 * this.screen.height + this.screen.top - pageY) / this.screen.height);\r\n};\r\nObjectControls.prototype.stop = function () {\r\n  this._mainObj.stop();\r\n  this._altObj.stop();\r\n};\r\n\r\n// rotate object based on latest mouse/touch movement\r\nObjectControls.prototype.rotateByMouse = function () {\r\n  const quat = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Quaternion();\r\n  return function (aboutZAxis) {\r\n    this._affectedObj.rotate(quat, this._mousePrevPos, this._mouseCurPos, aboutZAxis);\r\n    this.dispatchEvent({\r\n      type: 'change',\r\n      action: 'rotate',\r\n      quaternion: quat\r\n    });\r\n  };\r\n}();\r\n\r\n// rotate object by specified quaternion\r\nObjectControls.prototype.rotate = function (quat) {\r\n  this.object.quaternion.multiply(quat);\r\n  this.dispatchEvent({\r\n    type: 'change',\r\n    action: 'rotate',\r\n    quaternion: quat\r\n  });\r\n};\r\n\r\n// get object's orientation\r\nObjectControls.prototype.getOrientation = function () {\r\n  return this.object.quaternion;\r\n};\r\n\r\n// set object's orientation\r\nObjectControls.prototype.setOrientation = function (quat) {\r\n  this.object.quaternion.copy(quat);\r\n};\r\n\r\n// translate object based on latest mouse/touch movement\r\nObjectControls.prototype.translate = function () {\r\n  const delta = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  return function () {\r\n    delta.subVectors(this._mouseCurPos, this._mousePrevPos);\r\n    this._affectedObj.translate(delta);\r\n    this.dispatchEvent({\r\n      type: 'change',\r\n      action: 'translate'\r\n    });\r\n  };\r\n}();\r\n\r\n// get object scale\r\nObjectControls.prototype.getScale = function () {\r\n  return this.object.scale.x;\r\n};\r\n\r\n// set uniform object scale\r\nObjectControls.prototype.setScale = function (scale) {\r\n  this.object.scale.set(scale, scale, scale);\r\n};\r\n\r\n// scale object by factor (factor should be greater than zero)\r\nObjectControls.prototype.scale = function (factor) {\r\n  if (factor <= 0) {\r\n    return;\r\n  }\r\n  this.setScale(this.object.scale.x * factor);\r\n  this.dispatchEvent({\r\n    type: 'change',\r\n    action: 'zoom',\r\n    factor\r\n  });\r\n};\r\nObjectControls.prototype.update = function () {\r\n  const shift = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  return function () {\r\n    const curTime = this._clock.getElapsedTime();\r\n    const timeSinceLastUpdate = curTime - this._lastUpdateTime;\r\n\r\n    // update object handler\r\n    if (this._state === STATE.NONE) {\r\n      const timeSinceMove = curTime - this._lastMouseMoveTime;\r\n      if (this._mainObj.update(timeSinceLastUpdate, timeSinceMove) || this._altObj.update(timeSinceLastUpdate, timeSinceMove)) {\r\n        this.dispatchEvent({\r\n          type: 'change',\r\n          action: 'auto'\r\n        });\r\n      }\r\n    }\r\n\r\n    // apply arrow keys\r\n    if (this._isKeysTranslatingObj) {\r\n      const speedX = Number(this._pressedKeys[VK_RIGHT]) - Number(this._pressedKeys[VK_LEFT]);\r\n      const speedY = Number(this._pressedKeys[VK_UP]) - Number(this._pressedKeys[VK_DOWN]);\r\n      if (speedX !== 0.0 || speedY !== 0.0) {\r\n        const delta = timeSinceLastUpdate;\r\n\r\n        // update object translation\r\n        const altObj = this.getAltObj();\r\n        if (altObj.objects.length > 0) {\r\n          this._altObj.setObjects(altObj.objects);\r\n          this._altObj.pivot = altObj.pivot;\r\n          if ('axis' in altObj) {\r\n            this._altObj.axis = altObj.axis.clone();\r\n          } else {\r\n            this._altObj.axis.set(0, 0, 1);\r\n          }\r\n          shift.set(delta * speedX, delta * speedY);\r\n          this._altObj.translate(shift);\r\n          this.dispatchEvent({\r\n            type: 'change',\r\n            action: 'translate'\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this._lastUpdateTime = curTime;\r\n  };\r\n}();\r\nObjectControls.prototype.reset = function () {\r\n  this._state = STATE.NONE;\r\n  this.object.quaternion.copy(quaternion.set(0, 0, 0, 1));\r\n};\r\n\r\n// listeners\r\n\r\nObjectControls.prototype.mousedown = function (event) {\r\n  if (this.enabled === false || this._state !== STATE.NONE) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  if (this._state === STATE.NONE) {\r\n    if (event.button === 0) {\r\n      this._affectedObj.stop(); // can edit only one object at a time\r\n\r\n      let workWithAltObj = false;\r\n      if (event.altKey) {\r\n        const altObj = this.getAltObj();\r\n        workWithAltObj = altObj.objects.length > 0;\r\n        if (workWithAltObj) {\r\n          this._altObj.setObjects(altObj.objects);\r\n          this._altObj.pivot = altObj.pivot;\r\n          if ('axis' in altObj) {\r\n            this._altObj.axis = altObj.axis.clone();\r\n          } else {\r\n            this._altObj.axis.set(0, 0, 1);\r\n          }\r\n        }\r\n      }\r\n      this._affectedObj = workWithAltObj ? this._altObj : this._mainObj;\r\n      this._state = workWithAltObj && event.ctrlKey && this._isTranslationAllowed ? STATE.TRANSLATE : STATE.ROTATE;\r\n    } else if (event.button === 2) {\r\n      this._state = STATE.TRANSLATE_PIVOT;\r\n    }\r\n  }\r\n  if (this._state === STATE.ROTATE) {\r\n    this.convertMouseToOnCircle(this._mouseCurPos, event.pageX, event.pageY);\r\n    this._mousePrevPos.copy(this._mouseCurPos);\r\n  }\r\n  if (this._state === STATE.TRANSLATE || this._state === STATE.TRANSLATE_PIVOT) {\r\n    this.convertMouseToViewport(this._mouseCurPos, event.pageX, event.pageY);\r\n    this._mousePrevPos.copy(this._mouseCurPos);\r\n  }\r\n};\r\nObjectControls.prototype.mousemove = function (event) {\r\n  if (this.enabled === false || this._state === STATE.NONE) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  switch (this._state) {\r\n    case STATE.ROTATE:\r\n      this._mousePrevPos.copy(this._mouseCurPos);\r\n      this.convertMouseToOnCircle(this._mouseCurPos, event.pageX, event.pageY);\r\n      this.rotateByMouse(event.altKey && !this._isAltObjFreeRotationAllowed || event.shiftKey);\r\n      this._lastMouseMoveTime = this._clock.getElapsedTime();\r\n      break;\r\n    case STATE.TRANSLATE:\r\n      this._mousePrevPos.copy(this._mouseCurPos);\r\n      this.convertMouseToViewport(this._mouseCurPos, event.pageX, event.pageY);\r\n      this.translate();\r\n      break;\r\n    case STATE.TRANSLATE_PIVOT:\r\n      this._mousePrevPos.copy(this._mouseCurPos);\r\n      this.convertMouseToViewport(this._mouseCurPos, event.pageX, event.pageY);\r\n      this.translatePivotByMouse();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\nObjectControls.prototype.mousewheel = function (event) {\r\n  if (this.enabled === false || !settings.now.zooming || this._state !== STATE.NONE || event.shiftKey) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  let delta = 0;\r\n  if (event.wheelDelta) {\r\n    // WebKit / Opera / Explorer 9\r\n    delta = event.wheelDelta / 40;\r\n  } else if (event.detail) {\r\n    // Firefox\r\n    delta = -event.detail / 3;\r\n  }\r\n  let factor = 1.0 + delta * 0.05;\r\n  factor = Math.max(factor, 0.01);\r\n  this.scale(factor);\r\n};\r\nObjectControls.prototype.mouseup = function (event) {\r\n  if (this.enabled === false || this._state === STATE.NONE) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  this._state = STATE.NONE;\r\n  if (this._clock.getElapsedTime() - this._lastMouseMoveTime > FULL_STOP_THRESHOLD) {\r\n    this._affectedObj.stop();\r\n  }\r\n};\r\nObjectControls.prototype.touchstartend = function (event) {\r\n  if (this.enabled === false) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  switch (event.touches.length) {\r\n    case 1:\r\n      this._state = STATE.ROTATE;\r\n      this.convertMouseToOnCircle(this._mouseCurPos, event.touches[0].pageX, event.touches[0].pageY);\r\n      this._mousePrevPos.copy(this._mouseCurPos);\r\n      break;\r\n    case 2:\r\n      {\r\n        // prevent inertial rotation\r\n        this._mainObj.stop();\r\n        this._altObj.stop();\r\n        this._state = STATE.SCALE;\r\n        const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n        const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n        this._touchDistanceCur = this._touchDistanceStart = Math.sqrt(dx * dx + dy * dy);\r\n        this._scaleStart = this.object.scale.x;\r\n        break;\r\n      }\r\n    default:\r\n      this._state = STATE.NONE;\r\n  }\r\n};\r\nObjectControls.prototype.touchmove = function (event) {\r\n  if (this.enabled === false || this._state === STATE.NONE) {\r\n    return;\r\n  }\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  switch (this._state) {\r\n    case STATE.ROTATE:\r\n      this._mousePrevPos.copy(this._mouseCurPos);\r\n      this.convertMouseToOnCircle(this._mouseCurPos, event.touches[0].pageX, event.touches[0].pageY);\r\n      this.rotateByMouse(false);\r\n      this._lastMouseMoveTime = this._clock.getElapsedTime();\r\n      break;\r\n    case STATE.SCALE:\r\n      if (settings.now.zooming) {\r\n        // update scale\r\n        const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n        const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n        this._touchDistanceCur = Math.sqrt(dx * dx + dy * dy);\r\n        const newScale = this._scaleStart * this._touchDistanceCur / this._touchDistanceStart;\r\n        const factor = newScale / this.object.scale.x;\r\n        this.scale(factor);\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\nObjectControls.prototype.keydownup = function (event) {\r\n  if (this.enabled === false || this.hotkeysEnabled === false) {\r\n    return;\r\n  }\r\n  switch (event.keyCode) {\r\n    case VK_LEFT:\r\n    case VK_UP:\r\n    case VK_RIGHT:\r\n    case VK_DOWN:\r\n      this._pressedKeys[event.keyCode] = event.type === 'keydown';\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      break;\r\n    default:\r\n  }\r\n};\r\nObjectControls.prototype.getKeyBindObject = function () {\r\n  return getTopWindow();\r\n};\r\nObjectControls.prototype.dispose = function () {\r\n  for (let i = 0; i < this._listeners.length; i++) {\r\n    const l = this._listeners[i];\r\n    l.obj.removeEventListener(l.type, l.handler);\r\n  }\r\n};\r\nObjectControls.prototype.translatePivotByMouse = function () {\r\n  const delta = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  return function () {\r\n    delta.subVectors(this._mouseCurPos, this._mousePrevPos);\r\n    this.translatePivotInWorld(settings.now.translationSpeed * delta.x, settings.now.translationSpeed * delta.y, 0);\r\n  };\r\n}();\r\n\r\n// Translate in WorldCS, translation is scaled with root scale matrix\r\nObjectControls.prototype.translatePivotInWorld = function (x, y, z) {\r\n  const pos = this.objectPivot.position;\r\n  pos.applyMatrix4(this.object.matrixWorld);\r\n  pos.setX(pos.x + x);\r\n  pos.setY(pos.y + y);\r\n  pos.setZ(pos.z + z);\r\n  pos.applyMatrix4(matrix4.copy(this.object.matrixWorld).invert());\r\n  this.dispatchEvent({\r\n    type: 'change',\r\n    action: 'translatePivot'\r\n  });\r\n};\r\n\r\n// Translate in ModelCS, x, y, z are Ang\r\nObjectControls.prototype.translatePivot = function (x, y, z) {\r\n  const pos = this.objectPivot.position;\r\n  pos.setX(pos.x + x);\r\n  pos.setY(pos.y + y);\r\n  pos.setZ(pos.z + z);\r\n  this.dispatchEvent({\r\n    type: 'change',\r\n    action: 'translatePivot'\r\n  });\r\n};\r\n\r\n// Set pivot\r\nObjectControls.prototype.setPivot = function (newPivot) {\r\n  this.objectPivot.position.copy(newPivot);\r\n  this.dispatchEvent({\r\n    type: 'change',\r\n    action: 'translatePivot'\r\n  });\r\n};\r\n/* harmony default export */ const ui_ObjectControls = (ObjectControls);\r\n;// CONCATENATED MODULE: ./src/ui/Picker.js\r\n\r\n\r\n\r\n\r\nfunction Picker(gfxObj, camera, domElement) {\r\n  utils_EventDispatcher.call(this);\r\n  const self = this;\r\n  this.gfxObj = gfxObj;\r\n  this.camera = camera;\r\n  this.domElement = typeof domElement !== 'undefined' ? domElement : document;\r\n  this.screen = {\r\n    left: 0,\r\n    top: 0,\r\n    width: 0,\r\n    height: 0\r\n  };\r\n  this._lastMousePos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(0, 0);\r\n  this._mouseTotalDist = 0.0;\r\n  this._lastClickBeginTime = -1000.0;\r\n  this._lastClickPos = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(0, 0);\r\n  this._clickBeginTime = 0.0;\r\n  this._clock = new Timer();\r\n  this._clock.start();\r\n  this._listeners = [{\r\n    obj: self.domElement,\r\n    type: 'mousedown',\r\n    handler(e) {\r\n      self.mousedown(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mouseup',\r\n    handler(e) {\r\n      self.mouseup(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'mousemove',\r\n    handler(e) {\r\n      self.mousemove(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'touchstart',\r\n    handler(e) {\r\n      self.touchstart(e);\r\n    }\r\n  }, {\r\n    obj: self.domElement,\r\n    type: 'touchend',\r\n    handler(e) {\r\n      self.touchend(e);\r\n    }\r\n  }, {\r\n    obj: window,\r\n    type: 'resize',\r\n    handler() {\r\n      self.handleResize();\r\n    }\r\n  }];\r\n  for (let i = 0; i < this._listeners.length; i++) {\r\n    const l = this._listeners[i];\r\n    l.obj.addEventListener(l.type, l.handler);\r\n  }\r\n  this.handleResize();\r\n}\r\nPicker.prototype = Object.create(utils_EventDispatcher.prototype);\r\nPicker.prototype.constructor = Picker;\r\nPicker.prototype.reset = function () {\r\n  this.picked = {};\r\n  this.dispatchEvent({\r\n    type: 'newpick',\r\n    obj: {}\r\n  });\r\n};\r\nPicker.prototype.handleResize = function () {\r\n  if (this.domElement === document) {\r\n    this.screen.left = 0;\r\n    this.screen.top = 0;\r\n    this.screen.width = window.innerWidth;\r\n    this.screen.height = window.innerHeight;\r\n  } else {\r\n    const box = this.domElement.getBoundingClientRect();\r\n    // adjustments come from similar code in the jquery offset() function\r\n    const d = this.domElement.ownerDocument.documentElement;\r\n    this.screen.left = box.left + window.pageXOffset - d.clientLeft;\r\n    this.screen.top = box.top + window.pageYOffset - d.clientTop;\r\n    this.screen.width = box.width;\r\n    this.screen.height = box.height;\r\n  }\r\n};\r\nPicker.prototype.pickObject = function (screenPos) {\r\n  if (!this.gfxObj) {\r\n    this.picked = {};\r\n    this.dispatchEvent({\r\n      type: 'newpick',\r\n      obj: {}\r\n    });\r\n    return;\r\n  }\r\n  const {\r\n    gfxObj\r\n  } = this;\r\n  const rayCaster = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Raycaster();\r\n  rayCaster.ray.origin.setFromMatrixPosition(this.camera.matrixWorld);\r\n  rayCaster.ray.direction.set(screenPos.x, screenPos.y, 0.5).unproject(this.camera).sub(rayCaster.ray.origin).normalize();\r\n  const clipPlane = settings.now.draft.clipPlane && this.clipPlaneValue ? this.clipPlaneValue : Infinity;\r\n  const fogFarPlane = settings.now.fog && this.fogFarValue ? this.fogFarValue : Infinity;\r\n  const point = rayCaster.intersectVisibleObject(gfxObj, this.camera, clipPlane, fogFarPlane);\r\n  if (!point) {\r\n    this.picked = {};\r\n    this.dispatchEvent({\r\n      type: 'newpick',\r\n      obj: {}\r\n    });\r\n    return;\r\n  }\r\n  let picked = {};\r\n  if (point.residue || point.atom) {\r\n    const residue = point.residue || point.atom.residue;\r\n    if (settings.now.pick === 'chain') {\r\n      picked = {\r\n        chain: residue.getChain()\r\n      };\r\n    } else if (settings.now.pick === 'molecule') {\r\n      picked = {\r\n        molecule: residue.getMolecule()\r\n      };\r\n    } else if (point.residue || settings.now.pick === 'residue') {\r\n      picked = {\r\n        residue\r\n      };\r\n    } else if (point.atom) {\r\n      picked = {\r\n        atom: point.atom\r\n      };\r\n    }\r\n  }\r\n  this.picked = picked;\r\n  this.dispatchEvent({\r\n    type: 'newpick',\r\n    obj: picked\r\n  });\r\n};\r\nPicker.prototype.getMouseInViewport = function (pageX, pageY) {\r\n  return new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2((pageX - this.screen.left) / this.screen.width * 2 - 1, -(pageY - this.screen.top) / this.screen.height * 2 + 1);\r\n};\r\nPicker.prototype.mousedown = function (event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  if (event.button === 0) {\r\n    this._lastMousePos = this.getMouseInViewport(event.pageX, event.pageY);\r\n    this._mouseTotalDist = 0.0;\r\n    this._clickBeginTime = this._clock.getElapsedTime();\r\n  }\r\n};\r\nPicker.prototype.mousemove = function (event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  const pos = this.getMouseInViewport(event.pageX, event.pageY);\r\n  this._mouseTotalDist += pos.sub(this._lastMousePos).length();\r\n};\r\nPicker.prototype.mouseup = function (event) {\r\n  const self = this;\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  if (event.button === 0) {\r\n    if (this._mouseTotalDist < 0.01) {\r\n      const curTime = this._clock.getElapsedTime();\r\n      const curPos = this.getMouseInViewport(event.pageX, event.pageY);\r\n      const timeSinceLastClickBegin = curTime - this._lastClickBeginTime;\r\n      if (timeSinceLastClickBegin < 0.7) {\r\n        const clickDist = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2().subVectors(curPos, this._lastClickPos);\r\n        if (clickDist.length() < 0.01) {\r\n          // it's a double click\r\n          this.dispatchEvent({\r\n            type: 'dblclick',\r\n            obj: this.picked\r\n          });\r\n          this._lastClickPos = curPos;\r\n          this._lastClickBeginTime = -1000; // this click cannot serve as first click in double-click\r\n          return;\r\n        }\r\n      }\r\n      setTimeout(() => {\r\n        self.pickObject(curPos);\r\n      }, 0);\r\n      this._lastClickPos = curPos;\r\n      this._lastClickBeginTime = this._clickBeginTime;\r\n    }\r\n  }\r\n};\r\nPicker.prototype.touchstart = function (event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  if (event.touches.length === 1) {\r\n    this._lastTouchdownPos = this.getMouseInViewport(event.touches[0].pageX, event.touches[0].pageY);\r\n  }\r\n};\r\nPicker.prototype.touchend = function (event) {\r\n  const self = this;\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n  if (event.touches.length === 0 && event.changedTouches.length === 1) {\r\n    const pos = this.getMouseInViewport(event.changedTouches[0].pageX, event.changedTouches[0].pageY);\r\n    const dist = pos.sub(this._lastTouchdownPos).length();\r\n    if (dist < 0.01) {\r\n      setTimeout(() => {\r\n        self.pickObject(self._lastTouchdownPos);\r\n      }, 0);\r\n    }\r\n  }\r\n};\r\nPicker.prototype.dispose = function () {\r\n  for (let i = 0; i < this._listeners.length; i++) {\r\n    const l = this._listeners[i];\r\n    l.obj.removeEventListener(l.type, l.handler);\r\n  }\r\n};\r\n/* harmony default export */ const ui_Picker = (Picker);\r\n;// CONCATENATED MODULE: ./src/gfx/Axes.js\r\n\r\nclass Axes {\r\n  constructor(target, targetCamera) {\r\n    this._target = target;\r\n    this._targetCamera = targetCamera;\r\n    this._camera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PerspectiveCamera(targetCamera.fov, targetCamera.aspect, 1, 100);\r\n    this._object = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.AxesHelper(1);\r\n    this._scene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n    this._scene.add(this._object);\r\n    this._full = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n    this._update();\r\n  }\r\n  _update() {\r\n    const {\r\n      fov\r\n    } = this._targetCamera;\r\n    const camera = this._camera;\r\n    camera.aspect = this._targetCamera.aspect;\r\n    camera.setMinimalFov(fov);\r\n    camera.setDistanceToFit(1.0, fov);\r\n    camera.updateProjectionMatrix();\r\n    this._object.quaternion.copy(this._target.quaternion);\r\n  }\r\n  render(renderer) {\r\n    this._update();\r\n    renderer.getSize(this._full);\r\n    const width = this._full.width * 0.25;\r\n    const height = this._full.height * 0.25;\r\n    const {\r\n      autoClear\r\n    } = renderer;\r\n    renderer.autoClear = false;\r\n    renderer.setViewport(0.0, 0.0, width, height);\r\n    renderer.clear(false, true, false);\r\n    renderer.render(this._scene, this._camera);\r\n    renderer.setViewport(0, 0, this._full.width, this._full.height);\r\n    renderer.autoClear = autoClear;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_Axes = (Axes);\r\n;// CONCATENATED MODULE: ./src/gfx/FrameInfo.js\r\n\r\n\r\nconst cDataOffset = 12;\r\nconst cFirstMask = 0x0FFFFF00;\r\nconst cFirstShift = 8;\r\nconst cSecMask1 = 0x000000FF;\r\nconst cSecShift1 = 12;\r\nconst cSecMask2 = 0xFFF00000;\r\nconst cSecShift2 = 20;\r\nconst cThirdMask = 0x000FFFFF;\r\nconst cStrMask = 0xF0000000;\r\nconst cStrShift = 28;\r\nconst c219 = 1 << 19;\r\nconst c220 = 1 << 20;\r\nconst cHelixIdx = 1;\r\nconst cSheetIdx = 2;\r\nconst secTypes = ['helix', 'strand'];\r\nconst cSecNames = ['fs', 'ps', 'ns', 'us'];\r\nfunction _createSecondary(strArray, complex) {\r\n  const residues = complex._residues;\r\n  const nRes = residues.length;\r\n  const resid = new Uint8Array(nRes);\r\n  const atoms = complex._atoms;\r\n  for (let i = 0, n = strArray.length; i < n; ++i) {\r\n    const atom = atoms[i];\r\n    resid[atom.residue._index] = strArray[i];\r\n  }\r\n  const secondary = [];\r\n  let rIdx = 0;\r\n  while (rIdx < nRes) {\r\n    if (resid[rIdx] !== 0) {\r\n      const start = rIdx;\r\n      const val = resid[rIdx];\r\n      while (rIdx < nRes - 1 && resid[rIdx + 1] === val && residues[rIdx].isConnected(residues[rIdx + 1])) {\r\n        ++rIdx;\r\n      }\r\n      secondary.push({\r\n        start,\r\n        end: rIdx,\r\n        type: secTypes[val - 1]\r\n      });\r\n    }\r\n    ++rIdx;\r\n  }\r\n  return secondary;\r\n}\r\nfunction fromUInt20ToInt20(uint20) {\r\n  return uint20 >= c219 ? uint20 - c220 : uint20;\r\n}\r\nclass FrameInfo {\r\n  constructor(complex, payload, callbacks) {\r\n    this._complex = complex;\r\n    this._secondary = null;\r\n    this.isLoading = false;\r\n    this._framesRange = {\r\n      start: 0,\r\n      end: -1\r\n    };\r\n    this.frameIsReady = false;\r\n    this._buffer = null;\r\n    this._frameRequest = null;\r\n    this._callbacks = callbacks;\r\n    if (typeof payload === 'function') {\r\n      this._framesRequestLength = 1;\r\n      this._downloadDataFn = payload;\r\n    } else {\r\n      this.parseBinaryData(payload, true);\r\n    }\r\n    this.reset();\r\n    this.setFrame(0);\r\n  }\r\n  _prepareBuffer(framesStart, framesEnd) {\r\n    if (framesStart === undefined || framesStart === null) {\r\n      framesStart = 0;\r\n    }\r\n    if (framesEnd === undefined || framesEnd === null) {\r\n      framesEnd = framesStart + this._framesRequestLength;\r\n    }\r\n    if (this._framesCount !== undefined) {\r\n      framesEnd = Math.min(this._framesCount - 1, framesEnd);\r\n    }\r\n    if (this._downloadDataFn) {\r\n      const self = this;\r\n      const onDone = function (data) {\r\n        self.isLoading = false;\r\n        if (self._callbacks && typeof self._callbacks.onLoadStatusChanged === 'function') {\r\n          self._callbacks.onLoadStatusChanged();\r\n        }\r\n        self._buffer = {\r\n          data,\r\n          state: 'ready',\r\n          start: framesStart,\r\n          end: framesEnd\r\n        };\r\n        if (self._frameRequest !== null) {\r\n          const idx = self._frameRequest;\r\n          self._frameRequest = null;\r\n          self.setFrame(idx);\r\n        }\r\n      };\r\n      const onFail = function () {\r\n        self.isLoading = false;\r\n        if (self._callbacks && typeof self._callbacks.onError === 'function') {\r\n          self._callbacks.onError('Streaming failed');\r\n        }\r\n      };\r\n      if (!this._buffer) {\r\n        this._buffer = {};\r\n      }\r\n      this._buffer.state = 'downloading';\r\n      this.isLoading = true;\r\n      if (self._callbacks && typeof self._callbacks.onLoadStatusChanged === 'function') {\r\n        self._callbacks.onLoadStatusChanged();\r\n      }\r\n      this._downloadDataFn({\r\n        start: framesStart,\r\n        end: framesEnd + 1\r\n      }, onDone, onFail);\r\n    }\r\n  }\r\n  _parseBuffer() {\r\n    if (this._buffer && this._buffer.state === 'ready') {\r\n      this._framesRange = {\r\n        start: this._buffer.start,\r\n        end: this._buffer.end\r\n      };\r\n      this.parseBinaryData(this._buffer.data, false);\r\n      let _bufferRequestStart = (this._buffer.end + 1) % this._framesCount;\r\n      if (_bufferRequestStart >= this._framesCount) {\r\n        _bufferRequestStart = 0;\r\n      }\r\n      this._buffer = {\r\n        state: 'none'\r\n      };\r\n      this._prepareBuffer(_bufferRequestStart, _bufferRequestStart + this._framesRequestLength);\r\n      if (this._frameRequest !== null) {\r\n        const idx = this._frameRequest;\r\n        this._frameRequest = null;\r\n        this.setFrame(idx);\r\n      }\r\n    }\r\n  }\r\n  parseBinaryData(arrayBuffer) {\r\n    const dataView = new DataView(arrayBuffer);\r\n    let offset = 0;\r\n    const atomsCount = dataView.getUint32(offset, true);\r\n    offset += 4;\r\n    const framesCount = dataView.getUint32(offset, true);\r\n    this._framesCount = framesCount;\r\n    this._framesRange.end = this._framesRange.end > 0 ? Math.min(this._framesRange.end, framesCount - 1) : framesCount - 1;\r\n    offset += 4;\r\n    this._atomsCount = atomsCount;\r\n    const maxSize = 1024 * 1024; // 1 MB\r\n    this._framesRequestLength = Math.ceil(maxSize / (atomsCount * 8));\r\n    const chunkedFramesCount = this._framesRange.end - this._framesRange.start + 1;\r\n    if (atomsCount !== this._complex._atoms.length || arrayBuffer.byteLength !== cDataOffset + chunkedFramesCount * atomsCount * 8) {\r\n      throw new Error();\r\n    }\r\n    const complex = this._complex;\r\n    let timeStep = dataView.getUint32(offset, true);\r\n    let iName = 0;\r\n    while (timeStep > 1000 && iName < cSecNames.length - 1) {\r\n      timeStep /= 1000;\r\n      ++iName;\r\n    }\r\n    this._timeStep = `${timeStep.toString()} ${cSecNames[iName]}`;\r\n    offset += 4;\r\n    const secondary = [];\r\n    const posData = new Float32Array(chunkedFramesCount * atomsCount * 3);\r\n    let coordIdx = 0;\r\n    const secondaryArr = new Int8Array(atomsCount);\r\n    for (let j = 0; j < chunkedFramesCount; ++j) {\r\n      for (let i = 0; i < atomsCount; ++i) {\r\n        const hiWord = dataView.getUint32(offset, true);\r\n        offset += 4;\r\n        const loWord = dataView.getUint32(offset, true);\r\n        offset += 4;\r\n        const str = (loWord & cStrMask) >>> cStrShift;\r\n        const x = fromUInt20ToInt20((loWord & cFirstMask) >>> cFirstShift >> 0);\r\n        const y = fromUInt20ToInt20(((loWord & cSecMask1) << cSecShift1 | (hiWord & cSecMask2) >>> cSecShift2) >> 0);\r\n        const z = fromUInt20ToInt20((hiWord & cThirdMask) >> 0);\r\n        secondaryArr[i] = 0;\r\n        if (str > 0 && str < 4) {\r\n          secondaryArr[i] = cHelixIdx;\r\n        } else if (str === 4) {\r\n          secondaryArr[i] = cSheetIdx;\r\n        }\r\n        posData[coordIdx++] = x / 100;\r\n        posData[coordIdx++] = y / 100;\r\n        posData[coordIdx++] = z / 100;\r\n      }\r\n      secondary.push(_createSecondary(secondaryArr, complex));\r\n    }\r\n    this._secondaryData = secondary;\r\n    this._data = posData;\r\n  }\r\n  nextFrame() {\r\n    this.setFrame((this._currFrame + 1) % this._framesCount);\r\n  }\r\n  needsColorUpdate(colorer) {\r\n    return colorer instanceof colorers_SecondaryStructureColorer;\r\n  }\r\n  getAtomColor(colorer, atom) {\r\n    return colorer.getResidueColor(this._residues[atom.residue._index], this._complex);\r\n  }\r\n  getResidueColor(colorer, residue) {\r\n    return colorer.getResidueColor(this._residues[residue._index], this._complex);\r\n  }\r\n  _updateSecondary() {\r\n    let i;\r\n    const myResidues = this._residues;\r\n    let n = myResidues.length;\r\n    for (i = 0; i < n; ++i) {\r\n      myResidues[i]._secondary = null;\r\n    }\r\n    const sec = this._secondaryData[this._currFrame - this._framesRange.start];\r\n    for (i = 0, n = sec.length; i < n; ++i) {\r\n      const oldSec = sec[i];\r\n      const {\r\n        start,\r\n        end\r\n      } = oldSec;\r\n      const nSec = {\r\n        _start: myResidues[start],\r\n        _end: myResidues[end],\r\n        type: oldSec.type,\r\n        generic: oldSec.generic\r\n      };\r\n      for (let j = start; j <= end; ++j) {\r\n        myResidues[j]._secondary = nSec;\r\n      }\r\n    }\r\n  }\r\n  reset() {\r\n    const compRes = this._complex._residues;\r\n    const n = compRes.length;\r\n    this._residues = new Array(n);\r\n    const myResidues = this._residues;\r\n    const getSec = function () {\r\n      return this._secondary;\r\n    };\r\n    for (let i = 0; i < n; ++i) {\r\n      myResidues[i] = {\r\n        _type: compRes[i]._type,\r\n        _isValid: compRes[i]._isValid,\r\n        _controlPoint: null,\r\n        _wingVector: null,\r\n        _secondary: null,\r\n        getSecondary: getSec\r\n      };\r\n    }\r\n  }\r\n  setFrame(frameIdx) {\r\n    this.frameIsReady = false;\r\n    if (frameIdx >= this._framesRange.start && frameIdx <= this._framesRange.end) {\r\n      this._currFrame = frameIdx;\r\n      this._cachedResidues = false;\r\n      this._updateSecondary();\r\n      this.frameIsReady = true;\r\n    } else {\r\n      this._frameRequest = frameIdx;\r\n      if (!this._buffer) {\r\n        this._prepareBuffer(frameIdx);\r\n      } else {\r\n        const self = this;\r\n        switch (this._buffer.state) {\r\n          case 'none':\r\n            this._prepareBuffer(frameIdx);\r\n            break;\r\n          case 'ready':\r\n            self._parseBuffer();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  disableEvents() {\r\n    this._callbacks = null;\r\n  }\r\n\r\n  /**\r\n   * Returns link to atom pos vector, clone it if needed\r\n   */\r\n\r\n  static _vec = (() => new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3())();\r\n  getAtomPos(atomIdx) {\r\n    const vec = FrameInfo._vec;\r\n    const self = this;\r\n    const data = self._data;\r\n    const idx = (self._atomsCount * (self._currFrame - self._framesRange.start) + atomIdx) * 3;\r\n    vec.set(data[idx], data[idx + 1], data[idx + 2]);\r\n    return vec;\r\n  }\r\n  getResidues() {\r\n    if (this._cachedResidues) {\r\n      return this._residues;\r\n    }\r\n    this._complex.updateToFrame(this);\r\n    return this._residues;\r\n  }\r\n}\r\n/* harmony default export */ const gfx_FrameInfo = (FrameInfo);\r\n;// CONCATENATED MODULE: ./src/gfx/objects/SceneObject.js\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Create new scene object.\r\n *\r\n * @param {array=} params - Object required params.\r\n * @param {object=} opts - Options to override defaults with.\r\n *\r\n *   These options are copied locally and not kept by reference, so the created instance will not reflect further\r\n *   changes to the `opts` object. However, changes in defaults **will** affect the colorer after its creation.\r\n *\r\n * @exports SceneObject\r\n * @this SceneObject\r\n * @abstract\r\n * @constructor\r\n * @classdesc Basic class for all scene objects that are not reps.\r\n */\r\nclass SceneObject {\r\n  constructor(params, opts) {\r\n    if (this.constructor === SceneObject) {\r\n      throw new Error('Can not instantiate abstract class!');\r\n    }\r\n    /**\r\n     * Object's options inherited (prototyped) from defaults.\r\n     * @type {object}\r\n     */\r\n    this.params = params;\r\n    this.opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(utils.deriveDeep(settings.now.objects[this.type], true), opts);\r\n    this.needsRebuild = false;\r\n    this._mesh = null;\r\n    this.id = null;\r\n  }\r\n\r\n  /**\r\n   * Get object identification, probably with options.\r\n   *  @returns {Object} field type contains type information, params - object's formal parameters,\r\n   * opts - changed options\r\n   * Options are returned if they were changed during or after object creation.\r\n   */\r\n  identify() {\r\n    const result = {\r\n      type: this.type,\r\n      params: this.params\r\n    };\r\n    const diff = utils.objectsDiff(this.opts, settings.now.modes[this.id]);\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n      result.opts = diff;\r\n    }\r\n    return result;\r\n  }\r\n  toString() {\r\n    const paramsStr = `o=${this.type},${this.params.join(',')}`;\r\n    const optsStr = utils.compareOptionsWithDefaults(this.opts, settings.defaults.objects[this.type]);\r\n    return paramsStr + optsStr;\r\n  }\r\n  getGeometry() {\r\n    return this._mesh;\r\n  }\r\n  destroy() {\r\n    if (this._mesh) {\r\n      gfxutils.destroyObject(this._mesh);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Scene object identifier.\r\n * @type {string}\r\n */\r\nSceneObject.prototype.type = '__';\r\n/* harmony default export */ const objects_SceneObject = (SceneObject);\r\n;// CONCATENATED MODULE: ./src/gfx/objects/LinesObj.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass LinesObj extends objects_SceneObject {\r\n  constructor(params, opts) {\r\n    super(params, opts);\r\n    if (params.length < 2) {\r\n      throw new Error('Wrong number of argumets on line object creation!');\r\n    }\r\n    [this._id1, this._id2] = params;\r\n  }\r\n  _getAtomFromName(complex, atomId) {\r\n    const err = ' - Wrong atom format it must be \\'#CHAIN_NAME.#RESIDUE_NUMBER.#ATOM_NAME\\' (e.g. \\'A.38.CO1\\')';\r\n    const atom1 = complex.getAtomByFullname(atomId);\r\n    if (!atom1) {\r\n      throw new Error(atomId + err);\r\n    }\r\n    return atom1;\r\n  }\r\n  build(complex) {\r\n    const geom = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferGeometry();\r\n    this._atom1 = this._getAtomFromName(complex, this._id1);\r\n    this._atom2 = this._getAtomFromName(complex, this._id2);\r\n    const p1 = this._atom1.position;\r\n    const p2 = this._atom2.position;\r\n    const vertices = new Float32Array([p1.x, p1.y, p1.z, p2.x, p2.y, p2.z]);\r\n    geom.setAttribute('position', new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.BufferAttribute(vertices, 3));\r\n    geom.computeBoundingBox();\r\n    this._line = new meshes.Line(geom, new shaders_UberMaterial({\r\n      lights: false,\r\n      overrideColor: true,\r\n      dashedLine: true,\r\n      fogTransparent: settings.now.bg.transparent\r\n    }));\r\n    this._line.computeLineDistances();\r\n    this._line.material.setUberOptions({\r\n      fixedColor: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(this.opts.color),\r\n      dashedLineSize: this.opts.dashSize,\r\n      dashedLinePeriod: this.opts.dashSize + this.opts.gapSize\r\n    });\r\n    this._line.material.updateUniforms();\r\n    this._line.raycast = function (_raycaster, _intersects) {};\r\n    this._mesh = this._line;\r\n    const transforms = complex.getTransforms();\r\n    if (transforms.length > 0) {\r\n      this._mesh = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n      this._mesh.add(this._line);\r\n      meshutils.applyTransformsToMeshes(this._mesh, transforms);\r\n    }\r\n  }\r\n  updateToFrame(frameData) {\r\n    if (!this._atom1 || !this._atom2 || !this._line) {\r\n      return;\r\n    }\r\n    const geo = this._line.geometry;\r\n    geo.vertices[0].copy(frameData.getAtomPos(this._atom1.index));\r\n    geo.vertices[1].copy(frameData.getAtomPos(this._atom2.index));\r\n    this._line.computeLineDistances();\r\n    geo.computeBoundingSphere();\r\n    geo.verticesNeedUpdate = true;\r\n  }\r\n}\r\nLinesObj.prototype.constructor = LinesObj;\r\nLinesObj.prototype.type = 'line';\r\n/* harmony default export */ const objects_LinesObj = (LinesObj);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Outline.frag\r\nconst Outline_namespaceObject = \"precision highp float;\\r\\n\\r\\nuniform sampler2D srcTex;\\r\\nuniform vec2 srcTexSize;\\r\\nuniform vec2 thickness;\\r\\nvarying vec2 vUv;\\r\\n\\r\\n#ifdef DEPTH_OUTLINE\\r\\n  uniform sampler2D srcDepthTex; //depthTexture\\r\\n  uniform vec3 color;\\r\\n  uniform float threshold;\\r\\n#endif\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n  vec2 pixelSize = thickness / srcTexSize;\\r\\n\\r\\n  #ifdef DEPTH_OUTLINE\\r\\n    float c00 = texture2D(srcDepthTex, vUv + vec2(-pixelSize.x,-pixelSize.y)).x;\\r\\n    float c01 = texture2D(srcDepthTex, vUv + vec2(0,-pixelSize.y)).x;\\r\\n    float c02 = texture2D(srcDepthTex, vUv + vec2(pixelSize.x,-pixelSize.y)).x;\\r\\n    float c10 = texture2D(srcDepthTex, vUv + vec2(-pixelSize.x,0)).x;\\r\\n    float c12 = texture2D(srcDepthTex, vUv + vec2(pixelSize.x,0)).x;\\r\\n    float c20 = texture2D(srcDepthTex, vUv + vec2(-pixelSize.x,pixelSize.y)).x;\\r\\n    float c21 = texture2D(srcDepthTex, vUv + vec2(0,pixelSize.y)).x;\\r\\n    float c22 = texture2D(srcDepthTex, vUv + vec2(pixelSize.x,pixelSize.y)).x;\\r\\n\\r\\n    float horizEdge = - c00 - 2.0 * c01 - c02 + c20 + 2.0 * c21 + c22;\\r\\n    float vertEdge  = - c00 - 2.0 * c10 - c20 + c02 + 2.0 * c12 + c22;\\r\\n\\r\\n    float grad = sqrt(horizEdge * horizEdge + vertEdge * vertEdge);\\r\\n\\r\\n    gl_FragColor = ( grad > threshold ) ? vec4(color.rgb, 1.0) : gl_FragColor = texture2D(srcTex, vUv);\\r\\n\\r\\n  #else\\r\\n    vec4 c00 = texture2D(srcTex, vUv + vec2(-pixelSize.x,-pixelSize.y));\\r\\n    vec4 c01 = texture2D(srcTex, vUv + vec2(0,-pixelSize.y));\\r\\n    vec4 c02 = texture2D(srcTex, vUv + vec2(pixelSize.x,-pixelSize.y));\\r\\n    vec4 c10 = texture2D(srcTex, vUv + vec2(-pixelSize.x,0));\\r\\n    vec4 c12 = texture2D(srcTex, vUv + vec2(pixelSize.x,0));\\r\\n    vec4 c20 = texture2D(srcTex, vUv + vec2(-pixelSize.x,pixelSize.y));\\r\\n    vec4 c21 = texture2D(srcTex, vUv + vec2(0,pixelSize.y));\\r\\n    vec4 c22 = texture2D(srcTex, vUv + vec2(pixelSize.x,pixelSize.y));\\r\\n\\r\\n    vec4 horizEdge = - c00 - 2.0 * c01 - c02 + c20 + 2.0 * c21 + c22;\\r\\n    vec4 vertEdge  = - c00 - 2.0 * c10 - c20 + c02 + 2.0 * c12 + c22;\\r\\n\\r\\n    vec4 grad = sqrt(horizEdge * horizEdge + vertEdge * vertEdge);\\r\\n    gl_FragColor = grad;\\r\\n  #endif\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/OutlineMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\nclass OutlineMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor(params) {\r\n    // add depth outline\r\n    super(params);\r\n    const settings = {\r\n      uniforms: {\r\n        srcTex: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcDepthTex: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcTexSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(512, 512)\r\n        },\r\n        color: {\r\n          type: 'v3',\r\n          value: null\r\n        },\r\n        threshold: {\r\n          type: 'f',\r\n          value: null\r\n        },\r\n        opacity: {\r\n          type: 'f',\r\n          value: 1.0\r\n        },\r\n        thickness: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1, 1)\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: Outline_namespaceObject,\r\n      transparent: true,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    };\r\n    this.setValues(settings);\r\n  }\r\n  copy(source) {\r\n    super.copy(source);\r\n    this.depth = source.depth;\r\n  }\r\n  setValues(values) {\r\n    if (typeof values === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    // set direct values\r\n    super.setValues(values);\r\n    const defines = {};\r\n    if (this.depth) {\r\n      defines.DEPTH_OUTLINE = 1;\r\n    }\r\n\r\n    // set dependent values\r\n    this.defines = defines;\r\n  }\r\n}\r\nOutlineMaterial.prototype.depth = false;\r\n/* harmony default export */ const shaders_OutlineMaterial = (OutlineMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/FXAA.frag\r\nconst FXAA_namespaceObject = \"precision highp float;\\r\\n\\r\\n// edge end finding algorithm parameters\\r\\n#define FXAA_QUALITY_PS 8\\r\\n#define FXAA_QUALITY_P0 1.0\\r\\n#define FXAA_QUALITY_P1 1.5\\r\\n#define FXAA_QUALITY_P2 2.0\\r\\n#define FXAA_QUALITY_P3 2.0\\r\\n#define FXAA_QUALITY_P4 2.0\\r\\n#define FXAA_QUALITY_P5 2.0\\r\\n#define FXAA_QUALITY_P6 4.0\\r\\n#define FXAA_QUALITY_P7 12.0\\r\\n// constants\\r\\nfloat fxaaQualityEdgeThreshold = 0.125;\\r\\nfloat fxaaQualityEdgeThresholdMin = 0.0625;\\r\\nfloat fxaaQualitySubpix = 0.7; //0.65;\\r\\n// global params\\r\\nuniform sampler2D srcTex;\\r\\nuniform vec2 srcTexelSize;\\r\\nuniform vec3 bgColor;\\r\\n// from vs\\r\\nvarying vec2 vUv;\\r\\n//=====================================================================//\\r\\n// calc luminance from rgb\\r\\n//'float FxaaLuma(vec3 rgb) {return rgb.y * (0.587/0.299) + rgb.x; } // Lotte's idea about game luminance\\r\\nfloat FxaaLuma(vec3 rgb) {return dot(rgb, vec3(0.299, 0.587, 0.114)); } // real luminance calculation\\r\\n                                                                           // for non-real scene rendering\\r\\n// texture sampling by pixel position(coords) and offset(in pixels)\\r\\n vec3 FxaaTex(sampler2D tex, vec2 pos, vec2 off,  vec2 res ) {\\r\\n  #ifdef BG_TRANSPARENT\\r\\n    vec4 color = texture2D( tex, pos + off * res );\\r\\n    return mix(color.rgb, bgColor, 1.0 - color.a);\\r\\n  #else\\r\\n    return texture2D( tex, pos + off * res ).xyz;\\r\\n  #endif\\r\\n}\\r\\nvec3 FxaaTexTop(sampler2D tex, vec2 pos) {\\r\\n  #ifdef BG_TRANSPARENT\\r\\n    vec4 color = texture2D( tex, pos );\\r\\n    return mix(color.rgb, bgColor, 1.0 - color.a);\\r\\n  #else\\r\\n    return texture2D( tex, pos).xyz;\\r\\n  #endif\\r\\n}\\r\\nvec4 FxaaTexTopAlpha(sampler2D tex, vec2 pos) {\\r\\n  return texture2D( tex, pos);\\r\\n}\\r\\n\\r\\n//=====================================================================//\\r\\nvoid main() {\\r\\n  // renaming\\r\\n  vec2 posM = vUv;\\r\\n  // get luminance for neighbours\\r\\n  float lumaS = FxaaLuma(FxaaTex(srcTex, posM, vec2( 0.0, 1.0 ), srcTexelSize));\\r\\n  float lumaE = FxaaLuma(FxaaTex(srcTex, posM, vec2( 1.0, 0.0 ), srcTexelSize));\\r\\n  float lumaN = FxaaLuma(FxaaTex(srcTex, posM, vec2( 0.0, -1.0 ), srcTexelSize));\\r\\n  float lumaW = FxaaLuma(FxaaTex(srcTex, posM, vec2( -1.0, 0.0 ), srcTexelSize));\\r\\n  float lumaM = FxaaLuma(FxaaTexTop(srcTex, posM));\\r\\n  // find max and min luminance\\r\\n  float rangeMax = max(max(lumaN, lumaW), max(lumaE, max(lumaS, lumaM)));\\r\\n  float rangeMin = min(min(lumaN, lumaW), min(lumaE, min(lumaS, lumaM)));\\r\\n  // calc maximum non-edge range\\r\\n  float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\\r\\n  float range = rangeMax - rangeMin;\\r\\n  float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\\r\\n  // exit when luma contrast is small (is not edge)\\r\\n  if(range < rangeMaxClamped){\\r\\n    gl_FragColor = FxaaTexTopAlpha(srcTex, posM);\\r\\n    return;\\r\\n  }\\r\\n  float subpixRcpRange = 1.0/range;\\r\\n  // note: the sampling coordinates can be calculated in vertex shader but the approach doesn't affect performance\\r\\n  // visibly, thus we decided to leave calculation here for better readability.\\r\\n  // calc other neighbours luminance\\r\\n  float lumaNE = FxaaLuma(FxaaTex(srcTex, posM, vec2(  1.0, -1.0 ), srcTexelSize));\\r\\n  float lumaSW = FxaaLuma(FxaaTex(srcTex, posM, vec2( -1.0,  1.0 ), srcTexelSize));\\r\\n  float lumaSE = FxaaLuma(FxaaTex(srcTex, posM, vec2(  1.0,  1.0 ), srcTexelSize));\\r\\n  float lumaNW = FxaaLuma(FxaaTex(srcTex, posM, vec2( -1.0, -1.0 ), srcTexelSize));\\r\\n/*--------------span calculation and subpix amount calulation-----------------*/\\r\\n  float lumaNS = lumaN + lumaS;\\r\\n  float lumaWE = lumaW + lumaE;\\r\\n  float subpixNSWE = lumaNS + lumaWE;\\r\\n  float edgeHorz1 = (-2.0 * lumaM) + lumaNS;\\r\\n  float edgeVert1 = (-2.0 * lumaM) + lumaWE;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  float lumaNESE = lumaNE + lumaSE;\\r\\n  float lumaNWNE = lumaNW + lumaNE;\\r\\n  float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\\r\\n  float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  float lumaNWSW = lumaNW + lumaSW;\\r\\n  float lumaSWSE = lumaSW + lumaSE;\\r\\n  float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\\r\\n  float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\\r\\n  float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\\r\\n  float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\\r\\n  float edgeHorz = abs(edgeHorz3) + edgeHorz4;\\r\\n  float edgeVert = abs(edgeVert3) + edgeVert4;\\r\\n/*--------------------subpix amount calulation------------------------------*/\\r\\n  float subpixNWSWNESE = lumaNWSW + lumaNESE;\\r\\n  float lengthSign = srcTexelSize.x;\\r\\n  bool horzSpan = edgeHorz >= edgeVert;\\r\\n   // debug  code edge span visualization\\r\\n/*'  if (horzSpan)\\r\\n      gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\\r\\n  else\\r\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\r\\n  return;*/\\r\\n  float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  if(!horzSpan) lumaN = lumaW;\\r\\n  if(!horzSpan) lumaS = lumaE;\\r\\n  if(horzSpan) lengthSign = srcTexelSize.y;\\r\\n  float subpixB = (subpixA * (1.0/12.0)) - lumaM;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  float gradientN = lumaN - lumaM;\\r\\n  float gradientS = lumaS - lumaM;\\r\\n  float lumaNN = lumaN + lumaM;\\r\\n  float lumaSS = lumaS + lumaM;\\r\\n  bool pairN = abs(gradientN) >= abs(gradientS);\\r\\n  float gradient = max(abs(gradientN), abs(gradientS));\\r\\n  if(pairN) lengthSign = -lengthSign;\\r\\n  float subpixC = clamp(abs(subpixB) * subpixRcpRange, 0.0, 1.0);\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  vec2 posB;\\r\\n  posB = posM;\\r\\n  vec2 offNP;\\r\\n  offNP.x = (!horzSpan) ? 0.0 : srcTexelSize.x;\\r\\n  offNP.y = ( horzSpan) ? 0.0 : srcTexelSize.y;\\r\\n  if(!horzSpan) posB.x += lengthSign * 0.5;\\r\\n  if( horzSpan) posB.y += lengthSign * 0.5;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  vec2 posN;\\r\\n  posN = posB - offNP * FXAA_QUALITY_P0;\\r\\n  vec2 posP;\\r\\n  posP = posB + offNP * FXAA_QUALITY_P0;\\r\\n  float subpixD = ((-2.0)*subpixC) + 3.0;\\r\\n  float lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN));\\r\\n  float subpixE = subpixC * subpixC;\\r\\n  float lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP));\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  if(!pairN) lumaNN = lumaSS;\\r\\n  float gradientScaled = gradient * 1.0/4.0;\\r\\n  float lumaMM = lumaM - lumaNN * 0.5;\\r\\n  float subpixF = subpixD * subpixE;\\r\\n  bool lumaMLTZero = lumaMM < 0.0;\\r\\n/*---------------------looped edge-end search-------------------------------*/\\r\\n  lumaEndN -= lumaNN * 0.5;\\r\\n  lumaEndP -= lumaNN * 0.5;\\r\\n  bool doneN = abs(lumaEndN) >= gradientScaled;\\r\\n  bool doneP = abs(lumaEndP) >= gradientScaled;\\r\\n  if(!doneN) posN -= offNP * FXAA_QUALITY_P1;\\r\\n  bool doneNP = (!doneN) || (!doneP);\\r\\n  if(!doneP) posP += offNP * FXAA_QUALITY_P1;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  if(doneNP) {\\r\\n    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n    doneN = abs(lumaEndN) >= gradientScaled;\\r\\n    doneP = abs(lumaEndP) >= gradientScaled;\\r\\n    if(!doneN) posN -= offNP * FXAA_QUALITY_P2;\\r\\n    doneNP = (!doneN) || (!doneP);\\r\\n    if(!doneP) posP += offNP * FXAA_QUALITY_P2;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n    #if (FXAA_QUALITY_PS > 3)\\r\\n      if(doneNP) {\\r\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n        doneN = abs(lumaEndN) >= gradientScaled;\\r\\n        doneP = abs(lumaEndP) >= gradientScaled;\\r\\n        if(!doneN) posN -= offNP * FXAA_QUALITY_P3;\\r\\n        doneNP = (!doneN) || (!doneP);\\r\\n        if(!doneP) posP += offNP * FXAA_QUALITY_P3;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n        #if (FXAA_QUALITY_PS > 4)\\r\\n          if(doneNP) {\\r\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n            doneN = abs(lumaEndN) >= gradientScaled;\\r\\n            doneP = abs(lumaEndP) >= gradientScaled;\\r\\n            if(!doneN) posN -= offNP * FXAA_QUALITY_P4;\\r\\n            doneNP = (!doneN) || (!doneP);\\r\\n            if(!doneP) posP += offNP * FXAA_QUALITY_P4;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n            #if (FXAA_QUALITY_PS > 5)\\r\\n               if(doneNP) {\\r\\n                 if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n                 if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n                 if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n                 if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n                 doneN = abs(lumaEndN) >= gradientScaled;\\r\\n                 doneP = abs(lumaEndP) >= gradientScaled;\\r\\n                 if(!doneN) posN -= offNP * FXAA_QUALITY_P5;\\r\\n                 doneNP = (!doneN) || (!doneP);\\r\\n                 if(!doneP) posP += offNP * FXAA_QUALITY_P5;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n                 #if (FXAA_QUALITY_PS > 6)\\r\\n                   if(doneNP) {\\r\\n                     if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n                     if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n                     if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n                     if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n                     doneN = abs(lumaEndN) >= gradientScaled;\\r\\n                     doneP = abs(lumaEndP) >= gradientScaled;\\r\\n                     if(!doneN) posN -= offNP * FXAA_QUALITY_P6;\\r\\n                     doneNP = (!doneN) || (!doneP);\\r\\n                     if(!doneP) posP += offNP * FXAA_QUALITY_P6;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n                     #if (FXAA_QUALITY_PS > 7)\\r\\n                       if(doneNP) {\\r\\n                         if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(srcTex, posN.xy));\\r\\n                         if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(srcTex, posP.xy));\\r\\n                         if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\r\\n                         if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\r\\n                         doneN = abs(lumaEndN) >= gradientScaled;\\r\\n                         doneP = abs(lumaEndP) >= gradientScaled;\\r\\n                         if(!doneN) posN -= offNP * FXAA_QUALITY_P7;\\r\\n                         doneNP = (!doneN) || (!doneP);\\r\\n                         if(!doneP) posP += offNP * FXAA_QUALITY_P7;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n                       }\\r\\n                     #endif\\r\\n                   }\\r\\n                 #endif\\r\\n               }\\r\\n             #endif\\r\\n           }\\r\\n         #endif\\r\\n      }\\r\\n    #endif\\r\\n  }\\r\\n/*----------------calculate subpix offset due to edge ends-------------------*/\\r\\n  float dstN = posM.x - posN.x;\\r\\n  float dstP = posP.x - posM.x;\\r\\n  if(!horzSpan) dstN = posM.y - posN.y;\\r\\n  if(!horzSpan) dstP = posP.y - posM.y;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\\r\\n  float spanLength = (dstP + dstN);\\r\\n  bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\\r\\n  float spanLengthRcp = 1.0 / spanLength;\\r\\n/*--------------------------------------------------------------------------*/\\r\\n  bool directionN = dstN < dstP;\\r\\n  float dst = min(dstN, dstP);\\r\\n  bool goodSpan = directionN ? goodSpanN : goodSpanP;\\r\\n  float subpixG = subpixF * subpixF;\\r\\n  float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\\r\\n  float subpixH = subpixG * fxaaQualitySubpix;\\r\\n/*-----------------calc texture offest using subpix-------------------------*/\\r\\n  float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\\r\\n  float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\\r\\n\\r\\n  float offset = pixelOffsetSubpix * lengthSign;\\r\\n  #ifdef BG_TRANSPARENT\\r\\n    // get original texel\\r\\n    vec4 rgbaA = FxaaTexTopAlpha(srcTex, posM);\\r\\n    // calc step to blended texel\\r\\n    vec2 step = sign((!horzSpan) ? vec2 (offset, 0.0) : vec2 (0.0, offset));\\r\\n    // get neighboring texel\\r\\n    vec4 rgbaB = FxaaTexTopAlpha(srcTex, posM + step * srcTexelSize);\\r\\n    //  calc blend factor from offset\\r\\n    float f = (!horzSpan) ? offset / srcTexelSize.x : offset / srcTexelSize.y;\\r\\n    f = abs(f);\\r\\n    // calc alpha (special formula to emulate blending with bg)\\r\\n    gl_FragColor.a = 1.0 - mix(1.0 - rgbaA.a, 1.0 - rgbaB.a, f);\\r\\n    // calc color (special formula to emulate blending with bg)\\r\\n    gl_FragColor.rgb = mix(rgbaA.rgb * rgbaA.a, rgbaB.rgb * rgbaB.a, f) / gl_FragColor.a;\\r\\n  #else\\r\\n    if(!horzSpan) {\\r\\n       posM.x += offset;\\r\\n    } else {\\r\\n       posM.y += offset;\\r\\n    }\\r\\n    gl_FragColor = FxaaTexTopAlpha(srcTex, posM);\\r\\n  #endif\\r\\n  return;\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/FXAAMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\nclass FXAAMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor(params) {\r\n    super(params);\r\n\r\n    // set default values\r\n    this.setValues.call(this, {\r\n      uniforms: {\r\n        srcTex: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcTexelSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / 512.0, 1.0 / 512.0)\r\n        },\r\n        bgColor: {\r\n          type: 'c',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0xffffff)\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: FXAA_namespaceObject,\r\n      transparent: false,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n    this.setValues(params);\r\n  }\r\n  copy(source) {\r\n    super.copy(source);\r\n    this.depth = source.depth;\r\n  }\r\n  setValues(values) {\r\n    if (typeof values === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    // set direct values\r\n    super.setValues(values);\r\n    const defines = {};\r\n    if (this.bgTransparent) {\r\n      defines.BG_TRANSPARENT = 1;\r\n    }\r\n    // set dependent values\r\n    this.defines = defines;\r\n  }\r\n}\r\nFXAAMaterial.prototype.bgTransparent = false;\r\n/* harmony default export */ const shaders_FXAAMaterial = (FXAAMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AO.frag\r\nconst AO_namespaceObject = \"precision highp float;\\r\\n#define EPSILON 0.0000001\\r\\n\\r\\n#define MAX_SAMPLES_COUNT 32\\r\\nuniform vec3 samplesKernel[MAX_SAMPLES_COUNT];\\r\\nuniform sampler2D noiseTexture;\\r\\nuniform vec2      noiseTexelSize;\\r\\nuniform sampler2D diffuseTexture;\\r\\nuniform sampler2D depthTexture;\\r\\nuniform sampler2D normalTexture;\\r\\nuniform vec2      srcTexelSize;\\r\\nuniform vec2      camNearFar;\\r\\nuniform mat4      projMatrix;\\r\\n\\r\\nuniform float aspectRatio;\\r\\nuniform float tanHalfFOV;\\r\\n\\r\\nuniform float kernelRadius;\\r\\nuniform float depthThreshold;\\r\\nuniform float factor;\\r\\n\\r\\nvarying vec2 vUv;\\r\\n\\r\\nfloat CalcViewZ(vec2 screenPos)\\r\\n{\\r\\n  float depth = texture2D(depthTexture, screenPos).x;\\r\\n  // [0, 1]->[-1, 1]\\r\\n  float clipedZ = 2.0 * depth - 1.0;\\r\\n  // see THREE.js camera.makeFrustum for projection details\\r\\n  return (-projMatrix[3][2] / (clipedZ + projMatrix[2][2]));\\r\\n}\\r\\n\\r\\nvec3 ViewPosFromDepth(vec2 screenPos)\\r\\n{\\r\\n  vec3 viewPos;\\r\\n  viewPos.z = CalcViewZ(screenPos);\\r\\n  //[0, 1]->[-1, 1]\\r\\n  vec2 projPos = 2.0 * screenPos - 1.0;\\r\\n  // reconstruct viewposition in right-handed sc with z to viewer\\r\\n  viewPos.xy = vec2(\\r\\n                    projPos.x * aspectRatio * tanHalfFOV * abs(viewPos.z),\\r\\n                    projPos.y * tanHalfFOV * abs(viewPos.z)\\r\\n                   );\\r\\n  return viewPos;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n  vec3 viewPos = ViewPosFromDepth(vUv);\\r\\n  // remap coordinates to prevent noise exture rescale\\r\\n  vec2 vUvNoise = vUv / srcTexelSize * noiseTexelSize;\\r\\n  vec4 normalData = texture2D(normalTexture, vUv);\\r\\n  // return for background fragments (their normals are zero vectors)\\r\\n  if (length(normalData.rgb) < EPSILON) {\\r\\n    // 0.0 in alpha component means that it is background fragment\\r\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\n    return;\\r\\n  }\\r\\n  //[0, 1] -> [-1, 1]\\r\\n  vec3 normal = (normalData.rgb * 2.0 - 1.0);\\r\\n  // normalData.a store 1.0 if normal was build for frontfaced surface\\r\\n  // and 0.0 in other case\\r\\n  if (normalData.a < EPSILON) {\\r\\n    normal *= -1.0;\\r\\n  }\\r\\n  // get random vector for sampling sphere rotation\\r\\n  vec3 randN = texture2D(noiseTexture, vUvNoise).rgb * 2.0 - 1.0;\\r\\n  randN = normalize(randN);\\r\\n  // build TBN (randomly rotated around normal)\\r\\n  vec3 tangent   = normalize(randN - normal * dot(randN, normal));\\r\\n  vec3 bitangent = cross(tangent, normal);\\r\\n  mat3 TBN = mat3(tangent, bitangent, normal);\\r\\n  // calc AO value\\r\\n  float AO = 0.0;\\r\\n  for (int i = 0 ; i < MAX_SAMPLES_COUNT ; i++) {\\r\\n    // rotate sampling kernel around normal\\r\\n    vec3 reflectedSample = TBN * samplesKernel[i];\\r\\n    // get sample\\r\\n    vec3 samplePos = viewPos + reflectedSample * kernelRadius;\\r\\n\\r\\n    // project sample to screen to get sample's screen pos\\r\\n    vec4 SampleScrPos = vec4(samplePos, 1.0);\\r\\n    // eye -> clip\\r\\n    SampleScrPos = projMatrix * SampleScrPos;\\r\\n    // normalize\\r\\n    SampleScrPos.xy /= SampleScrPos.w;\\r\\n    //[-1, 1] -> [0, 1]\\r\\n    SampleScrPos.xy = (SampleScrPos.xy + vec2(1.0)) * 0.5;\\r\\n\\r\\n    // get view z for sample projected to the objct surface\\r\\n    float sampleDepth = CalcViewZ(SampleScrPos.xy);\\r\\n    // calc occlusion made by object surface at the sample\\r\\n    AO += step(samplePos.z, sampleDepth);\\r\\n  }\\r\\n  // calc result AO-map color\\r\\n  AO = 1.0 - max(0.0, AO / float(MAX_SAMPLES_COUNT) * factor);\\r\\n  // write value to AO-map\\r\\n  gl_FragColor = vec4(AO, AO, AO, 1.0);\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AOMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\n\r\nconst AOMaterial_samplesKernel = [\r\n// hemisphere samples adopted to sphere\r\nnew external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.295184, 0.077723, 0.068429), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.271976, -0.365221, 0.838363), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.547713, 0.467576, 0.488515), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.662808, -0.031733, 0.584758), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.025717, 0.218955, 0.657094), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.310153, -0.365223, 0.370701), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.101407, -0.006313, 0.747665), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.769138, 0.360399, 0.086847), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.271988, -0.275140, 0.905353), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.096740, -0.566901, 0.700151), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.562872, -0.735136, 0.094647), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.379877, 0.359278, 0.190061), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.519064, -0.023055, 0.405068), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.301036, 0.114696, 0.088885), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.282922, 0.598305, 0.487214), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.181859, 0.251670, 0.679702), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.191463, -0.635818, 0.512919), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.293655, 0.427423, 0.078921), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.267983, 0.680534, 0.132880), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.139611, 0.319637, 0.477439), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.352086, 0.311040, 0.653913), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.321032, 0.805279, 0.487345), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.073516, 0.820734, 0.414183), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.155324, 0.589983, 0.411460), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.335976, 0.170782, 0.527627), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.463460, -0.355658, 0.167689), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.222654, 0.596550, 0.769406), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.922138, -0.042070, 0.147555), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.727050, -0.329192, 0.369826), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.090731, 0.533820, 0.463767), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.323457, -0.876559, 0.238524), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(-0.663277, -0.372384, 0.342856)];\r\nclass AOMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor() {\r\n    super();\r\n\r\n    // set default values\r\n    this.setValues.call(this, {\r\n      uniforms: {\r\n        noiseTexture: {\r\n          type: 't',\r\n          value: gfx_noiseTexture.noiseTexture\r\n        },\r\n        noiseTexelSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / gfx_noiseTexture.noiseWidth, 1.0 / gfx_noiseTexture.noiseHeight)\r\n        },\r\n        diffuseTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        normalTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        depthTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcTexelSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / 512.0, 1.0 / 512.0)\r\n        },\r\n        camNearFar: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0, 10.0)\r\n        },\r\n        projMatrix: {\r\n          type: 'mat4',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n        },\r\n        aspectRatio: {\r\n          type: 'f',\r\n          value: 0.0\r\n        },\r\n        tanHalfFOV: {\r\n          type: 'f',\r\n          value: 0.0\r\n        },\r\n        samplesKernel: {\r\n          type: 'v3v',\r\n          value: AOMaterial_samplesKernel\r\n        },\r\n        kernelRadius: {\r\n          type: 'f',\r\n          value: 1.0\r\n        },\r\n        depthThreshold: {\r\n          type: 'f',\r\n          value: 1.0\r\n        },\r\n        factor: {\r\n          type: 'f',\r\n          value: 1.0\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: AO_namespaceObject,\r\n      transparent: false,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n  }\r\n}\r\n/* harmony default export */ const shaders_AOMaterial = (AOMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AOHorBlur.frag\r\nconst AOHorBlur_namespaceObject = \"precision highp float;\\r\\n#define EPSILON 0.0000001\\r\\n\\r\\n#define MAX_SAMPLES_COUNT 5\\r\\nuniform float samplesOffsets[MAX_SAMPLES_COUNT];\\r\\nuniform sampler2D aoMap;\\r\\nuniform sampler2D depthTexture;\\r\\nuniform vec2      srcTexelSize;\\r\\n\\r\\nvarying vec2 vUv;\\r\\n\\r\\nvoid main() {\\r\\n  float x = vUv.x;\\r\\n  float y = vUv.y;\\r\\n  vec4 res = vec4(0.0);\\r\\n  res.a = texture2D(aoMap, vec2(x, y )).a;\\r\\n  // return for background fragments (0.0 in alpha component means that it is background fragment)\\r\\n  if (res.a < EPSILON) {\\r\\n    gl_FragColor = res;\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  float pixelDepth = texture2D(depthTexture, vec2(x, y)).x;\\r\\n  float weightSum = 0.0;\\r\\n  for (int i = 0; i < MAX_SAMPLES_COUNT; ++i) {\\r\\n    if (texture2D(aoMap, vec2(x + samplesOffsets[i] * srcTexelSize.x, y )).a < EPSILON) {\\r\\n      continue;\\r\\n    }\\r\\n    vec2 samplePos = vec2(x + samplesOffsets[i] * srcTexelSize.x, y);\\r\\n    float depth = texture2D(depthTexture, samplePos).x;\\r\\n    float weight = (1.0 / (0.0001 + abs(depth - pixelDepth)));\\r\\n    res.rgb += texture2D(aoMap, vec2(x + samplesOffsets[i] * srcTexelSize.x, y )).rgb * weight;\\r\\n    weightSum += weight;\\r\\n  }\\r\\n  res.rgb = res.rgb / weightSum;\\r\\n  gl_FragColor = res;\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AOHorBlurMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\nconst _kernelOffsets = [-2.0, -1.0, 0.0, 1.0, 2.0];\r\nclass AOHorBlurMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor() {\r\n    super();\r\n\r\n    // set default values\r\n    this.setValues.call(this, {\r\n      uniforms: {\r\n        depthTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcTexelSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / 512.0, 1.0 / 512.0)\r\n        },\r\n        aoMap: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        samplesOffsets: {\r\n          type: 'fv1',\r\n          value: _kernelOffsets\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: AOHorBlur_namespaceObject,\r\n      transparent: false,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n  }\r\n}\r\n/* harmony default export */ const shaders_AOHorBlurMaterial = (AOHorBlurMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AOVertBlurWithBlend.frag\r\nconst AOVertBlurWithBlend_namespaceObject = \"precision highp float;\\r\\n#define EPSILON 0.0000001\\r\\n\\r\\n#define MAX_SAMPLES_COUNT 5\\r\\nuniform float samplesOffsets[MAX_SAMPLES_COUNT];\\r\\nuniform sampler2D diffuseTexture;\\r\\nuniform sampler2D aoMap;\\r\\nuniform sampler2D depthTexture;\\r\\nuniform vec2      srcTexelSize;\\r\\n\\r\\nuniform mat4  projMatrix;\\r\\nuniform float aspectRatio;\\r\\nuniform float tanHalfFOV;\\r\\n\\r\\n#ifdef USE_FOG\\r\\n  uniform vec2 fogNearFar;\\r\\n  uniform vec4 fogColor;\\r\\n#endif\\r\\nvarying vec2 vUv;\\r\\n\\r\\nfloat CalcViewZ(vec2 screenPos)\\r\\n{\\r\\n  float depth = texture2D(depthTexture, screenPos).x;\\r\\n  // [0, 1]->[-1, 1]\\r\\n  float clipedZ = 2.0 * depth - 1.0;\\r\\n  // see THREE.js camera.makeFrustum for projection details\\r\\n  return (-projMatrix[3][2] / (clipedZ + projMatrix[2][2]));\\r\\n}\\r\\n\\r\\nvec3 ViewPosFromDepth(vec2 screenPos)\\r\\n{\\r\\n  vec3 viewPos;\\r\\n  viewPos.z = CalcViewZ(screenPos);\\r\\n  //[0, 1]->[-1, 1]\\r\\n  vec2 projPos = 2.0 * screenPos - 1.0;\\r\\n  // reconstruct viewposition in right-handed sc with z to viewer\\r\\n  viewPos.xy = vec2(\\r\\n  projPos.x * aspectRatio * tanHalfFOV * abs(viewPos.z),\\r\\n  projPos.y * tanHalfFOV * abs(viewPos.z)\\r\\n  );\\r\\n  return viewPos;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n  vec3 viewPos = ViewPosFromDepth(vUv);\\r\\n  float x = vUv.x;\\r\\n  float y = vUv.y;\\r\\n  vec4 color = texture2D(diffuseTexture, vec2(x, y));\\r\\n  vec4 res = vec4(0.0);\\r\\n  res.a = texture2D(aoMap, vec2(x, y )).a;\\r\\n  // return for background fragments (0.0 in alpha component means that it is background fragment)\\r\\n  if (res.a < EPSILON) {\\r\\n    gl_FragColor = color;\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  float pixelDepth = texture2D(depthTexture, vec2(x, y)).x;\\r\\n  float weightSum = 0.0;\\r\\n  for (int i = 0; i < MAX_SAMPLES_COUNT; ++i) {\\r\\n    if (texture2D(aoMap, vec2(x, y + samplesOffsets[i] * srcTexelSize.y)).a < EPSILON) {\\r\\n      continue;\\r\\n    }\\r\\n    vec2 samplePos = vec2(x, y + samplesOffsets[i] * srcTexelSize.y);\\r\\n    float depth = texture2D(depthTexture, samplePos).x;\\r\\n    float weight = (1.0 / (0.0001 + abs(depth - pixelDepth)));\\r\\n    res.rgb += texture2D(aoMap, vec2(x, y + samplesOffsets[i] * srcTexelSize.y)).rgb * weight;\\r\\n    weightSum += weight;\\r\\n  }\\r\\n  res.rgb /= weightSum;\\r\\n\\r\\n  #if defined(USE_FOG) && !defined(FOG_TRANSPARENT)\\r\\n    // Add fog to the result value\\r\\n    // Proper way to get an image with fog and ao requires formula:\\r\\n    //          gl_FragColor = fragColor*AO*(1-fogFactor) + fogColor*fogFactor\\r\\n    // But we have already fogged molecule to add AO too. Let's split the straight formula into our real steps!\\r\\n    // We have:  AO, fogFactor, fogColor,\\r\\n    //          color = fragColor*(1-fogFactor) + fogColor*fogFactor (it comes from diffuseTexture,\\r\\n    //                                                                where molecule has been already drawn with fog)\\r\\n    // Transform:\\r\\n    //          fragColor*AO*(1-fogFactor) + fogColor*fogFactor =\\r\\n    //        = [fragColor*(1-fogFactor) = color - fogColor*fogFactor] =\\r\\n    //        = (color - fogColor*fogFactor)*AO + fogColor*fogFactor =\\r\\n    //        = color*AO + fogColor*fogFactor*(1 - AO)\\r\\n    // Result:  gl_FragColor = color*AO + fogColor*fogFactor*(1 - AO)\\r\\n    float fogFactor = smoothstep(fogNearFar.x, fogNearFar.y, - viewPos.z) * fogColor.a;\\r\\n    gl_FragColor.rgb = color.rgb * res.rgb + fogColor.rgb * fogFactor *(vec3(1.0, 1.0, 1.0) - res.rgb);\\r\\n  #else\\r\\n    gl_FragColor.rgb = color.rgb * res.rgb;\\r\\n  #endif\\r\\n  gl_FragColor.a = color.a;\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AOVertBlurWithBlendMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\nconst AOVertBlurWithBlendMaterial_kernelOffsets = [-2.0, -1.0, 0.0, 1.0, 2.0];\r\nclass AOVertBlurWithBlendMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor(params) {\r\n    super(params);\r\n\r\n    // set default values\r\n    this.setValues.call(this, {\r\n      uniforms: {\r\n        diffuseTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        depthTexture: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcTexelSize: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(1.0 / 512.0, 1.0 / 512.0)\r\n        },\r\n        aoMap: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        samplesOffsets: {\r\n          type: 'fv1',\r\n          value: AOVertBlurWithBlendMaterial_kernelOffsets\r\n        },\r\n        projMatrix: {\r\n          type: 'mat4',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4()\r\n        },\r\n        aspectRatio: {\r\n          type: 'f',\r\n          value: 0.0\r\n        },\r\n        tanHalfFOV: {\r\n          type: 'f',\r\n          value: 0.0\r\n        },\r\n        fogNearFar: {\r\n          type: 'v2',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(100.0, 100.0)\r\n        },\r\n        fogColor: {\r\n          type: 'v4',\r\n          value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4(0.0, 0.5, 0.0, 1.0)\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: AOVertBlurWithBlend_namespaceObject,\r\n      transparent: false,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n    this.setValues(params);\r\n  }\r\n  setValues(values) {\r\n    if (typeof values === 'undefined') {\r\n      return;\r\n    }\r\n\r\n    // set direct values\r\n    super.setValues(values);\r\n    const defines = {};\r\n    if (this.useFog) {\r\n      defines.USE_FOG = 1;\r\n    }\r\n    if (this.fogTransparent) {\r\n      defines.FOG_TRANSPARENT = 1;\r\n    }\r\n    // set dependent values\r\n    this.defines = defines;\r\n  }\r\n}\r\nAOVertBlurWithBlendMaterial.prototype.useFog = true;\r\nAOVertBlurWithBlendMaterial.prototype.fogTransparent = false;\r\n/* harmony default export */ const shaders_AOVertBlurWithBlendMaterial = (AOVertBlurWithBlendMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/Anaglyph.frag\r\nconst Anaglyph_namespaceObject = \"precision highp float;\\r\\n\\r\\nuniform sampler2D srcL;\\r\\nuniform sampler2D srcR;\\r\\nvarying vec2 vUv;\\r\\n\\r\\nvoid main() {\\r\\n  vec4 l = texture2D(srcL, vUv);\\r\\n  vec4 r = texture2D(srcR, vUv);\\r\\n  gl_FragColor = vec4(l.r, r.g, r.b, 1.0);\\r\\n}\\r\\n\";\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/AnaglyphMaterial.js\r\n/* eslint-disable no-magic-numbers */\r\n/* eslint-disable guard-for-in */\r\n\r\n\r\n\r\nclass AnaglyphMaterial extends external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial {\r\n  constructor() {\r\n    super();\r\n    const settings = {\r\n      uniforms: {\r\n        srcL: {\r\n          type: 't',\r\n          value: null\r\n        },\r\n        srcR: {\r\n          type: 't',\r\n          value: null\r\n        }\r\n      },\r\n      vertexShader: ScreenQuad_namespaceObject,\r\n      fragmentShader: Anaglyph_namespaceObject,\r\n      transparent: false,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    };\r\n    this.setValues(settings);\r\n  }\r\n}\r\n/* harmony default export */ const shaders_AnaglyphMaterial = (AnaglyphMaterial);\r\n;// CONCATENATED MODULE: ./src/gfx/ViewInterpolator.js\r\n\r\n\r\nclass View {\r\n  constructor() {\r\n    this.position = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0);\r\n    this.scale = 1;\r\n    this.orientation = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Quaternion(0, 0, 0, 1);\r\n  }\r\n  set(position, scale, orientation) {\r\n    this.position = position;\r\n    this.scale = scale;\r\n    this.orientation = orientation;\r\n  }\r\n}\r\nconst _transitionTime = 1.5; // in seconds\r\n\r\nclass ViewInterpolator {\r\n  setup(startView, endView) {\r\n    this._startTime = undefined;\r\n    this._endTime = undefined;\r\n    this._isPaused = false;\r\n    this._srcView = startView;\r\n    this._dstView = endView;\r\n    this._isMoving = false;\r\n  }\r\n  isMoving() {\r\n    return this._isMoving;\r\n  }\r\n  wasStarted() {\r\n    return typeof this._startTime !== 'undefined' && typeof this._endTime !== 'undefined';\r\n  }\r\n  start() {\r\n    this._startTime = Date.now();\r\n    const transTime = settings.now.interpolateViews ? _transitionTime * 1000 : 0;\r\n    this._endTime = this._startTime + transTime;\r\n    this._isMoving = true;\r\n  }\r\n  getCurrentView() {\r\n    if (typeof this._srcView === 'undefined' || typeof this._dstView === 'undefined' || !this._isMoving || !this.wasStarted()) {\r\n      return {\r\n        success: false\r\n      };\r\n    }\r\n    let view = this.createView();\r\n    const time = Date.now();\r\n    if (time > this._endTime) {\r\n      view = this._dstView;\r\n      this.reset();\r\n      return {\r\n        success: true,\r\n        view\r\n      };\r\n    }\r\n    const factor = (time - this._startTime) / (this._endTime - this._startTime);\r\n    view.position.copy(this._srcView.position);\r\n    view.position.lerp(this._dstView.position, factor);\r\n    view.scale = (1 - factor) * this._srcView.scale + factor * this._dstView.scale;\r\n    view.orientation.copy(this._srcView.orientation);\r\n    view.orientation.slerp(this._dstView.orientation, factor);\r\n    return {\r\n      success: true,\r\n      view\r\n    };\r\n  }\r\n  reset() {\r\n    this._startTime = this._endTime = 0;\r\n    this._isMoving = false;\r\n  }\r\n  pause() {\r\n    if (!this._isPaused) {\r\n      this.setup(this.getCurrentView().view, this._dstView);\r\n      this._isPaused = true;\r\n    }\r\n  }\r\n  resume() {\r\n    this._isPaused = false;\r\n  }\r\n  createView() {\r\n    return new View();\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/utils/Cookies.js\r\n\r\n\r\nconst MAX_COOKIE_LEN = 4000;\r\nconst COUNT_SUFFIX = 'Cnt';\r\nfunction _chunkString(string, chunkLen) {\r\n  const l = string.length;\r\n  const chunks = [];\r\n  for (let c = 0, lc = 0; lc < l; c++, lc += chunkLen) {\r\n    chunks[c] = string.slice(lc, lc + chunkLen);\r\n  }\r\n  return chunks;\r\n}\r\n\r\n/**\r\n * Create new context dependent Cookie holder object.\r\n * @param context\r\n * @param {Object} opts - options\r\n * @param {string} opts.path - cookie path\r\n * @constructor\r\n */\r\nfunction Cookies(context, opts) {\r\n  this.context = context;\r\n  this._opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge({\r\n    path: '/'\r\n  }, opts);\r\n}\r\nutils_makeContextDependent(Cookies.prototype);\r\n\r\n/**\r\n * Remove cookie by the name.\r\n * @param key\r\n */\r\nCookies.prototype.removeCookie = function (key) {\r\n  const cntKey = this._toCount(key);\r\n  let cntVal = this._getSimpleCookie(cntKey);\r\n  if (!cntVal) {\r\n    this._removeSimpleCookie(key);\r\n    return;\r\n  }\r\n  this._removeSimpleCookie(cntKey);\r\n  cntVal = parseInt(cntVal, 10);\r\n  for (let i = 0; i < cntVal; ++i) {\r\n    this._removeSimpleCookie(key + i);\r\n  }\r\n};\r\n\r\n/**\r\n * Set new cookie value. Automatically splits\r\n * values that are too large into multiple cookies.\r\n * @param key\r\n * @param value\r\n */\r\nCookies.prototype.setCookie = function (key, value) {\r\n  this.removeCookie(key);\r\n  value = encodeURIComponent(value);\r\n  const values = _chunkString(value, MAX_COOKIE_LEN - key.length - 1);\r\n  const cntVal = values.length;\r\n  if (cntVal === 1) {\r\n    this._setSimpleCookie(key, value);\r\n    return;\r\n  }\r\n  const cntKey = this._toCount(key);\r\n  this._setSimpleCookie(cntKey, cntVal.toString());\r\n  for (let i = 0; i < cntVal; ++i) {\r\n    this._setSimpleCookie(key + i, values[i]);\r\n  }\r\n};\r\n\r\n/**\r\n * Obtain the value of a compound cookie.\r\n * @param key\r\n */\r\nCookies.prototype.getCookie = function (key) {\r\n  const cntKey = this._toCount(key);\r\n  let cntVal = this._getSimpleCookie(cntKey);\r\n  if (!cntVal) {\r\n    return this._getSimpleCookie(key);\r\n  }\r\n  cntVal = parseInt(cntVal, 10);\r\n  const value = [];\r\n  for (let i = 0; i < cntVal; ++i) {\r\n    value[i] = this._getSimpleCookie(key + i);\r\n  }\r\n  return value.join('');\r\n};\r\nCookies.prototype._toCount = function (key) {\r\n  return key + COUNT_SUFFIX;\r\n};\r\nCookies.prototype._removeSimpleCookie = function (key) {\r\n  document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\r\n};\r\nCookies.prototype._getExpirationDate = function () {\r\n  const today = new Date();\r\n  const EXP_PERIOD_YEARS = 10;\r\n  today.setFullYear(today.getFullYear() + EXP_PERIOD_YEARS);\r\n  return today;\r\n};\r\nCookies.prototype._setSimpleCookie = function (key, value) {\r\n  document.cookie = `${key}=${value};expires=${this._getExpirationDate().toUTCString()};path=${this._opts.path}`;\r\n};\r\nCookies.prototype._getSimpleCookie = function (key) {\r\n  const matches = document.cookie.match(new RegExp(`(?:^|; )${key}=([^;]*)`));\r\n  return matches ? decodeURIComponent(matches[1]) : '';\r\n};\r\nCookies.prototype._exists = function (key) {\r\n  return document.cookie.match(new RegExp(`(?:^|; )${key}=([^;]*)`));\r\n};\r\n/* harmony default export */ const utils_Cookies = (Cookies);\r\n;// CONCATENATED MODULE: ./src/gfx/vr/createWebVRButton.js\r\n/*\r\n * Toggling WebVR is done through button.click because of limitations on calling requestPresent in webVR:\r\n * VRDisplay::requestPresent should be called from user gesture:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestPresent\r\n */\r\n/* harmony default export */ function createWebVRButton(webVRPoC) {\r\n  function showEnterVR(button) {\r\n    button.style.display = '';\r\n    button.style.cursor = 'pointer';\r\n    button.style.left = 'calc(50% - 50px)';\r\n    button.style.width = '100px';\r\n    button.textContent = 'ENTER VR';\r\n    let currentSession = null;\r\n    function onSessionEnded( /* event */\r\n    ) {\r\n      currentSession.removeEventListener('end', onSessionEnded);\r\n      button.textContent = 'ENTER VR';\r\n      currentSession = null;\r\n    }\r\n    function onSessionStarted(session) {\r\n      session.addEventListener('end', onSessionEnded);\r\n      webVRPoC._gfx.renderer.xr.setReferenceSpaceType('local');\r\n      webVRPoC._gfx.renderer.xr.setSession(session);\r\n      button.textContent = 'EXIT VR';\r\n      currentSession = session;\r\n    }\r\n    button.onmouseenter = function () {\r\n      button.style.opacity = '1.0';\r\n    };\r\n    button.onmouseleave = function () {\r\n      button.style.opacity = '0.5';\r\n    };\r\n    button.onclick = function () {\r\n      if (currentSession === null) {\r\n        // WebXR's requestReferenceSpace only works if the corresponding feature\r\n        // was requested at session creation time. For simplicity, just ask for\r\n        // the interesting ones as optional features, but be aware that the\r\n        // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n        // ('local' is always available for immersive sessions and doesn't need to\r\n        // be requested separately.)\r\n\r\n        const sessionInit = {\r\n          optionalFeatures: ['local-floor', 'bounded-floor']\r\n        };\r\n        navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\r\n        webVRPoC.moveSceneBehindHeadset();\r\n      } else {\r\n        currentSession.end();\r\n      }\r\n    };\r\n  }\r\n  function showWebXRNotFound(button) {\r\n    button.style.display = '';\r\n    button.style.cursor = 'auto';\r\n    button.style.left = 'calc(50% - 75px)';\r\n    button.style.width = '150px';\r\n    button.textContent = 'VR NOT FOUND';\r\n    button.onmouseenter = null;\r\n    button.onmouseleave = null;\r\n    button.onclick = null;\r\n  }\r\n  function stylizeElement(element) {\r\n    element.style.position = 'absolute';\r\n    element.style.bottom = '20px';\r\n    element.style.padding = '12px 6px';\r\n    element.style.border = '1px solid #fff';\r\n    element.style.borderRadius = '4px';\r\n    element.style.background = 'transparent';\r\n    element.style.color = '#fff';\r\n    element.style.font = 'normal 13px sans-serif';\r\n    element.style.textAlign = 'center';\r\n    element.style.opacity = '0.5';\r\n    element.style.outline = 'none';\r\n    element.style.zIndex = '999';\r\n  }\r\n  if ('xr' in navigator) {\r\n    const button = document.createElement('button');\r\n    button.style.display = 'none';\r\n    stylizeElement(button);\r\n    navigator.xr.isSessionSupported('immersive-vr').then(supported => supported ? showEnterVR(button) : showWebXRNotFound(button));\r\n    return button;\r\n  }\r\n  const message = document.createElement('a');\r\n  message.href = 'https://webvr.info';\r\n  message.innerHTML = 'WEBXR NOT SUPPORTED';\r\n  message.style.left = 'calc(50% - 90px)';\r\n  message.style.width = '180px';\r\n  message.style.textDecoration = 'none';\r\n  stylizeElement(message);\r\n  return message;\r\n}\r\n;// CONCATENATED MODULE: ./src/gfx/vr/WebVRPoC.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass WebVRPoC {\r\n  constructor(onToggle) {\r\n    this._mainCamera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PerspectiveCamera();\r\n    this._button = null;\r\n    this._onToggle = onToggle;\r\n    this._molContainer = new gfxutils.RCGroup();\r\n    this._user = new gfxutils.RCGroup();\r\n    this._scalingPivot = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Object3D();\r\n    this._user.add(this._scalingPivot);\r\n    this._controller1 = null;\r\n    this._controller2 = null;\r\n    this._pressedGripsCounter = 0;\r\n    this._distance = 0;\r\n    this._gfx = null;\r\n  }\r\n  startScalingByControllers() {\r\n    // reset scale\r\n    this._distance = this._controller1.position.distanceTo(this._controller2.position);\r\n    gfxutils.getMiddlePoint(this._controller1.position, this._controller2.position, this._scalingPivot.position);\r\n    this._scalingPivot.scale.set(1, 1, 1);\r\n    this._scalingPivot.updateMatrix();\r\n    this._scalingPivot.updateMatrixWorld();\r\n    // link molecule to pivot\r\n    this._scalingPivot.addSavingWorldTransform(this._molContainer);\r\n  }\r\n  stopScalingByControllers() {\r\n    this._gfx.scene.addSavingWorldTransform(this._molContainer);\r\n  }\r\n  handleGripsDown(event) {\r\n    this._pressedGripsCounter++;\r\n    if (this._pressedGripsCounter === 2) {\r\n      this.startScalingByControllers();\r\n    } else if (this._pressedGripsCounter === 1) {\r\n      event.target.addSavingWorldTransform(this._molContainer);\r\n    }\r\n  }\r\n  handleGripsUp(event) {\r\n    this._pressedGripsCounter--;\r\n    if (this._pressedGripsCounter === 1) {\r\n      this.stopScalingByControllers();\r\n      // reattach molecule to other controller\r\n      const anotherController = event.target === this._controller1 ? this._controller2 : this._controller1;\r\n      anotherController.addSavingWorldTransform(this._molContainer);\r\n    } else if (this._pressedGripsCounter === 0) {\r\n      this._gfx.scene.addSavingWorldTransform(this._molContainer);\r\n    }\r\n  }\r\n  enable(gfx) {\r\n    if (!gfx) {\r\n      logger.warn('WebVR couldn\\'t be enabled, because gfx is not defined');\r\n      return;\r\n    }\r\n    this._gfx = gfx;\r\n    const {\r\n      renderer,\r\n      camera\r\n    } = gfx;\r\n    if (!renderer) {\r\n      throw new Error('No renderer is available to toggle WebVR');\r\n    }\r\n    if (!camera) {\r\n      throw new Error('No camera is available to toggle WebVR');\r\n    }\r\n\r\n    // enable xr in renderer\r\n    renderer.xr.enabled = true;\r\n    // add button for turning vr mode\r\n    if (!this._button) {\r\n      this._button = createWebVRButton(this);\r\n      document.body.appendChild(this._button);\r\n    } else {\r\n      this._button.style.display = 'block';\r\n    }\r\n    // store fog setting\r\n    this._mainFog = settings.now.fog;\r\n    settings.set('fog', false);\r\n    this._plugVRNodesIntoScene(gfx, renderer);\r\n    this._setControllersListeners();\r\n\r\n    // make some Miew job\r\n    if (this._onToggle) {\r\n      this._onToggle(true);\r\n    }\r\n  }\r\n  _plugVRNodesIntoScene(gfx, renderer) {\r\n    // store common scene camera\r\n    this._mainCamera.copy(gfx.camera);\r\n    // add hierarchical structure for webVR into scene\r\n    gfx.scene.add(this._user);\r\n    // turn on webvr transformation\r\n    gfx.scene.add(this._molContainer);\r\n    this._molContainer.add(gfx.root);\r\n    this._controller1 = renderer.xr.getController(0);\r\n    this._controller2 = renderer.xr.getController(1);\r\n    const mesh = this._createControllerMesh();\r\n    this._controller1.add(mesh);\r\n    this._controller2.add(mesh.clone());\r\n    this._user.add(this._controller1);\r\n    this._user.add(this._controller2);\r\n  }\r\n  _setControllersListeners() {\r\n    this._controller1.addEventListener('selectstart', event => {\r\n      this.handleGripsDown(event);\r\n    });\r\n    this._controller1.addEventListener('selectend', event => {\r\n      this.handleGripsUp(event);\r\n    });\r\n    this._controller2.addEventListener('selectstart', event => {\r\n      this.handleGripsDown(event);\r\n    });\r\n    this._controller2.addEventListener('selectend', event => {\r\n      this.handleGripsUp(event);\r\n    });\r\n    this._controller1.addEventListener('squeezestart', event => {\r\n      this.handleGripsDown(event);\r\n    });\r\n    this._controller1.addEventListener('squeezeend', event => {\r\n      this.handleGripsUp(event);\r\n    });\r\n    this._controller2.addEventListener('squeezestart', event => {\r\n      this.handleGripsDown(event);\r\n    });\r\n    this._controller2.addEventListener('squeezeend', event => {\r\n      this.handleGripsUp(event);\r\n    });\r\n  }\r\n  disable() {\r\n    if (!this._gfx) {\r\n      return;\r\n    }\r\n    const {\r\n      renderer,\r\n      camera\r\n    } = this._gfx;\r\n    if (!renderer) {\r\n      throw new Error('No renderer is available to toggle WebVR');\r\n    }\r\n\r\n    // nullify webxr callback for animation frame\r\n    renderer.setAnimationLoop(null);\r\n    const session = renderer.xr.getSession();\r\n    if (session) {\r\n      session.end();\r\n    }\r\n    renderer.xr.enabled = false;\r\n    // remove button of VR entering\r\n    if (this._button) {\r\n      this._button.style.display = 'none';\r\n    }\r\n    // restore fog param\r\n    settings.set('fog', this._mainFog);\r\n    this._unplugVRNodesFromScene(camera);\r\n\r\n    // make some Miew job\r\n    if (this._onToggle) {\r\n      this._onToggle(false);\r\n    }\r\n  }\r\n  _unplugVRNodesFromScene(camera) {\r\n    // restore common camera\r\n    if (this._mainCamera && camera) {\r\n      camera.copy(this._mainCamera);\r\n    }\r\n    // turn off webvr transformation\r\n    const root = this._molContainer.children[0];\r\n    if (root) {\r\n      this._gfx.scene.add(root);\r\n    }\r\n    this._molContainer.parent.remove(this._molContainer);\r\n    if (this._user) {\r\n      this._gfx.scene.remove(this._user);\r\n    }\r\n    // free scene nodes\r\n    this._molContainer = null;\r\n    this._user = null;\r\n    this._scalingPivot = null;\r\n    this._user = null;\r\n    this._controller1 = null;\r\n    this._controller2 = null;\r\n  }\r\n  _createControllerMesh() {\r\n    // visualize controllers with cylinders\r\n    const geometry = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.CylinderGeometry(0.04, 0.04, 0.3);\r\n    const material = new shaders_UberMaterial({\r\n      lights: false,\r\n      overrideColor: true\r\n    });\r\n    material.setUberOptions({\r\n      fixedColor: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(0x4444ff)\r\n    });\r\n    material.updateUniforms();\r\n    const cylinder = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh(geometry, material);\r\n    cylinder.rotateX(-Math.PI / 2);\r\n    return cylinder;\r\n  }\r\n  updateMoleculeScale() {\r\n    if (!this._controller1 || !this._controller2) {\r\n      return;\r\n    }\r\n    const self = this;\r\n    // update molecule scaling by controllers\r\n    if (self._pressedGripsCounter === 2) {\r\n      // recalc scaling pivot\r\n      gfxutils.getMiddlePoint(self._controller1.position, self._controller2.position, self._scalingPivot.position);\r\n      // recalc scaler\r\n      const dist = self._controller1.position.distanceTo(self._controller2.position);\r\n      const scaler = dist / self._distance;\r\n      self._scalingPivot.scale.multiplyScalar(scaler);\r\n      // save cur distance for next frame\r\n      self._distance = dist;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reposition molecule right before the camera.\r\n   * @note The proper way is to initiate headset in the place of common Miew's camera.\r\n   * But threejs limitations on setting new XRReferenceSpace enforce the molecule repositioning\r\n   * Hope, something will change.\r\n   */\r\n  moveSceneBehindHeadset() {\r\n    const gfx = this._gfx;\r\n    const {\r\n      camera\r\n    } = gfx;\r\n\r\n    // set container position in camera space\r\n    const container = this._molContainer;\r\n    container.matrix.identity();\r\n    container.position.set(0, 0, -4.0);\r\n    container.updateMatrix();\r\n\r\n    // update container world matrix\r\n    container.matrixWorld.multiplyMatrices(camera.matrixWorld, container.matrix);\r\n    // readd to scene\r\n    gfx.scene.addSavingWorldTransform(container);\r\n    if (this._onToggle) {\r\n      this._onToggle(true);\r\n    }\r\n  }\r\n  getCanvas() {\r\n    const gfx = this._gfx;\r\n    return gfx && gfx.renderer ? gfx.renderer.domElement : null;\r\n  }\r\n}\r\n;// CONCATENATED MODULE: ./src/gfx/shaders/ScreenQuadFromDistortionTex.frag\r\nconst ScreenQuadFromDistortionTex_namespaceObject = \"precision highp float;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nuniform sampler2D srcTex;\\r\\nuniform vec3 aberration;\\r\\n\\r\\nvoid main() {\\r\\n  vec2 uv = vUv * 2.0 - 1.0;\\r\\n  \\r\\n  gl_FragColor.r = texture2D(srcTex, 0.5 * (uv * aberration[0] + 1.0)).r;\\r\\n  gl_FragColor.g = texture2D(srcTex, 0.5 * (uv * aberration[1] + 1.0)).g;\\r\\n  gl_FragColor.b = texture2D(srcTex, 0.5 * (uv * aberration[2] + 1.0)).b;\\r\\n  gl_FragColor.a = 1.0;\\r\\n}\";\r\n;// CONCATENATED MODULE: ./src/Miew.js\r\n/* global PACKAGE_VERSION:false */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  selectors: Miew_selectors,\r\n  Atom: Miew_Atom,\r\n  Residue: Miew_Residue,\r\n  Chain: Miew_Chain,\r\n  Molecule: Miew_Molecule\r\n} = chem;\r\nconst EDIT_MODE = {\r\n  COMPLEX: 0,\r\n  COMPONENT: 1,\r\n  FRAGMENT: 2\r\n};\r\nconst LOADER_NOT_FOUND = 'Could not find suitable loader for this source';\r\nconst PARSER_NOT_FOUND = 'Could not find suitable parser for this source';\r\n\r\n// Color management changed a lot in threejs 152+ version.\r\n// To keep miew colors we disable the new color management system\r\nexternal_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.ColorManagement.enabled = false;\r\nconst {\r\n  createElement: Miew_createElement\r\n} = utils;\r\nfunction updateFogRange(fog, center, radius) {\r\n  fog.near = center - radius * settings.now.fogNearFactor;\r\n  fog.far = center + radius * settings.now.fogFarFactor;\r\n}\r\nfunction removeExtension(fileName) {\r\n  const dot = fileName.lastIndexOf('.');\r\n  if (dot >= 0) {\r\n    fileName = fileName.substr(0, dot);\r\n  }\r\n  return fileName;\r\n}\r\nfunction hasValidResidues(complex) {\r\n  let hasValidRes = false;\r\n  complex.forEachComponent(component => {\r\n    component.forEachResidue(residue => {\r\n      if (residue._isValid) {\r\n        hasValidRes = true;\r\n      }\r\n    });\r\n  });\r\n  return hasValidRes;\r\n}\r\nfunction reportProgress(log, action, percent) {\r\n  const TOTAL_PERCENT = 100;\r\n  if (percent !== undefined) {\r\n    log.debug(`${action}... ${Math.floor(percent * TOTAL_PERCENT)}%`);\r\n  } else {\r\n    log.debug(`${action}...`);\r\n  }\r\n}\r\nfunction chooseFogColor() {\r\n  return settings.now.fogColorEnable ? settings.now.fogColor : settings.now.bg.color;\r\n}\r\n\r\n// ////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Main 3D Molecular Viewer class.\r\n *\r\n * @param {object} opts - Viewer options.\r\n * @param {HTMLElement=} opts.container - DOM element that serves as a viewer container.\r\n * @param {object=} opts.settings - An object with properties to override default settings.\r\n * @param {string=} opts.settingsCookie='settings' - The name of the cookie to save current settings to.\r\n * @param {string=} opts.cookiePath='/' - The path option for cookies. Defaults to root.\r\n *\r\n * @exports Miew\r\n * @constructor\r\n */\r\nfunction Miew(opts) {\r\n  utils_EventDispatcher.call(this);\r\n  this._opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge({\r\n    settingsCookie: 'settings',\r\n    cookiePath: '/'\r\n  }, opts);\r\n  /** @type {?object} */\r\n  this._gfx = null;\r\n  /** @type {ViewInterpolator} */\r\n  this._interpolator = new ViewInterpolator();\r\n  /** @type {HTMLElement} */\r\n  this._container = opts && opts.container || document.getElementById('miew-container') || external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(document.getElementsByClassName('miew-container')) || document.body;\r\n  /** @type {HTMLElement} */\r\n  this._containerRoot = this._container;\r\n\r\n  /** @type {boolean} */\r\n  this._running = false;\r\n  /** @type {boolean} */\r\n  this._halting = false;\r\n  /** @type {boolean} */\r\n  this._building = false;\r\n  /** @type {boolean} */\r\n  this._needRender = true;\r\n  /** @type {boolean} */\r\n  this._hotKeysEnabled = true;\r\n\r\n  /** @type {Settings} */\r\n  this.settings = settings;\r\n  const log = logger;\r\n  log.console = false;\r\n  log.level =   false ? 0 : 'info';\r\n  /**\r\n   * @type {Logger}\r\n   * @example\r\n   * miew.logger.addEventListener('message', function _onLogMessage(evt) {\r\n   *   console.log(evt.message);\r\n   * });\r\n   */\r\n  this.logger = log;\r\n  this._cookies = new utils_Cookies(this);\r\n  this.restoreSettings();\r\n  if (opts && opts.settings) {\r\n    this.settings.set(opts.settings);\r\n  }\r\n\r\n  /** @type {?Spinner} */\r\n  this._spinner = null;\r\n  /** @type {JobHandle[]} */\r\n  this._loading = [];\r\n  /** @type {?number}\r\n   * @deprecated until Animation system refactoring\r\n   */\r\n  this._animInterval = null;\r\n\r\n  /** @type {object} */\r\n  this._visuals = {};\r\n  /** @type {?string} */\r\n  this._curVisualName = null;\r\n\r\n  /** @type {array} */\r\n  this._objects = [];\r\n\r\n  /** @type {object} */\r\n  this._sourceWindow = null;\r\n  this.reset();\r\n  if (this._repr) {\r\n    log.debug(`Selected ${this._repr.mode.name} mode with ${this._repr.colorer.name} colorer.`);\r\n  }\r\n  const self = this;\r\n  Miew.registeredPlugins.forEach(plugin => {\r\n    plugin.call(self);\r\n  });\r\n  this._initOnSettingsChanged();\r\n}\r\nMiew.prototype = Object.create(utils_EventDispatcher.prototype);\r\nMiew.prototype.constructor = Miew;\r\nMiew.prototype.getMaxRepresentationCount = function () {\r\n  return src_ComplexVisual.NUM_REPRESENTATION_BITS;\r\n};\r\n\r\n/**\r\n * Replace viewer container contents with a DOM element.\r\n * @param {HTMLElement} container - parent container.\r\n * @param {HTMLElement} element - DOM element to show.\r\n * @private\r\n */\r\nfunction _setContainerContents(container, element) {\r\n  const parent = container;\r\n  while (parent.firstChild) {\r\n    parent.removeChild(parent.firstChild);\r\n  }\r\n  parent.appendChild(element);\r\n}\r\n\r\n/**\r\n * Update Shadow Camera target position and frustum.\r\n * @private\r\n */\r\nMiew.prototype._updateShadowCamera = function () {\r\n  const shadowMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  const direction = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  const OBB = {\r\n    center: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(),\r\n    halfSize: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3()\r\n  };\r\n  return function () {\r\n    this._gfx.scene.updateMatrixWorld();\r\n    for (let i = 0; i < this._gfx.scene.children.length; i++) {\r\n      if (this._gfx.scene.children[i].type === 'DirectionalLight') {\r\n        const light = this._gfx.scene.children[i];\r\n        shadowMatrix.copy(light.shadow.camera.matrixWorldInverse);\r\n        this.getOBB(shadowMatrix, OBB);\r\n        direction.subVectors(light.target.position, light.position);\r\n        light.position.subVectors(OBB.center, direction);\r\n        light.target.position.copy(OBB.center);\r\n        light.shadow.bias = 0.09;\r\n        light.shadow.camera.bottom = -OBB.halfSize.y;\r\n        light.shadow.camera.top = OBB.halfSize.y;\r\n        light.shadow.camera.right = OBB.halfSize.x;\r\n        light.shadow.camera.left = -OBB.halfSize.x;\r\n        light.shadow.camera.near = direction.length() - OBB.halfSize.z;\r\n        light.shadow.camera.far = direction.length() + OBB.halfSize.z;\r\n        light.shadow.camera.updateProjectionMatrix();\r\n      }\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Initialize the viewer.\r\n * @returns {boolean} true on success.\r\n * @throws Forwards exception raised during initialization.\r\n * @see Miew#term\r\n */\r\nMiew.prototype.init = function () {\r\n  const container = this._container;\r\n  const elem = utils.createElement('div', {\r\n    class: 'miew-canvas'\r\n  });\r\n  _setContainerContents(container, elem);\r\n  this._container = elem;\r\n  const frag = document.createDocumentFragment();\r\n  frag.appendChild(this._msgMode = Miew_createElement('div', {\r\n    class: 'mode-message overlay'\r\n  }, Miew_createElement('p', {}, 'COMPONENT EDIT MODE')));\r\n  frag.appendChild(this._msgAtomInfo = Miew_createElement('div', {\r\n    class: 'atom-info overlay'\r\n  }, Miew_createElement('p', {}, '')));\r\n  container.appendChild(frag);\r\n  if (this._gfx !== null) {\r\n    // block double init\r\n    return true;\r\n  }\r\n  const self = this;\r\n  this._showMessage('Viewer is being initialized...');\r\n  try {\r\n    this._initGfx();\r\n    this._initListeners();\r\n    this._spinner = new Spinner({\r\n      lines: 13,\r\n      length: 28,\r\n      width: 14,\r\n      radius: 42,\r\n      color: '#fff',\r\n      zIndex: 700\r\n    });\r\n    const target = getTopWindow();\r\n    target.addEventListener('keydown', event => {\r\n      self._onKeyDown(event);\r\n    });\r\n    target.addEventListener('keyup', event => {\r\n      self._onKeyUp(event);\r\n    });\r\n    this._objectControls = new ui_ObjectControls(this._gfx.root, this._gfx.pivot, this._gfx.camera, this._gfx.renderer.domElement, () => self._getAltObj());\r\n    this._objectControls.addEventListener('change', e => {\r\n      if (settings.now.shadow.on) {\r\n        self._updateShadowCamera();\r\n      }\r\n      // route rotate, zoom, translate and translatePivot events to the external API\r\n      switch (e.action) {\r\n        case 'rotate':\r\n          self.dispatchEvent({\r\n            type: 'rotate',\r\n            quaternion: e.quaternion\r\n          });\r\n          break;\r\n        case 'zoom':\r\n          self.dispatchEvent({\r\n            type: 'zoom',\r\n            factor: e.factor\r\n          });\r\n          break;\r\n        default:\r\n          self.dispatchEvent({\r\n            type: e.action\r\n          });\r\n      }\r\n      self.dispatchEvent({\r\n        type: 'transform'\r\n      });\r\n      self._needRender = true;\r\n    });\r\n    const gfx = this._gfx;\r\n    this._picker = new ui_Picker(gfx.root, gfx.camera, gfx.renderer.domElement);\r\n    this._picker.addEventListener('newpick', event => {\r\n      self._onPick(event);\r\n    });\r\n    this._picker.addEventListener('dblclick', event => {\r\n      self.center(event);\r\n    });\r\n  } catch (error) {\r\n    if (error.name === 'TypeError' && error.message === 'Cannot read property \\'getExtension\\' of null') {\r\n      this._showMessage('Could not create WebGL context.');\r\n    } else if (error.message.search(/webgl/i) > 1) {\r\n      this._showMessage(error.message);\r\n    } else {\r\n      this._showMessage('Viewer initialization failed.');\r\n      throw error;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // automatically load default file\r\n  const file = this._opts && this._opts.load;\r\n  if (file) {\r\n    const type = this._opts && this._opts.type;\r\n    this.load(file, {\r\n      fileType: type,\r\n      keepRepsInfo: true\r\n    });\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Terminate the viewer completely.\r\n * @see Miew#init\r\n */\r\nMiew.prototype.term = function () {\r\n  this._showMessage('Viewer has been terminated.');\r\n  this._loading.forEach(job => {\r\n    job.cancel();\r\n  });\r\n  this._loading.length = 0;\r\n  this.halt();\r\n  this._gfx = null;\r\n};\r\n\r\n/**\r\n * Display message inside the viewer container, hiding WebGL canvas.\r\n * @param {string} msg - Message to show.\r\n * @private\r\n */\r\nMiew.prototype._showMessage = function (msg) {\r\n  const element = document.createElement('div');\r\n  element.setAttribute('class', 'miew-message');\r\n  element.appendChild(document.createElement('p')).appendChild(document.createTextNode(msg));\r\n  _setContainerContents(this._container, element);\r\n};\r\n\r\n/**\r\n * Display WebGL canvas inside the viewer container, hiding any message shown.\r\n * @private\r\n */\r\nMiew.prototype._showCanvas = function () {\r\n  _setContainerContents(this._container, this._gfx.renderer.domElement);\r\n};\r\nMiew.prototype._requestAnimationFrame = function (callback) {\r\n  const {\r\n    xr\r\n  } = this._gfx.renderer;\r\n  if (xr && xr.enabled) {\r\n    this._gfx.renderer.setAnimationLoop(callback);\r\n    return;\r\n  }\r\n  requestAnimationFrame(callback);\r\n};\r\nfunction arezSpritesSupported(context) {\r\n  return context.getExtension('EXT_frag_depth');\r\n}\r\nfunction isAOSupported(context) {\r\n  return context.getExtension('WEBGL_depth_texture') && context.getExtension('WEBGL_draw_buffers');\r\n}\r\n\r\n/**\r\n * Initialize WebGL and set 3D scene up.\r\n * @private\r\n */\r\nMiew.prototype._initGfx = function () {\r\n  const gfx = {\r\n    width: this._container.clientWidth,\r\n    height: this._container.clientHeight\r\n  };\r\n  const webGLOptions = {\r\n    preserveDrawingBuffer: true,\r\n    alpha: true,\r\n    premultipliedAlpha: false\r\n  };\r\n  if (settings.now.antialias) {\r\n    webGLOptions.antialias = true;\r\n  }\r\n  gfx.renderer2d = new gfx_CSS2DRenderer();\r\n  gfx.renderer = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGL1Renderer(webGLOptions);\r\n  gfx.renderer.shadowMap.enabled = settings.now.shadow.on;\r\n  gfx.renderer.shadowMap.autoUpdate = false;\r\n  gfx.renderer.shadowMap.type = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PCFShadowMap;\r\n  capabilities.init(gfx.renderer);\r\n\r\n  // z-sprites and ambient occlusion possibility\r\n  if (!arezSpritesSupported(gfx.renderer.getContext())) {\r\n    settings.set('zSprites', false);\r\n  }\r\n  if (!isAOSupported(gfx.renderer.getContext())) {\r\n    settings.set('ao', false);\r\n  }\r\n  gfx.renderer.autoClear = false;\r\n  gfx.renderer.setPixelRatio(window.devicePixelRatio);\r\n  gfx.renderer.setSize(gfx.width, gfx.height);\r\n  gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n  gfx.renderer.clearColor();\r\n  gfx.renderer2d.setSize(gfx.width, gfx.height);\r\n  gfx.camera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.PerspectiveCamera(settings.now.camFov, gfx.width / gfx.height, settings.now.camNear, settings.now.camFar);\r\n  gfx.camera.setMinimalFov(settings.now.camFov);\r\n  gfx.camera.position.z = settings.now.camDistance;\r\n  gfx.camera.updateProjectionMatrix();\r\n  gfx.camera.layers.set(gfxutils.LAYERS.DEFAULT);\r\n  gfx.camera.layers.enable(gfxutils.LAYERS.VOLUME);\r\n  gfx.camera.layers.enable(gfxutils.LAYERS.VOLUME_BFPLANE);\r\n  gfx.stereoCam = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.StereoCamera();\r\n  gfx.scene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n  const color = chooseFogColor();\r\n  gfx.scene.fog = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Fog(color, settings.now.camNear, settings.now.camFar);\r\n  gfx.root = new gfxutils.RCGroup();\r\n  gfx.scene.add(gfx.root);\r\n  gfx.pivot = new gfxutils.RCGroup();\r\n  gfx.root.add(gfx.pivot);\r\n  gfx.selectionScene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n  gfx.selectionRoot = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n  gfx.selectionRoot.matrixAutoUpdate = false;\r\n  gfx.selectionScene.add(gfx.selectionRoot);\r\n  gfx.selectionPivot = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Group();\r\n  gfx.selectionPivot.matrixAutoUpdate = false;\r\n  gfx.selectionRoot.add(gfx.selectionPivot);\r\n  const light12 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.DirectionalLight(0xffffff, 0.45);\r\n  light12.position.set(0, 0.414, 1);\r\n  light12.layers.enable(gfxutils.LAYERS.TRANSPARENT);\r\n  light12.castShadow = true;\r\n  light12.shadow.bias = 0.09;\r\n  light12.shadow.radius = settings.now.shadow.radius;\r\n  light12.shadow.camera.layers.set(gfxutils.LAYERS.SHADOWMAP);\r\n  const pixelRatio = gfx.renderer.getPixelRatio();\r\n  const shadowMapSize = Math.max(gfx.width, gfx.height) * pixelRatio;\r\n  light12.shadow.mapSize.width = shadowMapSize;\r\n  light12.shadow.mapSize.height = shadowMapSize;\r\n  light12.target.position.set(0.0, 0.0, 0.0);\r\n  gfx.scene.add(light12);\r\n  gfx.scene.add(light12.target);\r\n  const light3 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.AmbientLight(0x666666);\r\n  light3.layers.enable(gfxutils.LAYERS.TRANSPARENT);\r\n  gfx.scene.add(light3);\r\n\r\n  // add axes\r\n  gfx.axes = new gfx_Axes(gfx.root, gfx.camera);\r\n  const deviceWidth = gfx.width * pixelRatio;\r\n  const deviceHeight = gfx.height * pixelRatio;\r\n  gfx.offscreenBuf = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NearestFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: true\r\n  });\r\n  if (gfx.renderer.getContext().getExtension('WEBGL_depth_texture')) {\r\n    gfx.offscreenBuf.depthTexture = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.DepthTexture();\r\n    gfx.offscreenBuf.depthTexture.type = external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.UnsignedShortType;\r\n  }\r\n  gfx.offscreenBuf2 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: false\r\n  });\r\n  gfx.offscreenBuf3 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: false\r\n  });\r\n  gfx.offscreenBuf4 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: false\r\n  });\r\n  gfx.volBFTex = gfx.offscreenBuf3;\r\n  gfx.volFFTex = gfx.offscreenBuf4;\r\n  gfx.volWFFTex = gfx.offscreenBuf;\r\n\r\n  // use float textures for volume rendering if possible\r\n  if (gfx.renderer.getContext().getExtension('OES_texture_float')) {\r\n    gfx.offscreenBuf5 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n      minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n      type: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.FloatType,\r\n      depthBuffer: false\r\n    });\r\n    gfx.offscreenBuf6 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n      minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n      type: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.FloatType,\r\n      depthBuffer: false\r\n    });\r\n    gfx.offscreenBuf7 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n      minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n      format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n      type: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.FloatType,\r\n      depthBuffer: true\r\n    });\r\n    gfx.volBFTex = gfx.offscreenBuf5;\r\n    gfx.volFFTex = gfx.offscreenBuf6;\r\n    gfx.volWFFTex = gfx.offscreenBuf7;\r\n  } else {\r\n    this.logger.warn('Device doesn\\'t support OES_texture_float extension');\r\n  }\r\n  gfx.stereoBufL = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: false\r\n  });\r\n  gfx.stereoBufR = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(deviceWidth, deviceHeight, {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LinearFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat,\r\n    depthBuffer: false\r\n  });\r\n  this._gfx = gfx;\r\n  this._showCanvas();\r\n  this._embedWebXR(settings.now.stereo === 'WEBVR');\r\n  this._container.appendChild(gfx.renderer2d.getElement());\r\n\r\n  // add FPS counter\r\n  const stats = new gfx_Stats();\r\n  stats.domElement.style.position = 'absolute';\r\n  stats.domElement.style.right = '0';\r\n  stats.domElement.style.bottom = '0';\r\n  this._container.appendChild(stats.domElement);\r\n  this._fps = stats;\r\n  this._fps.show(settings.now.fps);\r\n};\r\n\r\n/**\r\n * Setup event listeners.\r\n * @private\r\n */\r\nMiew.prototype._initListeners = function () {\r\n  const self = this;\r\n  window.addEventListener('resize', () => {\r\n    self._onResize();\r\n  });\r\n};\r\n\r\n/**\r\n * Try to add numbers to the base name to make it unique among visuals\r\n * @private\r\n */\r\nMiew.prototype._makeUniqueVisualName = function (baseName) {\r\n  if (!baseName) {\r\n    return Math.random().toString();\r\n  }\r\n  let name = baseName;\r\n  let suffix = 1;\r\n  while (this._visuals.hasOwnProperty(name)) {\r\n    name = `${baseName} (${suffix.toString()})`;\r\n    suffix++;\r\n  }\r\n  return name;\r\n};\r\n\r\n/**\r\n * Add visual to the viewer\r\n * @private\r\n */\r\nMiew.prototype._addVisual = function (visual) {\r\n  if (!visual) {\r\n    return null;\r\n  }\r\n\r\n  // change visual name in order to make it unique\r\n  const name = this._makeUniqueVisualName(visual.name);\r\n  visual.name = name;\r\n  this._visuals[name] = visual;\r\n  this._gfx.pivot.add(visual);\r\n  if (visual.getSelectionGeo) {\r\n    this._gfx.selectionPivot.add(visual.getSelectionGeo());\r\n  }\r\n  return name;\r\n};\r\n\r\n/**\r\n * Remove visual from the viewer\r\n * @private\r\n */\r\nMiew.prototype._removeVisual = function (visual) {\r\n  let name = '';\r\n  let obj = null;\r\n  if (visual instanceof src_Visual) {\r\n    ({\r\n      name\r\n    } = visual);\r\n    obj = visual;\r\n  } else if (typeof visual === 'string') {\r\n    name = visual;\r\n    obj = this._visuals[name];\r\n  }\r\n  if (!obj || !this._visuals.hasOwnProperty(name) || this._visuals[name] !== obj) {\r\n    return;\r\n  }\r\n  if (name === this._curVisualName) {\r\n    this._curVisualName = undefined;\r\n  }\r\n  delete this._visuals[name];\r\n  obj.release(); // removes nodes from scene\r\n\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Call specified function for each Visual\r\n * @private\r\n */\r\nMiew.prototype._forEachVisual = function (callback) {\r\n  for (const name in this._visuals) {\r\n    if (this._visuals.hasOwnProperty(name)) {\r\n      callback(this._visuals[name]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Release (destroy) all visuals in the scene\r\n * @private\r\n */\r\nMiew.prototype._releaseAllVisuals = function () {\r\n  if (!this._gfx || !this._gfx.pivot) {\r\n    return;\r\n  }\r\n  for (const name in this._visuals) {\r\n    if (this._visuals.hasOwnProperty(name)) {\r\n      this._visuals[name].release();\r\n    }\r\n  }\r\n  this._visuals = {};\r\n};\r\n\r\n/**\r\n * Call specified function for each ComplexVisual\r\n * @private\r\n */\r\nMiew.prototype._forEachComplexVisual = function (callback) {\r\n  if (!this._gfx || !this._gfx.pivot) {\r\n    return;\r\n  }\r\n  for (const name in this._visuals) {\r\n    if (this._visuals.hasOwnProperty(name) && this._visuals[name] instanceof src_ComplexVisual) {\r\n      callback(this._visuals[name]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Returns ComplexVisual with specified name, or current (if not found), or any, or null\r\n * @private\r\n */\r\nMiew.prototype._getComplexVisual = function (name) {\r\n  name = name || this._curVisualName;\r\n  let any = null;\r\n  let named = null;\r\n  this._forEachComplexVisual(visual => {\r\n    any = visual;\r\n    if (visual.name === name) {\r\n      named = visual;\r\n    }\r\n  });\r\n  return named || any;\r\n};\r\n\r\n/**\r\n * Returns first found VolumeVisual (no more than one should be present actually)\r\n * @private\r\n */\r\nMiew.prototype._getVolumeVisual = function () {\r\n  let any = null;\r\n  this._forEachVisual(visual => {\r\n    if (visual instanceof src_VolumeVisual) {\r\n      any = visual;\r\n    }\r\n  });\r\n  return any;\r\n};\r\n\r\n/**\r\n * Returns ComplexVisual corresponding to specified complex\r\n * @private\r\n */\r\nMiew.prototype._getVisualForComplex = function (complex) {\r\n  if (!complex) {\r\n    return null;\r\n  }\r\n  let found = null;\r\n  this._forEachComplexVisual(visual => {\r\n    if (visual.getComplex() === complex) {\r\n      found = visual;\r\n    }\r\n  });\r\n  return found;\r\n};\r\n\r\n/*\r\n   * Get a list of names of visuals currently shown by the viewer\r\n   */\r\nMiew.prototype.getVisuals = function () {\r\n  return Object.keys(this._visuals);\r\n};\r\n\r\n/*\r\n   * Get complex visuals count\r\n   */\r\nMiew.prototype.getComplexVisualsCount = function () {\r\n  let count = 0;\r\n  this._forEachComplexVisual(() => count++);\r\n  return count;\r\n};\r\n\r\n/*\r\n   * Get current visual\r\n   */\r\nMiew.prototype.getCurrentVisual = function () {\r\n  return this._curVisualName;\r\n};\r\n\r\n/*\r\n   * Set current visual.\r\n   * All further operations will be performed on this visual (complex) if not stated otherwise.\r\n   */\r\nMiew.prototype.setCurrentVisual = function (name) {\r\n  if (!this._visuals[name]) {\r\n    return;\r\n  }\r\n  this._curVisualName = name;\r\n};\r\n\r\n/**\r\n * Run the viewer, start processing update/render frames periodically.\r\n * Has no effect if already running.\r\n * @see Miew#halt\r\n */\r\nMiew.prototype.run = function () {\r\n  if (!this._running) {\r\n    this._running = true;\r\n    if (this._halting) {\r\n      this._halting = false;\r\n      return;\r\n    }\r\n    this._objectControls.enable(true);\r\n    this._interpolator.resume();\r\n    this._requestAnimationFrame(() => this._onTick());\r\n  }\r\n};\r\n\r\n/**\r\n * Request the viewer to stop.\r\n * Will be processed during the next frame.\r\n * @see Miew#run\r\n */\r\nMiew.prototype.halt = function () {\r\n  if (this._running) {\r\n    this._discardComponentEdit();\r\n    this._discardFragmentEdit();\r\n    this._objectControls.enable(false);\r\n    this._interpolator.pause();\r\n    this._halting = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Request the viewer to start / stop responsing\r\n * on hot keys.\r\n * @param enabled - start (true) or stop (false) response on hot keys.\r\n */\r\nMiew.prototype.enableHotKeys = function (enabled) {\r\n  this._hotKeysEnabled = enabled;\r\n  this._objectControls.enableHotkeys(enabled);\r\n};\r\n\r\n/**\r\n * Callback which processes window resize.\r\n * @private\r\n */\r\nMiew.prototype._onResize = function () {\r\n  const gfx = this._gfx;\r\n  if (!gfx) {\r\n    return;\r\n  }\r\n  this._needRender = true;\r\n  gfx.width = this._container.clientWidth;\r\n  gfx.height = this._container.clientHeight;\r\n  gfx.camera.aspect = gfx.width / gfx.height;\r\n  gfx.camera.setMinimalFov(settings.now.camFov);\r\n  gfx.camera.updateProjectionMatrix();\r\n  gfx.renderer.setSize(gfx.width, gfx.height);\r\n  gfx.renderer2d.setSize(gfx.width, gfx.height);\r\n  this.dispatchEvent({\r\n    type: 'resize'\r\n  });\r\n};\r\nMiew.prototype._resizeOffscreenBuffers = function (width, height, stereo) {\r\n  const gfx = this._gfx;\r\n  stereo = stereo || 'NONE';\r\n  const isAnaglyph = stereo === 'NONE' || stereo === 'ANAGLYPH';\r\n  const multi = isAnaglyph ? 1 : 0.5;\r\n  gfx.offscreenBuf.setSize(multi * width, height);\r\n  gfx.offscreenBuf2.setSize(multi * width, height);\r\n  gfx.offscreenBuf3.setSize(multi * width, height);\r\n  gfx.offscreenBuf4.setSize(multi * width, height);\r\n  if (gfx.offscreenBuf5) {\r\n    gfx.offscreenBuf5.setSize(multi * width, height);\r\n  }\r\n  if (gfx.offscreenBuf6) {\r\n    gfx.offscreenBuf6.setSize(multi * width, height);\r\n  }\r\n  if (gfx.offscreenBuf7) {\r\n    gfx.offscreenBuf7.setSize(multi * width, height);\r\n  }\r\n  if (isAnaglyph) {\r\n    gfx.stereoBufL.setSize(width, height);\r\n    gfx.stereoBufR.setSize(width, height);\r\n  }\r\n};\r\n\r\n/**\r\n * Callback which processes update/render frames.\r\n * @private\r\n */\r\nMiew.prototype._onTick = function () {\r\n  if (this._halting) {\r\n    this._running = false;\r\n    this._halting = false;\r\n    return;\r\n  }\r\n  this._fps.update();\r\n  this._requestAnimationFrame(() => this._onTick());\r\n  this._onUpdate();\r\n  if (this._needRender) {\r\n    this._onRender();\r\n    this._needRender = !settings.now.suspendRender || settings.now.stereo === 'WEBVR';\r\n  }\r\n};\r\nMiew.prototype._getBSphereRadius = function () {\r\n  // calculate radius that would include all visuals\r\n  let radius = 0;\r\n  this._forEachVisual(visual => {\r\n    radius = Math.max(radius, visual.getBoundaries().boundingSphere.radius);\r\n  });\r\n  return radius * this._objectControls.getScale();\r\n};\r\n\r\n/**\r\n * Calculate bounding box that would include all visuals and being axis aligned in world defined by\r\n * transformation matrix: matrix\r\n * @param {Matrix4} matrix - transformation matrix.\r\n * @param {object}  OBB           - calculating bounding box.\r\n * @param {Vector3} OBB.center    - OBB center.\r\n * @param {Vector3} OBB.halfSize  - half magnitude of OBB sizes.\r\n */\r\nMiew.prototype.getOBB = function () {\r\n  const _bSphereForOneVisual = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Sphere();\r\n  const _bBoxForOneVisual = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n  const _bBox = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n  const _invMatrix = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  const _points = [new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(), new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3()];\r\n  return function (matrix, OBB) {\r\n    _bBox.makeEmpty();\r\n    this._forEachVisual(visual => {\r\n      _bSphereForOneVisual.copy(visual.getBoundaries().boundingSphere);\r\n      _bSphereForOneVisual.applyMatrix4(visual.matrixWorld).applyMatrix4(matrix);\r\n      _bSphereForOneVisual.getBoundingBox(_bBoxForOneVisual);\r\n      _bBox.union(_bBoxForOneVisual);\r\n    });\r\n    _bBox.getCenter(OBB.center);\r\n    _invMatrix.copy(matrix).invert();\r\n    OBB.center.applyMatrix4(_invMatrix);\r\n    const {\r\n      min\r\n    } = _bBox;\r\n    const {\r\n      max\r\n    } = _bBox;\r\n    _points[0].set(min.x, min.y, min.z); // 000\r\n    _points[1].set(max.x, min.y, min.z); // 100\r\n    _points[2].set(min.x, max.y, min.z); // 010\r\n    _points[3].set(min.x, min.y, max.z); // 001\r\n    for (let i = 0, l = _points.length; i < l; i++) {\r\n      _points[i].applyMatrix4(_invMatrix);\r\n    }\r\n    OBB.halfSize.set(Math.abs(_points[0].x - _points[1].x), Math.abs(_points[0].y - _points[2].y), Math.abs(_points[0].z - _points[3].z)).multiplyScalar(0.5);\r\n  };\r\n}();\r\nMiew.prototype._updateFog = function () {\r\n  const gfx = this._gfx;\r\n  if (settings.now.fog) {\r\n    if (typeof gfx.scene.fog === 'undefined' || gfx.scene.fog === null) {\r\n      const color = chooseFogColor();\r\n      gfx.scene.fog = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Fog(color);\r\n      this._setUberMaterialValues({\r\n        fog: settings.now.fog\r\n      });\r\n    }\r\n    updateFogRange(gfx.scene.fog, gfx.camera.position.z, this._getBSphereRadius());\r\n  } else if (gfx.scene.fog) {\r\n    gfx.scene.fog = undefined;\r\n    this._setUberMaterialValues({\r\n      fog: settings.now.fog\r\n    });\r\n  }\r\n};\r\nMiew.prototype._onUpdate = function () {\r\n  if (this.isScriptingCommandAvailable !== undefined && this.isScriptingCommandAvailable() && !this._building) {\r\n    this.callNextCmd();\r\n  }\r\n  this._objectControls.update();\r\n  this._forEachComplexVisual(visual => {\r\n    visual.getComplex().update();\r\n  });\r\n  if (settings.now.autobuild && !this._loading.length && !this._building && this._needRebuild()) {\r\n    this.rebuild();\r\n  }\r\n  if (!this._loading.length && !this._building && !this._needRebuild()) {\r\n    this._updateView();\r\n  }\r\n  this._updateFog();\r\n  if (this._gfx.renderer.xr.enabled) {\r\n    this.webVR.updateMoleculeScale();\r\n  }\r\n};\r\nMiew.prototype._onRender = function () {\r\n  const gfx = this._gfx;\r\n\r\n  // update all matrices\r\n  gfx.scene.updateMatrixWorld();\r\n  gfx.camera.updateMatrixWorld();\r\n  this._clipPlaneUpdateValue(this._getBSphereRadius());\r\n  this._fogFarUpdateValue();\r\n  gfx.renderer.setRenderTarget(null);\r\n  gfx.renderer.clear();\r\n  this._renderFrame(settings.now.stereo);\r\n};\r\nMiew.prototype._renderFrame = function () {\r\n  const _anaglyphMat = new shaders_AnaglyphMaterial();\r\n  const _size = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2();\r\n  return function (stereo) {\r\n    const gfx = this._gfx;\r\n    const {\r\n      renderer\r\n    } = gfx;\r\n    renderer.getSize(_size);\r\n    if (stereo !== 'NONE') {\r\n      gfx.camera.focus = gfx.camera.position.z; // set focus to the center of the object\r\n      gfx.stereoCam.aspect = 1.0;\r\n\r\n      // in anaglyph mode we render full-size image for each eye\r\n      // while in other stereo modes only half-size (two images on the screen)\r\n      if (stereo === 'ANAGLYPH') {\r\n        gfx.stereoCam.update(gfx.camera);\r\n      } else {\r\n        gfx.stereoCam.updateHalfSized(gfx.camera, settings.now.camFov);\r\n      }\r\n    }\r\n\r\n    // resize offscreen buffers to match the target\r\n    const pixelRatio = gfx.renderer.getPixelRatio();\r\n    this._resizeOffscreenBuffers(_size.width * pixelRatio, _size.height * pixelRatio, stereo);\r\n    this._renderShadowMap();\r\n    switch (stereo) {\r\n      case 'WEBVR':\r\n      case 'NONE':\r\n        this._renderScene(gfx.camera, false);\r\n        break;\r\n      case 'SIMPLE':\r\n      case 'DISTORTED':\r\n        renderer.setScissorTest(true);\r\n        renderer.setScissor(0, 0, _size.width / 2, _size.height);\r\n        renderer.setViewport(0, 0, _size.width / 2, _size.height);\r\n        this._renderScene(this._gfx.stereoCam.cameraL, stereo === 'DISTORTED');\r\n        renderer.setScissor(_size.width / 2, 0, _size.width / 2, _size.height);\r\n        renderer.setViewport(_size.width / 2, 0, _size.width / 2, _size.height);\r\n        this._renderScene(this._gfx.stereoCam.cameraR, stereo === 'DISTORTED');\r\n        renderer.setScissorTest(false);\r\n        break;\r\n      case 'ANAGLYPH':\r\n        this._renderScene(this._gfx.stereoCam.cameraL, false, gfx.stereoBufL);\r\n        this._renderScene(this._gfx.stereoCam.cameraR, false, gfx.stereoBufR);\r\n        renderer.setRenderTarget(null);\r\n        _anaglyphMat.uniforms.srcL.value = gfx.stereoBufL.texture;\r\n        _anaglyphMat.uniforms.srcR.value = gfx.stereoBufR.texture;\r\n        gfx.renderer.renderScreenQuad(_anaglyphMat);\r\n        break;\r\n      default:\r\n    }\r\n    gfx.renderer2d.render(gfx.scene, gfx.camera);\r\n    if (settings.now.axes && gfx.axes && !gfx.renderer.xr.enabled) {\r\n      gfx.axes.render(renderer);\r\n    }\r\n  };\r\n}();\r\nMiew.prototype._onBgColorChanged = function () {\r\n  const gfx = this._gfx;\r\n  const color = chooseFogColor();\r\n  if (gfx) {\r\n    if (gfx.scene.fog) {\r\n      gfx.scene.fog.color.set(color);\r\n    }\r\n    gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n  }\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._onFogColorChanged = function () {\r\n  const gfx = this._gfx;\r\n  const color = chooseFogColor();\r\n  if (gfx && gfx.scene.fog) {\r\n    gfx.scene.fog.color.set(color);\r\n  }\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._setUberMaterialValues = function (values) {\r\n  this._gfx.root.traverse(obj => {\r\n    if ((obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Mesh || obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.LineSegments || obj instanceof external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Line) && obj.material instanceof shaders_UberMaterial) {\r\n      obj.material.setValues(values);\r\n      obj.material.needsUpdate = true;\r\n    }\r\n  });\r\n};\r\nMiew.prototype._enableMRT = function (on, renderBuffer, textureBuffer) {\r\n  const gfx = this._gfx;\r\n  const gl = gfx.renderer.getContext();\r\n  const ext = gl.getExtension('WEBGL_draw_buffers');\r\n  const {\r\n    properties\r\n  } = gfx.renderer;\r\n  if (!on) {\r\n    ext.drawBuffersWEBGL([gl.COLOR_ATTACHMENT0, null]);\r\n    return;\r\n  }\r\n\r\n  // take extra texture from Texture Buffer\r\n  gfx.renderer.setRenderTarget(textureBuffer);\r\n  const tx8 = properties.get(textureBuffer.texture).__webglTexture;\r\n  gl.bindTexture(gl.TEXTURE_2D, tx8);\r\n\r\n  // take texture and framebuffer from renderbuffer\r\n  gfx.renderer.setRenderTarget(renderBuffer);\r\n  const fb = properties.get(renderBuffer).__webglFramebuffer;\r\n  const tx = properties.get(renderBuffer.texture).__webglTexture;\r\n\r\n  // set framebuffer\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n  fb.width = renderBuffer.width;\r\n  fb.height = renderBuffer.height;\r\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tx, 0);\r\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_2D, tx8, 0);\r\n\r\n  // mapping textures\r\n  ext.drawBuffersWEBGL([gl.COLOR_ATTACHMENT0, ext.COLOR_ATTACHMENT1_WEBGL]);\r\n};\r\nMiew.prototype._renderScene = function () {\r\n  return function (camera, distortion, target) {\r\n    distortion = distortion || false;\r\n    target = target || null;\r\n    const gfx = this._gfx;\r\n\r\n    // render to offscreen buffer\r\n    gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n    gfx.renderer.setRenderTarget(target);\r\n    gfx.renderer.clear();\r\n    if (gfx.renderer.xr.enabled) {\r\n      gfx.renderer.render(gfx.scene, camera);\r\n      return;\r\n    }\r\n\r\n    // clean buffer for normals texture\r\n    gfx.renderer.setClearColor(0x000000, 0.0);\r\n    gfx.renderer.setRenderTarget(gfx.offscreenBuf4);\r\n    gfx.renderer.clearColor();\r\n    gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n    gfx.renderer.setRenderTarget(gfx.offscreenBuf);\r\n    gfx.renderer.clear();\r\n    const bHaveComplexes = this._getComplexVisual() !== null;\r\n    const volumeVisual = this._getVolumeVisual();\r\n    const ssao = bHaveComplexes && settings.now.ao;\r\n    if (ssao) {\r\n      this._enableMRT(true, gfx.offscreenBuf, gfx.offscreenBuf4);\r\n    }\r\n    if (settings.now.transparency === 'prepass') {\r\n      this._renderWithPrepassTransparency(camera, gfx.offscreenBuf);\r\n    } else if (settings.now.transparency === 'standard') {\r\n      gfx.renderer.setRenderTarget(gfx.offscreenBuf);\r\n      gfx.renderer.render(gfx.scene, camera);\r\n    }\r\n    if (ssao) {\r\n      this._enableMRT(false, null, null);\r\n    }\r\n\r\n    // when fxaa we should get resulting image in temp off-screen buff2 for further postprocessing with fxaa filter\r\n    // otherwise we render to canvas\r\n    const outline = bHaveComplexes && settings.now.outline.on;\r\n    const fxaa = bHaveComplexes && settings.now.fxaa;\r\n    const volume = volumeVisual !== null && volumeVisual.getMesh().material != null;\r\n    let dstBuffer = ssao || outline || volume || fxaa || distortion ? gfx.offscreenBuf2 : target;\r\n    let srcBuffer = gfx.offscreenBuf;\r\n    if (ssao) {\r\n      this._performAO(srcBuffer, gfx.offscreenBuf4, gfx.offscreenBuf.depthTexture, dstBuffer, gfx.offscreenBuf3, gfx.offscreenBuf2);\r\n      if (!fxaa && !distortion && !volume && !outline) {\r\n        srcBuffer = dstBuffer;\r\n        dstBuffer = target;\r\n        gfx.renderer.setRenderTarget(dstBuffer);\r\n        gfx.renderer.renderScreenQuadFromTex(srcBuffer.texture, 1.0);\r\n      }\r\n    } else {\r\n      // just copy color buffer to dst buffer\r\n      gfx.renderer.setRenderTarget(dstBuffer);\r\n      gfx.renderer.renderScreenQuadFromTex(srcBuffer.texture, 1.0);\r\n    }\r\n\r\n    // outline\r\n    if (outline) {\r\n      srcBuffer = dstBuffer;\r\n      dstBuffer = volume || fxaa || distortion ? gfx.offscreenBuf3 : target;\r\n      if (srcBuffer != null) {\r\n        this._renderOutline(camera, gfx.offscreenBuf, srcBuffer, dstBuffer);\r\n      }\r\n    }\r\n\r\n    // render selected part with outline material\r\n    this._renderSelection(camera, gfx.offscreenBuf, dstBuffer);\r\n    if (volume) {\r\n      // copy current picture to the buffer that retains depth-data of the original molecule render\r\n      // so that volume renderer could use depth-test\r\n      gfx.renderer.setRenderTarget(gfx.offscreenBuf);\r\n      gfx.renderer.renderScreenQuadFromTex(dstBuffer.texture, 1.0);\r\n      dstBuffer = gfx.offscreenBuf;\r\n      this._renderVolume(volumeVisual, camera, dstBuffer, gfx.volBFTex, gfx.volFFTex, gfx.volWFFTex);\r\n\r\n      // if this is the last stage -- copy image to target\r\n      if (!fxaa && !distortion) {\r\n        gfx.renderer.setRenderTarget(target);\r\n        gfx.renderer.renderScreenQuadFromTex(dstBuffer.texture, 1.0);\r\n      }\r\n    }\r\n    srcBuffer = dstBuffer;\r\n    if (fxaa) {\r\n      dstBuffer = distortion ? gfx.offscreenBuf4 : target;\r\n      this._performFXAA(srcBuffer, dstBuffer);\r\n      srcBuffer = dstBuffer;\r\n    }\r\n    if (distortion) {\r\n      dstBuffer = target;\r\n      this._performDistortion(srcBuffer, dstBuffer, true);\r\n    }\r\n  };\r\n}();\r\nMiew.prototype._performDistortion = function () {\r\n  const _scene = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Scene();\r\n  const _camera = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.OrthographicCamera(-1.0, 1.0, 1.0, -1.0, -500, 1000);\r\n  const _material = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RawShaderMaterial({\r\n    uniforms: {\r\n      srcTex: {\r\n        type: 't',\r\n        value: null\r\n      },\r\n      aberration: {\r\n        type: 'fv3',\r\n        value: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(1.0)\r\n      }\r\n    },\r\n    vertexShader: ScreenQuad_namespaceObject,\r\n    fragmentShader: ScreenQuadFromDistortionTex_namespaceObject,\r\n    transparent: false,\r\n    depthTest: false,\r\n    depthWrite: false\r\n  });\r\n  const _geo = gfxutils.buildDistorionMesh(10, 10, settings.now.debug.stereoBarrel);\r\n  _scene.add(new meshes.Mesh(_geo, _material));\r\n  return function (srcBuffer, targetBuffer, mesh) {\r\n    this._gfx.renderer.setRenderTarget(targetBuffer);\r\n    this._gfx.renderer.clear();\r\n    if (mesh) {\r\n      _material.uniforms.srcTex.value = srcBuffer.texture;\r\n      _material.uniforms.aberration.value.set(0.995, 1.0, 1.01);\r\n      this._gfx.renderer.render(_scene, _camera);\r\n    } else {\r\n      this._gfx.renderer.renderScreenQuadFromTexWithDistortion(srcBuffer, settings.now.debug.stereoBarrel);\r\n    }\r\n  };\r\n}();\r\nMiew.prototype._renderOutline = function () {\r\n  const _outlineMaterial = new shaders_OutlineMaterial({\r\n    depth: true\r\n  });\r\n  return function (camera, srcDepthBuffer, srcColorBuffer, targetBuffer) {\r\n    const self = this;\r\n    const gfx = self._gfx;\r\n\r\n    // apply Sobel filter -- draw outline\r\n    _outlineMaterial.uniforms.srcTex.value = srcColorBuffer.texture;\r\n    _outlineMaterial.uniforms.srcDepthTex.value = srcDepthBuffer.depthTexture;\r\n    _outlineMaterial.uniforms.srcTexSize.value.set(srcDepthBuffer.width, srcDepthBuffer.height);\r\n    _outlineMaterial.uniforms.color.value = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Color(settings.now.outline.color);\r\n    _outlineMaterial.uniforms.threshold.value = settings.now.outline.threshold;\r\n    _outlineMaterial.uniforms.thickness.value = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector2(settings.now.outline.thickness, settings.now.outline.thickness);\r\n    gfx.renderer.setRenderTarget(targetBuffer);\r\n    gfx.renderer.renderScreenQuad(_outlineMaterial);\r\n  };\r\n}();\r\nMiew.prototype._renderShadowMap = function () {\r\n  const pars = {\r\n    minFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NearestFilter,\r\n    magFilter: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NearestFilter,\r\n    format: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.RGBAFormat\r\n  };\r\n  return function () {\r\n    if (!settings.now.shadow.on) {\r\n      return;\r\n    }\r\n    const gfx = this._gfx;\r\n    const currentRenderTarget = gfx.renderer.getRenderTarget();\r\n    const activeCubeFace = gfx.renderer.getActiveCubeFace();\r\n    const activeMipmapLevel = gfx.renderer.getActiveMipmapLevel();\r\n    const _state = gfx.renderer.state;\r\n\r\n    // Set GL state for depth map.\r\n    _state.setBlending(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.NoBlending);\r\n    _state.buffers.color.setClear(1, 1, 1, 1);\r\n    _state.buffers.depth.setTest(true);\r\n    _state.setScissorTest(false);\r\n    for (let i = 0; i < gfx.scene.children.length; i++) {\r\n      if (gfx.scene.children[i].type === 'DirectionalLight') {\r\n        const light = gfx.scene.children[i];\r\n        if (light.shadow.map == null) {\r\n          light.shadow.map = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.WebGLRenderTarget(light.shadow.mapSize.width, light.shadow.mapSize.height, pars);\r\n          light.shadow.camera.updateProjectionMatrix();\r\n        }\r\n        light.shadow.updateMatrices(light);\r\n        gfx.renderer.setRenderTarget(light.shadow.map);\r\n        gfx.renderer.clear();\r\n        gfx.renderer.render(gfx.scene, light.shadow.camera);\r\n      }\r\n    }\r\n    gfx.renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\r\n  };\r\n}();\r\n\r\n/**\r\n * Check if there is selection which must be rendered or not.\r\n * @private\r\n * @returns {boolean} true on existing selection to render\r\n */\r\nMiew.prototype._hasSelectionToRender = function () {\r\n  const selPivot = this._gfx.selectionPivot;\r\n  for (let i = 0; i < selPivot.children.length; i++) {\r\n    const selPivotChild = selPivot.children[i];\r\n    if (selPivotChild.children.length > 0) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\nMiew.prototype._renderSelection = function () {\r\n  const _outlineMaterial = new shaders_OutlineMaterial();\r\n  return function (camera, srcBuffer, targetBuffer) {\r\n    const self = this;\r\n    const gfx = self._gfx;\r\n\r\n    // clear offscreen buffer (leave z-buffer intact)\r\n    gfx.renderer.setClearColor('black', 0);\r\n\r\n    // render selection to offscreen buffer\r\n    gfx.renderer.setRenderTarget(srcBuffer);\r\n    gfx.renderer.clear(true, false, false);\r\n    if (self._hasSelectionToRender()) {\r\n      gfx.selectionRoot.matrix = gfx.root.matrix;\r\n      gfx.selectionPivot.matrix = gfx.pivot.matrix;\r\n      gfx.renderer.render(gfx.selectionScene, camera);\r\n    } else {\r\n      // just render something to force \"target clear\" operation to finish\r\n      gfx.renderer.renderDummyQuad();\r\n    }\r\n\r\n    // overlay to screen\r\n    gfx.renderer.setRenderTarget(targetBuffer);\r\n    gfx.renderer.renderScreenQuadFromTex(srcBuffer.texture, 0.6);\r\n\r\n    // apply Sobel filter -- draw outline\r\n    _outlineMaterial.uniforms.srcTex.value = srcBuffer.texture;\r\n    _outlineMaterial.uniforms.srcTexSize.value.set(srcBuffer.width, srcBuffer.height);\r\n    gfx.renderer.renderScreenQuad(_outlineMaterial);\r\n  };\r\n}();\r\nMiew.prototype._checkVolumeRenderingSupport = function (renderTarget) {\r\n  if (!renderTarget) {\r\n    return false;\r\n  }\r\n  const gfx = this._gfx;\r\n  const oldRT = gfx.renderer.getRenderTarget();\r\n  gfx.renderer.setRenderTarget(renderTarget);\r\n  const context = gfx.renderer.getContext();\r\n  const result = context.checkFramebufferStatus(context.FRAMEBUFFER);\r\n  gfx.renderer.setRenderTarget(oldRT);\r\n  if (result !== context.FRAMEBUFFER_COMPLETE) {\r\n    // floatFrameBufferWarning = ;\r\n    this.logger.warn('Device doesn\\'t support electron density rendering');\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\nMiew.prototype._renderVolume = function () {\r\n  const volumeBFMat = new shaders_VolumeMaterial.BackFacePosMaterial();\r\n  const volumeFFMat = new shaders_VolumeMaterial.FrontFacePosMaterial();\r\n  const cubeOffsetMat = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4().makeTranslation(0.5, 0.5, 0.5);\r\n  const world2colorMat = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n  let volumeRenderingSupported;\r\n  return function (volumeVisual, camera, dstBuf, tmpBuf1, tmpBuf2, tmpBuf3) {\r\n    const gfx = this._gfx;\r\n    if (typeof volumeRenderingSupported === 'undefined') {\r\n      volumeRenderingSupported = this._checkVolumeRenderingSupport(tmpBuf1);\r\n    }\r\n    if (!volumeRenderingSupported) {\r\n      return;\r\n    }\r\n    const mesh = volumeVisual.getMesh();\r\n    mesh.rebuild(gfx.camera);\r\n\r\n    // use main camera to prepare special textures to be used by volumetric rendering\r\n    // these textures have the size of the window and are stored in offscreen buffers\r\n    gfx.renderer.setClearColor('black', 0);\r\n    gfx.renderer.setRenderTarget(tmpBuf1);\r\n    gfx.renderer.clear();\r\n    gfx.renderer.setRenderTarget(tmpBuf2);\r\n    gfx.renderer.clear();\r\n    gfx.renderer.setRenderTarget(tmpBuf3);\r\n    gfx.renderer.clear();\r\n    gfx.renderer.setRenderTarget(tmpBuf1);\r\n    // draw plane with its own material, because it differs slightly from volumeBFMat\r\n    camera.layers.set(gfxutils.LAYERS.VOLUME_BFPLANE);\r\n    gfx.renderer.render(gfx.scene, camera);\r\n    camera.layers.set(gfxutils.LAYERS.VOLUME);\r\n    gfx.scene.overrideMaterial = volumeBFMat;\r\n    gfx.renderer.render(gfx.scene, camera);\r\n    gfx.renderer.setRenderTarget(tmpBuf2);\r\n    camera.layers.set(gfxutils.LAYERS.VOLUME);\r\n    gfx.scene.overrideMaterial = volumeFFMat;\r\n    gfx.renderer.render(gfx.scene, camera);\r\n    gfx.scene.overrideMaterial = null;\r\n    camera.layers.set(gfxutils.LAYERS.DEFAULT);\r\n\r\n    // prepare texture that contains molecule positions\r\n    world2colorMat.copy(mesh.matrixWorld).invert();\r\n    shaders_UberMaterial.prototype.uberOptions.world2colorMatrix.multiplyMatrices(cubeOffsetMat, world2colorMat);\r\n    camera.layers.set(gfxutils.LAYERS.COLOR_FROM_POSITION);\r\n    gfx.renderer.setRenderTarget(tmpBuf3);\r\n    gfx.renderer.render(gfx.scene, camera);\r\n\r\n    // render volume\r\n    const vm = mesh.material;\r\n    vm.uniforms._BFRight.value = tmpBuf1.texture;\r\n    vm.uniforms._FFRight.value = tmpBuf2.texture;\r\n    vm.uniforms._WFFRight.value = tmpBuf3.texture;\r\n    camera.layers.set(gfxutils.LAYERS.VOLUME);\r\n    gfx.renderer.setRenderTarget(dstBuf);\r\n    gfx.renderer.render(gfx.scene, camera);\r\n    camera.layers.set(gfxutils.LAYERS.DEFAULT);\r\n  };\r\n}();\r\n\r\n/*  Render scene with 'ZPrepass transparency Effect'\r\n   * Idea: transparent objects are rendered in two passes. The first one writes result only into depth buffer.\r\n   * The second pass reads depth buffer and writes only to color buffer. The method results in\r\n   * correct image of front part of the semi-transparent objects, but we can see only front transparent objects\r\n   * and opaque objects inside, there is no transparent objects inside.\r\n   * Notes: 1. Opaque objects should be rendered strictly before semi-transparent ones.\r\n   * 2. Realization doesn't use camera layers because scene traversing is used for material changes and\r\n   * we can use it to select needed meshes and don't complicate meshes builders with layers\r\n  */\r\nMiew.prototype._renderWithPrepassTransparency = function () {\r\n  return function (camera, targetBuffer) {\r\n    const gfx = this._gfx;\r\n    gfx.renderer.setRenderTarget(targetBuffer);\r\n\r\n    // opaque objects\r\n    camera.layers.set(gfxutils.LAYERS.DEFAULT);\r\n    gfx.renderer.render(gfx.scene, camera);\r\n\r\n    // transparent objects z prepass\r\n    camera.layers.set(gfxutils.LAYERS.PREPASS_TRANSPARENT);\r\n    gfx.renderer.getContext().colorMask(false, false, false, false); // don't update color buffer\r\n    gfx.renderer.render(gfx.scene, camera);\r\n    gfx.renderer.getContext().colorMask(true, true, true, true); // update color buffer\r\n\r\n    // transparent objects color pass\r\n    camera.layers.set(gfxutils.LAYERS.TRANSPARENT);\r\n    gfx.renderer.render(gfx.scene, camera);\r\n\r\n    // restore default layer\r\n    camera.layers.set(gfxutils.LAYERS.DEFAULT);\r\n  };\r\n}();\r\nMiew.prototype._performFXAA = function () {\r\n  const _fxaaMaterial = new shaders_FXAAMaterial();\r\n  return function (srcBuffer, targetBuffer) {\r\n    if (typeof srcBuffer === 'undefined' || typeof targetBuffer === 'undefined') {\r\n      return;\r\n    }\r\n    const gfx = this._gfx;\r\n\r\n    // clear canvas\r\n    gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n    gfx.renderer.setRenderTarget(targetBuffer);\r\n    gfx.renderer.clear();\r\n\r\n    // do fxaa processing of offscreen buff2\r\n    _fxaaMaterial.uniforms.srcTex.value = srcBuffer.texture;\r\n    _fxaaMaterial.uniforms.srcTexelSize.value.set(1.0 / srcBuffer.width, 1.0 / srcBuffer.height);\r\n    _fxaaMaterial.uniforms.bgColor.value.set(settings.now.bg.color);\r\n    if (_fxaaMaterial.bgTransparent !== settings.now.bg.transparent) {\r\n      _fxaaMaterial.setValues({\r\n        bgTransparent: settings.now.bg.transparent\r\n      });\r\n      _fxaaMaterial.needsUpdate = true;\r\n    }\r\n    gfx.renderer.renderScreenQuad(_fxaaMaterial);\r\n  };\r\n}();\r\nMiew.prototype._performAO = function () {\r\n  const _aoMaterial = new shaders_AOMaterial();\r\n  const _horBlurMaterial = new shaders_AOHorBlurMaterial();\r\n  const _vertBlurMaterial = new shaders_AOVertBlurWithBlendMaterial();\r\n  const _scale = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (srcColorBuffer, normalBuffer, srcDepthTexture, targetBuffer, tempBuffer, tempBuffer1) {\r\n    if (!srcColorBuffer || !normalBuffer || !srcDepthTexture || !targetBuffer || !tempBuffer || !tempBuffer1) {\r\n      return;\r\n    }\r\n    const gfx = this._gfx;\r\n    const tanHalfFOV = Math.tan(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.DEG2RAD * 0.5 * gfx.camera.fov);\r\n    _aoMaterial.uniforms.diffuseTexture.value = srcColorBuffer.texture;\r\n    _aoMaterial.uniforms.depthTexture.value = srcDepthTexture;\r\n    _aoMaterial.uniforms.normalTexture.value = normalBuffer.texture;\r\n    _aoMaterial.uniforms.srcTexelSize.value.set(1.0 / srcColorBuffer.width, 1.0 / srcColorBuffer.height);\r\n    _aoMaterial.uniforms.camNearFar.value.set(gfx.camera.near, gfx.camera.far);\r\n    _aoMaterial.uniforms.projMatrix.value = gfx.camera.projectionMatrix;\r\n    _aoMaterial.uniforms.aspectRatio.value = gfx.camera.aspect;\r\n    _aoMaterial.uniforms.tanHalfFOV.value = tanHalfFOV;\r\n    gfx.root.matrix.extractScale(_scale);\r\n    _aoMaterial.uniforms.kernelRadius.value = settings.now.debug.ssaoKernelRadius * _scale.x;\r\n    _aoMaterial.uniforms.depthThreshold.value = 2.0 * this._getBSphereRadius(); // diameter\r\n    _aoMaterial.uniforms.factor.value = settings.now.debug.ssaoFactor;\r\n    // N: should be tempBuffer1 for proper use of buffers (see buffers using outside the function)\r\n    gfx.renderer.setRenderTarget(tempBuffer1);\r\n    gfx.renderer.renderScreenQuad(_aoMaterial);\r\n    _horBlurMaterial.uniforms.aoMap.value = tempBuffer1.texture;\r\n    _horBlurMaterial.uniforms.srcTexelSize.value.set(1.0 / tempBuffer1.width, 1.0 / tempBuffer1.height);\r\n    _horBlurMaterial.uniforms.depthTexture.value = srcDepthTexture;\r\n    gfx.renderer.setRenderTarget(tempBuffer);\r\n    gfx.renderer.renderScreenQuad(_horBlurMaterial);\r\n    _vertBlurMaterial.uniforms.aoMap.value = tempBuffer.texture;\r\n    _vertBlurMaterial.uniforms.diffuseTexture.value = srcColorBuffer.texture;\r\n    _vertBlurMaterial.uniforms.srcTexelSize.value.set(1.0 / tempBuffer.width, 1.0 / tempBuffer.height);\r\n    _vertBlurMaterial.uniforms.depthTexture.value = srcDepthTexture;\r\n    _vertBlurMaterial.uniforms.projMatrix.value = gfx.camera.projectionMatrix;\r\n    _vertBlurMaterial.uniforms.aspectRatio.value = gfx.camera.aspect;\r\n    _vertBlurMaterial.uniforms.tanHalfFOV.value = tanHalfFOV;\r\n    const {\r\n      fog\r\n    } = gfx.scene;\r\n    if (fog) {\r\n      _vertBlurMaterial.uniforms.fogNearFar.value.set(fog.near, fog.far);\r\n      _vertBlurMaterial.uniforms.fogColor.value.set(fog.color.r, fog.color.g, fog.color.b, settings.now.fogAlpha);\r\n    }\r\n    if (_vertBlurMaterial.useFog !== settings.now.fog || _vertBlurMaterial.fogTransparent !== settings.now.bg.transparent) {\r\n      _vertBlurMaterial.setValues({\r\n        useFog: settings.now.fog,\r\n        fogTransparent: settings.now.bg.transparent\r\n      });\r\n      _vertBlurMaterial.needsUpdate = true;\r\n    }\r\n    gfx.renderer.setRenderTarget(targetBuffer);\r\n    gfx.renderer.renderScreenQuad(_vertBlurMaterial);\r\n  };\r\n}();\r\n\r\n/**\r\n * Reset the viewer, unload molecules.\r\n * @param {boolean=} keepReps - Keep representations while resetting viewer state.\r\n */\r\nMiew.prototype.reset = function /* keepReps */\r\n() {\r\n  if (this._picker) {\r\n    this._picker.reset();\r\n  }\r\n  this._lastPick = null;\r\n  this._releaseAllVisuals();\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this._resetObjects();\r\n  if (this._gfx) {\r\n    gfxutils.clearTree(this._gfx.pivot);\r\n    this._gfx.renderer2d.reset();\r\n  }\r\n  this.setNeedRender();\r\n};\r\nMiew.prototype._resetScene = function () {\r\n  this._objectControls.reset();\r\n  this._objectControls.allowTranslation(true);\r\n  this._objectControls.allowAltObjFreeRotation(true);\r\n  this.resetReps();\r\n  this.resetPivot();\r\n  this.rebuildAll();\r\n};\r\nMiew.prototype.resetView = function () {\r\n  // reset controls\r\n  if (this._picker) {\r\n    this._picker.reset();\r\n  }\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this._resetScene();\r\n\r\n  // reset selection\r\n  this._forEachComplexVisual(visual => {\r\n    visual.updateSelectionMask({});\r\n    visual.rebuildSelectionGeometry();\r\n  });\r\n};\r\nMiew.prototype._export = function (format) {\r\n  const TheExporter = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.exporters.find({\r\n    format\r\n  }));\r\n  if (!TheExporter) {\r\n    this.logger.error('Could not find suitable exporter for this source');\r\n    return Promise.reject(new Error('Could not find suitable exporter for this source'));\r\n  }\r\n  this.dispatchEvent({\r\n    type: 'exporting'\r\n  });\r\n  if (this._visuals[this._curVisualName] instanceof src_ComplexVisual) {\r\n    let dataSource = null;\r\n    if (TheExporter.SourceClass === src_ComplexVisual) {\r\n      dataSource = this._visuals[this._curVisualName];\r\n    } else if (TheExporter.SourceClass === chem_Complex) {\r\n      dataSource = this._visuals[this._curVisualName]._complex;\r\n    }\r\n    const exporter = new TheExporter(dataSource, {\r\n      miewVersion: Miew.VERSION\r\n    });\r\n    return exporter.export().then(data => data);\r\n  }\r\n  if (this._visuals[this._curVisualName] instanceof src_VolumeVisual) {\r\n    return Promise.reject(new Error('Sorry, exporter for volume data not implemented yet'));\r\n  }\r\n  return Promise.reject(new Error('Unexpected format of data'));\r\n};\r\nconst rePdbId = /^(?:(pdb|cif|ccp4|dsn6):\\s*)?(\\d[a-z\\d]{3})$/i;\r\nconst rePubchem = /^(?:pc|pubchem):\\s*([a-z]+)$/i;\r\nconst reUrlScheme = /^([a-z][a-z\\d\\-+.]*):/i;\r\nfunction resolveSourceShortcut(source, opts) {\r\n  if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(source)) {\r\n    return source;\r\n  }\r\n\r\n  // e.g. \"cif:1CRN\"\r\n  const matchesPdbId = rePdbId.exec(source);\r\n  if (matchesPdbId) {\r\n    let [, format = 'pdb', id] = matchesPdbId;\r\n    format = format.toLowerCase();\r\n    id = id.toUpperCase();\r\n    switch (format) {\r\n      case 'pdb':\r\n        source = `https://files.rcsb.org/download/${id}.pdb`;\r\n        break;\r\n      case 'cif':\r\n        source = `https://files.rcsb.org/download/${id}.cif`;\r\n        break;\r\n      case 'ccp4':\r\n        source = `https://www.ebi.ac.uk/pdbe/coordinates/files/${id.toLowerCase()}.ccp4`;\r\n        break;\r\n      case 'dsn6':\r\n        source = `https://edmaps.rcsb.org/maps/${id.toLowerCase()}_2fofc.dsn6`;\r\n        break;\r\n      default:\r\n        throw new Error('Unexpected data format shortcut');\r\n    }\r\n    opts.fileType = format;\r\n    opts.fileName = `${id}.${format}`;\r\n    opts.sourceType = 'url';\r\n    return source;\r\n  }\r\n\r\n  // e.g. \"pc:aspirin\"\r\n  const matchesPubchem = rePubchem.exec(source);\r\n  if (matchesPubchem) {\r\n    const compound = matchesPubchem[1].toLowerCase();\r\n    source = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/${compound}/JSON?record_type=3d`;\r\n    opts.fileType = 'pubchem';\r\n    opts.fileName = `${compound}.json`;\r\n    opts.sourceType = 'url';\r\n    return source;\r\n  }\r\n\r\n  // otherwise is should be an URL\r\n  if (opts.sourceType === 'url' || opts.sourceType === undefined) {\r\n    opts.sourceType = 'url';\r\n\r\n    // e.g. \"./data/1CRN.pdb\"\r\n    if (!reUrlScheme.test(source)) {\r\n      source = utils.resolveURL(source);\r\n    }\r\n  }\r\n  return source;\r\n}\r\nfunction updateBinaryMode(opts) {\r\n  let {\r\n    binary\r\n  } = opts;\r\n\r\n  // detect by format\r\n  if (opts.fileType !== undefined) {\r\n    const TheParser = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.parsers.find({\r\n      format: opts.fileType\r\n    }));\r\n    if (TheParser) {\r\n      binary = TheParser.binary || false;\r\n    } else {\r\n      throw new Error('Could not find suitable parser for this format');\r\n    }\r\n  }\r\n\r\n  // detect by file extension\r\n  if (binary === undefined && opts.fileExt !== undefined) {\r\n    const TheParser = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.parsers.find({\r\n      ext: opts.fileExt\r\n    }));\r\n    if (TheParser) {\r\n      binary = TheParser.binary || false;\r\n    }\r\n  }\r\n\r\n  // temporary workaround for animation\r\n  if (opts.fileExt !== undefined && opts.fileExt.toLowerCase() === '.man') {\r\n    opts.binary = true;\r\n    opts.animation = true; // who cares?\r\n  }\r\n\r\n  // update if detected\r\n  if (binary !== undefined) {\r\n    if (opts.binary !== undefined && opts.binary !== binary) {\r\n      opts.context.logger.warn('Overriding incorrect binary mode');\r\n    }\r\n  }\r\n  opts.binary = binary || false;\r\n}\r\nfunction _fetchData(source, opts, job) {\r\n  return new Promise(resolve => {\r\n    if (job.shouldCancel()) {\r\n      throw new Error('Operation cancelled');\r\n    }\r\n    job.notify({\r\n      type: 'fetching'\r\n    });\r\n\r\n    // allow for source shortcuts\r\n    source = resolveSourceShortcut(source, opts);\r\n\r\n    // detect a proper loader\r\n    const TheLoader = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.loaders.find({\r\n      type: opts.sourceType,\r\n      source\r\n    }));\r\n    if (!TheLoader) {\r\n      throw new Error(LOADER_NOT_FOUND);\r\n    }\r\n\r\n    // split file name\r\n    const fileName = opts.fileName || TheLoader.extractName(source);\r\n    if (fileName) {\r\n      const [name, fileExt] = utils.splitFileName(fileName);\r\n      external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].defaults(opts, {\r\n        name,\r\n        fileExt,\r\n        fileName\r\n      });\r\n    }\r\n\r\n    // should it be text or binary?\r\n    updateBinaryMode(opts);\r\n\r\n    // FIXME: All new settings retrieved from server are applied after the loading is complete. However, we need some\r\n    // flags to alter the loading process itself. Here we apply them in advance. Dirty hack. Kill the server, remove\r\n    // all hacks and everybody's happy.\r\n    let newOptions = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(opts, 'preset.expression');\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(newOptions)) {\r\n      newOptions = JSON.parse(newOptions);\r\n      if (newOptions && newOptions.settings) {\r\n        const keys = ['singleUnit'];\r\n        for (let keyIndex = 0, keyCount = keys.length; keyIndex < keyCount; ++keyIndex) {\r\n          const key = keys[keyIndex];\r\n          const value = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(newOptions.settings, key);\r\n          if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(value)) {\r\n            settings.set(key, value);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // create a loader\r\n    const loader = new TheLoader(source, opts);\r\n    loader.context = opts.context;\r\n    job.addEventListener('cancel', () => loader.abort());\r\n    loader.addEventListener('progress', event => {\r\n      if (event.lengthComputable && event.total > 0) {\r\n        reportProgress(loader.logger, 'Fetching', event.loaded / event.total);\r\n      } else {\r\n        reportProgress(loader.logger, 'Fetching');\r\n      }\r\n    });\r\n    console.time('fetch');\r\n    const promise = loader.load().then(data => {\r\n      console.timeEnd('fetch');\r\n      opts.context.logger.info('Fetching finished');\r\n      job.notify({\r\n        type: 'fetchingDone',\r\n        data\r\n      });\r\n      return data;\r\n    }).catch(error => {\r\n      console.timeEnd('fetch');\r\n      opts.context.logger.debug(error.message);\r\n      if (error.stack) {\r\n        opts.context.logger.debug(error.stack);\r\n      }\r\n      opts.context.logger.error('Fetching failed');\r\n      job.notify({\r\n        type: 'fetchingDone',\r\n        error\r\n      });\r\n      throw error;\r\n    });\r\n    resolve(promise);\r\n  });\r\n}\r\nfunction _parseData(data, opts, job) {\r\n  if (job.shouldCancel()) {\r\n    return Promise.reject(new Error('Operation cancelled'));\r\n  }\r\n  job.notify({\r\n    type: 'parsing'\r\n  });\r\n  const TheParser = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.parsers.find({\r\n    format: opts.fileType,\r\n    ext: opts.fileExt,\r\n    data\r\n  }));\r\n  if (!TheParser) {\r\n    return Promise.reject(new Error('Could not find suitable parser'));\r\n  }\r\n  const parser = new TheParser(data, opts);\r\n  parser.context = opts.context;\r\n  job.addEventListener('cancel', () => parser.abort());\r\n  console.time('parse');\r\n  return parser.parse().then(dataSet => {\r\n    console.timeEnd('parse');\r\n    job.notify({\r\n      type: 'parsingDone',\r\n      data: dataSet\r\n    });\r\n    return dataSet;\r\n  }).catch(error => {\r\n    console.timeEnd('parse');\r\n    opts.error = error;\r\n    opts.context.logger.debug(error.message);\r\n    if (error.stack) {\r\n      opts.context.logger.debug(error.stack);\r\n    }\r\n    opts.context.logger.error('Parsing failed');\r\n    job.notify({\r\n      type: 'parsingDone',\r\n      error\r\n    });\r\n    throw error;\r\n  });\r\n}\r\n\r\n/**\r\n * Load molecule asynchronously.\r\n * @param {string|File} source - Molecule source to load (e.g. PDB ID, URL or File object).\r\n * @param {object=} opts - Options.\r\n * @param {string=} opts.sourceType - Data source type (e.g. 'url', 'file').\r\n * @param {string=} opts.fileType - Data contents type (e.g. 'pdb', 'cml').\r\n * @param {string=} opts.mdFile - .nc file path.\r\n * @param {boolean=} opts.keepRepsInfo - prevent reset of object and reps information.\r\n * @returns {Promise} name of the visual that was added to the viewer\r\n */\r\nMiew.prototype.load = function (source, opts) {\r\n  opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge({}, opts, {\r\n    context: this\r\n  });\r\n\r\n  // for a single-file scenario\r\n  if (!this.settings.now.use.multiFile) {\r\n    // abort all loaders in progress\r\n    if (this._loading.length) {\r\n      this._loading.forEach(job => {\r\n        job.cancel();\r\n      });\r\n      this._loading.length = 0;\r\n    }\r\n\r\n    // reset\r\n    if (!opts.animation) {\r\n      // FIXME: sometimes it is set AFTERWARDS!\r\n      this.reset(true);\r\n    }\r\n  }\r\n  this._interpolator.reset();\r\n  this.dispatchEvent({\r\n    type: 'loading',\r\n    options: opts,\r\n    source\r\n  });\r\n  const job = new JobHandle();\r\n  this._loading.push(job);\r\n  job.addEventListener('notification', e => {\r\n    this.dispatchEvent(e.slaveEvent);\r\n  });\r\n  this._spinner.spin(this._container);\r\n  const onLoadEnd = anything => {\r\n    const jobIndex = this._loading.indexOf(job);\r\n    if (jobIndex !== -1) {\r\n      this._loading.splice(jobIndex, 1);\r\n    }\r\n    this._spinner.stop();\r\n    this._refreshTitle();\r\n    job.notify({\r\n      type: 'loadingDone',\r\n      anything\r\n    });\r\n    return anything;\r\n  };\r\n  return _fetchData(source, opts, job).then(data => _parseData(data, opts, job)).then(object => {\r\n    const name = this._onLoad(object, opts);\r\n    return onLoadEnd(name);\r\n  }).catch(err => {\r\n    this.logger.error('Could not load data');\r\n    this.logger.debug(err);\r\n    throw onLoadEnd(err);\r\n  });\r\n};\r\n\r\n/**\r\n * Unload molecule (delete corresponding visual).\r\n * @param {string=} name - name of the visual\r\n */\r\nMiew.prototype.unload = function (name) {\r\n  this._removeVisual(name || this.getCurrentVisual());\r\n  this.resetPivot();\r\n  if (settings.now.shadow.on) {\r\n    this._updateShadowCamera();\r\n  }\r\n};\r\n\r\n/**\r\n * Start new animation. Now is broken.\r\n * @param fileData - new data to animate\r\n * @private\r\n * @deprecated until animation system refactoring.\r\n */\r\nMiew.prototype._startAnimation = function (fileData) {\r\n  this._stopAnimation();\r\n  const self = this;\r\n  const visual = this._getComplexVisual();\r\n  if (visual === null) {\r\n    this.logger.error('Unable to start animation - no molecule is loaded.');\r\n    return;\r\n  }\r\n  try {\r\n    this._frameInfo = new gfx_FrameInfo(visual.getComplex(), fileData, {\r\n      onLoadStatusChanged() {\r\n        self.dispatchEvent({\r\n          type: 'mdPlayerStateChanged',\r\n          state: {\r\n            isPlaying: self._isAnimating,\r\n            isLoading: self._frameInfo ? self._frameInfo.isLoading : true\r\n          }\r\n        });\r\n      },\r\n      onError(message) {\r\n        self._stopAnimation();\r\n        self.logger.error(message);\r\n      }\r\n    });\r\n  } catch (e) {\r\n    this.logger.error('Animation file does not fit to current complex!');\r\n    return;\r\n  }\r\n  this._continueAnimation();\r\n};\r\n\r\n/**\r\n * Pause current animation. Now is broken.\r\n * @private\r\n * @deprecated until animation system refactoring.\r\n */\r\nMiew.prototype._pauseAnimation = function () {\r\n  if (this._animInterval === null) {\r\n    return;\r\n  }\r\n  this._isAnimating = false;\r\n  clearInterval(this._animInterval);\r\n  this._animInterval = null;\r\n  if (this._frameInfo) {\r\n    this.dispatchEvent({\r\n      type: 'mdPlayerStateChanged',\r\n      state: {\r\n        isPlaying: this._isAnimating,\r\n        isLoading: this._frameInfo.isLoading\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Continue current animation after pausing. Now is broken.\r\n * @private\r\n * @deprecated until animation system refactoring.\r\n */\r\nMiew.prototype._continueAnimation = function () {\r\n  this._isAnimating = true;\r\n  let minFrameTime = 1000 / settings.now.maxfps;\r\n  minFrameTime = Number.isNaN(minFrameTime) ? 0 : minFrameTime;\r\n  const self = this;\r\n  const {\r\n    pivot\r\n  } = self._gfx;\r\n  const visual = this._getComplexVisual();\r\n  if (visual) {\r\n    visual.resetSelectionMask();\r\n    visual.rebuildSelectionGeometry();\r\n    this._msgAtomInfo.style.opacity = 0.0;\r\n  }\r\n  this._animInterval = setInterval(() => {\r\n    self.dispatchEvent({\r\n      type: 'mdPlayerStateChanged',\r\n      state: {\r\n        isPlaying: self._isAnimating,\r\n        isLoading: self._frameInfo.isLoading\r\n      }\r\n    });\r\n    if (self._frameInfo.frameIsReady) {\r\n      pivot.updateToFrame(self._frameInfo);\r\n      self._updateObjsToFrame(self._frameInfo);\r\n      self._refreshTitle(` Frame ${self._frameInfo._currFrame} of ${self._frameInfo._framesCount} time interval - ${self._frameInfo._timeStep}`);\r\n      try {\r\n        self._frameInfo.nextFrame();\r\n      } catch (e) {\r\n        self.logger.error('Error during animation');\r\n        self._stopAnimation();\r\n        return;\r\n      }\r\n      self._needRender = true;\r\n    }\r\n  }, minFrameTime);\r\n};\r\n\r\n/**\r\n * Stop current animation. Now is broken.\r\n * @private\r\n * @deprecated until animation system refactoring.\r\n */\r\nMiew.prototype._stopAnimation = function () {\r\n  if (this._animInterval === null) {\r\n    return;\r\n  }\r\n  clearInterval(this._animInterval);\r\n  this._frameInfo.disableEvents();\r\n  this._frameInfo = null;\r\n  this._animInterval = null;\r\n  this.dispatchEvent({\r\n    type: 'mdPlayerStateChanged',\r\n    state: null\r\n  });\r\n};\r\n\r\n/**\r\n * Invoked upon successful loading of some data source\r\n * @param {DataSource} dataSource - Data source for visualization (molecular complex or other)\r\n * @param {object} opts - Options.\r\n * @private\r\n */\r\nMiew.prototype._onLoad = function (dataSource, opts) {\r\n  const gfx = this._gfx;\r\n  let visualName = null;\r\n  if (opts.animation) {\r\n    this._refreshTitle();\r\n    this._startAnimation(dataSource);\r\n    return null;\r\n  }\r\n  this._stopAnimation();\r\n  if (!opts || !opts.keepRepsInfo) {\r\n    this._opts.reps = null;\r\n    this._opts._objects = null;\r\n  }\r\n  if (dataSource.id === 'Complex') {\r\n    const complex = dataSource;\r\n\r\n    // update title\r\n    if (opts.fileName) {\r\n      complex.name = complex.name || removeExtension(opts.fileName).toUpperCase();\r\n    } else if (opts.amberFileName) {\r\n      complex.name = complex.name || removeExtension(opts.amberFileName).toUpperCase();\r\n    } else {\r\n      complex.name = `Dynamic ${opts.fileType} molecule`;\r\n    }\r\n    visualName = this._addVisual(new src_ComplexVisual(complex.name, complex));\r\n    this._curVisualName = visualName;\r\n    const desc = this.info();\r\n    this.logger.info(`Parsed ${opts.fileName} (${desc.atoms} atoms, ${desc.bonds} bonds, ${desc.residues} residues, ${desc.chains} chains).`);\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(this._opts.unit)) {\r\n      complex.setCurrentUnit(this._opts.unit);\r\n    }\r\n    if (opts.preset) {\r\n      // ...removed server access...\r\n    } else if (settings.now.autoPreset) {\r\n      switch (opts.fileType) {\r\n        case 'cml':\r\n          this.resetReps('small');\r\n          break;\r\n        case 'pdb':\r\n        case 'mmtf':\r\n        case 'cif':\r\n          if (hasValidResidues(complex)) {\r\n            this.resetReps('macro');\r\n          } else {\r\n            this.resetReps('small');\r\n          }\r\n          break;\r\n        default:\r\n          this.resetReps('default');\r\n          break;\r\n      }\r\n    } else {\r\n      this.resetReps('default');\r\n    }\r\n  } else if (dataSource.id === 'Volume') {\r\n    this.resetEd();\r\n    visualName = this._onLoadEd(dataSource);\r\n  }\r\n  gfx.camera.updateProjectionMatrix();\r\n  this._updateFog();\r\n\r\n  // reset global transform\r\n  gfx.root.resetTransform();\r\n  this.resetPivot();\r\n\r\n  // set scale to fit everything on the screen\r\n  this._objectControls.setScale(settings.now.radiusToFit / this._getBSphereRadius());\r\n  this._resetObjects();\r\n  if (settings.now.autoResolution) {\r\n    this._tweakResolution();\r\n  }\r\n  if (settings.now.shadow.on) {\r\n    this._updateShadowCamera();\r\n  }\r\n  if (this._opts.view) {\r\n    this.view(this._opts.view);\r\n    delete this._opts.view;\r\n  }\r\n  this._refreshTitle();\r\n  return visualName;\r\n};\r\nMiew.prototype.resetEd = function () {\r\n  if (this._edLoader) {\r\n    this._edLoader.abort();\r\n    this._edLoader = null;\r\n  }\r\n\r\n  // free all resources\r\n  this._removeVisual(this._getVolumeVisual());\r\n  this._needRender = true;\r\n};\r\nMiew.prototype.loadEd = function (source) {\r\n  this.resetEd();\r\n  const TheLoader = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.loaders.find({\r\n    source\r\n  }));\r\n  if (!TheLoader) {\r\n    this.logger.error(LOADER_NOT_FOUND);\r\n    return Promise.reject(new Error(LOADER_NOT_FOUND));\r\n  }\r\n  const loader = this._edLoader = new TheLoader(source, {\r\n    binary: true\r\n  });\r\n  loader.context = this;\r\n  return loader.load().then(data => {\r\n    const TheParser = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].head(io.parsers.find({\r\n      format: 'ccp4'\r\n    }));\r\n    if (!TheParser) {\r\n      throw new Error(PARSER_NOT_FOUND);\r\n    }\r\n    const parser = new TheParser(data);\r\n    parser.context = this;\r\n    return parser.parse().then(dataSource => {\r\n      this._onLoadEd(dataSource);\r\n    });\r\n  }).catch(error => {\r\n    this.logger.error('Could not load ED data');\r\n    this.logger.debug(error);\r\n  });\r\n};\r\nMiew.prototype._onLoadEd = function (dataSource) {\r\n  dataSource.normalize();\r\n  const volumeVisual = new src_VolumeVisual('volume', dataSource);\r\n  volumeVisual.getMesh().layers.set(gfxutils.LAYERS.VOLUME); // volume mesh is not visible to common render\r\n  const visualName = this._addVisual(volumeVisual);\r\n  this._needRender = true;\r\n  return visualName;\r\n};\r\nMiew.prototype._needRebuild = function () {\r\n  let needsRebuild = false;\r\n  this._forEachComplexVisual(visual => {\r\n    needsRebuild = needsRebuild || visual.needsRebuild();\r\n  });\r\n  return needsRebuild;\r\n};\r\nMiew.prototype._rebuildObjects = function () {\r\n  const self = this;\r\n  const gfx = this._gfx;\r\n  let i;\r\n  let n;\r\n\r\n  // remove old object geometry\r\n  const toRemove = [];\r\n  for (i = 0; i < gfx.pivot.children.length; ++i) {\r\n    const child = gfx.pivot.children[i];\r\n    if (!(child instanceof src_Visual)) {\r\n      toRemove.push(child);\r\n    }\r\n  }\r\n  for (i = 0; i < toRemove.length; ++i) {\r\n    toRemove[i].parent.remove(toRemove[i]);\r\n  }\r\n  setTimeout(() => {\r\n    const objList = self._objects;\r\n    for (i = 0, n = objList.length; i < n; ++i) {\r\n      const obj = objList[i];\r\n      if (obj.needsRebuild) {\r\n        obj.build();\r\n      }\r\n      if (obj.getGeometry()) {\r\n        gfx.pivot.add(obj.getGeometry());\r\n      }\r\n    }\r\n  }, 10);\r\n};\r\nMiew.prototype.changeUnit = function (unitIdx, name) {\r\n  const visual = this._getComplexVisual(name);\r\n  if (!visual) {\r\n    throw new Error('There is no complex to change!');\r\n  }\r\n  function currentUnitInfo() {\r\n    const unit = visual ? visual.getComplex().getCurrentUnit() : 0;\r\n    const type = unit > 0 ? `Bio molecule ${unit}` : 'Asymmetric unit';\r\n    return `Current unit: ${unit} (${type})`;\r\n  }\r\n  if (unitIdx === undefined) {\r\n    return currentUnitInfo();\r\n  }\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(unitIdx)) {\r\n    unitIdx = Math.max(parseInt(unitIdx, 10), 0);\r\n  }\r\n  if (visual.getComplex().setCurrentUnit(unitIdx)) {\r\n    this._resetScene();\r\n    this._updateInfoPanel();\r\n  }\r\n  return currentUnitInfo();\r\n};\r\n\r\n/**\r\n * Start to rebuild geometry asynchronously.\r\n */\r\nMiew.prototype.rebuild = function () {\r\n  if (this._building) {\r\n    this.logger.warn('Miew.rebuild(): already building!');\r\n    return;\r\n  }\r\n  this._building = true;\r\n  this.dispatchEvent({\r\n    type: 'rebuilding'\r\n  });\r\n  this._rebuildObjects();\r\n  this._gfx.renderer2d.reset();\r\n  const rebuildActions = [];\r\n  this._forEachComplexVisual(visual => {\r\n    if (visual.needsRebuild()) {\r\n      rebuildActions.push(visual.rebuild().then(() => new Promise(resolve => {\r\n        visual.rebuildSelectionGeometry();\r\n        resolve();\r\n      })));\r\n    }\r\n  });\r\n\r\n  // Start asynchronous rebuild\r\n  const self = this;\r\n  this._spinner.spin(this._container);\r\n  Promise.all(rebuildActions).then(() => {\r\n    self._spinner.stop();\r\n    self._needRender = true;\r\n    self._refreshTitle();\r\n    this.dispatchEvent({\r\n      type: 'buildingDone'\r\n    });\r\n    self._building = false;\r\n  });\r\n};\r\n\r\n/** Mark all representations for rebuilding */\r\nMiew.prototype.rebuildAll = function () {\r\n  this._forEachComplexVisual(visual => {\r\n    visual.setNeedsRebuild();\r\n  });\r\n};\r\nMiew.prototype._refreshTitle = function (appendix) {\r\n  let title;\r\n  appendix = appendix === undefined ? '' : appendix;\r\n  const visual = this._getComplexVisual();\r\n  if (visual) {\r\n    title = visual.getComplex().name;\r\n    const rep = visual.repGet(visual.repCurrent());\r\n    title += rep ? ` – ${rep.mode.name} Mode` : '';\r\n  } else {\r\n    title = Object.keys(this._visuals).length > 0 ? 'Unknown' : 'No Data';\r\n  }\r\n  title += appendix;\r\n  this.dispatchEvent({\r\n    type: 'titleChanged',\r\n    data: title\r\n  });\r\n};\r\nMiew.prototype.setNeedRender = function () {\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._extractRepresentation = function () {\r\n  const changed = [];\r\n  this._forEachComplexVisual(visual => {\r\n    if (visual.getSelectionCount() === 0) {\r\n      return;\r\n    }\r\n    const selector = visual.buildSelectorFromMask(1 << visual.getSelectionBit());\r\n    const defPreset = settings.now.presets.default;\r\n    const res = visual.repAdd({\r\n      selector,\r\n      mode: defPreset[0].mode.id,\r\n      colorer: defPreset[0].colorer.id,\r\n      material: defPreset[0].material.id\r\n    });\r\n    if (!res) {\r\n      if (visual.repCount() === src_ComplexVisual.NUM_REPRESENTATION_BITS) {\r\n        this.logger.warn(`Number of representations is limited to ${src_ComplexVisual.NUM_REPRESENTATION_BITS}`);\r\n      }\r\n      return;\r\n    }\r\n    this.dispatchEvent({\r\n      type: 'repAdded',\r\n      index: res.index,\r\n      name: visual.name\r\n    });\r\n    visual.repCurrent(res.index);\r\n    changed.push(visual.name);\r\n  });\r\n  if (changed.length > 0) {\r\n    this.logger.report(`New representation from selection for complexes: ${changed.join(', ')}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Change current representation list.\r\n * @param {array} reps - Representation list.\r\n */\r\nMiew.prototype._setReps = function (reps) {\r\n  reps = reps || this._opts && this._opts.reps || [];\r\n  this._forEachComplexVisual(visual => visual.resetReps(reps));\r\n};\r\n\r\n/**\r\n * Apply existing preset to current scene.\r\n * @param preset\r\n */\r\nMiew.prototype.applyPreset = function (preset) {\r\n  const {\r\n    presets\r\n  } = settings.now;\r\n  const presList = [preset || settings.defaults.preset, settings.defaults.preset, Object.keys(presets)[0]];\r\n  let reps = null;\r\n  for (let i = 0; !reps && i < presList.length; ++i) {\r\n    settings.set('preset', presList[i]);\r\n    reps = presets[settings.now.preset];\r\n    if (!reps) {\r\n      this.logger.warn(`Unknown preset \"${settings.now.preset}\"`);\r\n    }\r\n  }\r\n  this._setReps(reps);\r\n};\r\n\r\n/**\r\n * Reset current representation list to initial values.\r\n * @param {string} [preset] - The source preset in case of uninitialized representation list.\r\n */\r\nMiew.prototype.resetReps = function (preset) {\r\n  const reps = this._opts && this._opts.reps;\r\n  if (reps) {\r\n    this._setReps(reps);\r\n  } else {\r\n    this.applyPreset(preset);\r\n  }\r\n};\r\n\r\n/**\r\n * Get number of representations created so far.\r\n * @returns {number} Number of reps.\r\n */\r\nMiew.prototype.repCount = function (name) {\r\n  const visual = this._getComplexVisual(name);\r\n  return visual ? visual.repCount() : 0;\r\n};\r\n\r\n/**\r\n * Get or set the current representation index.\r\n * @param {number=} index - Zero-based index, up to {@link Miew#repCount()}. Defaults to the current one.\r\n * @param {string=} [name] - Complex name. Defaults to the current one.\r\n * @returns {number} The current index.\r\n */\r\nMiew.prototype.repCurrent = function (index, name) {\r\n  const visual = this._getComplexVisual(name);\r\n  const newIdx = visual ? visual.repCurrent(index) : -1;\r\n  if (index && newIdx !== index) {\r\n    this.logger.warn(`Representation ${index} was not found. Current rep remains unchanged.`);\r\n  }\r\n  return newIdx;\r\n};\r\n\r\n/**\r\n * Get or set representation by index.\r\n * @param {number=} index - Zero-based index, up to {@link Miew#repCount}(). Defaults to the current one.\r\n * @param {object=} rep - Optional representation description.\r\n * @param {string=} rep.selector - Selector string.\r\n * @param {string=} rep.mode - Mode id.\r\n * @param {string=} rep.colorer - Colorer id.\r\n * @param {string=} rep.material - Material id.\r\n * @returns {?object} Representation description.\r\n */\r\nMiew.prototype.rep = function (index, rep) {\r\n  const visual = this._getComplexVisual('');\r\n  if (!visual) {\r\n    return null;\r\n  }\r\n  const res = visual.rep(index, rep);\r\n  if (res.status === 'created') {\r\n    this.dispatchEvent({\r\n      type: 'repAdded',\r\n      index: res.index,\r\n      name: visual.name\r\n    });\r\n  } else if (res.status === 'changed') {\r\n    this.dispatchEvent({\r\n      type: 'repChanged',\r\n      index: res.index,\r\n      name: visual.name\r\n    });\r\n  }\r\n  return res.desc;\r\n};\r\n\r\n/**\r\n * Get representation (not just description) by index.\r\n * @param {number=} index - Zero-based index, up to {@link Miew#repCount}(). Defaults to the current one.\r\n * @returns {?object} Representation.\r\n */\r\nMiew.prototype.repGet = function (index, name) {\r\n  const visual = this._getComplexVisual(name);\r\n  return visual ? visual.repGet(index) : null;\r\n};\r\n\r\n/**\r\n * Add new representation.\r\n * @param {object=} rep - Representation description.\r\n * @returns {number} Index of the new representation.\r\n */\r\nMiew.prototype.repAdd = function (rep, name) {\r\n  const visual = this._getComplexVisual(name);\r\n  if (!visual) {\r\n    return -1;\r\n  }\r\n  const res = visual.repAdd(rep);\r\n  if (res) {\r\n    this.dispatchEvent({\r\n      type: 'repAdded',\r\n      index: res.index,\r\n      name\r\n    });\r\n    return res.index;\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n * Remove representation.\r\n * @param {number=} index - Zero-based representation index.\r\n */\r\nMiew.prototype.repRemove = function (index, name) {\r\n  const visual = this._getComplexVisual(name);\r\n  if (!visual) {\r\n    return;\r\n  }\r\n  visual.repRemove(index);\r\n  this.dispatchEvent({\r\n    type: 'repRemoved',\r\n    index,\r\n    name\r\n  });\r\n};\r\n\r\n/**\r\n * Hide representation.\r\n * @param {number} index - Zero-based representation index.\r\n * @param {boolean=} hide - Specify false to make rep visible, true to hide (by default).\r\n */\r\nMiew.prototype.repHide = function (index, hide, name) {\r\n  this._needRender = true;\r\n  const visual = this._getComplexVisual(name);\r\n  return visual ? visual.repHide(index, hide) : null;\r\n};\r\nMiew.prototype._setEditMode = function (mode) {\r\n  this._editMode = mode;\r\n  const elem = this._msgMode;\r\n  if (elem) {\r\n    elem.style.opacity = mode === EDIT_MODE.COMPLEX ? 0.0 : 1.0;\r\n    if (mode !== EDIT_MODE.COMPLEX) {\r\n      const t = elem.getElementsByTagName('p')[0];\r\n      t.innerHTML = mode === EDIT_MODE.COMPONENT ? 'COMPONENT EDIT MODE' : 'FRAGMENT EDIT MODE';\r\n    }\r\n  }\r\n  this.dispatchEvent({\r\n    type: 'editModeChanged',\r\n    data: mode === EDIT_MODE.COMPLEX\r\n  });\r\n};\r\nMiew.prototype._enterComponentEditMode = function () {\r\n  if (this._editMode !== EDIT_MODE.COMPLEX) {\r\n    return;\r\n  }\r\n  const editors = [];\r\n  this._forEachComplexVisual(visual => {\r\n    const editor = visual.beginComponentEdit();\r\n    if (editor) {\r\n      editors.push(editor);\r\n    }\r\n  });\r\n  if (editors === []) {\r\n    return;\r\n  }\r\n  this._editors = editors;\r\n  this.logger.info('COMPONENT EDIT MODE -- ON');\r\n  this._setEditMode(EDIT_MODE.COMPONENT);\r\n  this._objectControls.keysTranslateObj(true);\r\n};\r\nMiew.prototype._applyComponentEdit = function () {\r\n  if (this._editMode !== EDIT_MODE.COMPONENT) {\r\n    return;\r\n  }\r\n  this._objectControls.stop();\r\n  this._objectControls.keysTranslateObj(false);\r\n  for (let i = 0; i < this._editors.length; ++i) {\r\n    this._editors[i].apply();\r\n  }\r\n  this._editors = [];\r\n  this.logger.info('COMPONENT EDIT MODE -- OFF (applied)');\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this.rebuildAll();\r\n};\r\nMiew.prototype._discardComponentEdit = function () {\r\n  if (this._editMode !== EDIT_MODE.COMPONENT) {\r\n    return;\r\n  }\r\n  this._objectControls.stop();\r\n  this._objectControls.keysTranslateObj(false);\r\n  for (let i = 0; i < this._editors.length; ++i) {\r\n    this._editors[i].discard();\r\n  }\r\n  this._editors = [];\r\n  this.logger.info('COMPONENT EDIT MODE -- OFF (discarded)');\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this._needRender = true;\r\n  this.rebuildAll();\r\n};\r\nMiew.prototype._enterFragmentEditMode = function () {\r\n  if (this._editMode !== EDIT_MODE.COMPLEX) {\r\n    return;\r\n  }\r\n  const selectedVisuals = [];\r\n  this._forEachComplexVisual(visual => {\r\n    if (visual instanceof src_ComplexVisual && visual.getSelectionCount() > 0) {\r\n      selectedVisuals.push(visual);\r\n    }\r\n  });\r\n  if (selectedVisuals.length !== 1) {\r\n    // either we have no selection or\r\n    // we have selected atoms in two or more visuals -- not supported\r\n    return;\r\n  }\r\n  const editor = selectedVisuals[0].beginFragmentEdit();\r\n  if (!editor) {\r\n    return;\r\n  }\r\n  this._editors = [editor];\r\n  this.logger.info('FRAGMENT EDIT MODE -- ON (single bond)');\r\n  this._setEditMode(EDIT_MODE.FRAGMENT);\r\n  this._objectControls.allowTranslation(false);\r\n  this._objectControls.allowAltObjFreeRotation(editor.isFreeRotationAllowed());\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._applyFragmentEdit = function () {\r\n  if (this._editMode !== EDIT_MODE.FRAGMENT) {\r\n    return;\r\n  }\r\n  this._objectControls.stop();\r\n  for (let i = 0; i < this._editors.length; ++i) {\r\n    this._editors[i].apply();\r\n  }\r\n  this._editors = [];\r\n  this.logger.info('FRAGMENT EDIT MODE -- OFF (applied)');\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this._objectControls.allowTranslation(true);\r\n  this._objectControls.allowAltObjFreeRotation(true);\r\n  this.rebuildAll();\r\n};\r\nMiew.prototype._discardFragmentEdit = function () {\r\n  if (this._editMode !== EDIT_MODE.FRAGMENT) {\r\n    return;\r\n  }\r\n  this._objectControls.stop();\r\n  for (let i = 0; i < this._editors.length; ++i) {\r\n    this._editors[i].discard();\r\n  }\r\n  this._editors = [];\r\n  this.logger.info('FRAGMENT EDIT MODE -- OFF (discarded)');\r\n  this._setEditMode(EDIT_MODE.COMPLEX);\r\n  this._objectControls.allowTranslation(true);\r\n  this._objectControls.allowAltObjFreeRotation(true);\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._onPick = function (event) {\r\n  if (!settings.now.picking) {\r\n    // picking is disabled\r\n    return;\r\n  }\r\n  if (this._animInterval !== null) {\r\n    // animation playback is on\r\n    return;\r\n  }\r\n  if (this._editMode === EDIT_MODE.FRAGMENT) {\r\n    // prevent picking in fragment edit mode\r\n    return;\r\n  }\r\n  if (this._objectControls.isEditingAltObj()) {\r\n    // prevent picking during component rotation\r\n    return;\r\n  }\r\n\r\n  // update last pick & find complex\r\n  let complex = null;\r\n  if (event.obj.atom) {\r\n    complex = event.obj.atom.residue.getChain().getComplex();\r\n    this._lastPick = event.obj.atom;\r\n  } else if (event.obj.residue) {\r\n    complex = event.obj.residue.getChain().getComplex();\r\n    this._lastPick = event.obj.residue;\r\n  } else if (event.obj.chain) {\r\n    complex = event.obj.chain.getComplex();\r\n    this._lastPick = event.obj.chain;\r\n  } else if (event.obj.molecule) {\r\n    complex = event.obj.molecule.complex;\r\n    this._lastPick = event.obj.molecule;\r\n  } else {\r\n    this._lastPick = null;\r\n  }\r\n  function _updateSelection(visual) {\r\n    visual.updateSelectionMask(event.obj);\r\n    visual.rebuildSelectionGeometry();\r\n  }\r\n\r\n  // update visual\r\n  if (complex) {\r\n    const visual = this._getVisualForComplex(complex);\r\n    if (visual) {\r\n      _updateSelection(visual);\r\n      this._needRender = true;\r\n    }\r\n  } else {\r\n    this._forEachComplexVisual(_updateSelection);\r\n    this._needRender = true;\r\n  }\r\n  this._updateInfoPanel();\r\n  this.dispatchEvent(event);\r\n};\r\nMiew.prototype._onKeyDown = function (event) {\r\n  if (!this._running || !this._hotKeysEnabled) {\r\n    return;\r\n  }\r\n\r\n  // editing keys\r\n  if (settings.now.editing) {\r\n    switch (event.code) {\r\n      case 'KeyC':\r\n        this._enterComponentEditMode();\r\n        break;\r\n      case 'KeyF':\r\n        this._enterFragmentEditMode();\r\n        break;\r\n      case 'KeyA':\r\n        switch (this._editMode) {\r\n          case EDIT_MODE.COMPONENT:\r\n            this._applyComponentEdit();\r\n            break;\r\n          case EDIT_MODE.FRAGMENT:\r\n            this._applyFragmentEdit();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        break;\r\n      case 'KeyD':\r\n        switch (this._editMode) {\r\n          case EDIT_MODE.COMPONENT:\r\n            this._discardComponentEdit();\r\n            break;\r\n          case EDIT_MODE.FRAGMENT:\r\n            this._discardFragmentEdit();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  // other keys\r\n  switch (event.code) {\r\n    case 'NumpadAdd':\r\n      if (event.altKey) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this._forEachComplexVisual(visual => {\r\n          visual.expandSelection();\r\n          visual.rebuildSelectionGeometry();\r\n        });\r\n        this._updateInfoPanel();\r\n        this._needRender = true;\r\n      }\r\n      break;\r\n    case 'NumpadSubtract':\r\n      if (event.altKey) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this._forEachComplexVisual(visual => {\r\n          visual.shrinkSelection();\r\n          visual.rebuildSelectionGeometry();\r\n        });\r\n        this._updateInfoPanel();\r\n        this._needRender = true;\r\n      }\r\n      break;\r\n    default:\r\n  }\r\n};\r\nMiew.prototype._onKeyUp = function (event) {\r\n  if (!this._running || !this._hotKeysEnabled) {\r\n    return;\r\n  }\r\n  if (event.code === 'KeyX') {\r\n    this._extractRepresentation();\r\n  }\r\n};\r\nMiew.prototype._updateInfoPanel = function () {\r\n  const info = this._msgAtomInfo.getElementsByTagName('p')[0];\r\n  let atom;\r\n  let residue;\r\n  let count = 0;\r\n  this._forEachComplexVisual(visual => {\r\n    count += visual.getSelectionCount();\r\n  });\r\n  while (info.firstChild) {\r\n    info.removeChild(info.firstChild);\r\n  }\r\n  if (count === 0) {\r\n    this._msgAtomInfo.style.opacity = 0.0;\r\n    return;\r\n  }\r\n  let firstLine = `${String(count)} atom${count !== 1 ? 's' : ''} selected`;\r\n  if (this._lastPick !== null) {\r\n    firstLine += ', the last pick:';\r\n  }\r\n  let secondLine = '';\r\n  let aName = '';\r\n  let coordLine = '';\r\n  if (this._lastPick instanceof Miew_Atom) {\r\n    atom = this._lastPick;\r\n    residue = atom.residue;\r\n    aName = atom.name;\r\n    const location = atom.location !== 32 ? String.fromCharCode(atom.location) : ''; // 32 is code of white-space\r\n    secondLine = `${atom.element.fullName} #${atom.serial}${location}: \\\r\n      ${residue._chain._name}.${residue._type._name}${residue._sequence}${residue._icode.trim()}.`;\r\n    secondLine += aName;\r\n    coordLine = `Coord: (${atom.position.x.toFixed(2).toString()},\\\r\n     ${atom.position.y.toFixed(2).toString()},\\\r\n     ${atom.position.z.toFixed(2).toString()})`;\r\n  } else if (this._lastPick instanceof Miew_Residue) {\r\n    residue = this._lastPick;\r\n    secondLine = `${residue._type._fullName}: \\\r\n      ${residue._chain._name}.${residue._type._name}${residue._sequence}${residue._icode.trim()}`;\r\n  } else if (this._lastPick instanceof Miew_Chain) {\r\n    secondLine = `chain ${this._lastPick._name}`;\r\n  } else if (this._lastPick instanceof Miew_Molecule) {\r\n    secondLine = `molecule ${this._lastPick._name}`;\r\n  }\r\n  info.appendChild(document.createTextNode(firstLine));\r\n  if (secondLine !== '') {\r\n    info.appendChild(document.createElement('br'));\r\n    info.appendChild(document.createTextNode(secondLine));\r\n  }\r\n  if (coordLine !== '') {\r\n    info.appendChild(document.createElement('br'));\r\n    info.appendChild(document.createTextNode(coordLine));\r\n  }\r\n  this._msgAtomInfo.style.opacity = 1.0;\r\n};\r\nMiew.prototype._getAltObj = function () {\r\n  if (this._editors) {\r\n    let altObj = null;\r\n    for (let i = 0; i < this._editors.length; ++i) {\r\n      const nextAltObj = this._editors[i].getAltObj();\r\n      if (nextAltObj.objects.length > 0) {\r\n        if (altObj) {\r\n          // we have selected atoms in two or more visuals -- not supported\r\n          altObj = null;\r\n          break;\r\n        }\r\n        altObj = nextAltObj;\r\n      }\r\n    }\r\n    if (altObj) {\r\n      return altObj;\r\n    }\r\n  }\r\n  return {\r\n    objects: [],\r\n    pivot: new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0, 0, 0)\r\n  };\r\n};\r\nMiew.prototype.resetPivot = function () {\r\n  const boundingBox = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Box3();\r\n  const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function () {\r\n    boundingBox.makeEmpty();\r\n    this._forEachVisual(visual => {\r\n      boundingBox.union(visual.getBoundaries().boundingBox);\r\n    });\r\n    boundingBox.getCenter(center);\r\n    this._objectControls.setPivot(center.negate());\r\n    this.dispatchEvent({\r\n      type: 'transform'\r\n    });\r\n  };\r\n}();\r\nMiew.prototype.setPivotResidue = function () {\r\n  const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (residue) {\r\n    const visual = this._getVisualForComplex(residue.getChain().getComplex());\r\n    if (!visual) {\r\n      return;\r\n    }\r\n    if (residue._controlPoint) {\r\n      center.copy(residue._controlPoint);\r\n    } else {\r\n      let x = 0;\r\n      let y = 0;\r\n      let z = 0;\r\n      const amount = residue._atoms.length;\r\n      for (let i = 0; i < amount; ++i) {\r\n        const p = residue._atoms[i].position;\r\n        x += p.x / amount;\r\n        y += p.y / amount;\r\n        z += p.z / amount;\r\n      }\r\n      center.set(x, y, z);\r\n    }\r\n    center.applyMatrix4(visual.matrix).negate();\r\n    this._objectControls.setPivot(center);\r\n    this.dispatchEvent({\r\n      type: 'transform'\r\n    });\r\n  };\r\n}();\r\nMiew.prototype.setPivotAtom = function () {\r\n  const center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n  return function (atom) {\r\n    const visual = this._getVisualForComplex(atom.residue.getChain().getComplex());\r\n    if (!visual) {\r\n      return;\r\n    }\r\n    center.copy(atom.position);\r\n    center.applyMatrix4(visual.matrix).negate();\r\n    this._objectControls.setPivot(center);\r\n    this.dispatchEvent({\r\n      type: 'transform'\r\n    });\r\n  };\r\n}();\r\nMiew.prototype.getSelectionCenter = function () {\r\n  const _centerInVisual = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n  return function (center, includesAtom, selector) {\r\n    center.set(0.0, 0.0, 0.0);\r\n    let count = 0;\r\n    this._forEachComplexVisual(visual => {\r\n      if (visual.getSelectionCenter(_centerInVisual, includesAtom, selector || visual.getSelectionBit())) {\r\n        center.add(_centerInVisual);\r\n        count++;\r\n      }\r\n    });\r\n    if (count === 0) {\r\n      return false;\r\n    }\r\n    center.divideScalar(count);\r\n    center.negate();\r\n    return true;\r\n  };\r\n}();\r\nMiew.prototype.setPivotSubset = function () {\r\n  const _center = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3(0.0, 0.0, 0.0);\r\n  function _includesInCurSelection(atom, selectionBit) {\r\n    return atom.mask & 1 << selectionBit;\r\n  }\r\n  function _includesInSelector(atom, selector) {\r\n    return selector.selector.includesAtom(atom);\r\n  }\r\n  return function (selector) {\r\n    const includesAtom = selector ? _includesInSelector : _includesInCurSelection;\r\n    if (this.getSelectionCenter(_center, includesAtom, selector)) {\r\n      this._objectControls.setPivot(_center);\r\n      this.dispatchEvent({\r\n        type: 'transform'\r\n      });\r\n    } else {\r\n      this.logger.warn('selection is empty. Center operation not performed');\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Makes a screenshot.\r\n * @param {number} [width] - Width of an image. Defaults to the canvas width.\r\n * @param {number} [height] - Height of an image. Defaults to the width (square) or canvas height,\r\n *        if width is omitted too.\r\n * @returns {string} Data URL representing the image contents.\r\n */\r\nMiew.prototype.screenshot = function (width, height) {\r\n  const gfx = this._gfx;\r\n  const deviceWidth = gfx.renderer.domElement.width;\r\n  const deviceHeight = gfx.renderer.domElement.height;\r\n  function fov2Tan(fov) {\r\n    return Math.tan(external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.degToRad(0.5 * fov));\r\n  }\r\n  function tan2Fov(tan) {\r\n    return external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.MathUtils.radToDeg(Math.atan(tan)) * 2.0;\r\n  }\r\n  function getDataURL() {\r\n    let dataURL;\r\n    const currBrowser = utils.getBrowser();\r\n    if (currBrowser === utils.browserType.SAFARI) {\r\n      const canvas = document.createElement('canvas');\r\n      const canvasContext = canvas.getContext('2d');\r\n      canvas.width = width === undefined ? deviceWidth : width;\r\n      canvas.height = height === undefined ? deviceHeight : height;\r\n      canvasContext.drawImage(gfx.renderer.domElement, 0, 0, canvas.width, canvas.height);\r\n      dataURL = canvas.toDataURL('image/png');\r\n    } else {\r\n      // Copy current canvas to screenshot\r\n      dataURL = gfx.renderer.domElement.toDataURL('image/png');\r\n    }\r\n    return dataURL;\r\n  }\r\n  height = height || width;\r\n  let screenshotURI;\r\n  if (width === undefined && height === undefined || width === deviceWidth && height === deviceHeight) {\r\n    // renderer.domElement.toDataURL('image/png') returns flipped image in Safari\r\n    // It hasn't been resolved yet, but getScreenshotSafari()\r\n    // fixes it using an extra canvas.\r\n    screenshotURI = getDataURL();\r\n  } else {\r\n    const originalAspect = gfx.camera.aspect;\r\n    const originalFov = gfx.camera.fov;\r\n    const originalTanFov2 = fov2Tan(gfx.camera.fov);\r\n\r\n    // screenshot should contain the principal area of interest (a centered square touching screen sides)\r\n    const areaOfInterestSize = Math.min(gfx.width, gfx.height);\r\n    const areaOfInterestTanFov2 = originalTanFov2 * areaOfInterestSize / gfx.height;\r\n\r\n    // set appropriate camera aspect & FOV\r\n    const shotAspect = width / height;\r\n    gfx.renderer.setPixelRatio(1);\r\n    gfx.camera.aspect = shotAspect;\r\n    gfx.camera.fov = tan2Fov(areaOfInterestTanFov2 / Math.min(shotAspect, 1.0));\r\n    gfx.camera.updateProjectionMatrix();\r\n\r\n    // resize canvas to the required size of screenshot\r\n    gfx.renderer.setDrawingBufferSize(width, height, 1);\r\n\r\n    // make screenshot\r\n    this._renderFrame(settings.now.stereo);\r\n    screenshotURI = getDataURL();\r\n\r\n    // restore original camera & canvas proportions\r\n    gfx.renderer.setPixelRatio(window.devicePixelRatio);\r\n    gfx.camera.aspect = originalAspect;\r\n    gfx.camera.fov = originalFov;\r\n    gfx.camera.updateProjectionMatrix();\r\n    gfx.renderer.setDrawingBufferSize(gfx.width, gfx.height, window.devicePixelRatio);\r\n    this._needRender = true;\r\n  }\r\n  return screenshotURI;\r\n};\r\n\r\n/**\r\n * Makes screenshot and initiates a download.\r\n * @param {string} [filename] - Name of a file. Default to a 'screenshot-XXXXX.png', where XXXXX is a current\r\n *        date/time in seconds.\r\n * @param {number} [width] - Width of an image. Defaults to the canvas width.\r\n * @param {number} [height] - Height of an image. Defaults to the width (square) or canvas height,\r\n *        if width is omitted too.\r\n */\r\nMiew.prototype.screenshotSave = function (filename, width, height) {\r\n  const uri = this.screenshot(width, height);\r\n  utils.shotDownload(uri, filename);\r\n};\r\nMiew.prototype.save = function (opts) {\r\n  this._export(opts.fileType).then(dataString => {\r\n    const filename = this._visuals[this._curVisualName]._complex.name;\r\n    utils.download(dataString, filename, opts.fileType);\r\n    this._refreshTitle();\r\n    this.dispatchEvent({\r\n      type: 'exportingDone'\r\n    });\r\n  }).catch(error => {\r\n    this.logger.error('Could not export data');\r\n    this.logger.debug(error);\r\n    this._refreshTitle();\r\n    this.dispatchEvent({\r\n      type: 'exportingDone',\r\n      error\r\n    });\r\n  });\r\n};\r\nMiew.prototype._tweakResolution = function () {\r\n  const maxPerf = [['poor', 100], ['low', 500], ['medium', 1000], ['high', 5000], ['ultra', Number.MAX_VALUE]];\r\n  let atomCount = 0;\r\n  this._forEachComplexVisual(visual => {\r\n    atomCount += visual.getComplex().getAtomCount();\r\n  });\r\n  if (atomCount > 0) {\r\n    const performance = this._gfxScore * 10e5 / atomCount;\r\n    // set resolution based on estimated performance\r\n    for (let i = 0; i < maxPerf.length; ++i) {\r\n      if (performance < maxPerf[i][1]) {\r\n        this._autoChangeResolution(maxPerf[i][0]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n};\r\nMiew.prototype._autoChangeResolution = function (resolution) {\r\n  if (resolution !== settings.now.resolution) {\r\n    this.logger.report(`Your rendering resolution was changed to \"${resolution}\" for best performance.`);\r\n  }\r\n  settings.now.resolution = resolution;\r\n};\r\n\r\n/**\r\n * Save current settings to cookies.\r\n */\r\nMiew.prototype.saveSettings = function () {\r\n  this._cookies.setCookie(this._opts.settingsCookie, JSON.stringify(this.settings.getDiffs(true)));\r\n};\r\n\r\n/**\r\n * Load settings from cookies.\r\n */\r\nMiew.prototype.restoreSettings = function () {\r\n  try {\r\n    const cookie = this._cookies.getCookie(this._opts.settingsCookie);\r\n    const diffs = cookie ? JSON.parse(cookie) : {};\r\n    this.settings.applyDiffs(diffs, true);\r\n  } catch (e) {\r\n    this.logger.error(`Cookies parse error: ${e.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Reset current settings to the defaults.\r\n */\r\nMiew.prototype.resetSettings = function () {\r\n  this.settings.reset();\r\n};\r\n\r\n/*\r\n   * DANGEROUS and TEMPORARY. The method should change or disappear in future versions.\r\n   * @param {string|object} opts - See {@link Miew} constructor.\r\n   * @see {@link Miew#set}, {@link Miew#repAdd}, {@link Miew#rep}.\r\n   */\r\nMiew.prototype.setOptions = function (opts) {\r\n  if (typeof opts === 'string') {\r\n    opts = Miew.options.fromAttr(opts);\r\n  }\r\n  if (opts.reps) {\r\n    this._opts.reps = null;\r\n  }\r\n  external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].merge(this._opts, opts);\r\n  if (opts.settings) {\r\n    this.set(opts.settings);\r\n  }\r\n  this._opts._objects = opts._objects;\r\n  this._resetObjects();\r\n  if (opts.load) {\r\n    this.load(opts.load, {\r\n      fileType: opts.type\r\n    });\r\n  }\r\n  if (opts.preset) {\r\n    settings.now.preset = opts.preset;\r\n  }\r\n  if (opts.reps) {\r\n    this.resetReps(opts.preset);\r\n  }\r\n  if (this._opts.view) {\r\n    this.view(this._opts.view);\r\n    delete this._opts.view;\r\n  }\r\n  const visual = this._getComplexVisual();\r\n  if (visual) {\r\n    visual.getComplex().resetCurrentUnit();\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isNumber(opts.unit)) {\r\n      visual.getComplex().setCurrentUnit(opts.unit);\r\n    }\r\n    this.resetView();\r\n    this.rebuildAll();\r\n  }\r\n};\r\nMiew.prototype.info = function (name) {\r\n  const visual = this._getComplexVisual(name);\r\n  if (!visual) {\r\n    return {};\r\n  }\r\n  const complex = visual.getComplex();\r\n  const {\r\n    metadata\r\n  } = complex;\r\n  return {\r\n    id: metadata.id || complex.name || 'UNKNOWN',\r\n    title: metadata.title && metadata.title.join(' ') || 'UNKNOWN DATA',\r\n    atoms: complex.getAtomCount(),\r\n    bonds: complex.getBondCount(),\r\n    residues: complex.getResidueCount(),\r\n    chains: complex.getChainCount()\r\n  };\r\n};\r\n\r\n/*\r\n   * OBJECTS SEGMENT\r\n   */\r\n\r\nMiew.prototype.addObject = function (objData, bThrow) {\r\n  let Ctor = null;\r\n  if (objData.type === objects_LinesObj.prototype.type) {\r\n    Ctor = objects_LinesObj;\r\n  }\r\n  if (Ctor === null) {\r\n    throw new Error(`Unknown scene object type - ${objData.type}`);\r\n  }\r\n  try {\r\n    const newObj = new Ctor(objData.params, objData.opts);\r\n    this._addSceneObject(newObj);\r\n  } catch (error) {\r\n    if (!bThrow) {\r\n      this.logger.debug(`Error during scene object creation: ${error.message}`);\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n  this._needRender = true;\r\n};\r\nMiew.prototype._addSceneObject = function (sceneObject) {\r\n  const visual = this._getComplexVisual();\r\n  if (sceneObject.build && visual) {\r\n    sceneObject.build(visual.getComplex());\r\n    this._gfx.pivot.add(sceneObject.getGeometry());\r\n  }\r\n  const objects = this._objects;\r\n  objects[objects.length] = sceneObject;\r\n};\r\nMiew.prototype._updateObjsToFrame = function (frameData) {\r\n  const objs = this._objects;\r\n  for (let i = 0, n = objs.length; i < n; ++i) {\r\n    if (objs[i].updateToFrame) {\r\n      objs[i].updateToFrame(frameData);\r\n    }\r\n  }\r\n};\r\nMiew.prototype._resetObjects = function () {\r\n  const objs = this._opts._objects;\r\n  this._objects = [];\r\n  if (objs) {\r\n    for (let i = 0, n = objs.length; i < n; ++i) {\r\n      this.addObject(objs[i], false);\r\n    }\r\n  }\r\n};\r\nMiew.prototype.removeObject = function (index) {\r\n  const obj = this._objects[index];\r\n  if (!obj) {\r\n    throw new Error(`Scene object with index ${index} does not exist`);\r\n  }\r\n  obj.destroy();\r\n  this._objects.splice(index, 1);\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Get a string with a URL to reproduce the current scene.\r\n *\r\n * @param {boolean} [opts.compact=true] - set this flag to false if you want to include full\r\n * preset information regardless of the differences with settings\r\n * @param {boolean} [opts.settings=false] - when this flag is true, changes in settings are included\r\n * @param {boolean} [opts.view=false] - when this flag is true, a view information is included\r\n * @returns {string} URL\r\n */\r\nMiew.prototype.getURL = function (opts) {\r\n  return options.toURL(this.getState(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].defaults(opts, {\r\n    compact: true,\r\n    settings: false,\r\n    view: false\r\n  })));\r\n};\r\n\r\n/**\r\n * Get a string with a script to reproduce the current scene.\r\n *\r\n * @param {boolean} [opts.compact=true] - set this flag to false if you want to include full\r\n * preset information regardless of the differences with settings\r\n * @param {boolean} [opts.settings=true] - when this flag is true, changes in settings are included\r\n * @param {boolean} [opts.view=true] - when this flag is true, a view information is included\r\n * @returns {string} script\r\n */\r\nMiew.prototype.getScript = function (opts) {\r\n  return options.toScript(this.getState(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].defaults(opts, {\r\n    compact: true,\r\n    settings: true,\r\n    view: true\r\n  })));\r\n};\r\n\r\n/*\r\n   * Generates object that represents the current state of representations list\r\n   * @param {boolean} compareWithDefaults - when this flag is true, reps list is compared (if possible)\r\n   * to preset's defaults and only diffs are generated\r\n   */\r\nMiew.prototype._compareReps = function (complexVisual, compareWithDefaults) {\r\n  const ans = {};\r\n  let repCount = 0;\r\n  if (complexVisual) {\r\n    repCount = complexVisual.repCount();\r\n  }\r\n  const currPreset = settings.defaults.presets[settings.now.preset];\r\n  let compare = compareWithDefaults;\r\n  if (currPreset === undefined || currPreset.length > repCount) {\r\n    compare = false;\r\n    ans.preset = 'empty';\r\n  } else if (settings.now.preset !== settings.defaults.preset) {\r\n    ans.preset = settings.now.preset;\r\n  }\r\n  const repsDiff = [];\r\n  let emptyReps = true;\r\n  for (let i = 0, n = repCount; i < n; ++i) {\r\n    repsDiff[i] = complexVisual.repGet(i).compare(compare ? currPreset[i] : null);\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(repsDiff[i])) {\r\n      emptyReps = false;\r\n    }\r\n  }\r\n  if (!emptyReps) {\r\n    ans.reps = repsDiff;\r\n  }\r\n  return ans;\r\n};\r\n\r\n/*\r\n   * Obtain object that represents current state of miew (might be used as options in constructor).\r\n   * @param {boolean} [opts.compact=true] - set this flag to false if you want to include full\r\n   * preset information regardless of the differences with settings\r\n   * @param {boolean} [opts.settings=false] - when this flag is true, changes in settings are included\r\n   * @param {boolean} [opts.view=false] - when this flag is true, a view information is included\r\n   * @returns {Object} State object.\r\n   */\r\nMiew.prototype.getState = function (opts) {\r\n  const state = {};\r\n  opts = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].defaults(opts, {\r\n    compact: true,\r\n    settings: false,\r\n    view: false\r\n  });\r\n\r\n  // load\r\n  const visual = this._getComplexVisual();\r\n  if (visual !== null) {\r\n    const complex = visual.getComplex();\r\n    const {\r\n      metadata\r\n    } = complex;\r\n    if (metadata.id) {\r\n      const format = metadata.format ? `${metadata.format}:` : '';\r\n      state.load = format + metadata.id;\r\n    }\r\n    const unit = complex.getCurrentUnit();\r\n    if (unit !== 1) {\r\n      state.unit = unit;\r\n    }\r\n  }\r\n\r\n  // representations\r\n  const repsInfo = this._compareReps(visual, opts.compact);\r\n  if (repsInfo.preset) {\r\n    state.preset = repsInfo.preset;\r\n  }\r\n  if (repsInfo.reps) {\r\n    state.reps = repsInfo.reps;\r\n  }\r\n\r\n  // objects\r\n  const objects = this._objects;\r\n  const objectsState = [];\r\n  for (let i = 0, n = objects.length; i < n; ++i) {\r\n    objectsState[i] = objects[i].identify();\r\n  }\r\n  if (objects.length > 0) {\r\n    state._objects = objectsState;\r\n  }\r\n\r\n  // view\r\n  if (opts.view) {\r\n    state.view = this.view();\r\n  }\r\n\r\n  // settings\r\n  if (opts.settings) {\r\n    const diff = this.settings.getDiffs(false);\r\n    if (!external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isEmpty(diff)) {\r\n      state.settings = diff;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\n/**\r\n * Get parameter value.\r\n * @param {string} param - Parameter name or path (e.g. 'modes.BS.atom').\r\n * @param {*=} value - Default value.\r\n * @returns {*} Parameter value.\r\n */\r\nMiew.prototype.get = function (param, value) {\r\n  return settings.get(param, value);\r\n};\r\nMiew.prototype._clipPlaneUpdateValue = function (radius) {\r\n  const clipPlaneValue = Math.max(this._gfx.camera.position.z - radius * settings.now.draft.clipPlaneFactor, settings.now.camNear);\r\n  const opts = {\r\n    clipPlaneValue\r\n  };\r\n  this._forEachComplexVisual(visual => {\r\n    visual.setUberOptions(opts);\r\n  });\r\n  for (let i = 0, n = this._objects.length; i < n; ++i) {\r\n    const obj = this._objects[i];\r\n    if (obj._line) {\r\n      obj._line.material.setUberOptions(opts);\r\n    }\r\n  }\r\n  if (this._picker !== null) {\r\n    this._picker.clipPlaneValue = clipPlaneValue;\r\n  }\r\n};\r\nMiew.prototype._fogFarUpdateValue = function () {\r\n  if (this._picker !== null) {\r\n    if (this._gfx.scene.fog) {\r\n      this._picker.fogFarValue = this._gfx.scene.fog.far;\r\n    } else {\r\n      this._picker.fogFarValue = undefined;\r\n    }\r\n  }\r\n};\r\nMiew.prototype._updateShadowmapMeshes = function (process) {\r\n  this._forEachComplexVisual(visual => {\r\n    const reprList = visual._reprList;\r\n    for (let i = 0, n = reprList.length; i < n; ++i) {\r\n      const repr = reprList[i];\r\n      process(repr.geo, repr.material);\r\n    }\r\n  });\r\n};\r\nMiew.prototype._updateMaterials = function (values) {\r\n  let needTraverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n  let process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\r\n  this._forEachComplexVisual(visual => visual.setMaterialValues(values, needTraverse, process));\r\n  for (let i = 0, n = this._objects.length; i < n; ++i) {\r\n    const obj = this._objects[i];\r\n    if (obj._line) {\r\n      obj._line.material.setValues(values);\r\n      obj._line.material.needsUpdate = true;\r\n    }\r\n  }\r\n};\r\nMiew.prototype._fogAlphaChanged = function () {\r\n  this._forEachComplexVisual(visual => {\r\n    visual.setUberOptions({\r\n      fogAlpha: settings.now.fogAlpha\r\n    });\r\n  });\r\n};\r\nMiew.prototype._embedWebXR = function () {\r\n  // switch off\r\n  if (settings.now.stereo !== 'WEBVR') {\r\n    if (this.webVR) {\r\n      this.webVR.disable();\r\n    }\r\n    this.webVR = null;\r\n    return;\r\n  }\r\n  // switch on\r\n  if (!this.webVR) {\r\n    this.webVR = new WebVRPoC(() => {\r\n      this._requestAnimationFrame(() => this._onTick());\r\n      this._needRender = true;\r\n      this._onResize();\r\n    });\r\n  }\r\n  this.webVR.enable(this._gfx);\r\n};\r\nMiew.prototype._initOnSettingsChanged = function () {\r\n  const on = (props, func) => {\r\n    props = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isArray(props) ? props : [props];\r\n    props.forEach(prop => {\r\n      this.settings.addEventListener(`change:${prop}`, func);\r\n    });\r\n  };\r\n  on('modes.VD.frame', () => {\r\n    const volume = this._getVolumeVisual();\r\n    if (volume === null) return;\r\n    volume.showFrame(settings.now.modes.VD.frame);\r\n    this._needRender = true;\r\n  });\r\n  on('modes.VD.isoMode', () => {\r\n    const volume = this._getVolumeVisual();\r\n    if (volume === null) return;\r\n    volume.getMesh().material.updateDefines();\r\n    this._needRender = true;\r\n  });\r\n  on('bg.color', () => {\r\n    this._onBgColorChanged();\r\n  });\r\n  on('ao', () => {\r\n    if (settings.now.ao && !isAOSupported(this._gfx.renderer.getContext())) {\r\n      this.logger.warn('Your device or browser does not support ao');\r\n      settings.set('ao', false);\r\n    } else {\r\n      const values = {\r\n        normalsToGBuffer: settings.now.ao\r\n      };\r\n      this._setUberMaterialValues(values);\r\n    }\r\n  });\r\n  on('zSprites', () => {\r\n    if (settings.now.zSprites && !arezSpritesSupported(this._gfx.renderer.getContext())) {\r\n      this.logger.warn('Your device or browser does not support zSprites');\r\n      settings.set('zSprites', false);\r\n    }\r\n    this.rebuildAll();\r\n  });\r\n  on('fogColor', () => {\r\n    this._onFogColorChanged();\r\n  });\r\n  on('fogColorEnable', () => {\r\n    this._onFogColorChanged();\r\n  });\r\n  on('bg.transparent', evt => {\r\n    const gfx = this._gfx;\r\n    if (gfx) {\r\n      gfx.renderer.setClearColor(settings.now.bg.color, Number(!settings.now.bg.transparent));\r\n    }\r\n    // update materials\r\n    this._updateMaterials({\r\n      fogTransparent: evt.value\r\n    });\r\n    this.rebuildAll();\r\n  });\r\n  on('draft.clipPlane', evt => {\r\n    // update materials\r\n    this._updateMaterials({\r\n      clipPlane: evt.value\r\n    });\r\n    this.rebuildAll();\r\n  });\r\n  on('shadow.on', evt => {\r\n    // update materials\r\n    const values = {\r\n      shadowmap: evt.value,\r\n      shadowmapType: settings.now.shadow.type\r\n    };\r\n    const gfx = this._gfx;\r\n    if (gfx) {\r\n      gfx.renderer.shadowMap.enabled = Boolean(values.shadowmap);\r\n    }\r\n    this._updateMaterials(values, true);\r\n    if (values.shadowmap) {\r\n      this._updateShadowCamera();\r\n      this._updateShadowmapMeshes(meshutils.createShadowmapMaterial);\r\n    } else {\r\n      this._updateShadowmapMeshes(meshutils.removeShadowmapMaterial);\r\n    }\r\n    this._needRender = true;\r\n  });\r\n  on('shadow.type', evt => {\r\n    // update materials if shadowmap is enable\r\n    if (settings.now.shadow.on) {\r\n      this._updateMaterials({\r\n        shadowmapType: evt.value\r\n      }, true);\r\n      this._needRender = true;\r\n    }\r\n  });\r\n  on('shadow.radius', evt => {\r\n    for (let i = 0; i < this._gfx.scene.children.length; i++) {\r\n      if (this._gfx.scene.children[i].shadow !== undefined) {\r\n        const light = this._gfx.scene.children[i];\r\n        light.shadow.radius = evt.value;\r\n        this._needRender = true;\r\n      }\r\n    }\r\n  });\r\n  on('fps', () => {\r\n    this._fps.show(settings.now.fps);\r\n  });\r\n  on(['fog', 'fogNearFactor', 'fogFarFactor'], () => {\r\n    this._updateFog();\r\n    this._needRender = true;\r\n  });\r\n  on('fogAlpha', () => {\r\n    const {\r\n      fogAlpha\r\n    } = settings.now;\r\n    if (fogAlpha < 0 || fogAlpha > 1) {\r\n      this.logger.warn('fogAlpha must belong range [0,1]');\r\n    }\r\n    this._fogAlphaChanged();\r\n    this._needRender = true;\r\n  });\r\n  on('autoResolution', evt => {\r\n    if (evt.value && !this._gfxScore) {\r\n      this.logger.warn('Benchmarks are missed, autoresolution will not work! ' + 'Autoresolution should be set during miew startup.');\r\n    }\r\n  });\r\n  on('stereo', () => {\r\n    this._embedWebXR(settings.now.stereo === 'WEBVR');\r\n    this._needRender = true;\r\n  });\r\n  on(['transparency', 'palette'], () => {\r\n    this.rebuildAll();\r\n  });\r\n  on('resolution', () => {\r\n    // update complex visuals\r\n    this.rebuildAll();\r\n\r\n    // update volume visual\r\n    const volume = this._getVolumeVisual();\r\n    if (volume) {\r\n      volume.getMesh().material.updateDefines();\r\n      this._needRender = true;\r\n    }\r\n  });\r\n  on(['axes', 'fxaa', 'ao', 'outline.on', 'outline.color', 'outline.threshold', 'outline.thickness'], () => {\r\n    this._needRender = true;\r\n  });\r\n};\r\n\r\n/**\r\n * Set parameter value.\r\n * @param {string|object} params - Parameter name or path (e.g. 'modes.BS.atom') or even settings object.\r\n * @param {*=} value - Value.\r\n */\r\nMiew.prototype.set = function (params, value) {\r\n  settings.set(params, value);\r\n};\r\n\r\n/**\r\n * Select atoms with selection string.\r\n * @param {string} expression - string expression of selection\r\n * @param {boolean=} append - true to append selection atoms to current selection, false to rewrite selection\r\n */\r\nMiew.prototype.select = function (expression, append) {\r\n  const visual = this._getComplexVisual();\r\n  if (!visual) {\r\n    return;\r\n  }\r\n  let sel = expression;\r\n  if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isString(expression)) {\r\n    sel = Miew_selectors.parse(expression).selector;\r\n  }\r\n  visual.select(sel, append);\r\n  this._lastPick = null;\r\n  this._updateInfoPanel();\r\n  this._needRender = true;\r\n};\r\nconst VIEW_VERSION = '1';\r\n\r\n/**\r\n * Get or set view info packed into string.\r\n *\r\n * **Note:** view is stored for *left-handed* cs, euler angles are stored in radians and *ZXY-order*,\r\n *\r\n * @param {string=} expression - Optional string encoded the view\r\n */\r\nMiew.prototype.view = function (expression) {\r\n  const self = this;\r\n  const {\r\n    pivot\r\n  } = this._gfx;\r\n  let transform = [];\r\n  const eulerOrder = 'ZXY';\r\n  function encode() {\r\n    const pos = pivot.position;\r\n    const scale = self._objectControls.getScale() / settings.now.radiusToFit;\r\n    const euler = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Euler();\r\n    euler.setFromQuaternion(self._objectControls.getOrientation(), eulerOrder);\r\n    transform = [pos.x, pos.y, pos.z, scale, euler.x, euler.y, euler.z];\r\n    return VIEW_VERSION + utils.arrayToBase64(transform, Float32Array);\r\n  }\r\n  function decode() {\r\n    // backwards compatible: old non-versioned view is the 0th version\r\n    if (expression.length === 40) {\r\n      expression = `0${expression}`;\r\n    }\r\n    const version = expression[0];\r\n    transform = utils.arrayFromBase64(expression.substr(1), Float32Array);\r\n\r\n    // apply adapter for old versions\r\n    if (version !== VIEW_VERSION) {\r\n      if (version === '0') {\r\n        // cancel radiusToFit included in old views\r\n        transform[3] /= 8.0;\r\n      } else {\r\n        // do nothing\r\n        self.logger.warn(`Encoded view version mismatch, stored as ${version} vs ${VIEW_VERSION} expected`);\r\n        return;\r\n      }\r\n    }\r\n    const interpolator = self._interpolator;\r\n    const srcView = interpolator.createView();\r\n    srcView.position.copy(pivot.position);\r\n    srcView.scale = self._objectControls.getScale();\r\n    srcView.orientation.copy(self._objectControls.getOrientation());\r\n    const dstView = interpolator.createView();\r\n    dstView.position.set(transform[0], transform[1], transform[2]);\r\n\r\n    // hack to make preset views work after we moved centering offset to visual nodes\r\n    // FIXME should only store main pivot offset in preset\r\n    if (self._getComplexVisual()) {\r\n      dstView.position.sub(self._getComplexVisual().position);\r\n    }\r\n    dstView.scale = transform[3]; // eslint-disable-line prefer-destructuring\r\n    dstView.orientation.setFromEuler(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Euler(transform[4], transform[5], transform[6], eulerOrder));\r\n    interpolator.setup(srcView, dstView);\r\n  }\r\n  if (typeof expression === 'undefined') {\r\n    return encode();\r\n  }\r\n  decode();\r\n  return expression;\r\n};\r\n\r\n/*\r\n   * Update current view due to viewinterpolator state\r\n   */\r\nMiew.prototype._updateView = function () {\r\n  const self = this;\r\n  const {\r\n    pivot\r\n  } = this._gfx;\r\n  const interpolator = this._interpolator;\r\n  if (!interpolator.wasStarted()) {\r\n    interpolator.start();\r\n  }\r\n  if (!interpolator.isMoving()) {\r\n    return;\r\n  }\r\n  const res = interpolator.getCurrentView();\r\n  if (res.success) {\r\n    const curr = res.view;\r\n    pivot.position.copy(curr.position);\r\n    self._objectControls.setScale(curr.scale * settings.now.radiusToFit);\r\n    self._objectControls.setOrientation(curr.orientation);\r\n    this.dispatchEvent({\r\n      type: 'transform'\r\n    });\r\n    self._needRender = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Translate object by vector\r\n * @param {number} x - translation value (Ang) along model's X axis\r\n * @param {number} y - translation value (Ang) along model's Y axis\r\n * @param {number} z - translation value (Ang) along model's Z axis\r\n */\r\nMiew.prototype.translate = function (x, y, z) {\r\n  this._objectControls.translatePivot(x, y, z);\r\n  this.dispatchEvent({\r\n    type: 'transform'\r\n  });\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Rotate object by Euler angles\r\n * @param {number} x - rotation angle around X axis in radians\r\n * @param {number} y - rotation angle around Y axis in radians\r\n * @param {number} z - rotation angle around Z axis in radians\r\n */\r\nMiew.prototype.rotate = function (x, y, z) {\r\n  this._objectControls.rotate(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Quaternion().setFromEuler(new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Euler(x, y, z, 'XYZ')));\r\n  this.dispatchEvent({\r\n    type: 'transform'\r\n  });\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Scale object by factor\r\n * @param {number} factor - scale multiplier, should greater than zero\r\n */\r\nMiew.prototype.scale = function (factor) {\r\n  if (factor <= 0) {\r\n    throw new RangeError('Scale should be greater than zero');\r\n  }\r\n  this._objectControls.scale(factor);\r\n  this.dispatchEvent({\r\n    type: 'transform'\r\n  });\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Center view on selection\r\n * @param {empty | subset | string} selector - defines part of molecule which must be centered (\r\n * empty - center on current selection;\r\n * subset - center on picked atom/residue/molecule;\r\n * string - center on atoms correspond to selection string)\r\n */\r\nMiew.prototype.center = function (selector) {\r\n  // no arguments - center on current selection;\r\n  if (selector === undefined) {\r\n    this.setPivotSubset();\r\n    this._needRender = true;\r\n    return;\r\n  }\r\n  // subset with atom or residue - center on picked atom/residue;\r\n  if (selector.obj !== undefined && ('atom' in selector.obj || 'residue' in selector.obj)) {\r\n    // from event with selection\r\n    if ('atom' in selector.obj) {\r\n      this.setPivotAtom(selector.obj.atom);\r\n    } else {\r\n      this.setPivotResidue(selector.obj.residue);\r\n    }\r\n    this._needRender = true;\r\n    return;\r\n  }\r\n  // string - center on atoms correspond to selection string\r\n  if (selector.obj === undefined && selector !== '') {\r\n    const sel = Miew_selectors.parse(selector);\r\n    if (sel.error === undefined) {\r\n      this.setPivotSubset(sel);\r\n      this._needRender = true;\r\n      return;\r\n    }\r\n  }\r\n  // empty subset or incorrect/empty string - center on all molecule;\r\n  this.resetPivot();\r\n  this._needRender = true;\r\n};\r\n\r\n/**\r\n * Build selector that contains all atoms within given distance from group of atoms\r\n * @param {Selector} selector - selector describing source group of atoms\r\n * @param {number} radius - distance\r\n * @returns {Selector} selector describing result group of atoms\r\n */\r\nMiew.prototype.within = function (selector, radius) {\r\n  const visual = this._getComplexVisual();\r\n  if (!visual) {\r\n    return Miew_selectors.None();\r\n  }\r\n  if (selector instanceof String) {\r\n    selector = Miew_selectors.parse(selector);\r\n  }\r\n  const res = visual.within(selector, radius);\r\n  if (res) {\r\n    visual.rebuildSelectionGeometry();\r\n    this._needRender = true;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get atom position in 2D canvas coords\r\n * @param {string} fullAtomName - full atom name, like A.38.CG\r\n * @returns {Object} {x, y} or false if atom not found\r\n */\r\nMiew.prototype.projected = function (fullAtomName, complexName) {\r\n  const visual = this._getComplexVisual(complexName);\r\n  if (!visual) {\r\n    return false;\r\n  }\r\n  const atom = visual.getComplex().getAtomByFullname(fullAtomName);\r\n  if (atom === null) {\r\n    return false;\r\n  }\r\n  const pos = atom.position.clone();\r\n  // we consider atom position to be affected only by common complex transform\r\n  // ignoring any transformations that may add during editing\r\n  this._gfx.pivot.updateMatrixWorldRecursive();\r\n  this._gfx.camera.updateMatrixWorldRecursive();\r\n  this._gfx.pivot.localToWorld(pos);\r\n  pos.project(this._gfx.camera);\r\n  return {\r\n    x: (pos.x + 1.0) * 0.5 * this._gfx.width,\r\n    y: (1.0 - pos.y) * 0.5 * this._gfx.height\r\n  };\r\n};\r\n\r\n/**\r\n * Replace secondary structure with calculated one.\r\n *\r\n * DSSP algorithm implementation is used.\r\n *\r\n * Kabsch W, Sander C. 1983. Dictionary of protein secondary structure: pattern recognition of hydrogen-bonded and\r\n * geometrical features. Biopolymers. 22(12):2577-2637. doi:10.1002/bip.360221211.\r\n *\r\n * @param {string=} complexName - complex name\r\n */\r\nMiew.prototype.dssp = function (complexName) {\r\n  const visual = this._getComplexVisual(complexName);\r\n  if (!visual) {\r\n    return;\r\n  }\r\n  visual.getComplex().dssp();\r\n\r\n  // rebuild dependent representations (cartoon or ss-colored)\r\n  visual._reprList.forEach(rep => {\r\n    if (rep.mode.id === 'CA' || rep.colorer.id === 'SS') {\r\n      rep.needsRebuild = true;\r\n    }\r\n  });\r\n};\r\nMiew.prototype.exportCML = function () {\r\n  const self = this;\r\n  function extractRotation(m) {\r\n    const xAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const yAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    const zAxis = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector3();\r\n    m.extractBasis(xAxis, yAxis, zAxis);\r\n    xAxis.normalize();\r\n    yAxis.normalize();\r\n    zAxis.normalize();\r\n    const retMat = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Matrix4();\r\n    retMat.identity();\r\n    retMat.makeBasis(xAxis, yAxis, zAxis);\r\n    return retMat;\r\n  }\r\n  function updateCMLData(complex) {\r\n    const {\r\n      root\r\n    } = self._gfx;\r\n    const mat = extractRotation(root.matrixWorld);\r\n    const v4 = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4(0, 0, 0, 0);\r\n    const vCenter = new external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject.Vector4(0, 0, 0, 0);\r\n    let xml = null;\r\n    let ap = null;\r\n\r\n    // update atoms in cml\r\n    complex.forEachAtom(atom => {\r\n      if (atom.xmlNodeRef && atom.xmlNodeRef.xmlNode) {\r\n        xml = atom.xmlNodeRef.xmlNode;\r\n        ap = atom.position;\r\n        v4.set(ap.x, ap.y, ap.z, 1.0);\r\n        v4.applyMatrix4(mat);\r\n        xml.setAttribute('x3', v4.x.toString());\r\n        xml.setAttribute('y3', v4.y.toString());\r\n        xml.setAttribute('z3', v4.z.toString());\r\n        xml.removeAttribute('x2');\r\n        xml.removeAttribute('y2');\r\n      }\r\n    });\r\n    // update stereo groups in cml\r\n    complex.forEachSGroup(sGroup => {\r\n      if (sGroup.xmlNodeRef && sGroup.xmlNodeRef.xmlNode) {\r\n        xml = sGroup.xmlNodeRef.xmlNode;\r\n        ap = sGroup.getPosition();\r\n        v4.set(ap.x, ap.y, ap.z, 1.0);\r\n        const cp = sGroup.getCentralPoint();\r\n        if (cp === null) {\r\n          v4.applyMatrix4(mat);\r\n        } else {\r\n          vCenter.set(cp.x, cp.y, cp.z, 0.0);\r\n          v4.add(vCenter);\r\n          v4.applyMatrix4(mat); // pos in global space\r\n          vCenter.set(cp.x, cp.y, cp.z, 1.0);\r\n          vCenter.applyMatrix4(mat);\r\n          v4.sub(vCenter);\r\n        }\r\n        xml.setAttribute('x', v4.x.toString());\r\n        xml.setAttribute('y', v4.y.toString());\r\n        xml.setAttribute('z', v4.z.toString());\r\n      }\r\n    });\r\n  }\r\n  const visual = self._getComplexVisual();\r\n  const complex = visual ? visual.getComplex() : null;\r\n  if (complex && complex.originalCML) {\r\n    updateCMLData(complex);\r\n\r\n    // serialize xml structure to string\r\n    const oSerializer = new XMLSerializer();\r\n    return oSerializer.serializeToString(complex.originalCML);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Reproduce the RCSB PDB Molecule of the Month style by David S. Goodsell\r\n *\r\n * @see http://pdb101.rcsb.org/motm/motm-about\r\n */\r\nMiew.prototype.motm = function () {\r\n  settings.set({\r\n    fogColorEnable: true,\r\n    fogColor: 0x000000,\r\n    outline: {\r\n      on: true,\r\n      threshold: 0.01\r\n    },\r\n    bg: {\r\n      color: 0xffffff\r\n    }\r\n  });\r\n  this._forEachComplexVisual(visual => {\r\n    const rep = [];\r\n    const complex = visual.getComplex();\r\n    const palette = gfx_palettes.get(settings.now.palette);\r\n    for (let i = 0; i < complex.getChainCount(); i++) {\r\n      const curChainName = complex._chains[i]._name;\r\n      const curChainColor = palette.getChainColor(curChainName);\r\n      rep[i] = {\r\n        selector: `chain ${curChainName}`,\r\n        mode: 'VW',\r\n        colorer: ['CB', {\r\n          color: curChainColor,\r\n          factor: 0.9\r\n        }],\r\n        material: 'FL'\r\n      };\r\n    }\r\n    visual.resetReps(rep);\r\n  });\r\n};\r\nMiew.prototype.VERSION =   true && \"0.11.0\" || 0;\r\n\r\n// Uncomment this to get debug trace:\r\n// Miew.prototype.debugTracer = new utils.DebugTracer(Miew.prototype);\r\n\r\nexternal_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].assign(Miew, /** @lends Miew */{\r\n  VERSION: Miew.prototype.VERSION,\r\n  registeredPlugins: [],\r\n  // export namespaces // TODO: WIP: refactoring external interface\r\n  chem: chem,\r\n  io: io,\r\n  modes: gfx_modes,\r\n  colorers: gfx_colorers,\r\n  materials: gfx_materials,\r\n  palettes: gfx_palettes,\r\n  options: options,\r\n  settings: settings,\r\n  utils: utils,\r\n  gfx: {\r\n    Representation: gfx_Representation\r\n  },\r\n  /**\r\n   * Third-party libraries packaged together with Miew.\r\n   *\r\n   * @property {object} lodash - [Lodash](https://lodash.com/), a modern JavaScript utility library delivering\r\n   *   modularity, performance & extras.\r\n   * @property {object} three - [three.js](https://threejs.org/), JavaScript 3D library.\r\n   *\r\n   * @example\r\n   * var _ = Miew.thirdParty.lodash;\r\n   * var opts = _.merge({ ... }, Miew.options.fromURL(window.location.search));\r\n   * var miew = new Miew(opts);\r\n   */\r\n  thirdParty: {\r\n    lodash: external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"],\r\n    three: external_module_three_commonjs_three_commonjs2_three_amd_three_root_THREE_namespaceObject\r\n  }\r\n});\r\n/* harmony default export */ const src_Miew = (Miew);\r\n// EXTERNAL MODULE: ./src/utils/MiewCLIParser.js\r\nvar MiewCLIParser = __nested_webpack_require_130507__(89);\r\n;// CONCATENATED MODULE: ./src/utils/MiewCLIHelp.js\r\n\r\n\r\nconst modeIdDesc = {\r\n  $help: ['Rendering mode shortcut', '    BS - balls and sticks mode', '    LN - lines mode', '    LC - licorice mode', '    VW - van der waals mode', '    TR - trace mode', '    TU - tube mode', '    CA - cartoon mode', '    SA - isosurface mode', '    QS - quick surface mode', '    SE - solvent excluded mode', '    TX - text mode'],\r\n  BS: {\r\n    $help: ['   Balls and sticks', '      aromrad = <number> #aromatic radius', '      atom = <number>    #atom radius', '      bond = <number>    #bond radius', '      multibond = <bool> #use multibond', '      showarom = <bool>  #show aromatic', '      space = <number>   #space value\\n']\r\n  },\r\n  CA: {\r\n    $help: ['   Cartoon', '      arrow = <number>   #arrow size', '      depth = <number>   #depth of surface', '      heightSegmentsRatio = <number>', '      radius = <number>  #tube radius', '      tension = <number> #', '      width = <number>  #secondary width\\n']\r\n  },\r\n  LN: {\r\n    $help: ['   Lines', '      atom = <number>    #atom radius', '      chunkarom = <number>', '      multibond = <bool> #use multibond', '      showarom = <bool>  #show aromatic', '      offsarom = <number>\\n']\r\n  },\r\n  LC: {\r\n    $help: ['   Licorice', '      aromrad = <number> #aromatic radius', '      bond = <number>    #bond radius', '      multibond = <bool> #use multibond', '      showarom = <bool>  #show aromatic', '      space = <number>   #space value\\n']\r\n  },\r\n  VW: {\r\n    $help: ['   Van der Waals', '      nothing\\n']\r\n  },\r\n  TR: {\r\n    $help: ['   Trace', '      radius = <number>  #tube radius\\n']\r\n  },\r\n  TU: {\r\n    $help: ['   Tube', '      heightSegmentsRatio = <number>', '      radius = <number>  #tube radius', '      tension = <number> \\n']\r\n  },\r\n  SA: {\r\n    $help: ['   Surface', '      zClip = <bool> #clip z plane\\n']\r\n  },\r\n  QS: {\r\n    $help: ['   Quick surface', '      isoValue = <number>', '      scale = <number>', '      wireframe = <bool>', '      zClip = <bool> #clip z plane\\n']\r\n  },\r\n  SE: {\r\n    $help: ['   Solvent excluded surface', '      zClip = <bool> #clip z plane\\n']\r\n  },\r\n  TX: {\r\n    $help: ['   Text mode', '      template = <format string> string that can include \"{{ id }}\"', '          it will be replaced by value, id can be one of next:', '          serial, name, type, sequence, residue, chain, hetatm, water\\n', '      horizontalAlign = <string> {\"left\", \"right\", \"center\"}', '      verticalAlign = <string> {\"top\", \"bottom\", \"middle\"}', '      dx = <number> #offset along x', '      dy = <number> #offset along y', '      dz = <number> #offset along z', '      fg = <string> #text color modificator', '           could be keyword, named color or hex', '      fg = <string> #back color modificator', '           could be keyword, named color or hex', '      showBg = <bool> #if set show background', '           plate under text']\r\n  }\r\n};\r\nconst colorDesc = {\r\n  $help: ['Coloring mode shortcut', '    EL - color by element', '    CH - color by chain', '    SQ - color by sequence', '    RT - color by residue type', '    SS - color by secondary structure', '    UN - uniform'],\r\n  UN: {\r\n    $help: ['Parameters of coloring modes customization', '   Uniform', '      color = <number|color> #RGB->HEX->dec\\n'],\r\n    color: {\r\n      $help: Object.keys(gfx_palettes.get(settings.now.palette).namedColors).sort().join('\\n')\r\n    }\r\n  }\r\n};\r\nconst materialDesc = {\r\n  $help: ['Material shortcut', '    DF - diffuse', '    TR - transparent', '    SF - soft plastic', '    PL - glossy plastic', '    ME - metal', '    GL - glass']\r\n};\r\nconst addRepDesc = {\r\n  $help: ['Short (packed) representation description as a set of variables', '    s=<EXPRESSION>', '        selector property', '    m=<MODE_ID>[!<PARAMETER>:<VALUE>[,...]]', '        render mode property', '    c=<COLORER_ID>[!<PARAMETER>:<VALUE>[,...]]', '        color mode property', '    mt=<MATERIAL_ID>', '        material property'],\r\n  s: {\r\n    $help: 'Selection expression string as it is in menu->representations->selection'\r\n  },\r\n  m: modeIdDesc,\r\n  c: colorDesc,\r\n  mt: materialDesc\r\n};\r\nconst setGetParameterDesc = {\r\n  $help: ['Parameters of rendering modes customization: modes', 'Parameters of colorer customization: colorers', 'Autobuild: autobuild = (<number>|<bool>)'],\r\n  modes: modeIdDesc,\r\n  colorers: colorDesc\r\n};\r\nconst help = {\r\n  $help: ['help (<cmd name>| <path to property>)', 'You can get detailed information about command options', '   using \"help cmd.opt.opt.[...]\"\\n', '   you can use one line comments', '   everything started from (#|//) will be skipped', '   Example: >build //some comment\\n', 'List of available commands:'],\r\n  reset: {\r\n    $help: ['Reload current object, delete all representations', '    Nothing will work until load new object']\r\n  },\r\n  load: {\r\n    $help: ['load (<PDBID>|<URL>|-f [<*.NC FILE URL STRING>])', '    Load new pdb object from selected source'],\r\n    PDBID: {\r\n      $help: 'pdb id in remote molecule database'\r\n    },\r\n    URL: {\r\n      $help: 'url to source file'\r\n    },\r\n    f: {\r\n      $help: ['open file system dialog to fetch local file', 'optionally you can determine trajectory file', 'via URL for *.top model']\r\n    }\r\n  },\r\n  clear: {\r\n    $help: 'No args. Clear terminal'\r\n  },\r\n  add: {\r\n    $help: ['add [<REP_NAME>] [<DESCRIPTION>]', '    Add new item to representation set with', '    default or <DESCRIPTION> params'],\r\n    REP_NAME: {\r\n      $help: 'Identifier string [_,a-z,A-Z,0-9] can not start from digit'\r\n    },\r\n    DESCRIPTION: addRepDesc\r\n  },\r\n  rep: {\r\n    $help: ['rep [<REP_NAME>|<REP_INDEX>] [<DESCRIPTION>]', '    set current representation by name or index', '    edit current representation by <DESCRIPTION>'],\r\n    REP_NAME: {\r\n      $help: ['Identifier string [_,a-z,A-Z,0-9] can not start from digit', 'Must be declared before']\r\n    },\r\n    REP_INDEX: {\r\n      $help: 'Index of available representation'\r\n    },\r\n    DESCRIPTION: addRepDesc\r\n  },\r\n  remove: {\r\n    $help: ['remove (<REP_NAME>|<REP_INDEX>)', 'Remove representation by name or index'],\r\n    REP_NAME: {\r\n      $help: ['Identifier string [_,a-z,A-Z,0-9] can not start from digit', 'Must be declared before']\r\n    },\r\n    REP_INDEX: {\r\n      $help: 'Index of available representation'\r\n    }\r\n  },\r\n  selector: {\r\n    $help: ['selector <EXPRESSION>', '   set selector from EXPRESSION to current representation'],\r\n    EXPRESSION: {\r\n      $help: 'Selection expression string as it is in menu->representations->selection'\r\n    }\r\n  },\r\n  mode: {\r\n    $help: ['mode <MODE_ID> [<PARAMETER>=<VALUE>...]', '   set rendering mode and apply parameters to current representation'],\r\n    MODE_ID: modeIdDesc\r\n  },\r\n  color: {\r\n    $help: ['color <COLORER_ID> [<PARAMETER>=<VALUE>...]', '   set colorer and apply parameters to current representation'],\r\n    COLORER_ID: colorDesc\r\n  },\r\n  material: {\r\n    $help: ['material <MATERIAL_ID>', '   set material to current representation'],\r\n    MATERIAL_ID: materialDesc\r\n  },\r\n  build: {\r\n    $help: 'build help str',\r\n    add: {\r\n      $help: 'build.add',\r\n      new: {\r\n        $help: ['add.new', 'add.new new line 1', 'add.new new line 2', 'add.new new line 3']\r\n      }\r\n    },\r\n    del: {\r\n      $help: 'build.del'\r\n    }\r\n  },\r\n  list: {\r\n    $help: ['list [-e|-s|<REP_NAME>|<REP_INDEX>]', 'Print representations if no args print list of representations', '    -e expand list and show all representations', '    -s show all user-registered selectors', '    <REP_NAME>|<REP_INDEX> show only current representation']\r\n  },\r\n  hide: {\r\n    $help: ['hide (<REP_NAME>|<REP_INDEX>)', 'Hide representation referenced in args']\r\n  },\r\n  show: {\r\n    $help: ['show (<REP_NAME>|<REP_INDEX>)', 'Show representation referenced in args']\r\n  },\r\n  get: {\r\n    $help: ['get <PARAMETER>', 'Print <PARAMETER> value', '    <PARAMETER> - path to option use get.PARAMETER to get more info'],\r\n    PARAMETER: setGetParameterDesc\r\n  },\r\n  set: {\r\n    $help: ['set <PARAMETER> <VALUE>', 'Set <PARAMETER> with <VALUE>', '    <PARAMETER> - path to option use set.PARAMETER to get more info'],\r\n    PARAMETER: setGetParameterDesc\r\n  },\r\n  set_save: {\r\n    $help: ['set_save', 'Save current settings to cookie']\r\n  },\r\n  set_restore: {\r\n    $help: ['set_restore', 'Load and apply settings from cookie']\r\n  },\r\n  set_reset: {\r\n    $help: ['set_reset', 'Reset current settings to the defaults']\r\n  },\r\n  preset: {\r\n    $help: ['preset [<PRESET>]', 'Reset current representation or set preset to <PRESET>'],\r\n    PRESET: {\r\n      $help: ['default', 'wire', 'small', 'macro']\r\n    }\r\n  },\r\n  unit: {\r\n    $help: ['unit [<unit_id>]', 'Change current biological structure view. Zero <unit_id> value means asymmetric unit,', 'positive values set an assembly with corresponding number.', 'Being called with no parameters command prints current unit information.']\r\n  },\r\n  view: {\r\n    $help: ['view [<ENCODED_VIEW>]', 'Get current encoded view or set if ENCODED_VIEW placed as argument'],\r\n    ENCODED_VIEW: {\r\n      $help: ['encoded view matrix string (binary code)']\r\n    }\r\n  },\r\n  rotate: {\r\n    $help: ['rotate (x|y|z) [<DEGREES>] [(x|y|z) [<DEGREES>]]...', 'Rotate scene']\r\n  },\r\n  scale: {\r\n    $help: ['scale <SCALE>', 'Scale scene']\r\n  },\r\n  select: {\r\n    $help: ['select <SELECTOR_STRING> [as <SELECTOR_NAME>]', 'Select atoms using selector defined in SELECTOR_STRING', '    and if SELECTOR_NAME is defined register it in viewer', '    you can use it later as a complex selector']\r\n  },\r\n  within: {\r\n    $help: ['within <DISTANCE> of <SELECTOR_STRING> as <SELECTOR_NAME>', 'Build within named selector', '    DISTANCE        <number>', '    SELECTOR_STRING <string(selection language)>', '    SELECTOR_NAME   <identifier>']\r\n  },\r\n  url: {\r\n    $help: ['url [-s] [-v]', 'Report URL encoded scene', '    if -s set that include settings in the URL', '    if -v set that include view in the URL']\r\n  },\r\n  screenshot: {\r\n    $help: ['screenshot [<WIDTH> [<HEIGHT>]]', 'Make a screenshot of the scene', '    WIDTH  <number> in pixels', '    HEIGHT <number> in pixels, equal to WIDTH by default']\r\n  },\r\n  line: {\r\n    $help: ['line <first_atom_path> <second_atom_path> [<PARAMETER>=<VALUE>]', 'Draw dashed line between two specified atoms']\r\n  },\r\n  removeobj: {\r\n    $help: ['removeobj <id>', 'Remove scene object by its index. Indices could be obtained by <listobj> command']\r\n  },\r\n  listobj: {\r\n    $help: ['listobj', 'Display the list of all existing scene objects']\r\n  }\r\n};\r\n/* harmony default export */ const MiewCLIHelp = (help);\r\n;// CONCATENATED MODULE: ./src/Miew-cli.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst {\r\n  chem: {\r\n    selectors: Miew_cli_selectors\r\n  },\r\n  modes: Miew_cli_modes,\r\n  colorers: Miew_cli_colorers,\r\n  materials: Miew_cli_materials,\r\n  palettes: Miew_cli_palettes,\r\n  options: Miew_cli_options,\r\n  settings: Miew_cli_settings\r\n} = src_Miew;\r\nfunction None() {}\r\nconst NULL = function () {\r\n  const obj = new None();\r\n  return function () {\r\n    return obj;\r\n  };\r\n}();\r\nclass RepresentationMap {\r\n  constructor() {\r\n    this.representationMap = {};\r\n    this.representationID = {};\r\n  }\r\n  get(strId) {\r\n    return this.representationMap[strId] || this.representationID[strId] || '<no name>';\r\n  }\r\n  add(strId, index) {\r\n    if (strId === -1) {\r\n      return 'Can not create representation: there is no data';\r\n    }\r\n    if (index !== undefined) {\r\n      if (!this.representationMap.hasOwnProperty(strId)) {\r\n        this.representationMap[strId.toString()] = index;\r\n        this.representationID[index] = strId.toString();\r\n      } else {\r\n        return 'This name has already existed, registered without name';\r\n      }\r\n    }\r\n    return `Representation ${strId} successfully added`;\r\n  }\r\n  remove(index) {\r\n    if (index && this.representationID.hasOwnProperty(index)) {\r\n      delete this.representationMap[this.representationID[index]];\r\n      delete this.representationID[index];\r\n    }\r\n    const sortedKeys = Object.keys(this.representationID).sort();\r\n    for (const i in sortedKeys) {\r\n      if (sortedKeys.hasOwnProperty(i)) {\r\n        const id = sortedKeys[i];\r\n        if (id > index) {\r\n          this.representationID[id - 1] = this.representationID[id];\r\n          this.representationMap[this.representationID[id]] -= 1;\r\n          delete this.representationID[id];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  clear() {\r\n    this.representationMap = {};\r\n    this.representationID = {};\r\n  }\r\n}\r\nconst representationsStorage = new RepresentationMap();\r\nfunction keyRemap(key) {\r\n  const keys = {\r\n    s: 'selector',\r\n    m: 'mode',\r\n    c: 'colorer',\r\n    mt: 'material',\r\n    mode: 'modes',\r\n    color: 'colorers',\r\n    colorer: 'colorers',\r\n    select: 'selector',\r\n    material: 'materials',\r\n    selector: 'selector'\r\n  };\r\n  const ans = keys[key];\r\n  return ans === undefined ? key : ans;\r\n}\r\nclass CLIUtils {\r\n  list(miew, repMap, key) {\r\n    let ret = '';\r\n    if (miew && repMap !== undefined) {\r\n      if (key === undefined || key === '-e') {\r\n        const count = miew.repCount();\r\n        for (let i = 0; i < count; i++) {\r\n          ret += this.listRep(miew, repMap, i, key);\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  listRep(miew, repMap, repIndex, key) {\r\n    let ret = '';\r\n    const rep = miew.repGet(repIndex);\r\n    if (!rep) {\r\n      logger.warn(`Rep ${repIndex} does not exist!`);\r\n      return ret;\r\n    }\r\n    const index = repIndex;\r\n    const repName = repMap.get(index);\r\n    const {\r\n      mode,\r\n      colorer\r\n    } = rep;\r\n    const selectionStr = rep.selectorString;\r\n    const material = rep.materialPreset;\r\n    ret += `#${index} : ${mode.name}${repName === '<no name>' ? '' : `, ${repName}`}\\n`;\r\n    if (key !== undefined) {\r\n      ret += `    selection : \"${selectionStr}\"\\n`;\r\n      ret += `    mode      : (${mode.id}), ${mode.name}\\n`;\r\n      ret += `    colorer   : (${colorer.id}), ${colorer.name}\\n`;\r\n      ret += `    material  : (${material.id}), ${material.name}\\n`;\r\n    }\r\n    return ret;\r\n  }\r\n  listSelector(miew, context) {\r\n    let ret = '';\r\n    for (const k in context) {\r\n      if (context.hasOwnProperty(k)) {\r\n        ret += `${k} : \"${context[k]}\"\\n`;\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  listObjs(miew) {\r\n    const objs = miew._objects;\r\n    if (!objs || !Array.isArray(objs) || objs.length === 0) {\r\n      return 'There are no objects on the scene';\r\n    }\r\n    const strList = [];\r\n    for (let i = 0, n = objs.length; i < n; ++i) {\r\n      strList[i] = `${i}: ${objs[i].toString()}`;\r\n    }\r\n    return strList.join('\\n');\r\n  }\r\n  joinHelpStr(helpData) {\r\n    if (helpData instanceof Array) {\r\n      return helpData.join('\\n');\r\n    }\r\n    return helpData;\r\n  }\r\n  help(path) {\r\n    if (external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(path)) {\r\n      return `${this.joinHelpStr(MiewCLIHelp.$help)}\\n${external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].slice(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].sortBy(external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].keys(MiewCLIHelp)), 1).join(', ')}\\n`;\r\n    }\r\n    const helpItem = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(MiewCLIHelp, path);\r\n    return external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].isUndefined(helpItem) ? this.help() : `${this.joinHelpStr(helpItem.$help)}\\n`;\r\n  }\r\n  load(miew, arg) {\r\n    if (miew === undefined || arg === undefined || arg === '-f') {\r\n      return;\r\n    }\r\n    miew.awaitWhileCMDisInProcess();\r\n    const finish = () => miew.finishAwaitingCMDInProcess();\r\n    miew.load(arg).then(finish, finish);\r\n  }\r\n  checkArg(key, arg, modificate) {\r\n    if (key !== undefined && arg !== undefined) {\r\n      if (keyRemap(key) === 'selector') {\r\n        const res = Miew_cli_selectors.parse(arg);\r\n        if (res.error !== undefined) {\r\n          const selExc = {\r\n            message: res.error\r\n          };\r\n          throw selExc;\r\n        }\r\n        if (modificate !== undefined && modificate) {\r\n          return res.selector;\r\n        }\r\n        return arg;\r\n      }\r\n      const modificators = {\r\n        colorers: Miew_cli_colorers,\r\n        modes: Miew_cli_modes,\r\n        materials: Miew_cli_materials\r\n      };\r\n      let modificator = key;\r\n      let temp;\r\n      while (modificator !== temp) {\r\n        temp = modificator;\r\n        modificator = keyRemap(temp);\r\n      }\r\n      if (modificators[modificator].get(arg) === undefined) {\r\n        const exc = {\r\n          message: `${arg} is not existed in ${modificator}`\r\n        };\r\n        throw exc;\r\n      }\r\n      return arg;\r\n    }\r\n    return NULL;\r\n  }\r\n  propagateProp(path, arg) {\r\n    if (path !== undefined) {\r\n      let argExc = {};\r\n      const adapter = Miew_cli_options.adapters[typeof external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(Miew_cli_settings.defaults, path)];\r\n      if (adapter === undefined) {\r\n        const pathExc = {\r\n          message: `${path} is not existed`\r\n        };\r\n        throw pathExc;\r\n      }\r\n      if ((path.endsWith('.color') || path.endsWith('.baseColor') || path.endsWith('.EL.carbon')) && typeof arg !== 'number') {\r\n        arg = Miew_cli_palettes.get(Miew_cli_settings.now.palette).getNamedColor(arg);\r\n      }\r\n      if (path.endsWith('.fg') || path.endsWith('.bg')) {\r\n        if (typeof arg !== 'number') {\r\n          const val = Miew_cli_palettes.get(Miew_cli_settings.now.palette).getNamedColor(arg, true);\r\n          if (val !== undefined) {\r\n            arg = `0x${val.toString(16)}`;\r\n          }\r\n        } else {\r\n          arg = `0x${arg.toString(16)}`;\r\n        }\r\n      }\r\n      if (path.endsWith('.template')) {\r\n        arg = arg.replace(/\\\\n/g, '\\n'); // NOSONAR\r\n      }\r\n      if (arg !== undefined && adapter(arg) !== arg && adapter(arg) !== arg > 0) {\r\n        argExc = {\r\n          message: `${path} must be a \"${typeof external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].get(Miew_cli_settings.defaults, path)}\"`\r\n        };\r\n        throw argExc;\r\n      }\r\n    }\r\n    return arg;\r\n  }\r\n  unquoteString(value) {\r\n    return utils.unquoteString(value);\r\n  }\r\n}\r\n// repIndexOrRepMap could be RepresentationMap or index\r\n\r\nconst utilFunctions = new CLIUtils();\r\nfunction CreateObjectPair(a, b) {\r\n  const obj = {};\r\n  obj[a] = b;\r\n  return obj;\r\n}\r\nfunction ArgList(arg) {\r\n  if (arg instanceof this.constructor) {\r\n    return arg;\r\n  }\r\n  if (arg instanceof Array) {\r\n    this._values = arg.slice(0);\r\n  } else if (arg) {\r\n    this._values = [arg];\r\n  } else {\r\n    this._values = [];\r\n  }\r\n}\r\nArgList.prototype.append = function (value) {\r\n  const values = this._values;\r\n  values[values.length] = value;\r\n  return this;\r\n};\r\nArgList.prototype.remove = function (value) {\r\n  const values = this._values;\r\n  const index = values.indexOf(value);\r\n  if (index >= 0) {\r\n    values.splice(index, 1);\r\n  }\r\n  return this;\r\n};\r\nArgList.prototype.toJSO = function (cliUtils, cmd, arg) {\r\n  const res = {};\r\n  const list = this._values;\r\n  for (let i = 0, n = list.length; i < n; ++i) {\r\n    external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"].set(res, list[i].id, cliUtils.propagateProp(`${keyRemap(cmd)}.${arg}.${list[i].id}`, list[i].val));\r\n  }\r\n  return res;\r\n};\r\nfunction Arg(_id, _val) {\r\n  this.id = _id;\r\n  this.val = _val;\r\n}\r\nconst cliutils = Object.create({});\r\ncliutils.Arg = Arg;\r\ncliutils.ArgList = ArgList;\r\ncliutils.miew = null;\r\ncliutils.echo = null;\r\ncliutils.representations = representationsStorage;\r\ncliutils.utils = utilFunctions;\r\ncliutils._ = external_module_lodash_commonjs_lodash_commonjs2_lodash_amd_lodash_root_namespaceObject[\"default\"];\r\ncliutils.CreateObjectPair = CreateObjectPair;\r\ncliutils.keyRemap = keyRemap;\r\ncliutils.Context = Miew_cli_selectors.Context;\r\ncliutils.ClearContext = Miew_cli_selectors.ClearContext;\r\ncliutils.NULL = NULL;\r\ncliutils.notimplemented = function () {\r\n  return this.NULL;\r\n};\r\nsrc_Miew.prototype.script = function (script, _printCallback, _errorCallback) {\r\n  MiewCLIParser.parser.yy.miew = this;\r\n  MiewCLIParser.parser.yy.echo = _printCallback;\r\n  MiewCLIParser.parser.yy.error = _errorCallback;\r\n  if (this.cmdQueue === undefined) {\r\n    this.cmdQueue = [];\r\n  }\r\n  if (this.commandInAction === undefined) {\r\n    this.commandInAction = false;\r\n  }\r\n  this.cmdQueue = this.cmdQueue.concat(script.split('\\n'));\r\n};\r\nsrc_Miew.prototype.awaitWhileCMDisInProcess = function () {\r\n  this.commandInAction = true;\r\n};\r\nsrc_Miew.prototype.finishAwaitingCMDInProcess = function () {\r\n  this.commandInAction = false;\r\n};\r\nsrc_Miew.prototype.isScriptingCommandAvailable = function () {\r\n  return this.commandInAction !== undefined && !this.commandInAction && this.cmdQueue !== undefined && this.cmdQueue.length > 0;\r\n};\r\nsrc_Miew.prototype.callNextCmd = function () {\r\n  if (this.isScriptingCommandAvailable()) {\r\n    const cmd = this.cmdQueue.shift();\r\n    const res = {};\r\n    res.success = false;\r\n    try {\r\n      MiewCLIParser.parser.parse(cmd);\r\n      res.success = true;\r\n    } catch (e) {\r\n      res.error = e.message;\r\n      MiewCLIParser.parser.yy.error(res.error);\r\n      this.finishAwaitingCMDInProcess();\r\n    }\r\n    return res;\r\n  }\r\n  return '';\r\n};\r\nMiewCLIParser.parser.yy = cliutils;\r\n// workaround for incorrect JISON parser generator for AMD module\r\nMiewCLIParser.parser.yy.parseError = MiewCLIParser.parser.parseError;\r\n;// CONCATENATED MODULE: ./src/index.js\r\n\r\n\r\n/* harmony default export */ const src = (src_Miew);\r\nvar __webpack_exports__default = __nested_webpack_exports__.A;\r\n\r\n\r\n//# sourceMappingURL=Miew.module.js.map\n\n//# sourceURL=webpack://my-app/./node_modules/miew/dist/Miew.module.js?")},"./node_modules/miew/node_modules/three/build/three.module.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACESFilmicToneMapping: () => (/* binding */ ACESFilmicToneMapping),\n/* harmony export */   AddEquation: () => (/* binding */ AddEquation),\n/* harmony export */   AddOperation: () => (/* binding */ AddOperation),\n/* harmony export */   AdditiveAnimationBlendMode: () => (/* binding */ AdditiveAnimationBlendMode),\n/* harmony export */   AdditiveBlending: () => (/* binding */ AdditiveBlending),\n/* harmony export */   AlphaFormat: () => (/* binding */ AlphaFormat),\n/* harmony export */   AlwaysCompare: () => (/* binding */ AlwaysCompare),\n/* harmony export */   AlwaysDepth: () => (/* binding */ AlwaysDepth),\n/* harmony export */   AlwaysStencilFunc: () => (/* binding */ AlwaysStencilFunc),\n/* harmony export */   AmbientLight: () => (/* binding */ AmbientLight),\n/* harmony export */   AmbientLightProbe: () => (/* binding */ AmbientLightProbe),\n/* harmony export */   AnimationAction: () => (/* binding */ AnimationAction),\n/* harmony export */   AnimationClip: () => (/* binding */ AnimationClip),\n/* harmony export */   AnimationLoader: () => (/* binding */ AnimationLoader),\n/* harmony export */   AnimationMixer: () => (/* binding */ AnimationMixer),\n/* harmony export */   AnimationObjectGroup: () => (/* binding */ AnimationObjectGroup),\n/* harmony export */   AnimationUtils: () => (/* binding */ AnimationUtils),\n/* harmony export */   ArcCurve: () => (/* binding */ ArcCurve),\n/* harmony export */   ArrayCamera: () => (/* binding */ ArrayCamera),\n/* harmony export */   ArrowHelper: () => (/* binding */ ArrowHelper),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioAnalyser: () => (/* binding */ AudioAnalyser),\n/* harmony export */   AudioContext: () => (/* binding */ AudioContext),\n/* harmony export */   AudioListener: () => (/* binding */ AudioListener),\n/* harmony export */   AudioLoader: () => (/* binding */ AudioLoader),\n/* harmony export */   AxesHelper: () => (/* binding */ AxesHelper),\n/* harmony export */   BackSide: () => (/* binding */ BackSide),\n/* harmony export */   BasicDepthPacking: () => (/* binding */ BasicDepthPacking),\n/* harmony export */   BasicShadowMap: () => (/* binding */ BasicShadowMap),\n/* harmony export */   Bone: () => (/* binding */ Bone),\n/* harmony export */   BooleanKeyframeTrack: () => (/* binding */ BooleanKeyframeTrack),\n/* harmony export */   Box2: () => (/* binding */ Box2),\n/* harmony export */   Box3: () => (/* binding */ Box3),\n/* harmony export */   Box3Helper: () => (/* binding */ Box3Helper),\n/* harmony export */   BoxBufferGeometry: () => (/* binding */ BoxBufferGeometry),\n/* harmony export */   BoxGeometry: () => (/* binding */ BoxGeometry),\n/* harmony export */   BoxHelper: () => (/* binding */ BoxHelper),\n/* harmony export */   BufferAttribute: () => (/* binding */ BufferAttribute),\n/* harmony export */   BufferGeometry: () => (/* binding */ BufferGeometry),\n/* harmony export */   BufferGeometryLoader: () => (/* binding */ BufferGeometryLoader),\n/* harmony export */   ByteType: () => (/* binding */ ByteType),\n/* harmony export */   Cache: () => (/* binding */ Cache),\n/* harmony export */   Camera: () => (/* binding */ Camera),\n/* harmony export */   CameraHelper: () => (/* binding */ CameraHelper),\n/* harmony export */   CanvasTexture: () => (/* binding */ CanvasTexture),\n/* harmony export */   CapsuleBufferGeometry: () => (/* binding */ CapsuleBufferGeometry),\n/* harmony export */   CapsuleGeometry: () => (/* binding */ CapsuleGeometry),\n/* harmony export */   CatmullRomCurve3: () => (/* binding */ CatmullRomCurve3),\n/* harmony export */   CineonToneMapping: () => (/* binding */ CineonToneMapping),\n/* harmony export */   CircleBufferGeometry: () => (/* binding */ CircleBufferGeometry),\n/* harmony export */   CircleGeometry: () => (/* binding */ CircleGeometry),\n/* harmony export */   ClampToEdgeWrapping: () => (/* binding */ ClampToEdgeWrapping),\n/* harmony export */   Clock: () => (/* binding */ Clock),\n/* harmony export */   Color: () => (/* binding */ Color),\n/* harmony export */   ColorKeyframeTrack: () => (/* binding */ ColorKeyframeTrack),\n/* harmony export */   ColorManagement: () => (/* binding */ ColorManagement),\n/* harmony export */   CompressedArrayTexture: () => (/* binding */ CompressedArrayTexture),\n/* harmony export */   CompressedTexture: () => (/* binding */ CompressedTexture),\n/* harmony export */   CompressedTextureLoader: () => (/* binding */ CompressedTextureLoader),\n/* harmony export */   ConeBufferGeometry: () => (/* binding */ ConeBufferGeometry),\n/* harmony export */   ConeGeometry: () => (/* binding */ ConeGeometry),\n/* harmony export */   CubeCamera: () => (/* binding */ CubeCamera),\n/* harmony export */   CubeReflectionMapping: () => (/* binding */ CubeReflectionMapping),\n/* harmony export */   CubeRefractionMapping: () => (/* binding */ CubeRefractionMapping),\n/* harmony export */   CubeTexture: () => (/* binding */ CubeTexture),\n/* harmony export */   CubeTextureLoader: () => (/* binding */ CubeTextureLoader),\n/* harmony export */   CubeUVReflectionMapping: () => (/* binding */ CubeUVReflectionMapping),\n/* harmony export */   CubicBezierCurve: () => (/* binding */ CubicBezierCurve),\n/* harmony export */   CubicBezierCurve3: () => (/* binding */ CubicBezierCurve3),\n/* harmony export */   CubicInterpolant: () => (/* binding */ CubicInterpolant),\n/* harmony export */   CullFaceBack: () => (/* binding */ CullFaceBack),\n/* harmony export */   CullFaceFront: () => (/* binding */ CullFaceFront),\n/* harmony export */   CullFaceFrontBack: () => (/* binding */ CullFaceFrontBack),\n/* harmony export */   CullFaceNone: () => (/* binding */ CullFaceNone),\n/* harmony export */   Curve: () => (/* binding */ Curve),\n/* harmony export */   CurvePath: () => (/* binding */ CurvePath),\n/* harmony export */   CustomBlending: () => (/* binding */ CustomBlending),\n/* harmony export */   CustomToneMapping: () => (/* binding */ CustomToneMapping),\n/* harmony export */   CylinderBufferGeometry: () => (/* binding */ CylinderBufferGeometry),\n/* harmony export */   CylinderGeometry: () => (/* binding */ CylinderGeometry),\n/* harmony export */   Cylindrical: () => (/* binding */ Cylindrical),\n/* harmony export */   Data3DTexture: () => (/* binding */ Data3DTexture),\n/* harmony export */   DataArrayTexture: () => (/* binding */ DataArrayTexture),\n/* harmony export */   DataTexture: () => (/* binding */ DataTexture),\n/* harmony export */   DataTextureLoader: () => (/* binding */ DataTextureLoader),\n/* harmony export */   DataUtils: () => (/* binding */ DataUtils),\n/* harmony export */   DecrementStencilOp: () => (/* binding */ DecrementStencilOp),\n/* harmony export */   DecrementWrapStencilOp: () => (/* binding */ DecrementWrapStencilOp),\n/* harmony export */   DefaultLoadingManager: () => (/* binding */ DefaultLoadingManager),\n/* harmony export */   DepthFormat: () => (/* binding */ DepthFormat),\n/* harmony export */   DepthStencilFormat: () => (/* binding */ DepthStencilFormat),\n/* harmony export */   DepthTexture: () => (/* binding */ DepthTexture),\n/* harmony export */   DirectionalLight: () => (/* binding */ DirectionalLight),\n/* harmony export */   DirectionalLightHelper: () => (/* binding */ DirectionalLightHelper),\n/* harmony export */   DiscreteInterpolant: () => (/* binding */ DiscreteInterpolant),\n/* harmony export */   DisplayP3ColorSpace: () => (/* binding */ DisplayP3ColorSpace),\n/* harmony export */   DodecahedronBufferGeometry: () => (/* binding */ DodecahedronBufferGeometry),\n/* harmony export */   DodecahedronGeometry: () => (/* binding */ DodecahedronGeometry),\n/* harmony export */   DoubleSide: () => (/* binding */ DoubleSide),\n/* harmony export */   DstAlphaFactor: () => (/* binding */ DstAlphaFactor),\n/* harmony export */   DstColorFactor: () => (/* binding */ DstColorFactor),\n/* harmony export */   DynamicCopyUsage: () => (/* binding */ DynamicCopyUsage),\n/* harmony export */   DynamicDrawUsage: () => (/* binding */ DynamicDrawUsage),\n/* harmony export */   DynamicReadUsage: () => (/* binding */ DynamicReadUsage),\n/* harmony export */   EdgesGeometry: () => (/* binding */ EdgesGeometry),\n/* harmony export */   EllipseCurve: () => (/* binding */ EllipseCurve),\n/* harmony export */   EqualCompare: () => (/* binding */ EqualCompare),\n/* harmony export */   EqualDepth: () => (/* binding */ EqualDepth),\n/* harmony export */   EqualStencilFunc: () => (/* binding */ EqualStencilFunc),\n/* harmony export */   EquirectangularReflectionMapping: () => (/* binding */ EquirectangularReflectionMapping),\n/* harmony export */   EquirectangularRefractionMapping: () => (/* binding */ EquirectangularRefractionMapping),\n/* harmony export */   Euler: () => (/* binding */ Euler),\n/* harmony export */   EventDispatcher: () => (/* binding */ EventDispatcher),\n/* harmony export */   ExtrudeBufferGeometry: () => (/* binding */ ExtrudeBufferGeometry),\n/* harmony export */   ExtrudeGeometry: () => (/* binding */ ExtrudeGeometry),\n/* harmony export */   FileLoader: () => (/* binding */ FileLoader),\n/* harmony export */   Float16BufferAttribute: () => (/* binding */ Float16BufferAttribute),\n/* harmony export */   Float32BufferAttribute: () => (/* binding */ Float32BufferAttribute),\n/* harmony export */   Float64BufferAttribute: () => (/* binding */ Float64BufferAttribute),\n/* harmony export */   FloatType: () => (/* binding */ FloatType),\n/* harmony export */   Fog: () => (/* binding */ Fog),\n/* harmony export */   FogExp2: () => (/* binding */ FogExp2),\n/* harmony export */   FramebufferTexture: () => (/* binding */ FramebufferTexture),\n/* harmony export */   FrontSide: () => (/* binding */ FrontSide),\n/* harmony export */   Frustum: () => (/* binding */ Frustum),\n/* harmony export */   GLBufferAttribute: () => (/* binding */ GLBufferAttribute),\n/* harmony export */   GLSL1: () => (/* binding */ GLSL1),\n/* harmony export */   GLSL3: () => (/* binding */ GLSL3),\n/* harmony export */   GreaterCompare: () => (/* binding */ GreaterCompare),\n/* harmony export */   GreaterDepth: () => (/* binding */ GreaterDepth),\n/* harmony export */   GreaterEqualCompare: () => (/* binding */ GreaterEqualCompare),\n/* harmony export */   GreaterEqualDepth: () => (/* binding */ GreaterEqualDepth),\n/* harmony export */   GreaterEqualStencilFunc: () => (/* binding */ GreaterEqualStencilFunc),\n/* harmony export */   GreaterStencilFunc: () => (/* binding */ GreaterStencilFunc),\n/* harmony export */   GridHelper: () => (/* binding */ GridHelper),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   HalfFloatType: () => (/* binding */ HalfFloatType),\n/* harmony export */   HemisphereLight: () => (/* binding */ HemisphereLight),\n/* harmony export */   HemisphereLightHelper: () => (/* binding */ HemisphereLightHelper),\n/* harmony export */   HemisphereLightProbe: () => (/* binding */ HemisphereLightProbe),\n/* harmony export */   IcosahedronBufferGeometry: () => (/* binding */ IcosahedronBufferGeometry),\n/* harmony export */   IcosahedronGeometry: () => (/* binding */ IcosahedronGeometry),\n/* harmony export */   ImageBitmapLoader: () => (/* binding */ ImageBitmapLoader),\n/* harmony export */   ImageLoader: () => (/* binding */ ImageLoader),\n/* harmony export */   ImageUtils: () => (/* binding */ ImageUtils),\n/* harmony export */   IncrementStencilOp: () => (/* binding */ IncrementStencilOp),\n/* harmony export */   IncrementWrapStencilOp: () => (/* binding */ IncrementWrapStencilOp),\n/* harmony export */   InstancedBufferAttribute: () => (/* binding */ InstancedBufferAttribute),\n/* harmony export */   InstancedBufferGeometry: () => (/* binding */ InstancedBufferGeometry),\n/* harmony export */   InstancedInterleavedBuffer: () => (/* binding */ InstancedInterleavedBuffer),\n/* harmony export */   InstancedMesh: () => (/* binding */ InstancedMesh),\n/* harmony export */   Int16BufferAttribute: () => (/* binding */ Int16BufferAttribute),\n/* harmony export */   Int32BufferAttribute: () => (/* binding */ Int32BufferAttribute),\n/* harmony export */   Int8BufferAttribute: () => (/* binding */ Int8BufferAttribute),\n/* harmony export */   IntType: () => (/* binding */ IntType),\n/* harmony export */   InterleavedBuffer: () => (/* binding */ InterleavedBuffer),\n/* harmony export */   InterleavedBufferAttribute: () => (/* binding */ InterleavedBufferAttribute),\n/* harmony export */   Interpolant: () => (/* binding */ Interpolant),\n/* harmony export */   InterpolateDiscrete: () => (/* binding */ InterpolateDiscrete),\n/* harmony export */   InterpolateLinear: () => (/* binding */ InterpolateLinear),\n/* harmony export */   InterpolateSmooth: () => (/* binding */ InterpolateSmooth),\n/* harmony export */   InvertStencilOp: () => (/* binding */ InvertStencilOp),\n/* harmony export */   KeepStencilOp: () => (/* binding */ KeepStencilOp),\n/* harmony export */   KeyframeTrack: () => (/* binding */ KeyframeTrack),\n/* harmony export */   LOD: () => (/* binding */ LOD),\n/* harmony export */   LatheBufferGeometry: () => (/* binding */ LatheBufferGeometry),\n/* harmony export */   LatheGeometry: () => (/* binding */ LatheGeometry),\n/* harmony export */   Layers: () => (/* binding */ Layers),\n/* harmony export */   LessCompare: () => (/* binding */ LessCompare),\n/* harmony export */   LessDepth: () => (/* binding */ LessDepth),\n/* harmony export */   LessEqualCompare: () => (/* binding */ LessEqualCompare),\n/* harmony export */   LessEqualDepth: () => (/* binding */ LessEqualDepth),\n/* harmony export */   LessEqualStencilFunc: () => (/* binding */ LessEqualStencilFunc),\n/* harmony export */   LessStencilFunc: () => (/* binding */ LessStencilFunc),\n/* harmony export */   Light: () => (/* binding */ Light),\n/* harmony export */   LightProbe: () => (/* binding */ LightProbe),\n/* harmony export */   Line: () => (/* binding */ Line),\n/* harmony export */   Line3: () => (/* binding */ Line3),\n/* harmony export */   LineBasicMaterial: () => (/* binding */ LineBasicMaterial),\n/* harmony export */   LineCurve: () => (/* binding */ LineCurve),\n/* harmony export */   LineCurve3: () => (/* binding */ LineCurve3),\n/* harmony export */   LineDashedMaterial: () => (/* binding */ LineDashedMaterial),\n/* harmony export */   LineLoop: () => (/* binding */ LineLoop),\n/* harmony export */   LineSegments: () => (/* binding */ LineSegments),\n/* harmony export */   LinearEncoding: () => (/* binding */ LinearEncoding),\n/* harmony export */   LinearFilter: () => (/* binding */ LinearFilter),\n/* harmony export */   LinearInterpolant: () => (/* binding */ LinearInterpolant),\n/* harmony export */   LinearMipMapLinearFilter: () => (/* binding */ LinearMipMapLinearFilter),\n/* harmony export */   LinearMipMapNearestFilter: () => (/* binding */ LinearMipMapNearestFilter),\n/* harmony export */   LinearMipmapLinearFilter: () => (/* binding */ LinearMipmapLinearFilter),\n/* harmony export */   LinearMipmapNearestFilter: () => (/* binding */ LinearMipmapNearestFilter),\n/* harmony export */   LinearSRGBColorSpace: () => (/* binding */ LinearSRGBColorSpace),\n/* harmony export */   LinearToneMapping: () => (/* binding */ LinearToneMapping),\n/* harmony export */   Loader: () => (/* binding */ Loader),\n/* harmony export */   LoaderUtils: () => (/* binding */ LoaderUtils),\n/* harmony export */   LoadingManager: () => (/* binding */ LoadingManager),\n/* harmony export */   LoopOnce: () => (/* binding */ LoopOnce),\n/* harmony export */   LoopPingPong: () => (/* binding */ LoopPingPong),\n/* harmony export */   LoopRepeat: () => (/* binding */ LoopRepeat),\n/* harmony export */   LuminanceAlphaFormat: () => (/* binding */ LuminanceAlphaFormat),\n/* harmony export */   LuminanceFormat: () => (/* binding */ LuminanceFormat),\n/* harmony export */   MOUSE: () => (/* binding */ MOUSE),\n/* harmony export */   Material: () => (/* binding */ Material),\n/* harmony export */   MaterialLoader: () => (/* binding */ MaterialLoader),\n/* harmony export */   MathUtils: () => (/* binding */ MathUtils),\n/* harmony export */   Matrix3: () => (/* binding */ Matrix3),\n/* harmony export */   Matrix4: () => (/* binding */ Matrix4),\n/* harmony export */   MaxEquation: () => (/* binding */ MaxEquation),\n/* harmony export */   Mesh: () => (/* binding */ Mesh),\n/* harmony export */   MeshBasicMaterial: () => (/* binding */ MeshBasicMaterial),\n/* harmony export */   MeshDepthMaterial: () => (/* binding */ MeshDepthMaterial),\n/* harmony export */   MeshDistanceMaterial: () => (/* binding */ MeshDistanceMaterial),\n/* harmony export */   MeshLambertMaterial: () => (/* binding */ MeshLambertMaterial),\n/* harmony export */   MeshMatcapMaterial: () => (/* binding */ MeshMatcapMaterial),\n/* harmony export */   MeshNormalMaterial: () => (/* binding */ MeshNormalMaterial),\n/* harmony export */   MeshPhongMaterial: () => (/* binding */ MeshPhongMaterial),\n/* harmony export */   MeshPhysicalMaterial: () => (/* binding */ MeshPhysicalMaterial),\n/* harmony export */   MeshStandardMaterial: () => (/* binding */ MeshStandardMaterial),\n/* harmony export */   MeshToonMaterial: () => (/* binding */ MeshToonMaterial),\n/* harmony export */   MinEquation: () => (/* binding */ MinEquation),\n/* harmony export */   MirroredRepeatWrapping: () => (/* binding */ MirroredRepeatWrapping),\n/* harmony export */   MixOperation: () => (/* binding */ MixOperation),\n/* harmony export */   MultiplyBlending: () => (/* binding */ MultiplyBlending),\n/* harmony export */   MultiplyOperation: () => (/* binding */ MultiplyOperation),\n/* harmony export */   NearestFilter: () => (/* binding */ NearestFilter),\n/* harmony export */   NearestMipMapLinearFilter: () => (/* binding */ NearestMipMapLinearFilter),\n/* harmony export */   NearestMipMapNearestFilter: () => (/* binding */ NearestMipMapNearestFilter),\n/* harmony export */   NearestMipmapLinearFilter: () => (/* binding */ NearestMipmapLinearFilter),\n/* harmony export */   NearestMipmapNearestFilter: () => (/* binding */ NearestMipmapNearestFilter),\n/* harmony export */   NeverCompare: () => (/* binding */ NeverCompare),\n/* harmony export */   NeverDepth: () => (/* binding */ NeverDepth),\n/* harmony export */   NeverStencilFunc: () => (/* binding */ NeverStencilFunc),\n/* harmony export */   NoBlending: () => (/* binding */ NoBlending),\n/* harmony export */   NoColorSpace: () => (/* binding */ NoColorSpace),\n/* harmony export */   NoToneMapping: () => (/* binding */ NoToneMapping),\n/* harmony export */   NormalAnimationBlendMode: () => (/* binding */ NormalAnimationBlendMode),\n/* harmony export */   NormalBlending: () => (/* binding */ NormalBlending),\n/* harmony export */   NotEqualCompare: () => (/* binding */ NotEqualCompare),\n/* harmony export */   NotEqualDepth: () => (/* binding */ NotEqualDepth),\n/* harmony export */   NotEqualStencilFunc: () => (/* binding */ NotEqualStencilFunc),\n/* harmony export */   NumberKeyframeTrack: () => (/* binding */ NumberKeyframeTrack),\n/* harmony export */   Object3D: () => (/* binding */ Object3D),\n/* harmony export */   ObjectLoader: () => (/* binding */ ObjectLoader),\n/* harmony export */   ObjectSpaceNormalMap: () => (/* binding */ ObjectSpaceNormalMap),\n/* harmony export */   OctahedronBufferGeometry: () => (/* binding */ OctahedronBufferGeometry),\n/* harmony export */   OctahedronGeometry: () => (/* binding */ OctahedronGeometry),\n/* harmony export */   OneFactor: () => (/* binding */ OneFactor),\n/* harmony export */   OneMinusDstAlphaFactor: () => (/* binding */ OneMinusDstAlphaFactor),\n/* harmony export */   OneMinusDstColorFactor: () => (/* binding */ OneMinusDstColorFactor),\n/* harmony export */   OneMinusSrcAlphaFactor: () => (/* binding */ OneMinusSrcAlphaFactor),\n/* harmony export */   OneMinusSrcColorFactor: () => (/* binding */ OneMinusSrcColorFactor),\n/* harmony export */   OrthographicCamera: () => (/* binding */ OrthographicCamera),\n/* harmony export */   PCFShadowMap: () => (/* binding */ PCFShadowMap),\n/* harmony export */   PCFSoftShadowMap: () => (/* binding */ PCFSoftShadowMap),\n/* harmony export */   PMREMGenerator: () => (/* binding */ PMREMGenerator),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   PerspectiveCamera: () => (/* binding */ PerspectiveCamera),\n/* harmony export */   Plane: () => (/* binding */ Plane),\n/* harmony export */   PlaneBufferGeometry: () => (/* binding */ PlaneBufferGeometry),\n/* harmony export */   PlaneGeometry: () => (/* binding */ PlaneGeometry),\n/* harmony export */   PlaneHelper: () => (/* binding */ PlaneHelper),\n/* harmony export */   PointLight: () => (/* binding */ PointLight),\n/* harmony export */   PointLightHelper: () => (/* binding */ PointLightHelper),\n/* harmony export */   Points: () => (/* binding */ Points),\n/* harmony export */   PointsMaterial: () => (/* binding */ PointsMaterial),\n/* harmony export */   PolarGridHelper: () => (/* binding */ PolarGridHelper),\n/* harmony export */   PolyhedronBufferGeometry: () => (/* binding */ PolyhedronBufferGeometry),\n/* harmony export */   PolyhedronGeometry: () => (/* binding */ PolyhedronGeometry),\n/* harmony export */   PositionalAudio: () => (/* binding */ PositionalAudio),\n/* harmony export */   PropertyBinding: () => (/* binding */ PropertyBinding),\n/* harmony export */   PropertyMixer: () => (/* binding */ PropertyMixer),\n/* harmony export */   QuadraticBezierCurve: () => (/* binding */ QuadraticBezierCurve),\n/* harmony export */   QuadraticBezierCurve3: () => (/* binding */ QuadraticBezierCurve3),\n/* harmony export */   Quaternion: () => (/* binding */ Quaternion),\n/* harmony export */   QuaternionKeyframeTrack: () => (/* binding */ QuaternionKeyframeTrack),\n/* harmony export */   QuaternionLinearInterpolant: () => (/* binding */ QuaternionLinearInterpolant),\n/* harmony export */   RED_GREEN_RGTC2_Format: () => (/* binding */ RED_GREEN_RGTC2_Format),\n/* harmony export */   RED_RGTC1_Format: () => (/* binding */ RED_RGTC1_Format),\n/* harmony export */   REVISION: () => (/* binding */ REVISION),\n/* harmony export */   RGBADepthPacking: () => (/* binding */ RGBADepthPacking),\n/* harmony export */   RGBAFormat: () => (/* binding */ RGBAFormat),\n/* harmony export */   RGBAIntegerFormat: () => (/* binding */ RGBAIntegerFormat),\n/* harmony export */   RGBA_ASTC_10x10_Format: () => (/* binding */ RGBA_ASTC_10x10_Format),\n/* harmony export */   RGBA_ASTC_10x5_Format: () => (/* binding */ RGBA_ASTC_10x5_Format),\n/* harmony export */   RGBA_ASTC_10x6_Format: () => (/* binding */ RGBA_ASTC_10x6_Format),\n/* harmony export */   RGBA_ASTC_10x8_Format: () => (/* binding */ RGBA_ASTC_10x8_Format),\n/* harmony export */   RGBA_ASTC_12x10_Format: () => (/* binding */ RGBA_ASTC_12x10_Format),\n/* harmony export */   RGBA_ASTC_12x12_Format: () => (/* binding */ RGBA_ASTC_12x12_Format),\n/* harmony export */   RGBA_ASTC_4x4_Format: () => (/* binding */ RGBA_ASTC_4x4_Format),\n/* harmony export */   RGBA_ASTC_5x4_Format: () => (/* binding */ RGBA_ASTC_5x4_Format),\n/* harmony export */   RGBA_ASTC_5x5_Format: () => (/* binding */ RGBA_ASTC_5x5_Format),\n/* harmony export */   RGBA_ASTC_6x5_Format: () => (/* binding */ RGBA_ASTC_6x5_Format),\n/* harmony export */   RGBA_ASTC_6x6_Format: () => (/* binding */ RGBA_ASTC_6x6_Format),\n/* harmony export */   RGBA_ASTC_8x5_Format: () => (/* binding */ RGBA_ASTC_8x5_Format),\n/* harmony export */   RGBA_ASTC_8x6_Format: () => (/* binding */ RGBA_ASTC_8x6_Format),\n/* harmony export */   RGBA_ASTC_8x8_Format: () => (/* binding */ RGBA_ASTC_8x8_Format),\n/* harmony export */   RGBA_BPTC_Format: () => (/* binding */ RGBA_BPTC_Format),\n/* harmony export */   RGBA_ETC2_EAC_Format: () => (/* binding */ RGBA_ETC2_EAC_Format),\n/* harmony export */   RGBA_PVRTC_2BPPV1_Format: () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),\n/* harmony export */   RGBA_PVRTC_4BPPV1_Format: () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),\n/* harmony export */   RGBA_S3TC_DXT1_Format: () => (/* binding */ RGBA_S3TC_DXT1_Format),\n/* harmony export */   RGBA_S3TC_DXT3_Format: () => (/* binding */ RGBA_S3TC_DXT3_Format),\n/* harmony export */   RGBA_S3TC_DXT5_Format: () => (/* binding */ RGBA_S3TC_DXT5_Format),\n/* harmony export */   RGB_ETC1_Format: () => (/* binding */ RGB_ETC1_Format),\n/* harmony export */   RGB_ETC2_Format: () => (/* binding */ RGB_ETC2_Format),\n/* harmony export */   RGB_PVRTC_2BPPV1_Format: () => (/* binding */ RGB_PVRTC_2BPPV1_Format),\n/* harmony export */   RGB_PVRTC_4BPPV1_Format: () => (/* binding */ RGB_PVRTC_4BPPV1_Format),\n/* harmony export */   RGB_S3TC_DXT1_Format: () => (/* binding */ RGB_S3TC_DXT1_Format),\n/* harmony export */   RGFormat: () => (/* binding */ RGFormat),\n/* harmony export */   RGIntegerFormat: () => (/* binding */ RGIntegerFormat),\n/* harmony export */   RawShaderMaterial: () => (/* binding */ RawShaderMaterial),\n/* harmony export */   Ray: () => (/* binding */ Ray),\n/* harmony export */   Raycaster: () => (/* binding */ Raycaster),\n/* harmony export */   RectAreaLight: () => (/* binding */ RectAreaLight),\n/* harmony export */   RedFormat: () => (/* binding */ RedFormat),\n/* harmony export */   RedIntegerFormat: () => (/* binding */ RedIntegerFormat),\n/* harmony export */   ReinhardToneMapping: () => (/* binding */ ReinhardToneMapping),\n/* harmony export */   RepeatWrapping: () => (/* binding */ RepeatWrapping),\n/* harmony export */   ReplaceStencilOp: () => (/* binding */ ReplaceStencilOp),\n/* harmony export */   ReverseSubtractEquation: () => (/* binding */ ReverseSubtractEquation),\n/* harmony export */   RingBufferGeometry: () => (/* binding */ RingBufferGeometry),\n/* harmony export */   RingGeometry: () => (/* binding */ RingGeometry),\n/* harmony export */   SIGNED_RED_GREEN_RGTC2_Format: () => (/* binding */ SIGNED_RED_GREEN_RGTC2_Format),\n/* harmony export */   SIGNED_RED_RGTC1_Format: () => (/* binding */ SIGNED_RED_RGTC1_Format),\n/* harmony export */   SRGBColorSpace: () => (/* binding */ SRGBColorSpace),\n/* harmony export */   Scene: () => (/* binding */ Scene),\n/* harmony export */   ShaderChunk: () => (/* binding */ ShaderChunk),\n/* harmony export */   ShaderLib: () => (/* binding */ ShaderLib),\n/* harmony export */   ShaderMaterial: () => (/* binding */ ShaderMaterial),\n/* harmony export */   ShadowMaterial: () => (/* binding */ ShadowMaterial),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   ShapeBufferGeometry: () => (/* binding */ ShapeBufferGeometry),\n/* harmony export */   ShapeGeometry: () => (/* binding */ ShapeGeometry),\n/* harmony export */   ShapePath: () => (/* binding */ ShapePath),\n/* harmony export */   ShapeUtils: () => (/* binding */ ShapeUtils),\n/* harmony export */   ShortType: () => (/* binding */ ShortType),\n/* harmony export */   Skeleton: () => (/* binding */ Skeleton),\n/* harmony export */   SkeletonHelper: () => (/* binding */ SkeletonHelper),\n/* harmony export */   SkinnedMesh: () => (/* binding */ SkinnedMesh),\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   Sphere: () => (/* binding */ Sphere),\n/* harmony export */   SphereBufferGeometry: () => (/* binding */ SphereBufferGeometry),\n/* harmony export */   SphereGeometry: () => (/* binding */ SphereGeometry),\n/* harmony export */   Spherical: () => (/* binding */ Spherical),\n/* harmony export */   SphericalHarmonics3: () => (/* binding */ SphericalHarmonics3),\n/* harmony export */   SplineCurve: () => (/* binding */ SplineCurve),\n/* harmony export */   SpotLight: () => (/* binding */ SpotLight),\n/* harmony export */   SpotLightHelper: () => (/* binding */ SpotLightHelper),\n/* harmony export */   Sprite: () => (/* binding */ Sprite),\n/* harmony export */   SpriteMaterial: () => (/* binding */ SpriteMaterial),\n/* harmony export */   SrcAlphaFactor: () => (/* binding */ SrcAlphaFactor),\n/* harmony export */   SrcAlphaSaturateFactor: () => (/* binding */ SrcAlphaSaturateFactor),\n/* harmony export */   SrcColorFactor: () => (/* binding */ SrcColorFactor),\n/* harmony export */   StaticCopyUsage: () => (/* binding */ StaticCopyUsage),\n/* harmony export */   StaticDrawUsage: () => (/* binding */ StaticDrawUsage),\n/* harmony export */   StaticReadUsage: () => (/* binding */ StaticReadUsage),\n/* harmony export */   StereoCamera: () => (/* binding */ StereoCamera),\n/* harmony export */   StreamCopyUsage: () => (/* binding */ StreamCopyUsage),\n/* harmony export */   StreamDrawUsage: () => (/* binding */ StreamDrawUsage),\n/* harmony export */   StreamReadUsage: () => (/* binding */ StreamReadUsage),\n/* harmony export */   StringKeyframeTrack: () => (/* binding */ StringKeyframeTrack),\n/* harmony export */   SubtractEquation: () => (/* binding */ SubtractEquation),\n/* harmony export */   SubtractiveBlending: () => (/* binding */ SubtractiveBlending),\n/* harmony export */   TOUCH: () => (/* binding */ TOUCH),\n/* harmony export */   TangentSpaceNormalMap: () => (/* binding */ TangentSpaceNormalMap),\n/* harmony export */   TetrahedronBufferGeometry: () => (/* binding */ TetrahedronBufferGeometry),\n/* harmony export */   TetrahedronGeometry: () => (/* binding */ TetrahedronGeometry),\n/* harmony export */   Texture: () => (/* binding */ Texture),\n/* harmony export */   TextureLoader: () => (/* binding */ TextureLoader),\n/* harmony export */   TorusBufferGeometry: () => (/* binding */ TorusBufferGeometry),\n/* harmony export */   TorusGeometry: () => (/* binding */ TorusGeometry),\n/* harmony export */   TorusKnotBufferGeometry: () => (/* binding */ TorusKnotBufferGeometry),\n/* harmony export */   TorusKnotGeometry: () => (/* binding */ TorusKnotGeometry),\n/* harmony export */   Triangle: () => (/* binding */ Triangle),\n/* harmony export */   TriangleFanDrawMode: () => (/* binding */ TriangleFanDrawMode),\n/* harmony export */   TriangleStripDrawMode: () => (/* binding */ TriangleStripDrawMode),\n/* harmony export */   TrianglesDrawMode: () => (/* binding */ TrianglesDrawMode),\n/* harmony export */   TubeBufferGeometry: () => (/* binding */ TubeBufferGeometry),\n/* harmony export */   TubeGeometry: () => (/* binding */ TubeGeometry),\n/* harmony export */   TwoPassDoubleSide: () => (/* binding */ TwoPassDoubleSide),\n/* harmony export */   UVMapping: () => (/* binding */ UVMapping),\n/* harmony export */   Uint16BufferAttribute: () => (/* binding */ Uint16BufferAttribute),\n/* harmony export */   Uint32BufferAttribute: () => (/* binding */ Uint32BufferAttribute),\n/* harmony export */   Uint8BufferAttribute: () => (/* binding */ Uint8BufferAttribute),\n/* harmony export */   Uint8ClampedBufferAttribute: () => (/* binding */ Uint8ClampedBufferAttribute),\n/* harmony export */   Uniform: () => (/* binding */ Uniform),\n/* harmony export */   UniformsGroup: () => (/* binding */ UniformsGroup),\n/* harmony export */   UniformsLib: () => (/* binding */ UniformsLib),\n/* harmony export */   UniformsUtils: () => (/* binding */ UniformsUtils),\n/* harmony export */   UnsignedByteType: () => (/* binding */ UnsignedByteType),\n/* harmony export */   UnsignedInt248Type: () => (/* binding */ UnsignedInt248Type),\n/* harmony export */   UnsignedIntType: () => (/* binding */ UnsignedIntType),\n/* harmony export */   UnsignedShort4444Type: () => (/* binding */ UnsignedShort4444Type),\n/* harmony export */   UnsignedShort5551Type: () => (/* binding */ UnsignedShort5551Type),\n/* harmony export */   UnsignedShortType: () => (/* binding */ UnsignedShortType),\n/* harmony export */   VSMShadowMap: () => (/* binding */ VSMShadowMap),\n/* harmony export */   Vector2: () => (/* binding */ Vector2),\n/* harmony export */   Vector3: () => (/* binding */ Vector3),\n/* harmony export */   Vector4: () => (/* binding */ Vector4),\n/* harmony export */   VectorKeyframeTrack: () => (/* binding */ VectorKeyframeTrack),\n/* harmony export */   VideoTexture: () => (/* binding */ VideoTexture),\n/* harmony export */   WebGL1Renderer: () => (/* binding */ WebGL1Renderer),\n/* harmony export */   WebGL3DRenderTarget: () => (/* binding */ WebGL3DRenderTarget),\n/* harmony export */   WebGLArrayRenderTarget: () => (/* binding */ WebGLArrayRenderTarget),\n/* harmony export */   WebGLCoordinateSystem: () => (/* binding */ WebGLCoordinateSystem),\n/* harmony export */   WebGLCubeRenderTarget: () => (/* binding */ WebGLCubeRenderTarget),\n/* harmony export */   WebGLMultipleRenderTargets: () => (/* binding */ WebGLMultipleRenderTargets),\n/* harmony export */   WebGLRenderTarget: () => (/* binding */ WebGLRenderTarget),\n/* harmony export */   WebGLRenderer: () => (/* binding */ WebGLRenderer),\n/* harmony export */   WebGLUtils: () => (/* binding */ WebGLUtils),\n/* harmony export */   WebGPUCoordinateSystem: () => (/* binding */ WebGPUCoordinateSystem),\n/* harmony export */   WireframeGeometry: () => (/* binding */ WireframeGeometry),\n/* harmony export */   WrapAroundEnding: () => (/* binding */ WrapAroundEnding),\n/* harmony export */   ZeroCurvatureEnding: () => (/* binding */ ZeroCurvatureEnding),\n/* harmony export */   ZeroFactor: () => (/* binding */ ZeroFactor),\n/* harmony export */   ZeroSlopeEnding: () => (/* binding */ ZeroSlopeEnding),\n/* harmony export */   ZeroStencilOp: () => (/* binding */ ZeroStencilOp),\n/* harmony export */   _SRGBAFormat: () => (/* binding */ _SRGBAFormat),\n/* harmony export */   sRGBEncoding: () => (/* binding */ sRGBEncoding)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2010-2023 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '153';\n\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst TwoPassDoubleSide = 2; // r149\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst RED_RGTC1_Format = 36283;\nconst SIGNED_RED_RGTC1_Format = 36284;\nconst RED_GREEN_RGTC2_Format = 36285;\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\n/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */\nconst LinearEncoding = 3000;\n/** @deprecated Use SRGBColorSpace in three.js r152+. */\nconst sRGBEncoding = 3001;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\nconst DisplayP3ColorSpace = 'display-p3';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst NeverCompare = 512;\nconst LessCompare = 513;\nconst EqualCompare = 514;\nconst LessEqualCompare = 515;\nconst GreaterCompare = 516;\nconst NotEqualCompare = 517;\nconst GreaterEqualCompare = 518;\nconst AlwaysCompare = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\nconst WebGLCoordinateSystem = 2000;\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, - 1.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n};\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tVector2.prototype.isVector2 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nclass Matrix3 {\n\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\tmakeTranslation( x, y ) {\n\n\t\tif ( x.isVector2 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x.x,\n\t\t\t\t0, 1, x.y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x,\n\t\t\t\t0, 1, y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nconst _cache = {};\n\nfunction warnOnce( message ) {\n\n\tif ( message in _cache ) return;\n\n\t_cache[ message ] = true;\n\n\tconsole.warn( message );\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\n/**\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\n * or clipping. Based on W3C specifications for sRGB and Display P3,\n * and ICC specifications for the D50 connection space. Values in/out\n * are _linear_ sRGB and _linear_ Display P3.\n *\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\n *\n * Reference:\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\n */\n\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().fromArray( [\n\t0.8224621, 0.0331941, 0.0170827,\n\t0.1775380, 0.9668058, 0.0723974,\n\t- 0.0000001, 0.0000001, 0.9105199\n] );\n\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().fromArray( [\n\t1.2249401, - 0.0420569, - 0.0196376,\n\t- 0.2249404, 1.0420571, - 0.0786361,\n\t0.0000001, 0.0000000, 1.0982735\n] );\n\nfunction DisplayP3ToLinearSRGB( color ) {\n\n\t// Display P3 uses the sRGB transfer functions\n\treturn color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB );\n\n}\n\nfunction LinearSRGBToDisplayP3( color ) {\n\n\t// Display P3 uses the sRGB transfer functions\n\treturn color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB();\n\n}\n\n// Conversions from <source> to Linear-sRGB reference space.\nconst TO_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertSRGBToLinear(),\n\t[ DisplayP3ColorSpace ]: DisplayP3ToLinearSRGB,\n};\n\n// Conversions to <target> from Linear-sRGB reference space.\nconst FROM_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertLinearToSRGB(),\n\t[ DisplayP3ColorSpace ]: LinearSRGBToDisplayP3,\n};\n\nconst ColorManagement = {\n\n\tenabled: true,\n\n\tget legacyMode() {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\treturn ! this.enabled;\n\n\t},\n\n\tset legacyMode( legacyMode ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\tthis.enabled = ! legacyMode;\n\n\t},\n\n\tget workingColorSpace() {\n\n\t\treturn LinearSRGBColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tconst sourceToLinear = TO_LINEAR[ sourceColorSpace ];\n\t\tconst targetFromLinear = FROM_LINEAR[ targetColorSpace ];\n\n\t\tif ( sourceToLinear === undefined || targetFromLinear === undefined ) {\n\n\t\t\tthrow new Error( `Unsupported color space conversion, \"${ sourceColorSpace }\" to \"${ targetColorSpace }\".` );\n\n\t\t}\n\n\t\treturn targetFromLinear( sourceToLinear( color ) );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t},\n\n};\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nlet sourceId = 0;\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.isSource = true;\n\n\t\tObject.defineProperty( this, 'id', { value: sourceId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\n\n\t\tsuper();\n\n\t\tthis.isTexture = true;\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.source = new Source( image );\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\t\tthis.channel = 0;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\tif ( typeof colorSpace === 'string' ) {\n\n\t\t\tthis.colorSpace = colorSpace;\n\n\t\t} else { // @deprecated, r152\n\n\t\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\t\tthis.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n\t\tthis.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n\n\t}\n\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\t\tthis.channel = source.channel;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.colorSpace = source.colorSpace;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\t\t\tchannel: this.channel,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tcolorSpace: this.colorSpace,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tget encoding() { // @deprecated, r152\n\n\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\treturn this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n\n\t}\n\n\tset encoding( encoding ) { // @deprecated, r152\n\n\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\tthis.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = null;\nTexture.DEFAULT_MAPPING = UVMapping;\nTexture.DEFAULT_ANISOTROPY = 1;\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tVector4.prototype.isVector4 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\tif ( options.encoding !== undefined ) {\n\n\t\t\t// @deprecated, r152\n\t\t\twarnOnce( 'THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.' );\n\t\t\toptions.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\t\tthis.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.flipY = false;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t\tthis.samples = options.samples !== undefined ? options.samples : 0;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tconst image = Object.assign( {}, source.texture.image );\n\t\tthis.texture.source = new Source( image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.isDataArrayTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.isData3DTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, count = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLMultipleRenderTargets = true;\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tVector3.prototype.isVector3 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$b.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$b );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$b.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector$a.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector$a.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$a.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box$3.copy( object.boundingBox );\n\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box$3 );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( precise && geometry.attributes !== undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_vector$a.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\t\tthis.expandByPoint( _vector$a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\t\t\tthis.union( _box$3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$a );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$a.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$a ).distanceTo( point );\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$a ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$9 ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$9.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$9.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$9.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$9.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$9.dot( this.direction );\n\t\tconst d2 = _vector$9.dot( _vector$9 ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$9 ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\td = ( - 2 * far * near ) / ( far - near );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tc = - far / ( far - near );\n\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\n\t\tlet z, zInv;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tz = ( far + near ) * p;\n\t\t\tzInv = - 2 * p;\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tz = near * p;\n\t\t\tzInv = - 1 * p;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\nEuler.DEFAULT_ORDER = 'XYZ';\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isObject3D = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetObjectsByProperty( name, value ) {\n\n\t\tlet result = [];\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst childResult = this.children[ i ].getObjectsByProperty( name, value );\n\n\t\t\tif ( childResult.length > 0 ) {\n\n\t\t\t\tresult = result.concat( childResult );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.matrixWorldAutoUpdate === true || force === true ) {\n\n\t\t\t\tchild.updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tif ( child.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nlet warnedGetUV = false;\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) { // @deprecated, r151\n\n\t\tif ( warnedGetUV === false ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );\n\n\t\t\twarnedGetUV = true;\n\n\t\t}\n\n\t\treturn this.getInterpolation( point, p1, p2, p3, uv1, uv2, uv3, target );\n\n\t}\n\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3$1.x );\n\t\ttarget.addScaledVector( v2, _v3$1.y );\n\t\ttarget.addScaledVector( v3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) { // @deprecated, r151\n\n\t\tif ( warnedGetUV === false ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );\n\n\t\t\twarnedGetUV = true;\n\n\t\t}\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isMaterial = true;\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.forceSinglePass = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = this.forceSinglePass;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tthis.isColor = true;\n\n\t\tthis.r = 1;\n\t\tthis.g = 1;\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\nColor.NAMES = _colorKeywords;\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n// float32 to float16\n\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n// float16 to float32\n\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\nconst DataUtils = {\n\ttoHalfFloat: toHalfFloat,\n\tfromHalfFloat: fromHalfFloat,\n};\n\nconst _vector$8 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.isBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\tthis.gpuType = FloatType;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( this, i );\n\t\t\t\t_vector$8.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n\tcopyColorsArray() { // @deprecated, r144\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyColorsArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector2sArray() { // @deprecated, r144\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector2sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector3sArray() { // @deprecated, r144\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector3sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector4sArray() { // @deprecated, r144\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector4sArray() was removed in r144.' );\n\n\t}\n\n}\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$7.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$7 );\n\n\t\t\t\t\t\t_vector$7.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$7 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$7.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$7 );\n\n\t\t\t\t\t\t_vector$7.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$7 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$7.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$7.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$7.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = this.getAttribute( 'tangent' ).array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tmerge() { // @deprecated, r144\n\n\t\tconsole.error( 'THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead.' );\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$7.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();\nconst _ray$3 = /*@__PURE__*/ new Ray();\nconst _sphere$5 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _normalA = /*@__PURE__*/ new Vector3();\nconst _normalB = /*@__PURE__*/ new Vector3();\nconst _normalC = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$5.copy( geometry.boundingSphere );\n\t\t_sphere$5.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray$3.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$5.containsPoint( _ray$3.origin ) === false ) {\n\n\t\t\tif ( _ray$3.intersectSphere( _sphere$5, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix$3.copy( matrixWorld ).invert();\n\t\t_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$3 );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv1, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv1, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv1, c );\n\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\t\t\tintersection.uv2 = intersection.uv1; // @deprecated, r152\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tif ( renderer.getRenderTarget() === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\treturn LinearSRGBColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.forceSinglePass = true;\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = - 90; // negative fov is not an error\nconst aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tthis.renderTarget = renderTarget;\n\t\tthis.coordinateSystem = null;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, - 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\t\tcameraPX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst currentToneMapping = renderer.toneMapping;\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.toneMapping = currentToneMapping;\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tif ( options.encoding !== undefined ) {\n\n\t\t\t// @deprecated, r152\n\t\t\twarnOnce( 'THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.' );\n\t\t\toptions.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\tthis.isPlane = true;\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$4 = /*@__PURE__*/ new Sphere();\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere$4.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere$4 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$4.center.set( 0, 0, 0 );\n\t\t_sphere$4.radius = 0.7071067811865476;\n\t\t_sphere$4.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$4 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$6 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t\tattribute.onUploadCallback();\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"float G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n} // validated\";\n\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\t return vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat R21 = R12;\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vBumpMapUv );\\n\\t\\tvec2 dSTdy = dFdy( vBumpMapUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos.xyz );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos.xyz );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat luminance( const in vec3 rgb ) {\\n\\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\\n\\treturn dot( weights, rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n} // validated\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_v0 0.339\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_v1 0.276\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_v4 0.046\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_v5 0.016\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_v6 0.0038\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"vec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( LEGACY_LIGHTS )\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#else\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\\n\\t\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t\\tvec3 bentNormal = cross( bitangent, viewDir );\\n\\t\\t\\t\\tbentNormal = normalize( cross( bentNormal, bitangent ) );\\n\\t\\t\\t\\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\\n\\t\\t\\t\\treturn getIBLRadiance( viewDir, bentNormal, roughness );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef USE_SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\\n\\t\\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\\n\\t\\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\\n\\t#else\\n\\t\\tvec2 anisotropyV = anisotropyVector;\\n\\t#endif\\n\\tmaterial.anisotropy = length( anisotropyV );\\n\\tanisotropyV /= material.anisotropy;\\n\\tmaterial.anisotropy = saturate( material.anisotropy );\\n\\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\\n\\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\\n\\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat anisotropy;\\n\\t\\tfloat alphaT;\\n\\t\\tvec3 anisotropyT;\\n\\t\\tvec3 anisotropyB;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec3 sheenSpecular = vec3( 0.0 );\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\n#ifdef USE_ANISOTROPY\\n\\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\\n\\t\\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\\n\\t\\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\\n\\t\\tfloat v = 0.5 / ( gv + gl );\\n\\t\\treturn saturate(v);\\n\\t}\\n\\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\\n\\t\\tfloat a2 = alphaT * alphaB;\\n\\t\\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\\n\\t\\thighp float v2 = dot( v, v );\\n\\t\\tfloat w2 = a2 / v2;\\n\\t\\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\\n\\t}\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\\n\\t\\tvec3 f0 = material.clearcoatF0;\\n\\t\\tfloat f90 = material.clearcoatF90;\\n\\t\\tfloat roughness = material.clearcoatRoughness;\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\\n\\tvec3 f0 = material.specularColor;\\n\\tfloat f90 = material.specularF90;\\n\\tfloat roughness = material.roughness;\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tF = mix( F, material.iridescenceFresnel, material.iridescence );\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat dotTL = dot( material.anisotropyT, lightDir );\\n\\t\\tfloat dotTV = dot( material.anisotropyT, viewDir );\\n\\t\\tfloat dotTH = dot( material.anisotropyT, halfDir );\\n\\t\\tfloat dotBL = dot( material.anisotropyB, lightDir );\\n\\t\\tfloat dotBV = dot( material.anisotropyB, viewDir );\\n\\t\\tfloat dotBH = dot( material.anisotropyB, halfDir );\\n\\t\\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\\n\\t\\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\\n\\t#else\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t#endif\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tradiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\\n\\t#else\\n\\t\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, vMapUv );\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t#if defined( USE_POINTS_UV )\\n\\t\\tvec2 uv = vUv;\\n\\t#else\\n\\t\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_POINTS_UV )\\n\\tvarying vec2 vUv;\\n#else\\n\\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t\\tuniform mat3 uvTransform;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform ivec2 morphTargetsTextureSize;\\n\\t\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal *= faceDirection;\\n\\t#endif\\n#endif\\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn[0] *= faceDirection;\\n\\t\\ttbn[1] *= faceDirection;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn2[0] *= faceDirection;\\n\\t\\ttbn2[1] *= faceDirection;\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\tnormal = normalize( tbn * mapN );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\\n\\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( uv.st );\\n\\t\\tvec2 st1 = dFdy( uv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\\n\\t\\treturn mat3( T * scale, B * scale, N );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\";\n\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec2 packDepthToRG( in highp float v ) {\\n\\treturn packDepthToRGBA( v ).yx;\\n}\\nfloat unpackRGToDepth( const in highp vec2 v ) {\\n\\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn depth * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * depth - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n\\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n\\t\\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\tvec4 shadowWorldPosition;\\n#endif\\n#if defined( USE_SHADOWMAP )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tuniform int boneTextureSize;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tfloat j = i * 4.0;\\n\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\ty = dy * ( y + 0.5 );\\n\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\treturn bone;\\n\\t}\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmitted = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tfloat w0( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w1( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\\n\\t}\\n\\tfloat w2( float a ){\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w3( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * a * a );\\n\\t}\\n\\tfloat g0( float a ) {\\n\\t\\treturn w0( a ) + w1( a );\\n\\t}\\n\\tfloat g1( float a ) {\\n\\t\\treturn w2( a ) + w3( a );\\n\\t}\\n\\tfloat h0( float a ) {\\n\\t\\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\\n\\t}\\n\\tfloat h1( float a ) {\\n\\t\\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\\n\\t}\\n\\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\\n\\t\\tuv = uv * texelSize.zw + 0.5;\\n\\t\\tvec2 iuv = floor( uv );\\n\\t\\tvec2 fuv = fract( uv );\\n\\t\\tfloat g0x = g0( fuv.x );\\n\\t\\tfloat g1x = g1( fuv.x );\\n\\t\\tfloat h0x = h0( fuv.x );\\n\\t\\tfloat h1x = h1( fuv.x );\\n\\t\\tfloat h0y = h0( fuv.y );\\n\\t\\tfloat h1y = h1( fuv.y );\\n\\t\\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\\n\\t\\t\\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\\n\\t}\\n\\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\\n\\t\\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\\n\\t\\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\\n\\t\\tvec2 fLodSizeInv = 1.0 / fLodSize;\\n\\t\\tvec2 cLodSizeInv = 1.0 / cLodSize;\\n\\t\\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\\n\\t\\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\\n\\t\\treturn mix( fSample, cSample, fract( lod ) );\\n\\t}\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\\n\\t}\\n\\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#ifdef USE_UV\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform mat3 mapTransform;\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform mat3 alphaMapTransform;\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tuniform mat3 lightMapTransform;\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tuniform mat3 aoMapTransform;\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tuniform mat3 bumpMapTransform;\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tuniform mat3 normalMapTransform;\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tuniform mat3 displacementMapTransform;\\n\\tvarying vec2 vDisplacementMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tuniform mat3 emissiveMapTransform;\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tuniform mat3 metalnessMapTransform;\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tuniform mat3 roughnessMapTransform;\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tuniform mat3 anisotropyMapTransform;\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tuniform mat3 clearcoatMapTransform;\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform mat3 clearcoatNormalMapTransform;\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform mat3 clearcoatRoughnessMapTransform;\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tuniform mat3 sheenColorMapTransform;\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tuniform mat3 sheenRoughnessMapTransform;\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tuniform mat3 iridescenceMapTransform;\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform mat3 iridescenceThicknessMapTransform;\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tuniform mat3 specularMapTransform;\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tuniform mat3 specularColorMapTransform;\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tuniform mat3 specularIntensityMapTransform;\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = vec3( uv, 1 ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$h = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$h = \"uniform sampler2D t2D;\\nuniform float backgroundIntensity;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$g = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$g = \"#ifdef ENVMAP_TYPE_CUBE\\n\\tuniform samplerCube envMap;\\n#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\tuniform sampler2D envMap;\\n#endif\\nuniform float flipEnvMap;\\nuniform float backgroundBlurriness;\\nuniform float backgroundIntensity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\\n\\t#else\\n\\t\\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = texColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define USE_SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef USE_SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\tuniform vec2 anisotropyVector;\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tuniform sampler2D anisotropyMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n#ifdef USE_POINTS_UV\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\nvoid main() {\\n\\t#ifdef USE_POINTS_UV\\n\\t\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\t#endif\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <logdepthbuf_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tiridescence_fragment: iridescence_fragment,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_fragment: lights_lambert_fragment,\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\tiridescence_pars_fragment: iridescence_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$h,\n\tbackground_frag: fragment$h,\n\tbackgroundCube_vert: vertex$g,\n\tbackgroundCube_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\t\tspecularMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 }, // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 },\n\t\taoMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 },\n\t\tlightMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null },\n\t\temissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null },\n\t\tmetalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null },\n\t\troughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotLightMap: { value: [] },\n\t\tspotShadowMap: { value: [] },\n\t\tspotLightMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\n\tbackgroundCube: {\n\n\t\tuniforms: {\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\tbackgroundBlurriness: { value: 0 },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.backgroundCube_vert,\n\t\tfragmentShader: ShaderChunk.backgroundCube_frag\n\n\t},\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tclearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tiridescence: { value: 0 },\n\t\t\tiridescenceMap: { value: null },\n\t\t\tiridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tiridescenceIOR: { value: 1.3 },\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\n\t\t\tiridescenceThicknessMap: { value: null },\n\t\t\tiridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\tsheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tthicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t\tspecularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tanisotropyVector: { value: /*@__PURE__*/ new Vector2() },\n\t\t\tanisotropyMap: { value: null },\n\t\t\tanisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nconst _rgb = { r: 0, b: 0, g: 0 };\n\nfunction WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tconst usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\t\t\tbackground = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tconst xr = renderer.xr;\n\t\tconst environmentBlendMode = xr.getEnvironmentBlendMode();\n\n\t\tswitch ( environmentBlendMode ) {\n\n\t\t\tcase 'opaque':\n\t\t\t\tforceClear = true;\n\t\t\t\tbreak;\n\n\t\t\tcase 'additive':\n\t\t\t\tstate.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );\n\t\t\t\tforceClear = true;\n\t\t\t\tbreak;\n\n\t\t\tcase 'alpha-blend':\n\t\t\t\tstate.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );\n\t\t\t\tforceClear = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.backgroundCube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.backgroundCube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\t\t\tboxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n\t\t\tboxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tboxMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tboxMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\t\t\tplaneMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tplaneMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tplaneMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tcolor.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );\n\n\t\tstate.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\n\n\t\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( object, geometry, program, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( object, geometry, program, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet attribute = attributes[ name ];\n\n\t\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute && attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ name ] = data;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {\n\n\t\tif ( integer === true ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t// check for integer attributes (WebGL 2 only)\n\n\t\t\t\t\tconst integer = ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType ) );\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tconst maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tconst maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tconst maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tconst maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tconst maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tconst maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tconst maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\n\t};\n\n\tthis.setGlobalState = function ( planes, camera ) {\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: - 1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {\n\n\t\t\t\t\ttexture.needsPMREMUpdate = false;\n\n\t\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tconst array = geometry.morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.remove( array[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase gl.TRIANGLES:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINES:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_STRIP:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_LOOP:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase gl.POINTS:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\t\tlet vertexDataCount = 0;\n\n\t\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\t\ttexture.type = FloatType;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: morphTargetsCount,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t\tfunction disposeTexture() {\n\n\t\t\t\t\ttexture.dispose();\n\n\t\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\n\nconst emptyTexture = /*@__PURE__*/ new Texture();\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array or THREE.VectorN)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2i( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3i( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4i( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array or THREE.VectorN)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2ui( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3ui( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass PureArrayUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass StructuredUniform {\n\n\tconstructor( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tsetValue( gl, value, textures ) {\n\n\t\tconst seq = this.seq;\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t}\n\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nclass WebGLUniforms {\n\n\tconstructor( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tconst n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tsetValue( gl, name, value, textures ) {\n\n\t\tconst u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n\t}\n\n\tsetOptional( gl, object, name ) {\n\n\t\tconst v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t}\n\n\tstatic upload( gl, seq, values, textures ) {\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic seqWithValue( seq, values ) {\n\n\t\tconst r = [];\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tconst line = i + 1;\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( colorSpace ) {\n\n\tswitch ( colorSpace ) {\n\n\t\tcase LinearSRGBColorSpace:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase SRGBColorSpace:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\tif ( errorMatches ) {\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t} else {\n\n\t\treturn errors;\n\n\t}\n\n}\n\nfunction getTexelEncodingFunction( functionName, colorSpace ) {\n\n\tconst components = getEncodingComponents( colorSpace );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;\n\t\tif ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;\n\t\tif ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( unrollLoopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\t//\n\n\t\t\tparameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',\n\t\t\tparameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',\n\t\t\tparameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',\n\t\t\tparameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',\n\t\t\tparameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',\n\t\t\tparameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',\n\t\t\tparameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',\n\t\t\tparameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',\n\n\t\t\tparameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',\n\t\t\tparameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',\n\n\t\t\tparameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',\n\n\t\t\tparameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',\n\t\t\tparameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',\n\t\t\tparameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',\n\n\t\t\tparameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',\n\t\t\tparameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',\n\n\t\t\tparameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',\n\t\t\tparameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',\n\n\t\t\tparameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',\n\t\t\tparameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',\n\t\t\tparameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',\n\n\t\t\tparameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',\n\t\t\tparameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',\n\n\t\t\t//\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_UV1',\n\n\t\t\t'\tattribute vec2 uv1;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV2',\n\n\t\t\t'\tattribute vec2 uv2;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV3',\n\n\t\t\t'\tattribute vec2 uv3;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),\n\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tif ( typeof renderer.debug.onShaderError === 'function' ) {\n\n\t\t\t\trenderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );\n\n\t\t\t} else {\n\n\t\t\t\t// default error reporting\n\n\t\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error(\n\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\\n\\n' +\n\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\t\tfragmentErrors\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.type = parameters.shaderType;\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\t\tlet set = cache.get( material );\n\n\t\tif ( set === undefined ) {\n\n\t\t\tset = new Set();\n\t\t\tcache.set( material, set );\n\n\t\t}\n\n\t\treturn set;\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\t\tlet stage = cache.get( code );\n\n\t\tif ( stage === undefined ) {\n\n\t\t\tstage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn stage;\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst programs = [];\n\n\tconst IS_WEBGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getChannel( value ) {\n\n\t\tif ( value === 0 ) return 'uv';\n\n\t\treturn `uv${ value }`;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst IS_INSTANCEDMESH = object.isInstancedMesh === true;\n\n\t\tconst HAS_MAP = !! material.map;\n\t\tconst HAS_MATCAP = !! material.matcap;\n\t\tconst HAS_ENVMAP = !! envMap;\n\t\tconst HAS_AOMAP = !! material.aoMap;\n\t\tconst HAS_LIGHTMAP = !! material.lightMap;\n\t\tconst HAS_BUMPMAP = !! material.bumpMap;\n\t\tconst HAS_NORMALMAP = !! material.normalMap;\n\t\tconst HAS_DISPLACEMENTMAP = !! material.displacementMap;\n\t\tconst HAS_EMISSIVEMAP = !! material.emissiveMap;\n\n\t\tconst HAS_METALNESSMAP = !! material.metalnessMap;\n\t\tconst HAS_ROUGHNESSMAP = !! material.roughnessMap;\n\n\t\tconst HAS_ANISOTROPY = material.anisotropy > 0;\n\t\tconst HAS_CLEARCOAT = material.clearcoat > 0;\n\t\tconst HAS_IRIDESCENCE = material.iridescence > 0;\n\t\tconst HAS_SHEEN = material.sheen > 0;\n\t\tconst HAS_TRANSMISSION = material.transmission > 0;\n\n\t\tconst HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;\n\n\t\tconst HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;\n\t\tconst HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;\n\t\tconst HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;\n\n\t\tconst HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;\n\t\tconst HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;\n\n\t\tconst HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;\n\t\tconst HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;\n\n\t\tconst HAS_SPECULARMAP = !! material.specularMap;\n\t\tconst HAS_SPECULAR_COLORMAP = !! material.specularColorMap;\n\t\tconst HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;\n\n\t\tconst HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;\n\t\tconst HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;\n\n\t\tconst HAS_GRADIENTMAP = !! material.gradientMap;\n\n\t\tconst HAS_ALPHAMAP = !! material.alphaMap;\n\n\t\tconst HAS_ALPHATEST = material.alphaTest > 0;\n\n\t\tconst HAS_EXTENSIONS = !! material.extensions;\n\n\t\tconst HAS_ATTRIBUTE_UV1 = !! geometry.attributes.uv1;\n\t\tconst HAS_ATTRIBUTE_UV2 = !! geometry.attributes.uv2;\n\t\tconst HAS_ATTRIBUTE_UV3 = !! geometry.attributes.uv3;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: IS_WEBGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderType: material.type,\n\t\t\tshaderName: material.name,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: IS_INSTANCEDMESH,\n\t\t\tinstancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,\n\t\t\toutputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),\n\n\t\t\tmap: HAS_MAP,\n\t\t\tmatcap: HAS_MATCAP,\n\t\t\tenvMap: HAS_ENVMAP,\n\t\t\tenvMapMode: HAS_ENVMAP && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\taoMap: HAS_AOMAP,\n\t\t\tlightMap: HAS_LIGHTMAP,\n\t\t\tbumpMap: HAS_BUMPMAP,\n\t\t\tnormalMap: HAS_NORMALMAP,\n\t\t\tdisplacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,\n\t\t\temissiveMap: HAS_EMISSIVEMAP,\n\n\t\t\tnormalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,\n\t\t\tnormalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tmetalnessMap: HAS_METALNESSMAP,\n\t\t\troughnessMap: HAS_ROUGHNESSMAP,\n\n\t\t\tanisotropy: HAS_ANISOTROPY,\n\t\t\tanisotropyMap: HAS_ANISOTROPYMAP,\n\n\t\t\tclearcoat: HAS_CLEARCOAT,\n\t\t\tclearcoatMap: HAS_CLEARCOATMAP,\n\t\t\tclearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,\n\t\t\tclearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,\n\n\t\t\tiridescence: HAS_IRIDESCENCE,\n\t\t\tiridescenceMap: HAS_IRIDESCENCEMAP,\n\t\t\tiridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,\n\n\t\t\tsheen: HAS_SHEEN,\n\t\t\tsheenColorMap: HAS_SHEEN_COLORMAP,\n\t\t\tsheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,\n\n\t\t\tspecularMap: HAS_SPECULARMAP,\n\t\t\tspecularColorMap: HAS_SPECULAR_COLORMAP,\n\t\t\tspecularIntensityMap: HAS_SPECULAR_INTENSITYMAP,\n\n\t\t\ttransmission: HAS_TRANSMISSION,\n\t\t\ttransmissionMap: HAS_TRANSMISSIONMAP,\n\t\t\tthicknessMap: HAS_THICKNESSMAP,\n\n\t\t\tgradientMap: HAS_GRADIENTMAP,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\n\n\t\t\talphaMap: HAS_ALPHAMAP,\n\t\t\talphaTest: HAS_ALPHATEST,\n\n\t\t\tcombine: material.combine,\n\n\t\t\t//\n\n\t\t\tmapUv: HAS_MAP && getChannel( material.map.channel ),\n\t\t\taoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),\n\t\t\tlightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),\n\t\t\tbumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),\n\t\t\tnormalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),\n\t\t\tdisplacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),\n\t\t\temissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),\n\n\t\t\tmetalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),\n\t\t\troughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),\n\n\t\t\tanisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),\n\n\t\t\tclearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),\n\t\t\tclearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),\n\t\t\tclearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),\n\n\t\t\tiridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),\n\t\t\tiridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),\n\n\t\t\tsheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),\n\t\t\tsheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),\n\n\t\t\tspecularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),\n\t\t\tspecularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),\n\t\t\tspecularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),\n\n\t\t\ttransmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),\n\t\t\tthicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),\n\n\t\t\talphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),\n\n\t\t\t//\n\n\t\t\tvertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUv1s: HAS_ATTRIBUTE_UV1,\n\t\t\tvertexUv2s: HAS_ATTRIBUTE_UV2,\n\t\t\tvertexUv3s: HAS_ATTRIBUTE_UV3,\n\n\t\t\tpointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog === true,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading === true,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation === true,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tuseLegacyLights: renderer.useLegacyLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tuseDepthPacking: material.depthPacking >= 0,\n\t\t\tdepthPacking: material.depthPacking || 0,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,\n\t\t\textensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,\n\t\t\textensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,\n\t\t\textensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,\n\n\t\t\trendererExtensionFragDepth: IS_WEBGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputColorSpace );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputColorSpace );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.mapUv );\n\t\tarray.push( parameters.alphaMapUv );\n\t\tarray.push( parameters.lightMapUv );\n\t\tarray.push( parameters.aoMapUv );\n\t\tarray.push( parameters.bumpMapUv );\n\t\tarray.push( parameters.normalMapUv );\n\t\tarray.push( parameters.displacementMapUv );\n\t\tarray.push( parameters.emissiveMapUv );\n\t\tarray.push( parameters.metalnessMapUv );\n\t\tarray.push( parameters.roughnessMapUv );\n\t\tarray.push( parameters.anisotropyMapUv );\n\t\tarray.push( parameters.clearcoatMapUv );\n\t\tarray.push( parameters.clearcoatNormalMapUv );\n\t\tarray.push( parameters.clearcoatRoughnessMapUv );\n\t\tarray.push( parameters.iridescenceMapUv );\n\t\tarray.push( parameters.iridescenceThicknessMapUv );\n\t\tarray.push( parameters.sheenColorMapUv );\n\t\tarray.push( parameters.sheenRoughnessMapUv );\n\t\tarray.push( parameters.specularMapUv );\n\t\tarray.push( parameters.specularColorMapUv );\n\t\tarray.push( parameters.specularIntensityMapUv );\n\t\tarray.push( parameters.transmissionMapUv );\n\t\tarray.push( parameters.thicknessMapUv );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numSpotLightMaps );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\t\tarray.push( parameters.depthPacking );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.isWebGL2 )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.normalMapObjectSpace )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.normalMapTangentSpace )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.iridescence )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.vertexUv1s )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.vertexUv2s )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.vertexUv3s )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.anisotropy )\n\t\t\t_programLayers.enable( 17 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.useLegacyLights )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.useDepthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.pointsUvs )\n\t\t\t_programLayers.enable( 18 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tconst listArray = lists.get( scene );\n\t\tlet list;\n\n\t\tif ( listArray === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= listArray.length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlistArray.push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = listArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t\tnumSpotMaps: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotLightMap: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotLightMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\t\tnumSpotLightShadowsWithMaps: 0\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, useLegacyLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\t\tlet numSpotMaps = 0;\n\t\tlet numSpotShadowsWithMaps = 0;\n\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif ( light.map ) {\n\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\n\t\t\t\t\tnumSpotMaps ++;\n\n\t\t\t\t\t// make sure the lightMatrix is up to date\n\t\t\t\t\t// TODO : do it if required only\n\t\t\t\t\tshadow.updateMatrices( light );\n\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ||\n\t\t\thash.numSpotMaps !== numSpotMaps ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n\t\t\tstate.spotLightMap.length = numSpotMaps;\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\thash.numSpotMaps = numSpotMaps;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( useLegacyLights ) {\n\n\t\tlights.setup( lightsArray, useLegacyLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tconst renderStateArray = renderStates.get( scene );\n\t\tlet renderState;\n\n\t\tif ( renderStateArray === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStateArray.push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\tlet _previousType = this.type;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// check for shadow map type changes\n\n\t\tconst toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );\n\t\tconst fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null || toVSM === true || fromVSM === true ) {\n\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\n\n\t\t\t\tif ( shadow.map !== null ) {\n\n\t\t\t\t\tshadow.map.dispose();\n\n\t\t\t\t}\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\t_previousType = this.type;\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( shadow.mapPass === null ) {\n\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\n\t\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t\t( material.alphaMap && material.alphaTest > 0 ) ||\n\t\t\t\t( material.map && material.alphaTest > 0 ) ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\t\tresult.map = material.map;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tconst materialProperties = _renderer.properties.get( result );\n\t\t\tmaterialProperties.light = light;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tconst uboBindings = new WeakMap();\n\tconst uboProgramMap = new WeakMap();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\n\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count, dimensions ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tif ( isWebGL2 && ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) ) {\n\n\t\t\t\tgl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t} else {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\tif ( isWebGL2 ) {\n\n\t\temptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );\n\t\temptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );\n\n\t}\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n\t\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === gl.FRAMEBUFFER ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\t\tdrawBuffers[ 0 ] = gl.COLOR_ATTACHMENT0;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t} else {\n\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\n\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = gl.MIN;\n\t\tequationToGL[ MaxEquation ] = gl.MAX;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t[ OneFactor ]: gl.ONE,\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( gl.BLEND );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = false;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\tfunction updateUBOMapping( uniformsGroup, program ) {\n\n\t\tlet mapping = uboProgramMap.get( program );\n\n\t\tif ( mapping === undefined ) {\n\n\t\t\tmapping = new WeakMap();\n\n\t\t\tuboProgramMap.set( program, mapping );\n\n\t\t}\n\n\t\tlet blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( blockIndex === undefined ) {\n\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\n\n\t\t\tmapping.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\n\n\t\tconst mapping = uboProgramMap.get( program );\n\t\tconst blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( uboBindings.get( program ) !== blockIndex ) {\n\n\t\t\t// bind shader specific block index to global block point\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\n\n\t\t\tuboBindings.set( program, blockIndex );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( gl.BLEND );\n\t\tgl.disable( gl.CULL_FACE );\n\t\tgl.disable( gl.DEPTH_TEST );\n\t\tgl.disable( gl.POLYGON_OFFSET_FILL );\n\t\tgl.disable( gl.SCISSOR_TEST );\n\t\tgl.disable( gl.STENCIL_TEST );\n\t\tgl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\tgl.blendFunc( gl.ONE, gl.ZERO );\n\t\tgl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( gl.LESS );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );\n\t\tgl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( gl.BACK );\n\t\tgl.frontFace( gl.CCW );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( gl.TEXTURE0 );\n\n\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\n\t\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\tcompressedTexImage3D: compressedTexImage3D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tupdateUBOMapping: updateUBOMapping,\n\t\tuniformBlockBinding: uniformBlockBinding,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\t\tcompressedTexSubImage3D: compressedTexSubImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.colorSpace );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tconst compareToGL = {\n\t\t[ NeverCompare ]: _gl.NEVER,\n\t\t[ AlwaysCompare ]: _gl.ALWAYS,\n\t\t[ LessCompare ]: _gl.LESS,\n\t\t[ LessEqualCompare ]: _gl.LEQUAL,\n\t\t[ EqualCompare ]: _gl.EQUAL,\n\t\t[ GreaterEqualCompare ]: _gl.GEQUAL,\n\t\t[ GreaterCompare ]: _gl.GREATER,\n\t\t[ NotEqualCompare ]: _gl.NOTEQUAL\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedIntType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = isMultipleRenderTargets ? texture : [ texture ];\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\tconst invalidationArray = [];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\n\t\t\t// If MRT we need to remove FBO attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tinvalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst colorSpace = texture.colorSpace;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( colorSpace === SRGBColorSpace ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p, colorSpace = NoColorSpace ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return gl.HALF_FLOAT;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL 1 sRGB fallback\n\n\t\tif ( p === _SRGBAFormat ) {\n\n\t\t\textension = extensions.get( 'EXT_sRGB' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.SRGB_ALPHA_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( colorSpace === SRGBColorSpace ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isArrayCamera = true;\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private method\n\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isDepthTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\t// Set default foveation to maximum.\n\t\tlet foveation = 1.0;\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\t//\n\n\t\tlet userCamera = null;\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraXR = new ArrayCamera();\n\t\tcameraXR.layers.enable( 1 );\n\t\tcameraXR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true; // @deprecated, r153\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getCamera = function () {}; // @deprecated, r153\n\n\t\tthis.setUserCamera = function ( value ) {\n\n\t\t\tuserCamera = value;\n\n\t\t};\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: true,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tconst renderTargetProperties = renderer.properties.get( newRenderTarget );\n\t\t\t\t\trenderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\tthis.setFoveation( foveation );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getEnvironmentBlendMode = function () {\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\treturn session.environmentBlendMode;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.connect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCameraXR = function ( camera ) {\n\n\t\t\tif ( session === null ) return camera;\n\n\t\t\tif ( userCamera ) {\n\n\t\t\t\tcamera = userCamera;\n\n\t\t\t}\n\n\t\t\tcameraXR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraXR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\t\tdepthFar: cameraXR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraXR.near;\n\t\t\t\t_currentDepthFar = cameraXR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraXR.cameras;\n\n\t\t\tupdateCamera( cameraXR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\t// update user camera and its children\n\n\t\t\tif ( userCamera ) {\n\n\t\t\t\tupdateUserCamera( cameraXR, parent );\n\n\t\t\t}\n\n\t\t\treturn cameraXR;\n\n\t\t};\n\n\t\tfunction updateUserCamera( cameraXR, parent ) {\n\n\t\t\tconst camera = userCamera;\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\t\t\tcamera.matrix.invert();\n\t\t\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t\t\t}\n\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.updateMatrixWorld( true );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\t\t\tcamera.zoom = 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn foveation;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( value ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tfoveation = value;\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\t\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\t\t\tcameraXR.cameras.length = 0;\n\t\t\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( frame.detectedPlanes ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshTransformUniform( map, uniform ) {\n\n\t\tif ( map.matrixAutoUpdate === true ) {\n\n\t\t\tmap.updateMatrix();\n\n\t\t}\n\n\t\tuniform.value.copy( map.matrix );\n\n\t}\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\n\t\t\trefreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );\n\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\trefreshTransformUniform( material.normalMap, uniforms.normalMapTransform );\n\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\n\t\t\trefreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );\n\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\trefreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\trefreshTransformUniform( material.specularMap, uniforms.specularMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer.useLegacyLights === true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t\trefreshTransformUniform( material.lightMap, uniforms.lightMapTransform );\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\trefreshTransformUniform( material.aoMap, uniforms.aoMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.uvTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\trefreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );\n\n\t\t}\n\n\t\tuniforms.roughness.value = material.roughness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\trefreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t\trefreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tif ( material.anisotropy > 0 ) {\n\n\t\t\tuniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n\t\t\tif ( material.anisotropyMap ) {\n\n\t\t\t\tuniforms.anisotropyMap.value = material.anisotropyMap;\n\n\t\t\t\trefreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t\trefreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t\trefreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tconst light = properties.get( material ).light;\n\n\t\tuniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );\n\t\tuniforms.nearDistance.value = light.shadow.camera.near;\n\t\tuniforms.farDistance.value = light.shadow.camera.far;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction WebGLUniformsGroups( gl, info, capabilities, state ) {\n\n\tlet buffers = {};\n\tlet updateList = {};\n\tlet allocatedBindingPoints = [];\n\n\tconst maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ) : 0; // binding points are global whereas block indices are per shader program\n\n\tfunction bind( uniformsGroup, program ) {\n\n\t\tconst webglProgram = program.program;\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\n\n\t}\n\n\tfunction update( uniformsGroup, program ) {\n\n\t\tlet buffer = buffers[ uniformsGroup.id ];\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tprepareUniformsGroup( uniformsGroup );\n\n\t\t\tbuffer = createBuffer( uniformsGroup );\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\n\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\t}\n\n\t\t// ensure to update the binding points/block indices mapping for this program\n\n\t\tconst webglProgram = program.program;\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\n\n\t\t// update UBO once per frame\n\n\t\tconst frame = info.render.frame;\n\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\n\n\t\t\tupdateBufferData( uniformsGroup );\n\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( uniformsGroup ) {\n\n\t\t// the setup of an UBO is independent of a particular shader program but global\n\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\n\n\t\tconst buffer = gl.createBuffer();\n\t\tconst size = uniformsGroup.__size;\n\t\tconst usage = uniformsGroup.usage;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\t\tgl.bufferData( gl.UNIFORM_BUFFER, size, usage );\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );\n\n\t\treturn buffer;\n\n\t}\n\n\tfunction allocateBindingPointIndex() {\n\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\n\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === - 1 ) {\n\n\t\t\t\tallocatedBindingPoints.push( i );\n\t\t\t\treturn i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\n\n\t\treturn 0;\n\n\t}\n\n\tfunction updateBufferData( uniformsGroup ) {\n\n\t\tconst buffer = buffers[ uniformsGroup.id ];\n\t\tconst uniforms = uniformsGroup.uniforms;\n\t\tconst cache = uniformsGroup.__cache;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\t// partly update the buffer if necessary\n\n\t\t\tif ( hasUniformChanged( uniform, i, cache ) === true ) {\n\n\t\t\t\tconst offset = uniform.__offset;\n\n\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\t\tlet arrayOffset = 0;\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value;\n\t\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );\n\n\t\t\t\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t\t\t\t// manually converting 3x3 to 3x4\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 1 ] = value.elements[ 1 ];\n\t\t\t\t\t\tuniform.__data[ 2 ] = value.elements[ 2 ];\n\t\t\t\t\t\tuniform.__data[ 3 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 4 ] = value.elements[ 3 ];\n\t\t\t\t\t\tuniform.__data[ 5 ] = value.elements[ 4 ];\n\t\t\t\t\t\tuniform.__data[ 6 ] = value.elements[ 5 ];\n\t\t\t\t\t\tuniform.__data[ 7 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 8 ] = value.elements[ 6 ];\n\t\t\t\t\t\tuniform.__data[ 9 ] = value.elements[ 7 ];\n\t\t\t\t\t\tuniform.__data[ 10 ] = value.elements[ 8 ];\n\t\t\t\t\t\tuniform.__data[ 11 ] = value.elements[ 0 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalue.toArray( uniform.__data, arrayOffset );\n\n\t\t\t\t\t\tarrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\n\t}\n\n\tfunction hasUniformChanged( uniform, index, cache ) {\n\n\t\tconst value = uniform.value;\n\n\t\tif ( cache[ index ] === undefined ) {\n\n\t\t\t// cache entry does not exist so far\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tcache[ index ] = value;\n\n\t\t\t} else {\n\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tconst tempValues = [];\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\ttempValues.push( values[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tcache[ index ] = tempValues;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// compare current value with cached entry\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tif ( cache[ index ] !== value ) {\n\n\t\t\t\t\tcache[ index ] = value;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst cachedObjects = Array.isArray( cache[ index ] ) ? cache[ index ] : [ cache[ index ] ];\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tfor ( let i = 0; i < cachedObjects.length; i ++ ) {\n\n\t\t\t\t\tconst cachedObject = cachedObjects[ i ];\n\n\t\t\t\t\tif ( cachedObject.equals( values[ i ] ) === false ) {\n\n\t\t\t\t\t\tcachedObject.copy( values[ i ] );\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction prepareUniformsGroup( uniformsGroup ) {\n\n\t\t// determine total buffer size according to the STD140 layout\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\n\n\t\tconst uniforms = uniformsGroup.uniforms;\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\t\tconst chunkSize = 16; // size of a chunk in bytes\n\t\tlet chunkOffset = 0; // offset within a single chunk in bytes\n\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\tconst infos = {\n\t\t\t\tboundary: 0, // bytes\n\t\t\t\tstorage: 0 // bytes\n\t\t\t};\n\n\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\tfor ( let j = 0, jl = values.length; j < jl; j ++ ) {\n\n\t\t\t\tconst value = values[ j ];\n\n\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\tinfos.boundary += info.boundary;\n\t\t\t\tinfos.storage += info.storage;\n\n\t\t\t}\n\n\t\t\t// the following two properties will be used for partial buffer updates\n\n\t\t\tuniform.__data = new Float32Array( infos.storage / Float32Array.BYTES_PER_ELEMENT );\n\t\t\tuniform.__offset = offset;\n\n\t\t\t//\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\tchunkOffset = offset % chunkSize;\n\n\t\t\t\tconst remainingSizeInChunk = chunkSize - chunkOffset;\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - infos.boundary ) < 0 ) {\n\n\t\t\t\t\t// add padding and adjust offset\n\n\t\t\t\t\toffset += ( chunkSize - chunkOffset );\n\t\t\t\t\tuniform.__offset = offset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset += infos.storage;\n\n\t\t}\n\n\t\t// ensure correct final padding\n\n\t\tchunkOffset = offset % chunkSize;\n\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\n\n\t\t//\n\n\t\tuniformsGroup.__size = offset;\n\t\tuniformsGroup.__cache = {};\n\n\t\treturn this;\n\n\t}\n\n\tfunction getUniformSize( value ) {\n\n\t\tconst info = {\n\t\t\tboundary: 0, // bytes\n\t\t\tstorage: 0 // bytes\n\t\t};\n\n\t\t// determine sizes according to STD140\n\n\t\tif ( typeof value === 'number' ) {\n\n\t\t\t// float/int\n\n\t\t\tinfo.boundary = 4;\n\t\t\tinfo.storage = 4;\n\n\t\t} else if ( value.isVector2 ) {\n\n\t\t\t// vec2\n\n\t\t\tinfo.boundary = 8;\n\t\t\tinfo.storage = 8;\n\n\t\t} else if ( value.isVector3 || value.isColor ) {\n\n\t\t\t// vec3\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n\n\t\t} else if ( value.isVector4 ) {\n\n\t\t\t// vec4\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 16;\n\n\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n\t\t\tinfo.boundary = 48;\n\t\t\tinfo.storage = 48;\n\n\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t// mat4\n\n\t\t\tinfo.boundary = 64;\n\t\t\tinfo.storage = 64;\n\n\t\t} else if ( value.isTexture ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\n\n\t\t}\n\n\t\treturn info;\n\n\t}\n\n\tfunction onUniformsGroupsDispose( event ) {\n\n\t\tconst uniformsGroup = event.target;\n\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\n\t\tallocatedBindingPoints.splice( index, 1 );\n\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\n\n\t\tdelete buffers[ uniformsGroup.id ];\n\t\tdelete updateList[ uniformsGroup.id ];\n\n\t}\n\n\tfunction dispose() {\n\n\t\tfor ( const id in buffers ) {\n\n\t\t\tgl.deleteBuffer( buffers[ id ] );\n\n\t\t}\n\n\t\tallocatedBindingPoints = [];\n\t\tbuffers = {};\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tbind: bind,\n\t\tupdate: update,\n\n\t\tdispose: dispose\n\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nclass WebGLRenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tconst {\n\t\t\tcanvas = createCanvasElement(),\n\t\t\tcontext = null,\n\t\t\tdepth = true,\n\t\t\tstencil = true,\n\t\t\talpha = false,\n\t\t\tantialias = false,\n\t\t\tpremultipliedAlpha = true,\n\t\t\tpreserveDrawingBuffer = false,\n\t\t\tpowerPreference = 'default',\n\t\t\tfailIfMajorPerformanceCaveat = false,\n\t\t} = parameters;\n\n\t\tthis.isWebGLRenderer = true;\n\n\t\tlet _alpha;\n\n\t\tif ( context !== null ) {\n\n\t\t\t_alpha = context.getContextAttributes().alpha;\n\n\t\t} else {\n\n\t\t\t_alpha = alpha;\n\n\t\t}\n\n\t\tconst uintClearColor = new Uint32Array( 4 );\n\t\tconst intClearColor = new Int32Array( 4 );\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null;\n\n\t\t// render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true,\n\t\t\t/**\n\t\t\t * Callback for custom error reporting.\n\t\t\t * @type {?Function}\n\t\t\t */\n\t\t\tonShaderError: null\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\t// physical lights\n\n\t\tthis.useLegacyLights = true;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\t\tlet _currentMaterialId = - 1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\t\tconst _currentScissor = new Vector4();\n\t\tlet _currentScissorTest = null;\n\n\t\tconst _currentClearColor = new Color( 0x000000 );\n\t\tlet _currentClearAlpha = 0;\n\n\t\t//\n\n\t\tlet _width = canvas.width;\n\t\tlet _height = canvas.height;\n\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\t\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\t\tlet _scissorTest = false;\n\n\t\t// frustum\n\n\t\tconst _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false;\n\n\t\t// transmission\n\n\t\tlet _transmissionRenderTarget = null;\n\n\t\t// camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector2 = new Vector2();\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tlet _gl = context;\n\n\t\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\t\tconst contextName = contextNames[ i ];\n\t\t\t\tconst context = canvas.getContext( contextName, contextAttributes );\n\t\t\t\tif ( context !== null ) return context;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: true,\n\t\t\t\tdepth,\n\t\t\t\tstencil,\n\t\t\t\tantialias,\n\t\t\t\tpremultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer,\n\t\t\t\tpowerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat,\n\t\t\t};\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t\tcanvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\t\tcontextNames.shift();\n\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( _gl instanceof WebGLRenderingContext ) { // @deprecated, r153\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.' );\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tlet utils, bindingStates, uniformsGroups;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\textensions.init( capabilities );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\t\tclipping = new WebGLClipping( properties );\n\t\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\t\tbackground = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );\n\t\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\t\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tconst xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle = true ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\tcanvas.width = Math.floor( width * _pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle === true ) {\n\n\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\tcanvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\tcanvas.width = Math.floor( width * pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function ( target ) {\n\n\t\t\treturn target.copy( background.getClearColor() );\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\t\tlet bits = 0;\n\n\t\t\tif ( color ) {\n\n\t\t\t\t// check if we're trying to clear an integer target\n\t\t\t\tlet isIntegerFormat = false;\n\t\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t\tconst targetFormat = _currentRenderTarget.texture.format;\n\t\t\t\t\tisIntegerFormat = targetFormat === RGBAIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RGIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RedIntegerFormat;\n\n\t\t\t\t}\n\n\t\t\t\t// use the appropriate clear functions to clear the target if it's a signed\n\t\t\t\t// or unsigned integer target\n\t\t\t\tif ( isIntegerFormat ) {\n\n\t\t\t\t\tconst targetType = _currentRenderTarget.texture.type;\n\t\t\t\t\tconst isUnsignedType = targetType === UnsignedByteType ||\n\t\t\t\t\t\ttargetType === UnsignedIntType ||\n\t\t\t\t\t\ttargetType === UnsignedShortType ||\n\t\t\t\t\t\ttargetType === UnsignedInt248Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort4444Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort5551Type;\n\n\t\t\t\t\tconst clearColor = background.getClearColor();\n\t\t\t\t\tconst a = background.getClearAlpha();\n\t\t\t\t\tconst r = clearColor.r;\n\t\t\t\t\tconst g = clearColor.g;\n\t\t\t\t\tconst b = clearColor.b;\n\n\t\t\t\t\tconst __webglFramebuffer = properties.get( _currentRenderTarget ).__webglFramebuffer;\n\n\t\t\t\t\tif ( isUnsignedType ) {\n\n\t\t\t\t\t\tuintClearColor[ 0 ] = r;\n\t\t\t\t\t\tuintClearColor[ 1 ] = g;\n\t\t\t\t\t\tuintClearColor[ 2 ] = b;\n\t\t\t\t\t\tuintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferuiv( _gl.COLOR, __webglFramebuffer, uintClearColor );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tintClearColor[ 0 ] = r;\n\t\t\t\t\t\tintClearColor[ 1 ] = g;\n\t\t\t\t\t\tintClearColor[ 2 ] = b;\n\t\t\t\t\t\tintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferiv( _gl.COLOR, __webglFramebuffer, intClearColor );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbits |= _gl.COLOR_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\tcanvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tcubeuvmaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\tuniformsGroups.dispose();\n\t\t\tprogramCache.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t\t_transmissionRenderTarget = null;\n\n\t\t\t}\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\n\t\t\tinitGLContext();\n\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\n\t\t}\n\n\t\tfunction onContextCreationError( event ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tconst material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReferences( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\t\tconst programs = properties.get( material ).programs;\n\n\t\t\tif ( programs !== undefined ) {\n\n\t\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tlet index = geometry.index;\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst drawRange = geometry.drawRange;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet drawStart = drawRange.start * rangeFactor;\n\t\t\tlet drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\t\tif ( group !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, group.start * rangeFactor );\n\t\t\t\tdrawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, index.count );\n\n\t\t\t} else if ( position !== undefined && position !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, position.count );\n\n\t\t\t}\n\n\t\t\tconst drawCount = drawEnd - drawStart;\n\n\t\t\tif ( drawCount < 0 || drawCount === Infinity ) return;\n\n\t\t\t//\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tconst maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\n\t\t\t\tconst instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tfunction prepare( material, scene, object ) {\n\n\t\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\t\tmaterial.side = BackSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentRenderState = renderStates.get( scene );\n\t\t\tcurrentRenderState.init();\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( _this.useLegacyLights );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\t\tprepare( material2, scene, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tprepare( material, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\trenderStateStack.pop();\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\n\t\t\tanimation.stop();\n\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\n\t\t\tanimation.start();\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) return;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tcamera = xr.updateCameraXR( camera ); // use XR camera for rendering\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\t\tcurrentRenderState.init();\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\t\tcurrentRenderList.init();\n\n\t\t\trenderListStack.push( currentRenderList );\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t\tthis.info.render.frame ++;\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene );\n\n\t\t\t// render scene\n\n\t\t\tcurrentRenderState.setupLights( _this.useLegacyLights );\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t\t// _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderState = null;\n\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderList = null;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tconst visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector3.copy( object.boundingSphere.center );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector3.copy( geometry.boundingSphere.center );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_vector3\n\t\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\n\n\t\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );\n\n\t\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t}\n\n\t\tfunction renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {\n\n\t\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\ttype: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tsamples: ( isWebGL2 && antialias === true ) ? 4 : 0\n\t\t\t\t} );\n\n\t\t\t\t// debug\n\n\t\t\t\t/*\n\t\t\t\tconst geometry = new PlaneGeometry();\n\t\t\t\tconst material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tscene.add( mesh );\n\t\t\t\t*/\n\n\t\t\t}\n\n\t\t\t_this.getDrawingBufferSize( _vector2 );\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );\n\n\t\t\t} else {\n\n\t\t\t\t_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\n\t\t\t_this.getClearColor( _currentClearColor );\n\t\t\t_currentClearAlpha = _this.getClearAlpha();\n\t\t\tif ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );\n\n\t\t\t_this.clear();\n\n\t\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\t\tconst currentToneMapping = _this.toneMapping;\n\t\t\t_this.toneMapping = NoToneMapping;\n\n\t\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t\tlet renderTargetNeedsUpdate = false;\n\n\t\t\tfor ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderItem = transmissiveObjects[ i ];\n\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = renderItem.material;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\tconst currentSide = material.side;\n\n\t\t\t\t\tmaterial.side = BackSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\tmaterial.side = currentSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\trenderTargetNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetNeedsUpdate === true ) {\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\t\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t\t\t_this.setClearColor( _currentClearColor, _currentClearAlpha );\n\n\t\t\t_this.toneMapping = currentToneMapping;\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction getProgram( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tconst lightsStateVersion = lights.state.version;\n\n\t\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tlet programs = materialProperties.programs;\n\n\t\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\t\tif ( programs === undefined ) {\n\n\t\t\t\t// new material\n\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\n\t\t\t}\n\n\t\t\tlet program = programs.get( programCacheKey );\n\n\t\t\tif ( program !== undefined ) {\n\n\t\t\t\t// early out if program and light state is identical\n\n\t\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\t\treturn program;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n\t\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tmaterialProperties.outputColorSpace = parameters.outputColorSpace;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );\n\t\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\t\tconst vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );\n\t\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\t\tconst morphColors = !! geometry.morphAttributes.color;\n\t\t\tconst toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tconst materialProperties = properties.get( material );\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tconst useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.outputColorSpace !== colorSpace ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif ( needsProgramChange === true ) {\n\n\t\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, program );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n\t\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\n\n\t\t\t\tm_uniforms.envMap.value = envMap;\n\n\t\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog === true ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\t// UBOs\n\n\t\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\n\n\t\t\t\tconst groups = material.uniformsGroups;\n\n\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\t\t\tuniformsGroups.update( group, program );\n\t\t\t\t\t\tuniformsGroups.bind( group, program );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tlet useDefaultFramebuffer = true;\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t\t}\n\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t\t_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t\t}\n\n\t\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\t\tconst levelScale = Math.pow( 2, - level );\n\t\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\t// As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\t\tconst glType = utils.convert( dstTexture.type );\n\t\t\tlet glTarget;\n\n\t\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\n\t\t\t} else if ( dstTexture.isDataArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t\tconst unpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\n\t\t\tconst unpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );\n\t\t\tconst unpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\n\t\t\tconst unpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\n\t\t\tconst unpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );\n\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, sourceBox.min.x );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, sourceBox.min.y );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, sourceBox.min.z );\n\n\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, unpackRowLen );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, unpackSkipPixels );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, unpackSkipRows );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, unpackSkipImages );\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\ttextures.setTextureCube( texture, 0 );\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( texture, 0 );\n\n\t\t\t} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( texture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.resetState = function () {\n\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tget physicallyCorrectLights() { // @deprecated, r150\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\treturn ! this.useLegacyLights;\n\n\t}\n\n\tset physicallyCorrectLights( value ) { // @deprecated, r150\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\tthis.useLegacyLights = ! value;\n\n\t}\n\n\tget outputEncoding() { // @deprecated, r152\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );\n\t\treturn this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n\n\t}\n\n\tset outputEncoding( encoding ) { // @deprecated, r152\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );\n\t\tthis.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t}\n\n}\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.isFogExp2 = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.isFog = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.backgroundBlurriness = 0;\n\t\tthis.backgroundIntensity = 1;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\n\t\treturn data;\n\n\t}\n\n\tget autoUpdate() { // @deprecated, r144\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\treturn this.matrixWorldAutoUpdate;\n\n\t}\n\n\tset autoUpdate( value ) { // @deprecated, r144\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\tthis.matrixWorldAutoUpdate = value;\n\n\t}\n\n}\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.isInterleavedBuffer = true;\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector3 = /*@__PURE__*/ new Vector3();\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\nconst _vertex = /*@__PURE__*/ new Vector3();\n\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\t_vertex.fromBufferAttribute( positionAttribute, i );\n\t\t\tthis.applyBoneTransform( i, _vertex );\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\t_vertex.fromBufferAttribute( positionAttribute, i );\n\t\t\tthis.applyBoneTransform( i, _vertex );\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$3.copy( this.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t// convert ray to local space of skinned mesh\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( this.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$2 );\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tsuper.getVertexPosition( index, target );\n\n\t\tthis.applyBoneTransform( index, target );\n\n\t\treturn target;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tapplyBoneTransform( index, vector ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( vector ).applyMatrix4( this.bindMatrix );\n\n\t\tvector.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\tvector.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn vector.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n\tboneTransform( index, vector ) { // @deprecated, r151\n\n\t\tconsole.warn( 'THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.' );\n\t\treturn this.applyBoneTransform( index, vector );\n\n\t}\n\n\n}\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _box3 = /*@__PURE__*/ new Box3();\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh = /*@__PURE__*/ new Mesh();\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isInstancedMesh = true;\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingBox.union( _box3 );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingSphere.union( _sphere$2 );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\t// test with bounding sphere first\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$2.copy( this.boundingSphere );\n\t\t_sphere$2.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) return;\n\n\t\t// now test each instance\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoTexture = true;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.isFramebufferTexture = true;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCompressedTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nclass CompressedArrayTexture extends CompressedTexture {\n\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\tthis.isCompressedArrayTexture = true;\n\t\tthis.image.depth = depth;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t}\n\n}\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Bezier Curves formulas obtained from\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass CapsuleGeometry extends LatheGeometry {\n\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.4)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 32767 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim | 0 );\n\t\t\ttriangles.push( ear.i / dim | 0 );\n\t\t\ttriangles.push( next.i / dim | 0 );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\tlet p = c.next;\n\twhile ( p !== a ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( x0, y0, minX, minY, invSize ),\n\t\tmaxZ = zOrder( x1, y1, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim | 0 );\n\t\t\ttriangles.push( p.i / dim | 0 );\n\t\t\ttriangles.push( b.i / dim | 0 );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\touterNode = eliminateHole( queue[ i ], outerNode );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\tconst bridge = findHoleBridge( hole, outerNode );\n\tif ( ! bridge ) {\n\n\t\treturn outerNode;\n\n\t}\n\n\tconst bridgeReverse = splitPolygon( bridge, hole );\n\n\t// filter collinear points around the cuts\n\tfilterPoints( bridgeReverse, bridgeReverse.next );\n\treturn filterPoints( bridge, bridge.next );\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode,\n\t\tqx = - Infinity,\n\t\tm;\n\n\tconst hx = hole.x, hy = hole.y;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\tif ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = ( x - minX ) * invSize | 0;\n\ty = ( y - minY ) * invSize | 0;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&\n           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&\n           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = 0;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.anisotropyRotation = 0;\n\t\tthis.anisotropyMap = null;\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// same as Array.prototype.slice, but also works on typed arrays\nfunction arraySlice( array, from, to ) {\n\n\tif ( isTypedArray( array ) ) {\n\n\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t}\n\n\treturn array.slice( from, to );\n\n}\n\n// converts an array to a specific type\nfunction convertArray( array, type, forceClone ) {\n\n\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t! forceClone && array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) &&\n\t\t! ( object instanceof DataView );\n\n}\n\n// returns an array by which times and values can be sorted\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n// uses the array previously returned by 'getKeyframeOrder' to sort data\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n// function for parsing AOS keyframe formats\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\nconst AnimationUtils = {\n\tarraySlice: arraySlice,\n\tconvertArray: convertArray,\n\tisTypedArray: isTypedArray,\n\tgetKeyframeOrder: getKeyframeOrder,\n\tsortedArray: sortedArray,\n\tflattenJSON: flattenJSON,\n\tsubclip: subclip,\n\tmakeClipAdditive: makeClipAdditive\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = arraySlice( times, from, to );\n\t\t\tthis.values = arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --\x3e (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = arraySlice( this.times ),\n\t\t\tvalues = arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = arraySlice( this.times, 0 );\n\t\tconst values = arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' ) || response.headers.get( 'X-File-Size' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\n\n\t\t\t} else if ( texData.encoding !== undefined ) { // @deprecated, r152\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.isSpotLightShadow = true;\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay;\n\n\t\tthis.map = null;\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay;\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isLightProbe = true;\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding; // @deprecated, r152\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\nclass AudioContext {\n\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t}, handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isHemisphereLightProbe = true;\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isAmbientLightProbe = true;\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet id = 0;\n\nclass UniformsGroup extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tObject.defineProperty( this, 'id', { value: id ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.uniforms = [];\n\n\t}\n\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tthis.uniforms.push( uniformsSource[ i ].clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.isGLBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox2 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nclass BoxBufferGeometry extends BoxGeometry { // @deprecated, r144\n\n\tconstructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tconsole.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );\n\t\tsuper( width, height, depth, widthSegments, heightSegments, depthSegments );\n\n\n\t}\n\n}\n\nclass CapsuleBufferGeometry extends CapsuleGeometry { // @deprecated, r144\n\n\tconstructor( radius, length, capSegments, radialSegments ) {\n\n\t\tconsole.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );\n\t\tsuper( radius, length, capSegments, radialSegments );\n\n\t}\n\n}\n\nclass CircleBufferGeometry extends CircleGeometry { // @deprecated, r144\n\n\tconstructor( radius, segments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );\n\t\tsuper( radius, segments, thetaStart, thetaLength );\n\n\t}\n\n}\n\nclass ConeBufferGeometry extends ConeGeometry { // @deprecated, r144\n\n\tconstructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );\n\t\tsuper( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\nclass CylinderBufferGeometry extends CylinderGeometry { // @deprecated, r144\n\n\tconstructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );\n\t\tsuper( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\nclass DodecahedronBufferGeometry extends DodecahedronGeometry { // @deprecated, r144\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\nclass ExtrudeBufferGeometry extends ExtrudeGeometry { // @deprecated, r144\n\n\tconstructor( shapes, options ) {\n\n\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );\n\t\tsuper( shapes, options );\n\n\t}\n\n}\n\nclass IcosahedronBufferGeometry extends IcosahedronGeometry { // @deprecated, r144\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\nclass LatheBufferGeometry extends LatheGeometry { // @deprecated, r144\n\n\tconstructor( points, segments, phiStart, phiLength ) {\n\n\t\tconsole.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );\n\t\tsuper( points, segments, phiStart, phiLength );\n\n\t}\n\n}\n\nclass OctahedronBufferGeometry extends OctahedronGeometry { // @deprecated, r144\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\nclass PlaneBufferGeometry extends PlaneGeometry { // @deprecated, r144\n\n\tconstructor( width, height, widthSegments, heightSegments ) {\n\n\t\tconsole.warn( 'THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.' );\n\t\tsuper( width, height, widthSegments, heightSegments );\n\n\t}\n\n}\n\nclass PolyhedronBufferGeometry extends PolyhedronGeometry { // @deprecated, r144\n\n\tconstructor( vertices, indices, radius, detail ) {\n\n\t\tconsole.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );\n\t\tsuper( vertices, indices, radius, detail );\n\n\t}\n\n}\n\nclass RingBufferGeometry extends RingGeometry { // @deprecated, r144\n\n\tconstructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );\n\t\tsuper( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );\n\n\t}\n\n}\n\nclass ShapeBufferGeometry extends ShapeGeometry { // @deprecated, r144\n\n\tconstructor( shapes, curveSegments ) {\n\n\t\tconsole.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );\n\t\tsuper( shapes, curveSegments );\n\n\t}\n\n}\n\nclass SphereBufferGeometry extends SphereGeometry { // @deprecated, r144\n\n\tconstructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );\n\t\tsuper( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronBufferGeometry extends TetrahedronGeometry { // @deprecated, r144\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\nclass TorusBufferGeometry extends TorusGeometry { // @deprecated, r144\n\n\tconstructor( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tconsole.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );\n\t\tsuper( radius, tube, radialSegments, tubularSegments, arc );\n\n\t}\n\n}\n\nclass TorusKnotBufferGeometry extends TorusKnotGeometry { // @deprecated, r144\n\n\tconstructor( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tconsole.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );\n\t\tsuper( radius, tube, tubularSegments, radialSegments, p, q );\n\n\t}\n\n}\n\nclass TubeBufferGeometry extends TubeGeometry { // @deprecated, r144\n\n\tconstructor( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tconsole.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );\n\t\tsuper( path, tubularSegments, radius, radialSegments, closed );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\n\n\n\n//# sourceURL=webpack://my-app/./node_modules/miew/node_modules/three/build/three.module.js?")}}]);